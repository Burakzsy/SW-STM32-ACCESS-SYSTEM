
Turnstile_Access_Control_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000127d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000206c  08012960  08012960  00022960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080149cc  080149cc  0003018c  2**0
                  CONTENTS
  4 .ARM          00000008  080149cc  080149cc  000249cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080149d4  080149d4  0003018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080149d4  080149d4  000249d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080149d8  080149d8  000249d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  080149dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003018c  2**0
                  CONTENTS
 10 .bss          0000560c  2000018c  2000018c  0003018c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005798  20005798  0003018c  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0003018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e57c  00000000  00000000  000301ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b65  00000000  00000000  0003e736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  000412a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b18  00000000  00000000  00041f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026408  00000000  00000000  00042a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d70  00000000  00000000  00068e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2b5f  00000000  00000000  0007abc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d2  00000000  00000000  0014d71f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c50  00000000  00000000  0014d7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012948 	.word	0x08012948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	08012948 	.word	0x08012948

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8000588:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <GUI_X_Config+0x18>)
 800058e:	f00d fe01 	bl	800e194 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8000592:	4803      	ldr	r0, [pc, #12]	; (80005a0 <GUI_X_Config+0x1c>)
 8000594:	f00c f9b0 	bl	800c8f8 <GUI_SetDefaultFont>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200001a8 	.word	0x200001a8
 80005a0:	08012c64 	.word	0x08012c64

080005a4 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
	...

080005b4 <LcdWriteReg>:
*
* Function description:
*   Sets display register
*/
static void LcdWriteReg(U8 Data)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2102      	movs	r1, #2
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <LcdWriteReg+0x3c>)
 80005c4:	f002 fa72 	bl	8002aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2104      	movs	r1, #4
 80005cc:	4808      	ldr	r0, [pc, #32]	; (80005f0 <LcdWriteReg+0x3c>)
 80005ce:	f002 fa6d 	bl	8002aac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 1);
 80005d2:	1df9      	adds	r1, r7, #7
 80005d4:	2301      	movs	r3, #1
 80005d6:	2201      	movs	r2, #1
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <LcdWriteReg+0x40>)
 80005da:	f002 ff6e 	bl	80034ba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	2102      	movs	r1, #2
 80005e2:	4803      	ldr	r0, [pc, #12]	; (80005f0 <LcdWriteReg+0x3c>)
 80005e4:	f002 fa62 	bl	8002aac <HAL_GPIO_WritePin>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40020800 	.word	0x40020800
 80005f4:	200052ac 	.word	0x200052ac

080005f8 <LcdReadReg>:
*       LcdWriteReg
*
* Function description:
*   Sets display register
*/
static U8 LcdReadReg(void) {
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  // ... TBD by user
	return 0;
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LcdWriteData>:
*
* Function description:
*   Writes a value to a display register
*/
static void LcdWriteData(U8 Data)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2102      	movs	r1, #2
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <LcdWriteData+0x3c>)
 8000618:	f002 fa48 	bl	8002aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2104      	movs	r1, #4
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <LcdWriteData+0x3c>)
 8000622:	f002 fa43 	bl	8002aac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 1);
 8000626:	1df9      	adds	r1, r7, #7
 8000628:	2301      	movs	r3, #1
 800062a:	2201      	movs	r2, #1
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <LcdWriteData+0x40>)
 800062e:	f002 ff44 	bl	80034ba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2102      	movs	r1, #2
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <LcdWriteData+0x3c>)
 8000638:	f002 fa38 	bl	8002aac <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40020800 	.word	0x40020800
 8000648:	200052ac 	.word	0x200052ac

0800064c <LcdWriteDataMultiple>:
*       LcdWriteDataMultiple
*
* Function description:
*   Writes multiple values to a display register.
*/
static void LcdWriteDataMultiple(U8 * pData, int NumItems) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]

	while (NumItems--)
 8000656:	e011      	b.n	800067c <LcdWriteDataMultiple+0x30>
	{
		HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2102      	movs	r1, #2
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <LcdWriteDataMultiple+0x44>)
 800065e:	f002 fa25 	bl	8002aac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2104      	movs	r1, #4
 8000666:	480a      	ldr	r0, [pc, #40]	; (8000690 <LcdWriteDataMultiple+0x44>)
 8000668:	f002 fa20 	bl	8002aac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, pData++, 1, 1);
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	1c4b      	adds	r3, r1, #1
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	2301      	movs	r3, #1
 8000674:	2201      	movs	r2, #1
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <LcdWriteDataMultiple+0x48>)
 8000678:	f002 ff1f 	bl	80034ba <HAL_SPI_Transmit>
	while (NumItems--)
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	1e5a      	subs	r2, r3, #1
 8000680:	603a      	str	r2, [r7, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1e8      	bne.n	8000658 <LcdWriteDataMultiple+0xc>
  }
}
 8000686:	bf00      	nop
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020800 	.word	0x40020800
 8000694:	200052ac 	.word	0x200052ac

08000698 <LcdReadDataMultiple>:
*       LcdReadDataMultiple
*
* Function description:
*   Reads multiple values from a display register.
*/
static void LcdReadDataMultiple(U8 * pData, int NumItems) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  while (NumItems--) {
 80006a2:	bf00      	nop
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	1e5a      	subs	r2, r3, #1
 80006a8:	603a      	str	r2, [r7, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1fa      	bne.n	80006a4 <LcdReadDataMultiple+0xc>
    // ... TBD by user
  }
}
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <LcdInit>:

void LcdInit(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2102      	movs	r1, #2
 80006c6:	489a      	ldr	r0, [pc, #616]	; (8000930 <LcdInit+0x274>)
 80006c8:	f002 f9f0 	bl	8002aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2104      	movs	r1, #4
 80006d0:	4897      	ldr	r0, [pc, #604]	; (8000930 <LcdInit+0x274>)
 80006d2:	f002 f9eb 	bl	8002aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2108      	movs	r1, #8
 80006da:	4895      	ldr	r0, [pc, #596]	; (8000930 <LcdInit+0x274>)
 80006dc:	f002 f9e6 	bl	8002aac <HAL_GPIO_WritePin>
	HAL_Delay(2);//Reset delay
 80006e0:	2002      	movs	r0, #2
 80006e2:	f001 ff21 	bl	8002528 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2102      	movs	r1, #2
 80006ea:	4891      	ldr	r0, [pc, #580]	; (8000930 <LcdInit+0x274>)
 80006ec:	f002 f9de 	bl	8002aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2104      	movs	r1, #4
 80006f4:	488e      	ldr	r0, [pc, #568]	; (8000930 <LcdInit+0x274>)
 80006f6:	f002 f9d9 	bl	8002aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2108      	movs	r1, #8
 80006fe:	488c      	ldr	r0, [pc, #560]	; (8000930 <LcdInit+0x274>)
 8000700:	f002 f9d4 	bl	8002aac <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<3; i++)  {
 8000704:	2300      	movs	r3, #0
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	e005      	b.n	8000716 <LcdInit+0x5a>
		LcdWriteReg(0x00);
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff ff52 	bl	80005b4 <LcdWriteReg>
	for(uint8_t i=0; i<3; i++)  {
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	3301      	adds	r3, #1
 8000714:	71fb      	strb	r3, [r7, #7]
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d9f6      	bls.n	800070a <LcdInit+0x4e>
	} // Three extra 0x00s
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2102      	movs	r1, #2
 8000720:	4883      	ldr	r0, [pc, #524]	; (8000930 <LcdInit+0x274>)
 8000722:	f002 f9c3 	bl	8002aac <HAL_GPIO_WritePin>

//ILI9341 initialization sequence

	LcdWriteReg(0x01);//soft reset
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff ff44 	bl	80005b4 <LcdWriteReg>
	HAL_Delay(1000);
 800072c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000730:	f001 fefa 	bl	8002528 <HAL_Delay>
	//power control A
	LcdWriteReg(0xCB);
 8000734:	20cb      	movs	r0, #203	; 0xcb
 8000736:	f7ff ff3d 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x39);
 800073a:	2039      	movs	r0, #57	; 0x39
 800073c:	f7ff ff64 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x2C);
 8000740:	202c      	movs	r0, #44	; 0x2c
 8000742:	f7ff ff61 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x00);
 8000746:	2000      	movs	r0, #0
 8000748:	f7ff ff5e 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x34);
 800074c:	2034      	movs	r0, #52	; 0x34
 800074e:	f7ff ff5b 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x02);
 8000752:	2002      	movs	r0, #2
 8000754:	f7ff ff58 	bl	8000608 <LcdWriteData>

	//power control B
	LcdWriteReg(0xCF);
 8000758:	20cf      	movs	r0, #207	; 0xcf
 800075a:	f7ff ff2b 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x00);
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff ff52 	bl	8000608 <LcdWriteData>
	LcdWriteData(0xC1);
 8000764:	20c1      	movs	r0, #193	; 0xc1
 8000766:	f7ff ff4f 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x30);
 800076a:	2030      	movs	r0, #48	; 0x30
 800076c:	f7ff ff4c 	bl	8000608 <LcdWriteData>

	//driver timing control A
	LcdWriteReg(0xE8);
 8000770:	20e8      	movs	r0, #232	; 0xe8
 8000772:	f7ff ff1f 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x85);
 8000776:	2085      	movs	r0, #133	; 0x85
 8000778:	f7ff ff46 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x00);
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff ff43 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x78);
 8000782:	2078      	movs	r0, #120	; 0x78
 8000784:	f7ff ff40 	bl	8000608 <LcdWriteData>

	//driver timing control B
	LcdWriteReg(0xEA);
 8000788:	20ea      	movs	r0, #234	; 0xea
 800078a:	f7ff ff13 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x00);
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff ff3a 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x00);
 8000794:	2000      	movs	r0, #0
 8000796:	f7ff ff37 	bl	8000608 <LcdWriteData>

	//power on sequence control
	LcdWriteReg(0xED);
 800079a:	20ed      	movs	r0, #237	; 0xed
 800079c:	f7ff ff0a 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x64);
 80007a0:	2064      	movs	r0, #100	; 0x64
 80007a2:	f7ff ff31 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x03);
 80007a6:	2003      	movs	r0, #3
 80007a8:	f7ff ff2e 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x12);
 80007ac:	2012      	movs	r0, #18
 80007ae:	f7ff ff2b 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x81);
 80007b2:	2081      	movs	r0, #129	; 0x81
 80007b4:	f7ff ff28 	bl	8000608 <LcdWriteData>

	//pump ratio control
	LcdWriteReg(0xF7);
 80007b8:	20f7      	movs	r0, #247	; 0xf7
 80007ba:	f7ff fefb 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x20);
 80007be:	2020      	movs	r0, #32
 80007c0:	f7ff ff22 	bl	8000608 <LcdWriteData>

	//power control,VRH[5:0]
	LcdWriteReg(0xC0);
 80007c4:	20c0      	movs	r0, #192	; 0xc0
 80007c6:	f7ff fef5 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x23);
 80007ca:	2023      	movs	r0, #35	; 0x23
 80007cc:	f7ff ff1c 	bl	8000608 <LcdWriteData>

	//Power control,SAP[2:0];BT[3:0]
	LcdWriteReg(0xC1);
 80007d0:	20c1      	movs	r0, #193	; 0xc1
 80007d2:	f7ff feef 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x10);
 80007d6:	2010      	movs	r0, #16
 80007d8:	f7ff ff16 	bl	8000608 <LcdWriteData>

	//vcm control
	LcdWriteReg(0xC5);
 80007dc:	20c5      	movs	r0, #197	; 0xc5
 80007de:	f7ff fee9 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x3E);
 80007e2:	203e      	movs	r0, #62	; 0x3e
 80007e4:	f7ff ff10 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x28);
 80007e8:	2028      	movs	r0, #40	; 0x28
 80007ea:	f7ff ff0d 	bl	8000608 <LcdWriteData>

	//vcm control 2
	LcdWriteReg(0xC7);
 80007ee:	20c7      	movs	r0, #199	; 0xc7
 80007f0:	f7ff fee0 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x86);
 80007f4:	2086      	movs	r0, #134	; 0x86
 80007f6:	f7ff ff07 	bl	8000608 <LcdWriteData>

	//memory access control
	LcdWriteReg(0x36);
 80007fa:	2036      	movs	r0, #54	; 0x36
 80007fc:	f7ff feda 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x48);
 8000800:	2048      	movs	r0, #72	; 0x48
 8000802:	f7ff ff01 	bl	8000608 <LcdWriteData>

	//pixel format
	LcdWriteReg(0x3A);
 8000806:	203a      	movs	r0, #58	; 0x3a
 8000808:	f7ff fed4 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x55);
 800080c:	2055      	movs	r0, #85	; 0x55
 800080e:	f7ff fefb 	bl	8000608 <LcdWriteData>

	//frameration control,normal mode full colours
	LcdWriteReg(0xB1);
 8000812:	20b1      	movs	r0, #177	; 0xb1
 8000814:	f7ff fece 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x00);
 8000818:	2000      	movs	r0, #0
 800081a:	f7ff fef5 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x18);
 800081e:	2018      	movs	r0, #24
 8000820:	f7ff fef2 	bl	8000608 <LcdWriteData>

	//display function control
	LcdWriteReg(0xB6);
 8000824:	20b6      	movs	r0, #182	; 0xb6
 8000826:	f7ff fec5 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x08);
 800082a:	2008      	movs	r0, #8
 800082c:	f7ff feec 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x82);
 8000830:	2082      	movs	r0, #130	; 0x82
 8000832:	f7ff fee9 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x27);
 8000836:	2027      	movs	r0, #39	; 0x27
 8000838:	f7ff fee6 	bl	8000608 <LcdWriteData>

	//3gamma function disable
	LcdWriteReg(0xF2);
 800083c:	20f2      	movs	r0, #242	; 0xf2
 800083e:	f7ff feb9 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x00);
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff fee0 	bl	8000608 <LcdWriteData>

	//gamma curve selected
	LcdWriteReg(0x26);
 8000848:	2026      	movs	r0, #38	; 0x26
 800084a:	f7ff feb3 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x01);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff feda 	bl	8000608 <LcdWriteData>

	//set positive gamma correction
	LcdWriteReg(0xE0);
 8000854:	20e0      	movs	r0, #224	; 0xe0
 8000856:	f7ff fead 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x0F);
 800085a:	200f      	movs	r0, #15
 800085c:	f7ff fed4 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x31);
 8000860:	2031      	movs	r0, #49	; 0x31
 8000862:	f7ff fed1 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x2B);
 8000866:	202b      	movs	r0, #43	; 0x2b
 8000868:	f7ff fece 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0C);
 800086c:	200c      	movs	r0, #12
 800086e:	f7ff fecb 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0E);
 8000872:	200e      	movs	r0, #14
 8000874:	f7ff fec8 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x08);
 8000878:	2008      	movs	r0, #8
 800087a:	f7ff fec5 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x4E);
 800087e:	204e      	movs	r0, #78	; 0x4e
 8000880:	f7ff fec2 	bl	8000608 <LcdWriteData>
	LcdWriteData(0xF1);
 8000884:	20f1      	movs	r0, #241	; 0xf1
 8000886:	f7ff febf 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x37);
 800088a:	2037      	movs	r0, #55	; 0x37
 800088c:	f7ff febc 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x07);
 8000890:	2007      	movs	r0, #7
 8000892:	f7ff feb9 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x10);
 8000896:	2010      	movs	r0, #16
 8000898:	f7ff feb6 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x03);
 800089c:	2003      	movs	r0, #3
 800089e:	f7ff feb3 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0E);
 80008a2:	200e      	movs	r0, #14
 80008a4:	f7ff feb0 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x09);
 80008a8:	2009      	movs	r0, #9
 80008aa:	f7ff fead 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x00);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff feaa 	bl	8000608 <LcdWriteData>

	//set negative gamma correction
	LcdWriteReg(0xE1);
 80008b4:	20e1      	movs	r0, #225	; 0xe1
 80008b6:	f7ff fe7d 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x00);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff fea4 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0E);
 80008c0:	200e      	movs	r0, #14
 80008c2:	f7ff fea1 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x14);
 80008c6:	2014      	movs	r0, #20
 80008c8:	f7ff fe9e 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x03);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f7ff fe9b 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x11);
 80008d2:	2011      	movs	r0, #17
 80008d4:	f7ff fe98 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x07);
 80008d8:	2007      	movs	r0, #7
 80008da:	f7ff fe95 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x31);
 80008de:	2031      	movs	r0, #49	; 0x31
 80008e0:	f7ff fe92 	bl	8000608 <LcdWriteData>
	LcdWriteData(0xC1);
 80008e4:	20c1      	movs	r0, #193	; 0xc1
 80008e6:	f7ff fe8f 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x48);
 80008ea:	2048      	movs	r0, #72	; 0x48
 80008ec:	f7ff fe8c 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x08);
 80008f0:	2008      	movs	r0, #8
 80008f2:	f7ff fe89 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0F);
 80008f6:	200f      	movs	r0, #15
 80008f8:	f7ff fe86 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0C);
 80008fc:	200c      	movs	r0, #12
 80008fe:	f7ff fe83 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x31);
 8000902:	2031      	movs	r0, #49	; 0x31
 8000904:	f7ff fe80 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x36);
 8000908:	2036      	movs	r0, #54	; 0x36
 800090a:	f7ff fe7d 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0F);
 800090e:	200f      	movs	r0, #15
 8000910:	f7ff fe7a 	bl	8000608 <LcdWriteData>

	//exit sleep
	LcdWriteReg(0x11);
 8000914:	2011      	movs	r0, #17
 8000916:	f7ff fe4d 	bl	80005b4 <LcdWriteReg>
	HAL_Delay(120);
 800091a:	2078      	movs	r0, #120	; 0x78
 800091c:	f001 fe04 	bl	8002528 <HAL_Delay>
	//display on
	LcdWriteReg(0x29);
 8000920:	2029      	movs	r0, #41	; 0x29
 8000922:	f7ff fe47 	bl	80005b4 <LcdWriteReg>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40020800 	.word	0x40020800

08000934 <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b0a0      	sub	sp, #128	; 0x80
 8000938:	af00      	add	r7, sp, #0
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 800093a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
  GUI_PORT_API PortAPI = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2268      	movs	r2, #104	; 0x68
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f010 fdbb 	bl	80114cc <memset>
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_565, 0, 0);//16bit color flexcolor driver
 8000956:	2300      	movs	r3, #0
 8000958:	2200      	movs	r2, #0
 800095a:	4916      	ldr	r1, [pc, #88]	; (80009b4 <LCD_X_Config+0x80>)
 800095c:	4816      	ldr	r0, [pc, #88]	; (80009b8 <LCD_X_Config+0x84>)
 800095e:	f00b ff4d 	bl	800c7fc <GUI_DEVICE_CreateAndLink>
 8000962:	67f8      	str	r0, [r7, #124]	; 0x7c
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8000964:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000968:	21f0      	movs	r1, #240	; 0xf0
 800096a:	2000      	movs	r0, #0
 800096c:	f00a fc1a 	bl	800b1a4 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
 8000970:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000974:	21f0      	movs	r1, #240	; 0xf0
 8000976:	2000      	movs	r0, #0
 8000978:	f00a fbfc 	bl	800b174 <LCD_SetVSizeEx>
  //
  // Orientation
  //
  Config.Orientation = GUI_SWAP_XY | GUI_ROTATION_180;
 800097c:	2307      	movs	r3, #7
 800097e:	673b      	str	r3, [r7, #112]	; 0x70
  GUIDRV_FlexColor_Config(pDevice, &Config);
 8000980:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000984:	4619      	mov	r1, r3
 8000986:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000988:	f00a fb93 	bl	800b0b2 <GUIDRV_FlexColor_Config>
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite8_A0  = LcdWriteReg;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <LCD_X_Config+0x88>)
 800098e:	603b      	str	r3, [r7, #0]
  PortAPI.pfWrite8_A1  = LcdWriteData;
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <LCD_X_Config+0x8c>)
 8000992:	607b      	str	r3, [r7, #4]
  PortAPI.pfWriteM8_A1  = LcdWriteDataMultiple;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <LCD_X_Config+0x90>)
 8000996:	60fb      	str	r3, [r7, #12]
  PortAPI.pfRead8_A1  = LcdReadReg;
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <LCD_X_Config+0x94>)
 800099a:	617b      	str	r3, [r7, #20]
  PortAPI.pfReadM8_A1 = LcdReadDataMultiple;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <LCD_X_Config+0x98>)
 800099e:	61fb      	str	r3, [r7, #28]

  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B8);//ILI9341, 16bit color, 8 bit bus, no cache
 80009a0:	4639      	mov	r1, r7
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <LCD_X_Config+0x9c>)
 80009a4:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <LCD_X_Config+0xa0>)
 80009a6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80009a8:	f00a fba1 	bl	800b0ee <GUIDRV_FlexColor_SetFunc>
}
 80009ac:	bf00      	nop
 80009ae:	3780      	adds	r7, #128	; 0x80
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	08013d38 	.word	0x08013d38
 80009b8:	08013bd8 	.word	0x08013bd8
 80009bc:	080005b5 	.word	0x080005b5
 80009c0:	08000609 	.word	0x08000609
 80009c4:	0800064d 	.word	0x0800064d
 80009c8:	080005f9 	.word	0x080005f9
 80009cc:	08000699 	.word	0x08000699
 80009d0:	0800aa75 	.word	0x0800aa75
 80009d4:	0800a371 	.word	0x0800a371

080009d8 <LCD_X_DisplayDriver>:
* Return Value:
*   < -1 - Error
*     -1 - Command not handled
*      0 - Ok
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d103      	bne.n	80009f2 <LCD_X_DisplayDriver+0x1a>
  case LCD_X_INITCONTROLLER: {
	LcdInit();	//ili9341 init code
 80009ea:	f7ff fe67 	bl	80006bc <LcdInit>
    return 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e003      	b.n	80009fa <LCD_X_DisplayDriver+0x22>
  }
  default:
    r = -1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	617b      	str	r3, [r7, #20]
  }
  return r;
 80009f8:	697b      	ldr	r3, [r7, #20]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  WM_HWIN hItem;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b1d      	cmp	r3, #29
 8000a12:	d10c      	bne.n	8000a2e <_cbDialog+0x2a>
  case WM_INIT_DIALOG:
    //
    // Initialization of 'NAME:'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f640 0103 	movw	r1, #2051	; 0x803
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f006 fe2f 	bl	8007680 <WM_GetDialogItem>
 8000a22:	60f8      	str	r0, [r7, #12]
    TEXT_SetFont(hItem, GUI_FONT_13_1);
 8000a24:	4906      	ldr	r1, [pc, #24]	; (8000a40 <_cbDialog+0x3c>)
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f005 feb3 	bl	8006792 <TEXT_SetFont>
    // USER START (Optionally insert additional code for further widget initialization)
    // USER END
    break;
 8000a2c:	e003      	b.n	8000a36 <_cbDialog+0x32>
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f008 f9d2 	bl	8008dd8 <WM_DefaultProc>
    break;
 8000a34:	bf00      	nop
  }
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	080134bc 	.word	0x080134bc

08000a44 <CreatePersonelGecis>:
/*********************************************************************
*
*       CreatePersonelGecis
*/
WM_HWIN CreatePersonelGecis(void);
WM_HWIN CreatePersonelGecis(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af02      	add	r7, sp, #8
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 8000a4a:	f006 fdc9 	bl	80075e0 <WM_GetDesktopWindow>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2200      	movs	r2, #0
 8000a52:	9201      	str	r2, [sp, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	9200      	str	r2, [sp, #0]
 8000a58:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <CreatePersonelGecis+0x2c>)
 8000a5a:	2109      	movs	r1, #9
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <CreatePersonelGecis+0x30>)
 8000a5e:	f006 fa5f 	bl	8006f20 <GUI_CreateDialogBox>
 8000a62:	6078      	str	r0, [r7, #4]
  return hWin;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	08000a05 	.word	0x08000a05
 8000a74:	08012a50 	.word	0x08012a50

08000a78 <RFID_Card_Check>:

// USER START (Optionally insert additional public code)
char RFID_Card_Check(char *CardID)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	  if(MFRC522_Check((uint8_t*)CardID) == MI_OK)
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f001 f88b 	bl	8001b9c <MFRC522_Check>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d107      	bne.n	8000a9c <RFID_Card_Check+0x24>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a92:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <RFID_Card_Check+0x3c>)
 8000a94:	f002 f80a 	bl	8002aac <HAL_GPIO_WritePin>
		  return MI_OK;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e006      	b.n	8000aaa <RFID_Card_Check+0x32>
	  }

		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <RFID_Card_Check+0x3c>)
 8000aa4:	f002 f802 	bl	8002aac <HAL_GPIO_WritePin>
		  return MI_NOK;
 8000aa8:	2303      	movs	r3, #3
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40020c00 	.word	0x40020c00

08000ab8 <CheckDataBase>:

char CheckDataBase(char *CardID)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	6078      	str	r0, [r7, #4]

	sprintf(strCardID, "%03d%03d%03d",CardID[0],CardID[1],CardID[2]);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	493b      	ldr	r1, [pc, #236]	; (8000bc8 <CheckDataBase+0x110>)
 8000ada:	483c      	ldr	r0, [pc, #240]	; (8000bcc <CheckDataBase+0x114>)
 8000adc:	f010 fcfe 	bl	80114dc <siprintf>

	res = f_open(&file, "test.txt", FA_READ);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	493b      	ldr	r1, [pc, #236]	; (8000bd0 <CheckDataBase+0x118>)
 8000ae4:	483b      	ldr	r0, [pc, #236]	; (8000bd4 <CheckDataBase+0x11c>)
 8000ae6:	f004 ff3d 	bl	8005964 <f_open>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b3a      	ldr	r3, [pc, #232]	; (8000bd8 <CheckDataBase+0x120>)
 8000af0:	701a      	strb	r2, [r3, #0]
	  if(res == FR_OK)
 8000af2:	4b39      	ldr	r3, [pc, #228]	; (8000bd8 <CheckDataBase+0x120>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d159      	bne.n	8000bae <CheckDataBase+0xf6>
	   {
		  res = f_read(&file, buffer, sizeof(buffer), &br);
 8000afa:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <CheckDataBase+0x124>)
 8000afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b00:	4937      	ldr	r1, [pc, #220]	; (8000be0 <CheckDataBase+0x128>)
 8000b02:	4834      	ldr	r0, [pc, #208]	; (8000bd4 <CheckDataBase+0x11c>)
 8000b04:	f005 f8fa 	bl	8005cfc <f_read>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <CheckDataBase+0x120>)
 8000b0e:	701a      	strb	r2, [r3, #0]
		  if(res == FR_OK)
 8000b10:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <CheckDataBase+0x120>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d145      	bne.n	8000ba4 <CheckDataBase+0xec>
		  {
			  ptr = strstr(buffer, strCardID);
 8000b18:	492c      	ldr	r1, [pc, #176]	; (8000bcc <CheckDataBase+0x114>)
 8000b1a:	4831      	ldr	r0, [pc, #196]	; (8000be0 <CheckDataBase+0x128>)
 8000b1c:	f010 fd13 	bl	8011546 <strstr>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a30      	ldr	r2, [pc, #192]	; (8000be4 <CheckDataBase+0x12c>)
 8000b24:	6013      	str	r3, [r2, #0]
			  if(ptr)
 8000b26:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <CheckDataBase+0x12c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d044      	beq.n	8000bb8 <CheckDataBase+0x100>
			  {
				 token = strtok(ptr, "\t");
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <CheckDataBase+0x12c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	492d      	ldr	r1, [pc, #180]	; (8000be8 <CheckDataBase+0x130>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f010 fd1d 	bl	8011574 <strtok>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4a2b      	ldr	r2, [pc, #172]	; (8000bec <CheckDataBase+0x134>)
 8000b3e:	6013      	str	r3, [r2, #0]
				 i = 0;
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <CheckDataBase+0x138>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
				 while(token != NULL)
 8000b46:	e01b      	b.n	8000b80 <CheckDataBase+0xc8>
				 {
					 sprintf(&PersonelInfo[i++][0], token);
 8000b48:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <CheckDataBase+0x138>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	1c53      	adds	r3, r2, #1
 8000b4e:	4928      	ldr	r1, [pc, #160]	; (8000bf0 <CheckDataBase+0x138>)
 8000b50:	600b      	str	r3, [r1, #0]
 8000b52:	4613      	mov	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4a26      	ldr	r2, [pc, #152]	; (8000bf4 <CheckDataBase+0x13c>)
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a23      	ldr	r2, [pc, #140]	; (8000bec <CheckDataBase+0x134>)
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f010 fcb9 	bl	80114dc <siprintf>
					 if(i == 5) break;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <CheckDataBase+0x138>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b05      	cmp	r3, #5
 8000b70:	d00b      	beq.n	8000b8a <CheckDataBase+0xd2>
					 token = strtok(NULL,"\t");
 8000b72:	491d      	ldr	r1, [pc, #116]	; (8000be8 <CheckDataBase+0x130>)
 8000b74:	2000      	movs	r0, #0
 8000b76:	f010 fcfd 	bl	8011574 <strtok>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <CheckDataBase+0x134>)
 8000b7e:	6013      	str	r3, [r2, #0]
				 while(token != NULL)
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <CheckDataBase+0x134>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1df      	bne.n	8000b48 <CheckDataBase+0x90>
 8000b88:	e000      	b.n	8000b8c <CheckDataBase+0xd4>
					 if(i == 5) break;
 8000b8a:	bf00      	nop
				 }
				 ptr = strchr(&PersonelInfo[4][0], '\r');
 8000b8c:	210d      	movs	r1, #13
 8000b8e:	481a      	ldr	r0, [pc, #104]	; (8000bf8 <CheckDataBase+0x140>)
 8000b90:	f010 fcc4 	bl	801151c <strchr>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <CheckDataBase+0x12c>)
 8000b98:	6013      	str	r3, [r2, #0]
				 *ptr = 0;
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <CheckDataBase+0x12c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	e009      	b.n	8000bb8 <CheckDataBase+0x100>
			  }

		  }
		  else
		  {
			  f_close(&file);
 8000ba4:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <CheckDataBase+0x11c>)
 8000ba6:	f005 fa86 	bl	80060b6 <f_close>
			  return 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e008      	b.n	8000bc0 <CheckDataBase+0x108>
		  }
	   }
	  else
	  {
		  f_close(&file);
 8000bae:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <CheckDataBase+0x11c>)
 8000bb0:	f005 fa81 	bl	80060b6 <f_close>
		  return 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e003      	b.n	8000bc0 <CheckDataBase+0x108>
	  }
	  f_close(&file);
 8000bb8:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <CheckDataBase+0x11c>)
 8000bba:	f005 fa7c 	bl	80060b6 <f_close>

	return 1;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	080129a0 	.word	0x080129a0
 8000bcc:	20004e24 	.word	0x20004e24
 8000bd0:	080129b0 	.word	0x080129b0
 8000bd4:	200039e8 	.word	0x200039e8
 8000bd8:	200039e4 	.word	0x200039e4
 8000bdc:	20004a18 	.word	0x20004a18
 8000be0:	20004a20 	.word	0x20004a20
 8000be4:	20004e20 	.word	0x20004e20
 8000be8:	080129bc 	.word	0x080129bc
 8000bec:	20004e34 	.word	0x20004e34
 8000bf0:	20004a1c 	.word	0x20004a1c
 8000bf4:	20004e38 	.word	0x20004e38
 8000bf8:	20004e88 	.word	0x20004e88

08000bfc <_GetData>:

U8 _acBuffer[1024];
static int _GetData(void * p, const U8 ** ppData, unsigned NumBytesReq, U32 Offset) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	603b      	str	r3, [r7, #0]
    unsigned int NumBytesRead;
    f_lseek((FIL *) p, Offset); //Set file pointer to the required position
 8000c0a:	6839      	ldr	r1, [r7, #0]
 8000c0c:	68f8      	ldr	r0, [r7, #12]
 8000c0e:	f005 fa7c 	bl	800610a <f_lseek>
     * FIL*     fp      -	Pointer to the file object
     * void*    buff    -	Pointer to data buffer
     * UINT     btr     -	Number of bytes to read
     * UINT*    br      -	Pointer to number of bytes read
     */
    f_read((FIL *) p, (void *) _acBuffer, NumBytesReq, &NumBytesRead); //Read data into buffer
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	4905      	ldr	r1, [pc, #20]	; (8000c30 <_GetData+0x34>)
 8000c1a:	68f8      	ldr	r0, [r7, #12]
 8000c1c:	f005 f86e 	bl	8005cfc <f_read>
    *ppData = (const U8 *) _acBuffer; //Set pointer to the buffer
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <_GetData+0x34>)
 8000c24:	601a      	str	r2, [r3, #0]
    return NumBytesRead;
 8000c26:	697b      	ldr	r3, [r7, #20]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20004e9c 	.word	0x20004e9c

08000c34 <RFID_Reader>:

void RFID_Reader(){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0

	WM_HWIN hWin;
	TEXT_Handle		hText4,hText5,hText6,hText7;

	  ret = f_mount(&fs, "", 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4932      	ldr	r1, [pc, #200]	; (8000d08 <RFID_Reader+0xd4>)
 8000c3e:	4833      	ldr	r0, [pc, #204]	; (8000d0c <RFID_Reader+0xd8>)
 8000c40:	f004 fe4a 	bl	80058d8 <f_mount>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <RFID_Reader+0xdc>)
 8000c4a:	701a      	strb	r2, [r3, #0]
	  if(ret != FR_OK)
 8000c4c:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <RFID_Reader+0xdc>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d000      	beq.n	8000c56 <RFID_Reader+0x22>
	   {
	 	  while(1);
 8000c54:	e7fe      	b.n	8000c54 <RFID_Reader+0x20>
	   }

	  hWin = CreatePersonelGecis();
 8000c56:	f7ff fef5 	bl	8000a44 <CreatePersonelGecis>
 8000c5a:	6178      	str	r0, [r7, #20]

	  hText4 = WM_GetDialogItem(hWin, ID_TEXT_4);
 8000c5c:	f640 0107 	movw	r1, #2055	; 0x807
 8000c60:	6978      	ldr	r0, [r7, #20]
 8000c62:	f006 fd0d 	bl	8007680 <WM_GetDialogItem>
 8000c66:	6138      	str	r0, [r7, #16]
	  hText5 = WM_GetDialogItem(hWin, ID_TEXT_5);
 8000c68:	f640 0108 	movw	r1, #2056	; 0x808
 8000c6c:	6978      	ldr	r0, [r7, #20]
 8000c6e:	f006 fd07 	bl	8007680 <WM_GetDialogItem>
 8000c72:	60f8      	str	r0, [r7, #12]
	  hText6 = WM_GetDialogItem(hWin, ID_TEXT_6);
 8000c74:	f640 0109 	movw	r1, #2057	; 0x809
 8000c78:	6978      	ldr	r0, [r7, #20]
 8000c7a:	f006 fd01 	bl	8007680 <WM_GetDialogItem>
 8000c7e:	60b8      	str	r0, [r7, #8]
	  hText7 = WM_GetDialogItem(hWin, ID_TEXT_7);
 8000c80:	f640 010a 	movw	r1, #2058	; 0x80a
 8000c84:	6978      	ldr	r0, [r7, #20]
 8000c86:	f006 fcfb 	bl	8007680 <WM_GetDialogItem>
 8000c8a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		   ret = RFID_Card_Check(CardID);
 8000c8c:	4821      	ldr	r0, [pc, #132]	; (8000d14 <RFID_Reader+0xe0>)
 8000c8e:	f7ff fef3 	bl	8000a78 <RFID_Card_Check>
 8000c92:	4603      	mov	r3, r0
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <RFID_Reader+0xdc>)
 8000c98:	701a      	strb	r2, [r3, #0]
		   if(ret == MI_OK)
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <RFID_Reader+0xdc>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d12b      	bne.n	8000cfa <RFID_Reader+0xc6>
		   {
			   if(CheckDataBase(CardID))
 8000ca2:	481c      	ldr	r0, [pc, #112]	; (8000d14 <RFID_Reader+0xe0>)
 8000ca4:	f7ff ff08 	bl	8000ab8 <CheckDataBase>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d025      	beq.n	8000cfa <RFID_Reader+0xc6>
			   {
				   TEXT_SetText(hText4, &PersonelInfo[1][0]);
 8000cae:	491a      	ldr	r1, [pc, #104]	; (8000d18 <RFID_Reader+0xe4>)
 8000cb0:	6938      	ldr	r0, [r7, #16]
 8000cb2:	f005 fd81 	bl	80067b8 <TEXT_SetText>
				   TEXT_SetText(hText5, &PersonelInfo[2][0]);
 8000cb6:	4919      	ldr	r1, [pc, #100]	; (8000d1c <RFID_Reader+0xe8>)
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f005 fd7d 	bl	80067b8 <TEXT_SetText>
				   TEXT_SetText(hText6, &PersonelInfo[3][0]);
 8000cbe:	4918      	ldr	r1, [pc, #96]	; (8000d20 <RFID_Reader+0xec>)
 8000cc0:	68b8      	ldr	r0, [r7, #8]
 8000cc2:	f005 fd79 	bl	80067b8 <TEXT_SetText>
				   TEXT_SetText(hText7, &PersonelInfo[0][0]);
 8000cc6:	4917      	ldr	r1, [pc, #92]	; (8000d24 <RFID_Reader+0xf0>)
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f005 fd75 	bl	80067b8 <TEXT_SetText>

					res = f_open(&file, &PersonelInfo[4][0], FA_OPEN_EXISTING | FA_READ);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4915      	ldr	r1, [pc, #84]	; (8000d28 <RFID_Reader+0xf4>)
 8000cd2:	4816      	ldr	r0, [pc, #88]	; (8000d2c <RFID_Reader+0xf8>)
 8000cd4:	f004 fe46 	bl	8005964 <f_open>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <RFID_Reader+0xfc>)
 8000cde:	701a      	strb	r2, [r3, #0]
					if (res == FR_OK)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <RFID_Reader+0xfc>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d105      	bne.n	8000cf4 <RFID_Reader+0xc0>
						GUI_BMP_DrawEx(_GetData, &file, 14, 60);
 8000ce8:	233c      	movs	r3, #60	; 0x3c
 8000cea:	220e      	movs	r2, #14
 8000cec:	490f      	ldr	r1, [pc, #60]	; (8000d2c <RFID_Reader+0xf8>)
 8000cee:	4811      	ldr	r0, [pc, #68]	; (8000d34 <RFID_Reader+0x100>)
 8000cf0:	f00c fef6 	bl	800dae0 <GUI_BMP_DrawEx>
					f_close(&file);
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <RFID_Reader+0xf8>)
 8000cf6:	f005 f9de 	bl	80060b6 <f_close>
			   }
		   }
		   HAL_Delay(500);
 8000cfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cfe:	f001 fc13 	bl	8002528 <HAL_Delay>
		   GUI_Exec();
 8000d02:	f00b ff75 	bl	800cbf0 <GUI_Exec>
		   ret = RFID_Card_Check(CardID);
 8000d06:	e7c1      	b.n	8000c8c <RFID_Reader+0x58>
 8000d08:	080129c0 	.word	0x080129c0
 8000d0c:	200029b0 	.word	0x200029b0
 8000d10:	200029ad 	.word	0x200029ad
 8000d14:	200029a8 	.word	0x200029a8
 8000d18:	20004e4c 	.word	0x20004e4c
 8000d1c:	20004e60 	.word	0x20004e60
 8000d20:	20004e74 	.word	0x20004e74
 8000d24:	20004e38 	.word	0x20004e38
 8000d28:	20004e88 	.word	0x20004e88
 8000d2c:	200039e8 	.word	0x200039e8
 8000d30:	200039e4 	.word	0x200039e4
 8000d34:	08000bfd 	.word	0x08000bfd

08000d38 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d42:	4804      	ldr	r0, [pc, #16]	; (8000d54 <SELECT+0x1c>)
 8000d44:	f001 feb2 	bl	8002aac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f001 fbed 	bl	8002528 <HAL_Delay>
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40020400 	.word	0x40020400

08000d58 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d62:	4804      	ldr	r0, [pc, #16]	; (8000d74 <DESELECT+0x1c>)
 8000d64:	f001 fea2 	bl	8002aac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f001 fbdd 	bl	8002528 <HAL_Delay>
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40020400 	.word	0x40020400

08000d78 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d82:	bf00      	nop
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <SPI_TxByte+0x30>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d1f8      	bne.n	8000d84 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000d92:	1df9      	adds	r1, r7, #7
 8000d94:	2364      	movs	r3, #100	; 0x64
 8000d96:	2201      	movs	r2, #1
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <SPI_TxByte+0x30>)
 8000d9a:	f002 fb8e 	bl	80034ba <HAL_SPI_Transmit>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20005304 	.word	0x20005304

08000dac <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000db8:	bf00      	nop
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <SPI_TxBuffer+0x30>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d1f8      	bne.n	8000dba <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000dc8:	887a      	ldrh	r2, [r7, #2]
 8000dca:	2364      	movs	r3, #100	; 0x64
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <SPI_TxBuffer+0x30>)
 8000dd0:	f002 fb73 	bl	80034ba <HAL_SPI_Transmit>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20005304 	.word	0x20005304

08000de0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000de6:	23ff      	movs	r3, #255	; 0xff
 8000de8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000dea:	bf00      	nop
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <SPI_RxByte+0x34>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d1f8      	bne.n	8000dec <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000dfa:	1dba      	adds	r2, r7, #6
 8000dfc:	1df9      	adds	r1, r7, #7
 8000dfe:	2364      	movs	r3, #100	; 0x64
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2301      	movs	r3, #1
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <SPI_RxByte+0x34>)
 8000e06:	f002 fc94 	bl	8003732 <HAL_SPI_TransmitReceive>

	return data;
 8000e0a:	79bb      	ldrb	r3, [r7, #6]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20005304 	.word	0x20005304

08000e18 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000e20:	f7ff ffde 	bl	8000de0 <SPI_RxByte>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	701a      	strb	r2, [r3, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <SD_ReadyWait+0x30>)
 8000e3c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e40:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000e42:	f7ff ffcd 	bl	8000de0 <SPI_RxByte>
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2bff      	cmp	r3, #255	; 0xff
 8000e4e:	d003      	beq.n	8000e58 <SD_ReadyWait+0x24>
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SD_ReadyWait+0x30>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1f4      	bne.n	8000e42 <SD_ReadyWait+0xe>

	return res;
 8000e58:	79fb      	ldrb	r3, [r7, #7]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000529e 	.word	0x2000529e

08000e68 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000e6e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e72:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000e74:	f7ff ff70 	bl	8000d58 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	e005      	b.n	8000e8a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000e7e:	20ff      	movs	r0, #255	; 0xff
 8000e80:	f7ff ff7a 	bl	8000d78 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	3301      	adds	r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	2b09      	cmp	r3, #9
 8000e8e:	ddf6      	ble.n	8000e7e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000e90:	f7ff ff52 	bl	8000d38 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000e94:	2340      	movs	r3, #64	; 0x40
 8000e96:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000ea8:	2395      	movs	r3, #149	; 0x95
 8000eaa:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000eac:	463b      	mov	r3, r7
 8000eae:	2106      	movs	r1, #6
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff7b 	bl	8000dac <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000eb6:	e002      	b.n	8000ebe <SD_PowerOn+0x56>
	{
		cnt--;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000ebe:	f7ff ff8f 	bl	8000de0 <SPI_RxByte>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d002      	beq.n	8000ece <SD_PowerOn+0x66>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f4      	bne.n	8000eb8 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000ece:	f7ff ff43 	bl	8000d58 <DESELECT>
	SPI_TxByte(0XFF);
 8000ed2:	20ff      	movs	r0, #255	; 0xff
 8000ed4:	f7ff ff50 	bl	8000d78 <SPI_TxByte>

	PowerFlag = 1;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <SD_PowerOn+0x80>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200052a1 	.word	0x200052a1

08000eec <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <SD_PowerOff+0x14>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	200052a1 	.word	0x200052a1

08000f04 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <SD_CheckPower+0x14>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200052a1 	.word	0x200052a1

08000f1c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <SD_RxDataBlock+0x58>)
 8000f28:	22c8      	movs	r2, #200	; 0xc8
 8000f2a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000f2c:	f7ff ff58 	bl	8000de0 <SPI_RxByte>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2bff      	cmp	r3, #255	; 0xff
 8000f38:	d103      	bne.n	8000f42 <SD_RxDataBlock+0x26>
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <SD_RxDataBlock+0x58>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f4      	bne.n	8000f2c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2bfe      	cmp	r3, #254	; 0xfe
 8000f46:	d001      	beq.n	8000f4c <SD_RxDataBlock+0x30>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e00f      	b.n	8000f6c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff60 	bl	8000e18 <SPI_RxBytePtr>
	} while(len--);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	1e5a      	subs	r2, r3, #1
 8000f5c:	603a      	str	r2, [r7, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f4      	bne.n	8000f4c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000f62:	f7ff ff3d 	bl	8000de0 <SPI_RxByte>
	SPI_RxByte();
 8000f66:	f7ff ff3b 	bl	8000de0 <SPI_RxByte>

	return TRUE;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000529c 	.word	0x2000529c

08000f78 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000f88:	f7ff ff54 	bl	8000e34 <SD_ReadyWait>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2bff      	cmp	r3, #255	; 0xff
 8000f90:	d001      	beq.n	8000f96 <SD_TxDataBlock+0x1e>
 8000f92:	2300      	movs	r3, #0
 8000f94:	e02f      	b.n	8000ff6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff feed 	bl	8000d78 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	2bfd      	cmp	r3, #253	; 0xfd
 8000fa2:	d020      	beq.n	8000fe6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff feff 	bl	8000dac <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000fae:	f7ff ff17 	bl	8000de0 <SPI_RxByte>
		SPI_RxByte();
 8000fb2:	f7ff ff15 	bl	8000de0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000fb6:	e00b      	b.n	8000fd0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000fb8:	f7ff ff12 	bl	8000de0 <SPI_RxByte>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	f003 031f 	and.w	r3, r3, #31
 8000fc6:	2b05      	cmp	r3, #5
 8000fc8:	d006      	beq.n	8000fd8 <SD_TxDataBlock+0x60>
			i++;
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b40      	cmp	r3, #64	; 0x40
 8000fd4:	d9f0      	bls.n	8000fb8 <SD_TxDataBlock+0x40>
 8000fd6:	e000      	b.n	8000fda <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000fd8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000fda:	bf00      	nop
 8000fdc:	f7ff ff00 	bl	8000de0 <SPI_RxByte>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0fa      	beq.n	8000fdc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	f003 031f 	and.w	r3, r3, #31
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	d101      	bne.n	8000ff4 <SD_TxDataBlock+0x7c>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	6039      	str	r1, [r7, #0]
 8001008:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800100a:	f7ff ff13 	bl	8000e34 <SD_ReadyWait>
 800100e:	4603      	mov	r3, r0
 8001010:	2bff      	cmp	r3, #255	; 0xff
 8001012:	d001      	beq.n	8001018 <SD_SendCmd+0x1a>
 8001014:	23ff      	movs	r3, #255	; 0xff
 8001016:	e042      	b.n	800109e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff feac 	bl	8000d78 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	0e1b      	lsrs	r3, r3, #24
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fea6 	bl	8000d78 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	0c1b      	lsrs	r3, r3, #16
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fea0 	bl	8000d78 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	0a1b      	lsrs	r3, r3, #8
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fe9a 	bl	8000d78 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fe95 	bl	8000d78 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b40      	cmp	r3, #64	; 0x40
 8001052:	d102      	bne.n	800105a <SD_SendCmd+0x5c>
 8001054:	2395      	movs	r3, #149	; 0x95
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e007      	b.n	800106a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b48      	cmp	r3, #72	; 0x48
 800105e:	d102      	bne.n	8001066 <SD_SendCmd+0x68>
 8001060:	2387      	movs	r3, #135	; 0x87
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	e001      	b.n	800106a <SD_SendCmd+0x6c>
	else crc = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fe83 	bl	8000d78 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b4c      	cmp	r3, #76	; 0x4c
 8001076:	d101      	bne.n	800107c <SD_SendCmd+0x7e>
 8001078:	f7ff feb2 	bl	8000de0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800107c:	230a      	movs	r3, #10
 800107e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001080:	f7ff feae 	bl	8000de0 <SPI_RxByte>
 8001084:	4603      	mov	r3, r0
 8001086:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001088:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800108c:	2b00      	cmp	r3, #0
 800108e:	da05      	bge.n	800109c <SD_SendCmd+0x9e>
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	3b01      	subs	r3, #1
 8001094:	73bb      	strb	r3, [r7, #14]
 8001096:	7bbb      	ldrb	r3, [r7, #14]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1f1      	bne.n	8001080 <SD_SendCmd+0x82>

	return res;
 800109c:	7b7b      	ldrb	r3, [r7, #13]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SD_disk_initialize+0x14>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e0d1      	b.n	8001260 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80010bc:	4b6a      	ldr	r3, [pc, #424]	; (8001268 <SD_disk_initialize+0x1c0>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <SD_disk_initialize+0x2a>
 80010ca:	4b67      	ldr	r3, [pc, #412]	; (8001268 <SD_disk_initialize+0x1c0>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	e0c6      	b.n	8001260 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80010d2:	f7ff fec9 	bl	8000e68 <SD_PowerOn>

	/* slave select */
	SELECT();
 80010d6:	f7ff fe2f 	bl	8000d38 <SELECT>

	/* check disk type */
	type = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80010de:	2100      	movs	r1, #0
 80010e0:	2040      	movs	r0, #64	; 0x40
 80010e2:	f7ff ff8c 	bl	8000ffe <SD_SendCmd>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	f040 80a1 	bne.w	8001230 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80010ee:	4b5f      	ldr	r3, [pc, #380]	; (800126c <SD_disk_initialize+0x1c4>)
 80010f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010f4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80010f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010fa:	2048      	movs	r0, #72	; 0x48
 80010fc:	f7ff ff7f 	bl	8000ffe <SD_SendCmd>
 8001100:	4603      	mov	r3, r0
 8001102:	2b01      	cmp	r3, #1
 8001104:	d155      	bne.n	80011b2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
 800110a:	e00c      	b.n	8001126 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800110c:	7bfc      	ldrb	r4, [r7, #15]
 800110e:	f7ff fe67 	bl	8000de0 <SPI_RxByte>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	f104 0310 	add.w	r3, r4, #16
 800111a:	443b      	add	r3, r7
 800111c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	3301      	adds	r3, #1
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d9ef      	bls.n	800110c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800112c:	7abb      	ldrb	r3, [r7, #10]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d17e      	bne.n	8001230 <SD_disk_initialize+0x188>
 8001132:	7afb      	ldrb	r3, [r7, #11]
 8001134:	2baa      	cmp	r3, #170	; 0xaa
 8001136:	d17b      	bne.n	8001230 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001138:	2100      	movs	r1, #0
 800113a:	2077      	movs	r0, #119	; 0x77
 800113c:	f7ff ff5f 	bl	8000ffe <SD_SendCmd>
 8001140:	4603      	mov	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d807      	bhi.n	8001156 <SD_disk_initialize+0xae>
 8001146:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800114a:	2069      	movs	r0, #105	; 0x69
 800114c:	f7ff ff57 	bl	8000ffe <SD_SendCmd>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001156:	4b45      	ldr	r3, [pc, #276]	; (800126c <SD_disk_initialize+0x1c4>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1ec      	bne.n	8001138 <SD_disk_initialize+0x90>
 800115e:	e000      	b.n	8001162 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001160:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <SD_disk_initialize+0x1c4>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d062      	beq.n	8001230 <SD_disk_initialize+0x188>
 800116a:	2100      	movs	r1, #0
 800116c:	207a      	movs	r0, #122	; 0x7a
 800116e:	f7ff ff46 	bl	8000ffe <SD_SendCmd>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d15b      	bne.n	8001230 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e00c      	b.n	8001198 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800117e:	7bfc      	ldrb	r4, [r7, #15]
 8001180:	f7ff fe2e 	bl	8000de0 <SPI_RxByte>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	f104 0310 	add.w	r3, r4, #16
 800118c:	443b      	add	r3, r7
 800118e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	3301      	adds	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d9ef      	bls.n	800117e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800119e:	7a3b      	ldrb	r3, [r7, #8]
 80011a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SD_disk_initialize+0x104>
 80011a8:	230c      	movs	r3, #12
 80011aa:	e000      	b.n	80011ae <SD_disk_initialize+0x106>
 80011ac:	2304      	movs	r3, #4
 80011ae:	73bb      	strb	r3, [r7, #14]
 80011b0:	e03e      	b.n	8001230 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80011b2:	2100      	movs	r1, #0
 80011b4:	2077      	movs	r0, #119	; 0x77
 80011b6:	f7ff ff22 	bl	8000ffe <SD_SendCmd>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d808      	bhi.n	80011d2 <SD_disk_initialize+0x12a>
 80011c0:	2100      	movs	r1, #0
 80011c2:	2069      	movs	r0, #105	; 0x69
 80011c4:	f7ff ff1b 	bl	8000ffe <SD_SendCmd>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d801      	bhi.n	80011d2 <SD_disk_initialize+0x12a>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e000      	b.n	80011d4 <SD_disk_initialize+0x12c>
 80011d2:	2301      	movs	r3, #1
 80011d4:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d10e      	bne.n	80011fa <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80011dc:	2100      	movs	r1, #0
 80011de:	2077      	movs	r0, #119	; 0x77
 80011e0:	f7ff ff0d 	bl	8000ffe <SD_SendCmd>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d80e      	bhi.n	8001208 <SD_disk_initialize+0x160>
 80011ea:	2100      	movs	r1, #0
 80011ec:	2069      	movs	r0, #105	; 0x69
 80011ee:	f7ff ff06 	bl	8000ffe <SD_SendCmd>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d107      	bne.n	8001208 <SD_disk_initialize+0x160>
 80011f8:	e00c      	b.n	8001214 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80011fa:	2100      	movs	r1, #0
 80011fc:	2041      	movs	r0, #65	; 0x41
 80011fe:	f7ff fefe 	bl	8000ffe <SD_SendCmd>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d004      	beq.n	8001212 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <SD_disk_initialize+0x1c4>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1e2      	bne.n	80011d6 <SD_disk_initialize+0x12e>
 8001210:	e000      	b.n	8001214 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001212:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <SD_disk_initialize+0x1c4>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d007      	beq.n	800122c <SD_disk_initialize+0x184>
 800121c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001220:	2050      	movs	r0, #80	; 0x50
 8001222:	f7ff feec 	bl	8000ffe <SD_SendCmd>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SD_disk_initialize+0x188>
 800122c:	2300      	movs	r3, #0
 800122e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001230:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <SD_disk_initialize+0x1c8>)
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001236:	f7ff fd8f 	bl	8000d58 <DESELECT>
	SPI_RxByte();
 800123a:	f7ff fdd1 	bl	8000de0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800123e:	7bbb      	ldrb	r3, [r7, #14]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d008      	beq.n	8001256 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <SD_disk_initialize+0x1c0>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SD_disk_initialize+0x1c0>)
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	e001      	b.n	800125a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001256:	f7ff fe49 	bl	8000eec <SD_PowerOff>
	}

	return Stat;
 800125a:	4b03      	ldr	r3, [pc, #12]	; (8001268 <SD_disk_initialize+0x1c0>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b2db      	uxtb	r3, r3
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	20000000 	.word	0x20000000
 800126c:	2000529c 	.word	0x2000529c
 8001270:	200052a0 	.word	0x200052a0

08001274 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SD_disk_status+0x14>
 8001284:	2301      	movs	r3, #1
 8001286:	e002      	b.n	800128e <SD_disk_status+0x1a>
	return Stat;
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <SD_disk_status+0x28>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000000 	.word	0x20000000

080012a0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	4603      	mov	r3, r0
 80012ae:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <SD_disk_read+0x1c>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <SD_disk_read+0x20>
 80012bc:	2304      	movs	r3, #4
 80012be:	e051      	b.n	8001364 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012c0:	4b2a      	ldr	r3, [pc, #168]	; (800136c <SD_disk_read+0xcc>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SD_disk_read+0x32>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e048      	b.n	8001364 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80012d2:	4b27      	ldr	r3, [pc, #156]	; (8001370 <SD_disk_read+0xd0>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <SD_disk_read+0x44>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	025b      	lsls	r3, r3, #9
 80012e2:	607b      	str	r3, [r7, #4]

	SELECT();
 80012e4:	f7ff fd28 	bl	8000d38 <SELECT>

	if (count == 1)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d111      	bne.n	8001312 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	2051      	movs	r0, #81	; 0x51
 80012f2:	f7ff fe84 	bl	8000ffe <SD_SendCmd>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d129      	bne.n	8001350 <SD_disk_read+0xb0>
 80012fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001300:	68b8      	ldr	r0, [r7, #8]
 8001302:	f7ff fe0b 	bl	8000f1c <SD_RxDataBlock>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d021      	beq.n	8001350 <SD_disk_read+0xb0>
 800130c:	2300      	movs	r3, #0
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	e01e      	b.n	8001350 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	2052      	movs	r0, #82	; 0x52
 8001316:	f7ff fe72 	bl	8000ffe <SD_SendCmd>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d117      	bne.n	8001350 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001320:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001324:	68b8      	ldr	r0, [r7, #8]
 8001326:	f7ff fdf9 	bl	8000f1c <SD_RxDataBlock>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00a      	beq.n	8001346 <SD_disk_read+0xa6>
				buff += 512;
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001336:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	3b01      	subs	r3, #1
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1ed      	bne.n	8001320 <SD_disk_read+0x80>
 8001344:	e000      	b.n	8001348 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001346:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001348:	2100      	movs	r1, #0
 800134a:	204c      	movs	r0, #76	; 0x4c
 800134c:	f7ff fe57 	bl	8000ffe <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001350:	f7ff fd02 	bl	8000d58 <DESELECT>
	SPI_RxByte();
 8001354:	f7ff fd44 	bl	8000de0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	bf14      	ite	ne
 800135e:	2301      	movne	r3, #1
 8001360:	2300      	moveq	r3, #0
 8001362:	b2db      	uxtb	r3, r3
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	200052a0 	.word	0x200052a0

08001374 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d102      	bne.n	8001390 <SD_disk_write+0x1c>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <SD_disk_write+0x20>
 8001390:	2304      	movs	r3, #4
 8001392:	e06b      	b.n	800146c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <SD_disk_write+0x100>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SD_disk_write+0x32>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e062      	b.n	800146c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80013a6:	4b33      	ldr	r3, [pc, #204]	; (8001474 <SD_disk_write+0x100>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SD_disk_write+0x44>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e059      	b.n	800146c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80013b8:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <SD_disk_write+0x104>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <SD_disk_write+0x56>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	025b      	lsls	r3, r3, #9
 80013c8:	607b      	str	r3, [r7, #4]

	SELECT();
 80013ca:	f7ff fcb5 	bl	8000d38 <SELECT>

	if (count == 1)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d110      	bne.n	80013f6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	2058      	movs	r0, #88	; 0x58
 80013d8:	f7ff fe11 	bl	8000ffe <SD_SendCmd>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d13a      	bne.n	8001458 <SD_disk_write+0xe4>
 80013e2:	21fe      	movs	r1, #254	; 0xfe
 80013e4:	68b8      	ldr	r0, [r7, #8]
 80013e6:	f7ff fdc7 	bl	8000f78 <SD_TxDataBlock>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d033      	beq.n	8001458 <SD_disk_write+0xe4>
			count = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	e030      	b.n	8001458 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <SD_disk_write+0x104>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001402:	2100      	movs	r1, #0
 8001404:	2077      	movs	r0, #119	; 0x77
 8001406:	f7ff fdfa 	bl	8000ffe <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800140a:	6839      	ldr	r1, [r7, #0]
 800140c:	2057      	movs	r0, #87	; 0x57
 800140e:	f7ff fdf6 	bl	8000ffe <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	2059      	movs	r0, #89	; 0x59
 8001416:	f7ff fdf2 	bl	8000ffe <SD_SendCmd>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d11b      	bne.n	8001458 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001420:	21fc      	movs	r1, #252	; 0xfc
 8001422:	68b8      	ldr	r0, [r7, #8]
 8001424:	f7ff fda8 	bl	8000f78 <SD_TxDataBlock>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00a      	beq.n	8001444 <SD_disk_write+0xd0>
				buff += 512;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001434:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3b01      	subs	r3, #1
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1ee      	bne.n	8001420 <SD_disk_write+0xac>
 8001442:	e000      	b.n	8001446 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001444:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001446:	21fd      	movs	r1, #253	; 0xfd
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff fd95 	bl	8000f78 <SD_TxDataBlock>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <SD_disk_write+0xe4>
			{
				count = 1;
 8001454:	2301      	movs	r3, #1
 8001456:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001458:	f7ff fc7e 	bl	8000d58 <DESELECT>
	SPI_RxByte();
 800145c:	f7ff fcc0 	bl	8000de0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	bf14      	ite	ne
 8001466:	2301      	movne	r3, #1
 8001468:	2300      	moveq	r3, #0
 800146a:	b2db      	uxtb	r3, r3
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000
 8001478:	200052a0 	.word	0x200052a0

0800147c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b08b      	sub	sp, #44	; 0x2c
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	603a      	str	r2, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	460b      	mov	r3, r1
 800148a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SD_disk_ioctl+0x1e>
 8001496:	2304      	movs	r3, #4
 8001498:	e115      	b.n	80016c6 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80014a0:	79bb      	ldrb	r3, [r7, #6]
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	d124      	bne.n	80014f0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d012      	beq.n	80014d4 <SD_disk_ioctl+0x58>
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	dc1a      	bgt.n	80014e8 <SD_disk_ioctl+0x6c>
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <SD_disk_ioctl+0x40>
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d006      	beq.n	80014c8 <SD_disk_ioctl+0x4c>
 80014ba:	e015      	b.n	80014e8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80014bc:	f7ff fd16 	bl	8000eec <SD_PowerOff>
			res = RES_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014c6:	e0fc      	b.n	80016c2 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80014c8:	f7ff fcce 	bl	8000e68 <SD_PowerOn>
			res = RES_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014d2:	e0f6      	b.n	80016c2 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	1c5c      	adds	r4, r3, #1
 80014d8:	f7ff fd14 	bl	8000f04 <SD_CheckPower>
 80014dc:	4603      	mov	r3, r0
 80014de:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014e6:	e0ec      	b.n	80016c2 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80014e8:	2304      	movs	r3, #4
 80014ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014ee:	e0e8      	b.n	80016c2 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014f0:	4b77      	ldr	r3, [pc, #476]	; (80016d0 <SD_disk_ioctl+0x254>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SD_disk_ioctl+0x86>
 80014fe:	2303      	movs	r3, #3
 8001500:	e0e1      	b.n	80016c6 <SD_disk_ioctl+0x24a>

		SELECT();
 8001502:	f7ff fc19 	bl	8000d38 <SELECT>

		switch (ctrl)
 8001506:	79bb      	ldrb	r3, [r7, #6]
 8001508:	2b0d      	cmp	r3, #13
 800150a:	f200 80cb 	bhi.w	80016a4 <SD_disk_ioctl+0x228>
 800150e:	a201      	add	r2, pc, #4	; (adr r2, 8001514 <SD_disk_ioctl+0x98>)
 8001510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001514:	0800160f 	.word	0x0800160f
 8001518:	0800154d 	.word	0x0800154d
 800151c:	080015ff 	.word	0x080015ff
 8001520:	080016a5 	.word	0x080016a5
 8001524:	080016a5 	.word	0x080016a5
 8001528:	080016a5 	.word	0x080016a5
 800152c:	080016a5 	.word	0x080016a5
 8001530:	080016a5 	.word	0x080016a5
 8001534:	080016a5 	.word	0x080016a5
 8001538:	080016a5 	.word	0x080016a5
 800153c:	080016a5 	.word	0x080016a5
 8001540:	08001621 	.word	0x08001621
 8001544:	08001645 	.word	0x08001645
 8001548:	08001669 	.word	0x08001669
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800154c:	2100      	movs	r1, #0
 800154e:	2049      	movs	r0, #73	; 0x49
 8001550:	f7ff fd55 	bl	8000ffe <SD_SendCmd>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	f040 80a8 	bne.w	80016ac <SD_disk_ioctl+0x230>
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	2110      	movs	r1, #16
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fcda 	bl	8000f1c <SD_RxDataBlock>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 809e 	beq.w	80016ac <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001570:	7b3b      	ldrb	r3, [r7, #12]
 8001572:	099b      	lsrs	r3, r3, #6
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d10e      	bne.n	8001598 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800157a:	7d7b      	ldrb	r3, [r7, #21]
 800157c:	b29a      	uxth	r2, r3
 800157e:	7d3b      	ldrb	r3, [r7, #20]
 8001580:	b29b      	uxth	r3, r3
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b29b      	uxth	r3, r3
 8001586:	4413      	add	r3, r2
 8001588:	b29b      	uxth	r3, r3
 800158a:	3301      	adds	r3, #1
 800158c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800158e:	8bfb      	ldrh	r3, [r7, #30]
 8001590:	029a      	lsls	r2, r3, #10
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e02e      	b.n	80015f6 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001598:	7c7b      	ldrb	r3, [r7, #17]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	7dbb      	ldrb	r3, [r7, #22]
 80015a2:	09db      	lsrs	r3, r3, #7
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	7d7b      	ldrb	r3, [r7, #21]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f003 0306 	and.w	r3, r3, #6
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4413      	add	r3, r2
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	3302      	adds	r3, #2
 80015bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80015c0:	7d3b      	ldrb	r3, [r7, #20]
 80015c2:	099b      	lsrs	r3, r3, #6
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	7cfb      	ldrb	r3, [r7, #19]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	4413      	add	r3, r2
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	7cbb      	ldrb	r3, [r7, #18]
 80015d6:	029b      	lsls	r3, r3, #10
 80015d8:	b29b      	uxth	r3, r3
 80015da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80015e8:	8bfa      	ldrh	r2, [r7, #30]
 80015ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015ee:	3b09      	subs	r3, #9
 80015f0:	409a      	lsls	r2, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80015fc:	e056      	b.n	80016ac <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001604:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800160c:	e055      	b.n	80016ba <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800160e:	f7ff fc11 	bl	8000e34 <SD_ReadyWait>
 8001612:	4603      	mov	r3, r0
 8001614:	2bff      	cmp	r3, #255	; 0xff
 8001616:	d14b      	bne.n	80016b0 <SD_disk_ioctl+0x234>
 8001618:	2300      	movs	r3, #0
 800161a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800161e:	e047      	b.n	80016b0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001620:	2100      	movs	r1, #0
 8001622:	2049      	movs	r0, #73	; 0x49
 8001624:	f7ff fceb 	bl	8000ffe <SD_SendCmd>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d142      	bne.n	80016b4 <SD_disk_ioctl+0x238>
 800162e:	2110      	movs	r1, #16
 8001630:	6a38      	ldr	r0, [r7, #32]
 8001632:	f7ff fc73 	bl	8000f1c <SD_RxDataBlock>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d03b      	beq.n	80016b4 <SD_disk_ioctl+0x238>
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001642:	e037      	b.n	80016b4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001644:	2100      	movs	r1, #0
 8001646:	204a      	movs	r0, #74	; 0x4a
 8001648:	f7ff fcd9 	bl	8000ffe <SD_SendCmd>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d132      	bne.n	80016b8 <SD_disk_ioctl+0x23c>
 8001652:	2110      	movs	r1, #16
 8001654:	6a38      	ldr	r0, [r7, #32]
 8001656:	f7ff fc61 	bl	8000f1c <SD_RxDataBlock>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d02b      	beq.n	80016b8 <SD_disk_ioctl+0x23c>
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001666:	e027      	b.n	80016b8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001668:	2100      	movs	r1, #0
 800166a:	207a      	movs	r0, #122	; 0x7a
 800166c:	f7ff fcc7 	bl	8000ffe <SD_SendCmd>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d116      	bne.n	80016a4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001676:	2300      	movs	r3, #0
 8001678:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800167c:	e00b      	b.n	8001696 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800167e:	6a3c      	ldr	r4, [r7, #32]
 8001680:	1c63      	adds	r3, r4, #1
 8001682:	623b      	str	r3, [r7, #32]
 8001684:	f7ff fbac 	bl	8000de0 <SPI_RxByte>
 8001688:	4603      	mov	r3, r0
 800168a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800168c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001690:	3301      	adds	r3, #1
 8001692:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001696:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800169a:	2b03      	cmp	r3, #3
 800169c:	d9ef      	bls.n	800167e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80016a4:	2304      	movs	r3, #4
 80016a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016aa:	e006      	b.n	80016ba <SD_disk_ioctl+0x23e>
			break;
 80016ac:	bf00      	nop
 80016ae:	e004      	b.n	80016ba <SD_disk_ioctl+0x23e>
			break;
 80016b0:	bf00      	nop
 80016b2:	e002      	b.n	80016ba <SD_disk_ioctl+0x23e>
			break;
 80016b4:	bf00      	nop
 80016b6:	e000      	b.n	80016ba <SD_disk_ioctl+0x23e>
			break;
 80016b8:	bf00      	nop
		}

		DESELECT();
 80016ba:	f7ff fb4d 	bl	8000d58 <DESELECT>
		SPI_RxByte();
 80016be:	f7ff fb8f 	bl	8000de0 <SPI_RxByte>
	}

	return res;
 80016c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	372c      	adds	r7, #44	; 0x2c
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd90      	pop	{r4, r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000000 	.word	0x20000000

080016d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d8:	f000 feb4 	bl	8002444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016dc:	f000 f814 	bl	8001708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e0:	f000 f932 	bl	8001948 <MX_GPIO_Init>
  MX_CRC_Init();
 80016e4:	f000 f87a 	bl	80017dc <MX_CRC_Init>
  MX_SPI1_Init();
 80016e8:	f000 f88c 	bl	8001804 <MX_SPI1_Init>
  MX_SPI2_Init();
 80016ec:	f000 f8c0 	bl	8001870 <MX_SPI2_Init>
  MX_SPI3_Init();
 80016f0:	f000 f8f4 	bl	80018dc <MX_SPI3_Init>
  MX_FATFS_Init();
 80016f4:	f002 fa8a 	bl	8003c0c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 80016f8:	f000 fc1b 	bl	8001f32 <MFRC522_Init>
  GUI_Init();
 80016fc:	f00b f96e 	bl	800c9dc <GUI_Init>
  RFID_Reader();
 8001700:	f7ff fa98 	bl	8000c34 <RFID_Reader>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001704:	e7fe      	b.n	8001704 <main+0x30>
	...

08001708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b094      	sub	sp, #80	; 0x50
 800170c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	f107 0320 	add.w	r3, r7, #32
 8001712:	2230      	movs	r2, #48	; 0x30
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f00f fed8 	bl	80114cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <SystemClock_Config+0xcc>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <SystemClock_Config+0xcc>)
 8001736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173a:	6413      	str	r3, [r2, #64]	; 0x40
 800173c:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <SystemClock_Config+0xcc>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <SystemClock_Config+0xd0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <SystemClock_Config+0xd0>)
 8001752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <SystemClock_Config+0xd0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001764:	2301      	movs	r3, #1
 8001766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800176e:	2302      	movs	r3, #2
 8001770:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001772:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001778:	2308      	movs	r3, #8
 800177a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800177c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001780:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001782:	2302      	movs	r3, #2
 8001784:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001786:	2307      	movs	r3, #7
 8001788:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178a:	f107 0320 	add.w	r3, r7, #32
 800178e:	4618      	mov	r0, r3
 8001790:	f001 f9a6 	bl	8002ae0 <HAL_RCC_OscConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800179a:	f000 f96f 	bl	8001a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179e:	230f      	movs	r3, #15
 80017a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a2:	2302      	movs	r3, #2
 80017a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	2105      	movs	r1, #5
 80017bc:	4618      	mov	r0, r3
 80017be:	f001 fc07 	bl	8002fd0 <HAL_RCC_ClockConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017c8:	f000 f958 	bl	8001a7c <Error_Handler>
  }
}
 80017cc:	bf00      	nop
 80017ce:	3750      	adds	r7, #80	; 0x50
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40007000 	.word	0x40007000

080017dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_CRC_Init+0x20>)
 80017e2:	4a07      	ldr	r2, [pc, #28]	; (8001800 <MX_CRC_Init+0x24>)
 80017e4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_CRC_Init+0x20>)
 80017e8:	f000 ffa7 	bl	800273a <HAL_CRC_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017f2:	f000 f943 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200052a4 	.word	0x200052a4
 8001800:	40023000 	.word	0x40023000

08001804 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001808:	4b17      	ldr	r3, [pc, #92]	; (8001868 <MX_SPI1_Init+0x64>)
 800180a:	4a18      	ldr	r2, [pc, #96]	; (800186c <MX_SPI1_Init+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <MX_SPI1_Init+0x64>)
 8001810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <MX_SPI1_Init+0x64>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_SPI1_Init+0x64>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_SPI1_Init+0x64>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_SPI1_Init+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_SPI1_Init+0x64>)
 8001830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001834:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_SPI1_Init+0x64>)
 8001838:	2200      	movs	r2, #0
 800183a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <MX_SPI1_Init+0x64>)
 800183e:	2200      	movs	r2, #0
 8001840:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_SPI1_Init+0x64>)
 8001844:	2200      	movs	r2, #0
 8001846:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <MX_SPI1_Init+0x64>)
 800184a:	2200      	movs	r2, #0
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_SPI1_Init+0x64>)
 8001850:	220a      	movs	r2, #10
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <MX_SPI1_Init+0x64>)
 8001856:	f001 fda7 	bl	80033a8 <HAL_SPI_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001860:	f000 f90c 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200052ac 	.word	0x200052ac
 800186c:	40013000 	.word	0x40013000

08001870 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_SPI2_Init+0x64>)
 8001876:	4a18      	ldr	r2, [pc, #96]	; (80018d8 <MX_SPI2_Init+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <MX_SPI2_Init+0x64>)
 800187c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001880:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <MX_SPI2_Init+0x64>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_SPI2_Init+0x64>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_SPI2_Init+0x64>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_SPI2_Init+0x64>)
 8001896:	2200      	movs	r2, #0
 8001898:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_SPI2_Init+0x64>)
 800189c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_SPI2_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <MX_SPI2_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_SPI2_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <MX_SPI2_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_SPI2_Init+0x64>)
 80018bc:	220a      	movs	r2, #10
 80018be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_SPI2_Init+0x64>)
 80018c2:	f001 fd71 	bl	80033a8 <HAL_SPI_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018cc:	f000 f8d6 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20005304 	.word	0x20005304
 80018d8:	40003800 	.word	0x40003800

080018dc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <MX_SPI3_Init+0x64>)
 80018e2:	4a18      	ldr	r2, [pc, #96]	; (8001944 <MX_SPI3_Init+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <MX_SPI3_Init+0x64>)
 80018e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <MX_SPI3_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <MX_SPI3_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <MX_SPI3_Init+0x64>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <MX_SPI3_Init+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <MX_SPI3_Init+0x64>)
 8001908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800190c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_SPI3_Init+0x64>)
 8001910:	2210      	movs	r2, #16
 8001912:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <MX_SPI3_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_SPI3_Init+0x64>)
 800191c:	2200      	movs	r2, #0
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <MX_SPI3_Init+0x64>)
 8001922:	2200      	movs	r2, #0
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_SPI3_Init+0x64>)
 8001928:	220a      	movs	r2, #10
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800192c:	4804      	ldr	r0, [pc, #16]	; (8001940 <MX_SPI3_Init+0x64>)
 800192e:	f001 fd3b 	bl	80033a8 <HAL_SPI_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001938:	f000 f8a0 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2000535c 	.word	0x2000535c
 8001944:	40003c00 	.word	0x40003c00

08001948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <MX_GPIO_Init+0x124>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a41      	ldr	r2, [pc, #260]	; (8001a6c <MX_GPIO_Init+0x124>)
 8001968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b3f      	ldr	r3, [pc, #252]	; (8001a6c <MX_GPIO_Init+0x124>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <MX_GPIO_Init+0x124>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a3a      	ldr	r2, [pc, #232]	; (8001a6c <MX_GPIO_Init+0x124>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <MX_GPIO_Init+0x124>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <MX_GPIO_Init+0x124>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a33      	ldr	r2, [pc, #204]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a2c      	ldr	r2, [pc, #176]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a25      	ldr	r2, [pc, #148]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	210e      	movs	r1, #14
 80019ee:	4820      	ldr	r0, [pc, #128]	; (8001a70 <MX_GPIO_Init+0x128>)
 80019f0:	f001 f85c 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019fa:	481e      	ldr	r0, [pc, #120]	; (8001a74 <MX_GPIO_Init+0x12c>)
 80019fc:	f001 f856 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001a00:	2200      	movs	r2, #0
 8001a02:	f24f 0101 	movw	r1, #61441	; 0xf001
 8001a06:	481c      	ldr	r0, [pc, #112]	; (8001a78 <MX_GPIO_Init+0x130>)
 8001a08:	f001 f850 	bl	8002aac <HAL_GPIO_WritePin>
                          |GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8001a0c:	230e      	movs	r3, #14
 8001a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	4813      	ldr	r0, [pc, #76]	; (8001a70 <MX_GPIO_Init+0x128>)
 8001a24:	f000 fea6 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <MX_GPIO_Init+0x12c>)
 8001a42:	f000 fe97 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001a46:	f24f 0301 	movw	r3, #61441	; 0xf001
 8001a4a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4806      	ldr	r0, [pc, #24]	; (8001a78 <MX_GPIO_Init+0x130>)
 8001a60:	f000 fe88 	bl	8002774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a64:	bf00      	nop
 8001a66:	3728      	adds	r7, #40	; 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020800 	.word	0x40020800
 8001a74:	40020400 	.word	0x40020400
 8001a78:	40020c00 	.word	0x40020c00

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <Error_Handler+0x8>
	...

08001a88 <SPI1SendByte>:
#include "rc522.h"

extern SPI_HandleTypeDef hspi3;


uint8_t SPI1SendByte(uint8_t data) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8001a96:	f107 0208 	add.w	r2, r7, #8
 8001a9a:	f107 010c 	add.w	r1, r7, #12
 8001a9e:	230a      	movs	r3, #10
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <SPI1SendByte+0x2c>)
 8001aa6:	f001 fe44 	bl	8003732 <HAL_SPI_TransmitReceive>
	return readValue[0];
 8001aaa:	7a3b      	ldrb	r3, [r7, #8]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	2000535c 	.word	0x2000535c

08001ab8 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460a      	mov	r2, r1
 8001ac2:	71fb      	strb	r3, [r7, #7]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2101      	movs	r1, #1
 8001acc:	4809      	ldr	r0, [pc, #36]	; (8001af4 <SPI1_WriteReg+0x3c>)
 8001ace:	f000 ffed 	bl	8002aac <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ffd7 	bl	8001a88 <SPI1SendByte>
	SPI1SendByte(value);
 8001ada:	79bb      	ldrb	r3, [r7, #6]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ffd3 	bl	8001a88 <SPI1SendByte>
	cs_set();
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <SPI1_WriteReg+0x3c>)
 8001ae8:	f000 ffe0 	bl	8002aac <HAL_GPIO_WritePin>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40020c00 	.word	0x40020c00

08001af8 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8001b02:	2200      	movs	r2, #0
 8001b04:	2101      	movs	r1, #1
 8001b06:	480b      	ldr	r0, [pc, #44]	; (8001b34 <SPI1_ReadReg+0x3c>)
 8001b08:	f000 ffd0 	bl	8002aac <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ffba 	bl	8001a88 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8001b14:	2000      	movs	r0, #0
 8001b16:	f7ff ffb7 	bl	8001a88 <SPI1SendByte>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8001b1e:	2201      	movs	r2, #1
 8001b20:	2101      	movs	r1, #1
 8001b22:	4804      	ldr	r0, [pc, #16]	; (8001b34 <SPI1_ReadReg+0x3c>)
 8001b24:	f000 ffc2 	bl	8002aac <HAL_GPIO_WritePin>
	return val;
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40020c00 	.word	0x40020c00

08001b38 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460a      	mov	r2, r1
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	4613      	mov	r3, r2
 8001b46:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001b52:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8001b54:	79ba      	ldrb	r2, [r7, #6]
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ffac 	bl	8001ab8 <SPI1_WriteReg>
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b82:	b25b      	sxtb	r3, r3
 8001b84:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ffb5 	bl	8001af8 <SPI1_ReadReg>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	73fb      	strb	r3, [r7, #15]
	return val;	
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	2026      	movs	r0, #38	; 0x26
 8001ba8:	f000 f849 	bl	8001c3e <MFRC522_Request>
 8001bac:	4603      	mov	r3, r0
 8001bae:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d104      	bne.n	8001bc0 <MFRC522_Check+0x24>
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f935 	bl	8001e26 <MFRC522_Anticoll>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation 
 8001bc0:	f000 f9f8 	bl	8001fb4 <MFRC522_Halt>
	return status;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	460a      	mov	r2, r1
 8001bd8:	71fb      	strb	r3, [r7, #7]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ffc1 	bl	8001b68 <MFRC522_ReadRegister>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	79bb      	ldrb	r3, [r7, #6]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff9f 	bl	8001b38 <MFRC522_WriteRegister>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	460a      	mov	r2, r1
 8001c0c:	71fb      	strb	r3, [r7, #7]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ffa7 	bl	8001b68 <MFRC522_ReadRegister>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	b25a      	sxtb	r2, r3
 8001c1e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	4013      	ands	r3, r2
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff81 	bl	8001b38 <MFRC522_WriteRegister>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af02      	add	r7, sp, #8
 8001c44:	4603      	mov	r3, r0
 8001c46:	6039      	str	r1, [r7, #0]
 8001c48:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8001c4a:	2107      	movs	r1, #7
 8001c4c:	200d      	movs	r0, #13
 8001c4e:	f7ff ff73 	bl	8001b38 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	79fa      	ldrb	r2, [r7, #7]
 8001c56:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2201      	movs	r2, #1
 8001c62:	6839      	ldr	r1, [r7, #0]
 8001c64:	200c      	movs	r0, #12
 8001c66:	f000 f80f 	bl	8001c88 <MFRC522_ToCard>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <MFRC522_Request+0x3c>
 8001c74:	89bb      	ldrh	r3, [r7, #12]
 8001c76:	2b10      	cmp	r3, #16
 8001c78:	d001      	beq.n	8001c7e <MFRC522_Request+0x40>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	73fb      	strb	r3, [r7, #15]
	return status;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	4603      	mov	r3, r0
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	4613      	mov	r3, r2
 8001c98:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b0c      	cmp	r3, #12
 8001caa:	d006      	beq.n	8001cba <MFRC522_ToCard+0x32>
 8001cac:	2b0e      	cmp	r3, #14
 8001cae:	d109      	bne.n	8001cc4 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8001cb0:	2312      	movs	r3, #18
 8001cb2:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8001cb4:	2310      	movs	r3, #16
 8001cb6:	757b      	strb	r3, [r7, #21]
			break;
 8001cb8:	e005      	b.n	8001cc6 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8001cba:	2377      	movs	r3, #119	; 0x77
 8001cbc:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001cbe:	2330      	movs	r3, #48	; 0x30
 8001cc0:	757b      	strb	r3, [r7, #21]
			break;
 8001cc2:	e000      	b.n	8001cc6 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 8001cc4:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001cc6:	7dbb      	ldrb	r3, [r7, #22]
 8001cc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	2002      	movs	r0, #2
 8001cd2:	f7ff ff31 	bl	8001b38 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001cd6:	2180      	movs	r1, #128	; 0x80
 8001cd8:	2004      	movs	r0, #4
 8001cda:	f7ff ff92 	bl	8001c02 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001cde:	2180      	movs	r1, #128	; 0x80
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	f7ff ff74 	bl	8001bce <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff ff25 	bl	8001b38 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001cee:	2300      	movs	r3, #0
 8001cf0:	827b      	strh	r3, [r7, #18]
 8001cf2:	e00a      	b.n	8001d0a <MFRC522_ToCard+0x82>
 8001cf4:	8a7b      	ldrh	r3, [r7, #18]
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	2009      	movs	r0, #9
 8001d00:	f7ff ff1a 	bl	8001b38 <MFRC522_WriteRegister>
 8001d04:	8a7b      	ldrh	r3, [r7, #18]
 8001d06:	3301      	adds	r3, #1
 8001d08:	827b      	strh	r3, [r7, #18]
 8001d0a:	7bbb      	ldrb	r3, [r7, #14]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	8a7a      	ldrh	r2, [r7, #18]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d3ef      	bcc.n	8001cf4 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	4619      	mov	r1, r3
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f7ff ff0d 	bl	8001b38 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	d103      	bne.n	8001d2c <MFRC522_ToCard+0xa4>
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	200d      	movs	r0, #13
 8001d28:	f7ff ff51 	bl	8001bce <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001d2c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d30:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001d32:	2004      	movs	r0, #4
 8001d34:	f7ff ff18 	bl	8001b68 <MFRC522_ReadRegister>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	753b      	strb	r3, [r7, #20]
		i--;
 8001d3c:	8a7b      	ldrh	r3, [r7, #18]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001d42:	8a7b      	ldrh	r3, [r7, #18]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00a      	beq.n	8001d5e <MFRC522_ToCard+0xd6>
 8001d48:	7d3b      	ldrb	r3, [r7, #20]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <MFRC522_ToCard+0xd6>
 8001d52:	7d3a      	ldrb	r2, [r7, #20]
 8001d54:	7d7b      	ldrb	r3, [r7, #21]
 8001d56:	4013      	ands	r3, r2
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0e9      	beq.n	8001d32 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8001d5e:	2180      	movs	r1, #128	; 0x80
 8001d60:	200d      	movs	r0, #13
 8001d62:	f7ff ff4e 	bl	8001c02 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8001d66:	8a7b      	ldrh	r3, [r7, #18]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d057      	beq.n	8001e1c <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001d6c:	2006      	movs	r0, #6
 8001d6e:	f7ff fefb 	bl	8001b68 <MFRC522_ReadRegister>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f003 031b 	and.w	r3, r3, #27
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d14d      	bne.n	8001e18 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8001d80:	7d3a      	ldrb	r2, [r7, #20]
 8001d82:	7dbb      	ldrb	r3, [r7, #22]
 8001d84:	4013      	ands	r3, r2
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MFRC522_ToCard+0x10c>
 8001d90:	2301      	movs	r3, #1
 8001d92:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d140      	bne.n	8001e1c <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001d9a:	200a      	movs	r0, #10
 8001d9c:	f7ff fee4 	bl	8001b68 <MFRC522_ReadRegister>
 8001da0:	4603      	mov	r3, r0
 8001da2:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001da4:	200c      	movs	r0, #12
 8001da6:	f7ff fedf 	bl	8001b68 <MFRC522_ReadRegister>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8001db2:	7c7b      	ldrb	r3, [r7, #17]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00b      	beq.n	8001dd0 <MFRC522_ToCard+0x148>
 8001db8:	7d3b      	ldrb	r3, [r7, #20]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	7c7b      	ldrb	r3, [r7, #17]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dcc:	801a      	strh	r2, [r3, #0]
 8001dce:	e005      	b.n	8001ddc <MFRC522_ToCard+0x154>
 8001dd0:	7d3b      	ldrb	r3, [r7, #20]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dda:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8001ddc:	7d3b      	ldrb	r3, [r7, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <MFRC522_ToCard+0x15e>
 8001de2:	2301      	movs	r3, #1
 8001de4:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8001de6:	7d3b      	ldrb	r3, [r7, #20]
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d901      	bls.n	8001df0 <MFRC522_ToCard+0x168>
 8001dec:	2310      	movs	r3, #16
 8001dee:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8001df0:	2300      	movs	r3, #0
 8001df2:	827b      	strh	r3, [r7, #18]
 8001df4:	e00a      	b.n	8001e0c <MFRC522_ToCard+0x184>
 8001df6:	8a7b      	ldrh	r3, [r7, #18]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	18d4      	adds	r4, r2, r3
 8001dfc:	2009      	movs	r0, #9
 8001dfe:	f7ff feb3 	bl	8001b68 <MFRC522_ReadRegister>
 8001e02:	4603      	mov	r3, r0
 8001e04:	7023      	strb	r3, [r4, #0]
 8001e06:	8a7b      	ldrh	r3, [r7, #18]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	827b      	strh	r3, [r7, #18]
 8001e0c:	7d3b      	ldrb	r3, [r7, #20]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	8a7a      	ldrh	r2, [r7, #18]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d3ef      	bcc.n	8001df6 <MFRC522_ToCard+0x16e>
 8001e16:	e001      	b.n	8001e1c <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd90      	pop	{r4, r7, pc}

08001e26 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af02      	add	r7, sp, #8
 8001e2c:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8001e32:	2100      	movs	r1, #0
 8001e34:	200d      	movs	r0, #13
 8001e36:	f7ff fe7f 	bl	8001b38 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2293      	movs	r2, #147	; 0x93
 8001e3e:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3301      	adds	r3, #1
 8001e44:	2220      	movs	r2, #32
 8001e46:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001e48:	f107 030a 	add.w	r3, r7, #10
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	200c      	movs	r0, #12
 8001e56:	f7ff ff17 	bl	8001c88 <MFRC522_ToCard>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d118      	bne.n	8001e96 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8001e64:	2300      	movs	r3, #0
 8001e66:	73bb      	strb	r3, [r7, #14]
 8001e68:	e009      	b.n	8001e7e <MFRC522_Anticoll+0x58>
 8001e6a:	7bbb      	ldrb	r3, [r7, #14]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	7b7b      	ldrb	r3, [r7, #13]
 8001e74:	4053      	eors	r3, r2
 8001e76:	737b      	strb	r3, [r7, #13]
 8001e78:	7bbb      	ldrb	r3, [r7, #14]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	73bb      	strb	r3, [r7, #14]
 8001e7e:	7bbb      	ldrb	r3, [r7, #14]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d9f2      	bls.n	8001e6a <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8001e84:	7bbb      	ldrb	r3, [r7, #14]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	7b7a      	ldrb	r2, [r7, #13]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <MFRC522_Anticoll+0x70>
 8001e92:	2302      	movs	r3, #2
 8001e94:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8001eae:	2104      	movs	r1, #4
 8001eb0:	2005      	movs	r0, #5
 8001eb2:	f7ff fea6 	bl	8001c02 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8001eb6:	2180      	movs	r1, #128	; 0x80
 8001eb8:	200a      	movs	r0, #10
 8001eba:	f7ff fe88 	bl	8001bce <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	75fb      	strb	r3, [r7, #23]
 8001ec2:	e00a      	b.n	8001eda <MFRC522_CalculateCRC+0x3a>
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4413      	add	r3, r2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	2009      	movs	r0, #9
 8001ed0:	f7ff fe32 	bl	8001b38 <MFRC522_WriteRegister>
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	75fb      	strb	r3, [r7, #23]
 8001eda:	7dfa      	ldrb	r2, [r7, #23]
 8001edc:	7afb      	ldrb	r3, [r7, #11]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d3f0      	bcc.n	8001ec4 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001ee2:	2103      	movs	r1, #3
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7ff fe27 	bl	8001b38 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8001eea:	23ff      	movs	r3, #255	; 0xff
 8001eec:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001eee:	2005      	movs	r0, #5
 8001ef0:	f7ff fe3a 	bl	8001b68 <MFRC522_ReadRegister>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	75bb      	strb	r3, [r7, #22]
		i--;
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8001efe:	7dfb      	ldrb	r3, [r7, #23]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d004      	beq.n	8001f0e <MFRC522_CalculateCRC+0x6e>
 8001f04:	7dbb      	ldrb	r3, [r7, #22]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0ef      	beq.n	8001eee <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001f0e:	2022      	movs	r0, #34	; 0x22
 8001f10:	f7ff fe2a 	bl	8001b68 <MFRC522_ReadRegister>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	1c5c      	adds	r4, r3, #1
 8001f20:	2021      	movs	r0, #33	; 0x21
 8001f22:	f7ff fe21 	bl	8001b68 <MFRC522_ReadRegister>
 8001f26:	4603      	mov	r3, r0
 8001f28:	7023      	strb	r3, [r4, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd90      	pop	{r4, r7, pc}

08001f32 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8001f32:	b580      	push	{r7, lr}
 8001f34:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8001f36:	f000 f820 	bl	8001f7a <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001f3a:	218d      	movs	r1, #141	; 0x8d
 8001f3c:	202a      	movs	r0, #42	; 0x2a
 8001f3e:	f7ff fdfb 	bl	8001b38 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001f42:	213e      	movs	r1, #62	; 0x3e
 8001f44:	202b      	movs	r0, #43	; 0x2b
 8001f46:	f7ff fdf7 	bl	8001b38 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8001f4a:	211e      	movs	r1, #30
 8001f4c:	202d      	movs	r0, #45	; 0x2d
 8001f4e:	f7ff fdf3 	bl	8001b38 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8001f52:	2100      	movs	r1, #0
 8001f54:	202c      	movs	r0, #44	; 0x2c
 8001f56:	f7ff fdef 	bl	8001b38 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8001f5a:	2170      	movs	r1, #112	; 0x70
 8001f5c:	2026      	movs	r0, #38	; 0x26
 8001f5e:	f7ff fdeb 	bl	8001b38 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001f62:	2140      	movs	r1, #64	; 0x40
 8001f64:	2015      	movs	r0, #21
 8001f66:	f7ff fde7 	bl	8001b38 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001f6a:	213d      	movs	r1, #61	; 0x3d
 8001f6c:	2011      	movs	r0, #17
 8001f6e:	f7ff fde3 	bl	8001b38 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();											// Open the antenna
 8001f72:	f000 f80a 	bl	8001f8a <MFRC522_AntennaOn>
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001f7e:	210f      	movs	r1, #15
 8001f80:	2001      	movs	r0, #1
 8001f82:	f7ff fdd9 	bl	8001b38 <MFRC522_WriteRegister>
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001f90:	2014      	movs	r0, #20
 8001f92:	f7ff fde9 	bl	8001b68 <MFRC522_ReadRegister>
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d103      	bne.n	8001fac <MFRC522_AntennaOn+0x22>
 8001fa4:	2103      	movs	r1, #3
 8001fa6:	2014      	movs	r0, #20
 8001fa8:	f7ff fe11 	bl	8001bce <MFRC522_SetBitMask>
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8001fba:	2350      	movs	r3, #80	; 0x50
 8001fbc:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	1c9a      	adds	r2, r3, #2
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	2102      	movs	r1, #2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff68 	bl	8001ea0 <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001fd0:	463a      	mov	r2, r7
 8001fd2:	4639      	mov	r1, r7
 8001fd4:	1dbb      	adds	r3, r7, #6
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	2204      	movs	r2, #4
 8001fdc:	200c      	movs	r0, #12
 8001fde:	f7ff fe53 	bl	8001c88 <MFRC522_ToCard>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_MspInit+0x4c>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <HAL_MspInit+0x4c>)
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002000:	6453      	str	r3, [r2, #68]	; 0x44
 8002002:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <HAL_MspInit+0x4c>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	603b      	str	r3, [r7, #0]
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_MspInit+0x4c>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <HAL_MspInit+0x4c>)
 8002018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201c:	6413      	str	r3, [r2, #64]	; 0x40
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_MspInit+0x4c>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800202a:	2007      	movs	r0, #7
 800202c:	f000 fb52 	bl	80026d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40023800 	.word	0x40023800

0800203c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <HAL_CRC_MspInit+0x3c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d10d      	bne.n	800206a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_CRC_MspInit+0x40>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_CRC_MspInit+0x40>)
 8002058:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <HAL_CRC_MspInit+0x40>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40023000 	.word	0x40023000
 800207c:	40023800 	.word	0x40023800

08002080 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08e      	sub	sp, #56	; 0x38
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a4c      	ldr	r2, [pc, #304]	; (80021d0 <HAL_SPI_MspInit+0x150>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d12c      	bne.n	80020fc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
 80020a6:	4b4b      	ldr	r3, [pc, #300]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	4a4a      	ldr	r2, [pc, #296]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 80020ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020b0:	6453      	str	r3, [r2, #68]	; 0x44
 80020b2:	4b48      	ldr	r3, [pc, #288]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ba:	623b      	str	r3, [r7, #32]
 80020bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	4b44      	ldr	r3, [pc, #272]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a43      	ldr	r2, [pc, #268]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b41      	ldr	r3, [pc, #260]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020da:	23e0      	movs	r3, #224	; 0xe0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e6:	2303      	movs	r3, #3
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ea:	2305      	movs	r3, #5
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f2:	4619      	mov	r1, r3
 80020f4:	4838      	ldr	r0, [pc, #224]	; (80021d8 <HAL_SPI_MspInit+0x158>)
 80020f6:	f000 fb3d 	bl	8002774 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020fa:	e064      	b.n	80021c6 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a36      	ldr	r2, [pc, #216]	; (80021dc <HAL_SPI_MspInit+0x15c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d12d      	bne.n	8002162 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	4b32      	ldr	r3, [pc, #200]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a31      	ldr	r2, [pc, #196]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 8002110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b2f      	ldr	r3, [pc, #188]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211e:	61bb      	str	r3, [r7, #24]
 8002120:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a2a      	ldr	r2, [pc, #168]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800213e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002150:	2305      	movs	r3, #5
 8002152:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002158:	4619      	mov	r1, r3
 800215a:	4821      	ldr	r0, [pc, #132]	; (80021e0 <HAL_SPI_MspInit+0x160>)
 800215c:	f000 fb0a 	bl	8002774 <HAL_GPIO_Init>
}
 8002160:	e031      	b.n	80021c6 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <HAL_SPI_MspInit+0x164>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d12c      	bne.n	80021c6 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800216c:	2300      	movs	r3, #0
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 8002176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217a:	6413      	str	r3, [r2, #64]	; 0x40
 800217c:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	4a10      	ldr	r2, [pc, #64]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	6313      	str	r3, [r2, #48]	; 0x30
 8002198:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <HAL_SPI_MspInit+0x154>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021b6:	2306      	movs	r3, #6
 80021b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021be:	4619      	mov	r1, r3
 80021c0:	4809      	ldr	r0, [pc, #36]	; (80021e8 <HAL_SPI_MspInit+0x168>)
 80021c2:	f000 fad7 	bl	8002774 <HAL_GPIO_Init>
}
 80021c6:	bf00      	nop
 80021c8:	3738      	adds	r7, #56	; 0x38
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40013000 	.word	0x40013000
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	40003800 	.word	0x40003800
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40003c00 	.word	0x40003c00
 80021e8:	40020800 	.word	0x40020800

080021ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <NMI_Handler+0x4>

080021f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f6:	e7fe      	b.n	80021f6 <HardFault_Handler+0x4>

080021f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <MemManage_Handler+0x4>

080021fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002202:	e7fe      	b.n	8002202 <BusFault_Handler+0x4>

08002204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <UsageFault_Handler+0x4>

0800220a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002238:	f000 f956 	bl	80024e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}

08002240 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return 1;
 8002244:	2301      	movs	r3, #1
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <_kill>:

int _kill(int pid, int sig)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800225a:	f00f f8e5 	bl	8011428 <__errno>
 800225e:	4603      	mov	r3, r0
 8002260:	2216      	movs	r2, #22
 8002262:	601a      	str	r2, [r3, #0]
  return -1;
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <_exit>:

void _exit (int status)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ffe7 	bl	8002250 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002282:	e7fe      	b.n	8002282 <_exit+0x12>

08002284 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	e00a      	b.n	80022ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002296:	f3af 8000 	nop.w
 800229a:	4601      	mov	r1, r0
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	60ba      	str	r2, [r7, #8]
 80022a2:	b2ca      	uxtb	r2, r1
 80022a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3301      	adds	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	dbf0      	blt.n	8002296 <_read+0x12>
  }

  return len;
 80022b4:	687b      	ldr	r3, [r7, #4]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	e009      	b.n	80022e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	60ba      	str	r2, [r7, #8]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3301      	adds	r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	dbf1      	blt.n	80022d0 <_write+0x12>
  }
  return len;
 80022ec:	687b      	ldr	r3, [r7, #4]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <_close>:

int _close(int file)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800231e:	605a      	str	r2, [r3, #4]
  return 0;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_isatty>:

int _isatty(int file)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <_sbrk+0x5c>)
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <_sbrk+0x60>)
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <_sbrk+0x64>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <_sbrk+0x68>)
 8002380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	429a      	cmp	r2, r3
 800238e:	d207      	bcs.n	80023a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002390:	f00f f84a 	bl	8011428 <__errno>
 8002394:	4603      	mov	r3, r0
 8002396:	220c      	movs	r2, #12
 8002398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295
 800239e:	e009      	b.n	80023b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <_sbrk+0x64>)
 80023b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20020000 	.word	0x20020000
 80023c0:	00000400 	.word	0x00000400
 80023c4:	200053b4 	.word	0x200053b4
 80023c8:	20005798 	.word	0x20005798

080023cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <SystemInit+0x20>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <SystemInit+0x20>)
 80023d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002428 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f4:	480d      	ldr	r0, [pc, #52]	; (800242c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023f6:	490e      	ldr	r1, [pc, #56]	; (8002430 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023f8:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023fc:	e002      	b.n	8002404 <LoopCopyDataInit>

080023fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002402:	3304      	adds	r3, #4

08002404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002408:	d3f9      	bcc.n	80023fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240a:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800240c:	4c0b      	ldr	r4, [pc, #44]	; (800243c <LoopFillZerobss+0x26>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002410:	e001      	b.n	8002416 <LoopFillZerobss>

08002412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002414:	3204      	adds	r2, #4

08002416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002418:	d3fb      	bcc.n	8002412 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800241a:	f7ff ffd7 	bl	80023cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800241e:	f00f f809 	bl	8011434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002422:	f7ff f957 	bl	80016d4 <main>
  bx  lr    
 8002426:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002428:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800242c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002430:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8002434:	080149dc 	.word	0x080149dc
  ldr r2, =_sbss
 8002438:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 800243c:	20005798 	.word	0x20005798

08002440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002440:	e7fe      	b.n	8002440 <ADC_IRQHandler>
	...

08002444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002448:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <HAL_Init+0x40>)
 800244e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002452:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <HAL_Init+0x40>)
 800245a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <HAL_Init+0x40>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a07      	ldr	r2, [pc, #28]	; (8002484 <HAL_Init+0x40>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800246c:	2003      	movs	r0, #3
 800246e:	f000 f931 	bl	80026d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002472:	2000      	movs	r0, #0
 8002474:	f000 f808 	bl	8002488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002478:	f7ff fdb8 	bl	8001fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40023c00 	.word	0x40023c00

08002488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_InitTick+0x54>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_InitTick+0x58>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	4619      	mov	r1, r3
 800249a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249e:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f93b 	bl	8002722 <HAL_SYSTICK_Config>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00e      	b.n	80024d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b0f      	cmp	r3, #15
 80024ba:	d80a      	bhi.n	80024d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024bc:	2200      	movs	r2, #0
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f000 f911 	bl	80026ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c8:	4a06      	ldr	r2, [pc, #24]	; (80024e4 <HAL_InitTick+0x5c>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000004 	.word	0x20000004
 80024e0:	2000000c 	.word	0x2000000c
 80024e4:	20000008 	.word	0x20000008

080024e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_IncTick+0x20>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_IncTick+0x24>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <HAL_IncTick+0x24>)
 80024fa:	6013      	str	r3, [r2, #0]
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	2000000c 	.word	0x2000000c
 800250c:	200053b8 	.word	0x200053b8

08002510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return uwTick;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <HAL_GetTick+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	200053b8 	.word	0x200053b8

08002528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002530:	f7ff ffee 	bl	8002510 <HAL_GetTick>
 8002534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d005      	beq.n	800254e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_Delay+0x44>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800254e:	bf00      	nop
 8002550:	f7ff ffde 	bl	8002510 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	d8f7      	bhi.n	8002550 <HAL_Delay+0x28>
  {
  }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	2000000c 	.word	0x2000000c

08002570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800258c:	4013      	ands	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800259c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a2:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	60d3      	str	r3, [r2, #12]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <__NVIC_GetPriorityGrouping+0x18>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	f003 0307 	and.w	r3, r3, #7
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	db0a      	blt.n	80025fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	490c      	ldr	r1, [pc, #48]	; (8002620 <__NVIC_SetPriority+0x4c>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	0112      	lsls	r2, r2, #4
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	440b      	add	r3, r1
 80025f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025fc:	e00a      	b.n	8002614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4908      	ldr	r1, [pc, #32]	; (8002624 <__NVIC_SetPriority+0x50>)
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	3b04      	subs	r3, #4
 800260c:	0112      	lsls	r2, r2, #4
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	440b      	add	r3, r1
 8002612:	761a      	strb	r2, [r3, #24]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000e100 	.word	0xe000e100
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	; 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f1c3 0307 	rsb	r3, r3, #7
 8002642:	2b04      	cmp	r3, #4
 8002644:	bf28      	it	cs
 8002646:	2304      	movcs	r3, #4
 8002648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3304      	adds	r3, #4
 800264e:	2b06      	cmp	r3, #6
 8002650:	d902      	bls.n	8002658 <NVIC_EncodePriority+0x30>
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3b03      	subs	r3, #3
 8002656:	e000      	b.n	800265a <NVIC_EncodePriority+0x32>
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	f04f 32ff 	mov.w	r2, #4294967295
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	401a      	ands	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002670:	f04f 31ff 	mov.w	r1, #4294967295
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	43d9      	mvns	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	4313      	orrs	r3, r2
         );
}
 8002682:	4618      	mov	r0, r3
 8002684:	3724      	adds	r7, #36	; 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a0:	d301      	bcc.n	80026a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00f      	b.n	80026c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <SysTick_Config+0x40>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ae:	210f      	movs	r1, #15
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f7ff ff8e 	bl	80025d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <SysTick_Config+0x40>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <SysTick_Config+0x40>)
 80026c0:	2207      	movs	r2, #7
 80026c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	e000e010 	.word	0xe000e010

080026d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ff47 	bl	8002570 <__NVIC_SetPriorityGrouping>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026fc:	f7ff ff5c 	bl	80025b8 <__NVIC_GetPriorityGrouping>
 8002700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f7ff ff8e 	bl	8002628 <NVIC_EncodePriority>
 800270c:	4602      	mov	r2, r0
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff5d 	bl	80025d4 <__NVIC_SetPriority>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ffb0 	bl	8002690 <SysTick_Config>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e00e      	b.n	800276a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	795b      	ldrb	r3, [r3, #5]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d105      	bne.n	8002762 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff fc6d 	bl	800203c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	; 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	e16b      	b.n	8002a68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002790:	2201      	movs	r2, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	f040 815a 	bne.w	8002a62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d005      	beq.n	80027c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d130      	bne.n	8002828 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	2203      	movs	r2, #3
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027fc:	2201      	movs	r2, #1
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 0201 	and.w	r2, r3, #1
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b03      	cmp	r3, #3
 8002832:	d017      	beq.n	8002864 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	2203      	movs	r2, #3
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d123      	bne.n	80028b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	08da      	lsrs	r2, r3, #3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3208      	adds	r2, #8
 8002878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	220f      	movs	r2, #15
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	08da      	lsrs	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3208      	adds	r2, #8
 80028b2:	69b9      	ldr	r1, [r7, #24]
 80028b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	2203      	movs	r2, #3
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0203 	and.w	r2, r3, #3
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80b4 	beq.w	8002a62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b60      	ldr	r3, [pc, #384]	; (8002a80 <HAL_GPIO_Init+0x30c>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	4a5f      	ldr	r2, [pc, #380]	; (8002a80 <HAL_GPIO_Init+0x30c>)
 8002904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002908:	6453      	str	r3, [r2, #68]	; 0x44
 800290a:	4b5d      	ldr	r3, [pc, #372]	; (8002a80 <HAL_GPIO_Init+0x30c>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002916:	4a5b      	ldr	r2, [pc, #364]	; (8002a84 <HAL_GPIO_Init+0x310>)
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	3302      	adds	r3, #2
 800291e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	220f      	movs	r2, #15
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a52      	ldr	r2, [pc, #328]	; (8002a88 <HAL_GPIO_Init+0x314>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d02b      	beq.n	800299a <HAL_GPIO_Init+0x226>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a51      	ldr	r2, [pc, #324]	; (8002a8c <HAL_GPIO_Init+0x318>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d025      	beq.n	8002996 <HAL_GPIO_Init+0x222>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a50      	ldr	r2, [pc, #320]	; (8002a90 <HAL_GPIO_Init+0x31c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d01f      	beq.n	8002992 <HAL_GPIO_Init+0x21e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a4f      	ldr	r2, [pc, #316]	; (8002a94 <HAL_GPIO_Init+0x320>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d019      	beq.n	800298e <HAL_GPIO_Init+0x21a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a4e      	ldr	r2, [pc, #312]	; (8002a98 <HAL_GPIO_Init+0x324>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <HAL_GPIO_Init+0x216>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4d      	ldr	r2, [pc, #308]	; (8002a9c <HAL_GPIO_Init+0x328>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00d      	beq.n	8002986 <HAL_GPIO_Init+0x212>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4c      	ldr	r2, [pc, #304]	; (8002aa0 <HAL_GPIO_Init+0x32c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <HAL_GPIO_Init+0x20e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4b      	ldr	r2, [pc, #300]	; (8002aa4 <HAL_GPIO_Init+0x330>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <HAL_GPIO_Init+0x20a>
 800297a:	2307      	movs	r3, #7
 800297c:	e00e      	b.n	800299c <HAL_GPIO_Init+0x228>
 800297e:	2308      	movs	r3, #8
 8002980:	e00c      	b.n	800299c <HAL_GPIO_Init+0x228>
 8002982:	2306      	movs	r3, #6
 8002984:	e00a      	b.n	800299c <HAL_GPIO_Init+0x228>
 8002986:	2305      	movs	r3, #5
 8002988:	e008      	b.n	800299c <HAL_GPIO_Init+0x228>
 800298a:	2304      	movs	r3, #4
 800298c:	e006      	b.n	800299c <HAL_GPIO_Init+0x228>
 800298e:	2303      	movs	r3, #3
 8002990:	e004      	b.n	800299c <HAL_GPIO_Init+0x228>
 8002992:	2302      	movs	r3, #2
 8002994:	e002      	b.n	800299c <HAL_GPIO_Init+0x228>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_GPIO_Init+0x228>
 800299a:	2300      	movs	r3, #0
 800299c:	69fa      	ldr	r2, [r7, #28]
 800299e:	f002 0203 	and.w	r2, r2, #3
 80029a2:	0092      	lsls	r2, r2, #2
 80029a4:	4093      	lsls	r3, r2
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029ac:	4935      	ldr	r1, [pc, #212]	; (8002a84 <HAL_GPIO_Init+0x310>)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3302      	adds	r3, #2
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ba:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_GPIO_Init+0x334>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029de:	4a32      	ldr	r2, [pc, #200]	; (8002aa8 <HAL_GPIO_Init+0x334>)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e4:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <HAL_GPIO_Init+0x334>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a08:	4a27      	ldr	r2, [pc, #156]	; (8002aa8 <HAL_GPIO_Init+0x334>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <HAL_GPIO_Init+0x334>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a32:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <HAL_GPIO_Init+0x334>)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a38:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <HAL_GPIO_Init+0x334>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a5c:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <HAL_GPIO_Init+0x334>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3301      	adds	r3, #1
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b0f      	cmp	r3, #15
 8002a6c:	f67f ae90 	bls.w	8002790 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3724      	adds	r7, #36	; 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40013800 	.word	0x40013800
 8002a88:	40020000 	.word	0x40020000
 8002a8c:	40020400 	.word	0x40020400
 8002a90:	40020800 	.word	0x40020800
 8002a94:	40020c00 	.word	0x40020c00
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40021400 	.word	0x40021400
 8002aa0:	40021800 	.word	0x40021800
 8002aa4:	40021c00 	.word	0x40021c00
 8002aa8:	40013c00 	.word	0x40013c00

08002aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	807b      	strh	r3, [r7, #2]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002abc:	787b      	ldrb	r3, [r7, #1]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ac8:	e003      	b.n	8002ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aca:	887b      	ldrh	r3, [r7, #2]
 8002acc:	041a      	lsls	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	619a      	str	r2, [r3, #24]
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e267      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d075      	beq.n	8002bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002afe:	4b88      	ldr	r3, [pc, #544]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d00c      	beq.n	8002b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0a:	4b85      	ldr	r3, [pc, #532]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d112      	bne.n	8002b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b16:	4b82      	ldr	r3, [pc, #520]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b22:	d10b      	bne.n	8002b3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b24:	4b7e      	ldr	r3, [pc, #504]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d05b      	beq.n	8002be8 <HAL_RCC_OscConfig+0x108>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d157      	bne.n	8002be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e242      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b44:	d106      	bne.n	8002b54 <HAL_RCC_OscConfig+0x74>
 8002b46:	4b76      	ldr	r3, [pc, #472]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a75      	ldr	r2, [pc, #468]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	e01d      	b.n	8002b90 <HAL_RCC_OscConfig+0xb0>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x98>
 8002b5e:	4b70      	ldr	r3, [pc, #448]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a6f      	ldr	r2, [pc, #444]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	4b6d      	ldr	r3, [pc, #436]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a6c      	ldr	r2, [pc, #432]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	e00b      	b.n	8002b90 <HAL_RCC_OscConfig+0xb0>
 8002b78:	4b69      	ldr	r3, [pc, #420]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a68      	ldr	r2, [pc, #416]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	4b66      	ldr	r3, [pc, #408]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a65      	ldr	r2, [pc, #404]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d013      	beq.n	8002bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7ff fcba 	bl	8002510 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7ff fcb6 	bl	8002510 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e207      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	4b5b      	ldr	r3, [pc, #364]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0xc0>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7ff fca6 	bl	8002510 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7ff fca2 	bl	8002510 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	; 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e1f3      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bda:	4b51      	ldr	r3, [pc, #324]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xe8>
 8002be6:	e000      	b.n	8002bea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d063      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bf6:	4b4a      	ldr	r3, [pc, #296]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00b      	beq.n	8002c1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d11c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c0e:	4b44      	ldr	r3, [pc, #272]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d116      	bne.n	8002c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1a:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_RCC_OscConfig+0x152>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e1c7      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4937      	ldr	r1, [pc, #220]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c46:	e03a      	b.n	8002cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d020      	beq.n	8002c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c50:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <HAL_RCC_OscConfig+0x244>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7ff fc5b 	bl	8002510 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c5e:	f7ff fc57 	bl	8002510 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e1a8      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c70:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7c:	4b28      	ldr	r3, [pc, #160]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4925      	ldr	r1, [pc, #148]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]
 8002c90:	e015      	b.n	8002cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <HAL_RCC_OscConfig+0x244>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7ff fc3a 	bl	8002510 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca0:	f7ff fc36 	bl	8002510 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e187      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d036      	beq.n	8002d38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d016      	beq.n	8002d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <HAL_RCC_OscConfig+0x248>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7ff fc1a 	bl	8002510 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce0:	f7ff fc16 	bl	8002510 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e167      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x200>
 8002cfe:	e01b      	b.n	8002d38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RCC_OscConfig+0x248>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d06:	f7ff fc03 	bl	8002510 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0c:	e00e      	b.n	8002d2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d0e:	f7ff fbff 	bl	8002510 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d907      	bls.n	8002d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e150      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
 8002d20:	40023800 	.word	0x40023800
 8002d24:	42470000 	.word	0x42470000
 8002d28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d2c:	4b88      	ldr	r3, [pc, #544]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ea      	bne.n	8002d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8097 	beq.w	8002e74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d46:	2300      	movs	r3, #0
 8002d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4a:	4b81      	ldr	r3, [pc, #516]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10f      	bne.n	8002d76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	4b7d      	ldr	r3, [pc, #500]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4a7c      	ldr	r2, [pc, #496]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d64:	6413      	str	r3, [r2, #64]	; 0x40
 8002d66:	4b7a      	ldr	r3, [pc, #488]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d72:	2301      	movs	r3, #1
 8002d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d76:	4b77      	ldr	r3, [pc, #476]	; (8002f54 <HAL_RCC_OscConfig+0x474>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d118      	bne.n	8002db4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d82:	4b74      	ldr	r3, [pc, #464]	; (8002f54 <HAL_RCC_OscConfig+0x474>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a73      	ldr	r2, [pc, #460]	; (8002f54 <HAL_RCC_OscConfig+0x474>)
 8002d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8e:	f7ff fbbf 	bl	8002510 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d96:	f7ff fbbb 	bl	8002510 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e10c      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da8:	4b6a      	ldr	r3, [pc, #424]	; (8002f54 <HAL_RCC_OscConfig+0x474>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_OscConfig+0x2ea>
 8002dbc:	4b64      	ldr	r3, [pc, #400]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc0:	4a63      	ldr	r2, [pc, #396]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc8:	e01c      	b.n	8002e04 <HAL_RCC_OscConfig+0x324>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0x30c>
 8002dd2:	4b5f      	ldr	r3, [pc, #380]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	4a5e      	ldr	r2, [pc, #376]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	f043 0304 	orr.w	r3, r3, #4
 8002ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dde:	4b5c      	ldr	r3, [pc, #368]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	4a5b      	ldr	r2, [pc, #364]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dea:	e00b      	b.n	8002e04 <HAL_RCC_OscConfig+0x324>
 8002dec:	4b58      	ldr	r3, [pc, #352]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	4a57      	ldr	r2, [pc, #348]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	6713      	str	r3, [r2, #112]	; 0x70
 8002df8:	4b55      	ldr	r3, [pc, #340]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	4a54      	ldr	r2, [pc, #336]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002dfe:	f023 0304 	bic.w	r3, r3, #4
 8002e02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d015      	beq.n	8002e38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7ff fb80 	bl	8002510 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e14:	f7ff fb7c 	bl	8002510 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e0cb      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2a:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0ee      	beq.n	8002e14 <HAL_RCC_OscConfig+0x334>
 8002e36:	e014      	b.n	8002e62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e38:	f7ff fb6a 	bl	8002510 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e40:	f7ff fb66 	bl	8002510 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e0b5      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e56:	4b3e      	ldr	r3, [pc, #248]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1ee      	bne.n	8002e40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e68:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	4a38      	ldr	r2, [pc, #224]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80a1 	beq.w	8002fc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e7e:	4b34      	ldr	r3, [pc, #208]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d05c      	beq.n	8002f44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d141      	bne.n	8002f16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <HAL_RCC_OscConfig+0x478>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7ff fb3a 	bl	8002510 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7ff fb36 	bl	8002510 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e087      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	4b27      	ldr	r3, [pc, #156]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	019b      	lsls	r3, r3, #6
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	085b      	lsrs	r3, r3, #1
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	041b      	lsls	r3, r3, #16
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	061b      	lsls	r3, r3, #24
 8002ee2:	491b      	ldr	r1, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <HAL_RCC_OscConfig+0x478>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7ff fb0f 	bl	8002510 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef6:	f7ff fb0b 	bl	8002510 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e05c      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x416>
 8002f14:	e054      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <HAL_RCC_OscConfig+0x478>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7ff faf8 	bl	8002510 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f24:	f7ff faf4 	bl	8002510 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e045      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x444>
 8002f42:	e03d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e038      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40007000 	.word	0x40007000
 8002f58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f5c:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <HAL_RCC_OscConfig+0x4ec>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d028      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d121      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d11a      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d111      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800

08002fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0cc      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b68      	ldr	r3, [pc, #416]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d90c      	bls.n	800300c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b65      	ldr	r3, [pc, #404]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b63      	ldr	r3, [pc, #396]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0b8      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d020      	beq.n	800305a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003024:	4b59      	ldr	r3, [pc, #356]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4a58      	ldr	r2, [pc, #352]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800302e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800303c:	4b53      	ldr	r3, [pc, #332]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a52      	ldr	r2, [pc, #328]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003048:	4b50      	ldr	r3, [pc, #320]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	494d      	ldr	r1, [pc, #308]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d044      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	4b47      	ldr	r3, [pc, #284]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d119      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e07f      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d003      	beq.n	800308e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800308a:	2b03      	cmp	r3, #3
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308e:	4b3f      	ldr	r3, [pc, #252]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e06f      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	4b3b      	ldr	r3, [pc, #236]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e067      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ae:	4b37      	ldr	r3, [pc, #220]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f023 0203 	bic.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4934      	ldr	r1, [pc, #208]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c0:	f7ff fa26 	bl	8002510 <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	e00a      	b.n	80030de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c8:	f7ff fa22 	bl	8002510 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e04f      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	4b2b      	ldr	r3, [pc, #172]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 020c 	and.w	r2, r3, #12
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1eb      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f0:	4b25      	ldr	r3, [pc, #148]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d20c      	bcs.n	8003118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b22      	ldr	r3, [pc, #136]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b20      	ldr	r3, [pc, #128]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e032      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4916      	ldr	r1, [pc, #88]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003142:	4b12      	ldr	r3, [pc, #72]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	490e      	ldr	r1, [pc, #56]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003156:	f000 f821 	bl	800319c <HAL_RCC_GetSysClockFreq>
 800315a:	4602      	mov	r2, r0
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	490a      	ldr	r1, [pc, #40]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	5ccb      	ldrb	r3, [r1, r3]
 800316a:	fa22 f303 	lsr.w	r3, r2, r3
 800316e:	4a09      	ldr	r2, [pc, #36]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_RCC_ClockConfig+0x1c8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff f986 	bl	8002488 <HAL_InitTick>

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023c00 	.word	0x40023c00
 800318c:	40023800 	.word	0x40023800
 8003190:	08012b4c 	.word	0x08012b4c
 8003194:	20000004 	.word	0x20000004
 8003198:	20000008 	.word	0x20000008

0800319c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800319c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031a0:	b094      	sub	sp, #80	; 0x50
 80031a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	647b      	str	r3, [r7, #68]	; 0x44
 80031a8:	2300      	movs	r3, #0
 80031aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031ac:	2300      	movs	r3, #0
 80031ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b4:	4b79      	ldr	r3, [pc, #484]	; (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d00d      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0x40>
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	f200 80e1 	bhi.w	8003388 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x34>
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ce:	e0db      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031d0:	4b73      	ldr	r3, [pc, #460]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80031d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031d4:	e0db      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031d6:	4b73      	ldr	r3, [pc, #460]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80031d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031da:	e0d8      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031dc:	4b6f      	ldr	r3, [pc, #444]	; (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031e6:	4b6d      	ldr	r3, [pc, #436]	; (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d063      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f2:	4b6a      	ldr	r3, [pc, #424]	; (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	099b      	lsrs	r3, r3, #6
 80031f8:	2200      	movs	r2, #0
 80031fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80031fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003204:	633b      	str	r3, [r7, #48]	; 0x30
 8003206:	2300      	movs	r3, #0
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
 800320a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800320e:	4622      	mov	r2, r4
 8003210:	462b      	mov	r3, r5
 8003212:	f04f 0000 	mov.w	r0, #0
 8003216:	f04f 0100 	mov.w	r1, #0
 800321a:	0159      	lsls	r1, r3, #5
 800321c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003220:	0150      	lsls	r0, r2, #5
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4621      	mov	r1, r4
 8003228:	1a51      	subs	r1, r2, r1
 800322a:	6139      	str	r1, [r7, #16]
 800322c:	4629      	mov	r1, r5
 800322e:	eb63 0301 	sbc.w	r3, r3, r1
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003240:	4659      	mov	r1, fp
 8003242:	018b      	lsls	r3, r1, #6
 8003244:	4651      	mov	r1, sl
 8003246:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800324a:	4651      	mov	r1, sl
 800324c:	018a      	lsls	r2, r1, #6
 800324e:	4651      	mov	r1, sl
 8003250:	ebb2 0801 	subs.w	r8, r2, r1
 8003254:	4659      	mov	r1, fp
 8003256:	eb63 0901 	sbc.w	r9, r3, r1
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800326a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800326e:	4690      	mov	r8, r2
 8003270:	4699      	mov	r9, r3
 8003272:	4623      	mov	r3, r4
 8003274:	eb18 0303 	adds.w	r3, r8, r3
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	462b      	mov	r3, r5
 800327c:	eb49 0303 	adc.w	r3, r9, r3
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800328e:	4629      	mov	r1, r5
 8003290:	024b      	lsls	r3, r1, #9
 8003292:	4621      	mov	r1, r4
 8003294:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003298:	4621      	mov	r1, r4
 800329a:	024a      	lsls	r2, r1, #9
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a2:	2200      	movs	r2, #0
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032ac:	f7fc ffe8 	bl	8000280 <__aeabi_uldivmod>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4613      	mov	r3, r2
 80032b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b8:	e058      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ba:	4b38      	ldr	r3, [pc, #224]	; (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	099b      	lsrs	r3, r3, #6
 80032c0:	2200      	movs	r2, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	4611      	mov	r1, r2
 80032c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032ca:	623b      	str	r3, [r7, #32]
 80032cc:	2300      	movs	r3, #0
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
 80032d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032d4:	4642      	mov	r2, r8
 80032d6:	464b      	mov	r3, r9
 80032d8:	f04f 0000 	mov.w	r0, #0
 80032dc:	f04f 0100 	mov.w	r1, #0
 80032e0:	0159      	lsls	r1, r3, #5
 80032e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032e6:	0150      	lsls	r0, r2, #5
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4641      	mov	r1, r8
 80032ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80032f2:	4649      	mov	r1, r9
 80032f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003304:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003308:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800330c:	ebb2 040a 	subs.w	r4, r2, sl
 8003310:	eb63 050b 	sbc.w	r5, r3, fp
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	00eb      	lsls	r3, r5, #3
 800331e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003322:	00e2      	lsls	r2, r4, #3
 8003324:	4614      	mov	r4, r2
 8003326:	461d      	mov	r5, r3
 8003328:	4643      	mov	r3, r8
 800332a:	18e3      	adds	r3, r4, r3
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	464b      	mov	r3, r9
 8003330:	eb45 0303 	adc.w	r3, r5, r3
 8003334:	607b      	str	r3, [r7, #4]
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003342:	4629      	mov	r1, r5
 8003344:	028b      	lsls	r3, r1, #10
 8003346:	4621      	mov	r1, r4
 8003348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800334c:	4621      	mov	r1, r4
 800334e:	028a      	lsls	r2, r1, #10
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003356:	2200      	movs	r2, #0
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	61fa      	str	r2, [r7, #28]
 800335c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003360:	f7fc ff8e 	bl	8000280 <__aeabi_uldivmod>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4613      	mov	r3, r2
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	3301      	adds	r3, #1
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800337c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800337e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003380:	fbb2 f3f3 	udiv	r3, r2, r3
 8003384:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003386:	e002      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800338a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800338c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003390:	4618      	mov	r0, r3
 8003392:	3750      	adds	r7, #80	; 0x50
 8003394:	46bd      	mov	sp, r7
 8003396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	00f42400 	.word	0x00f42400
 80033a4:	007a1200 	.word	0x007a1200

080033a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e07b      	b.n	80034b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d108      	bne.n	80033d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ca:	d009      	beq.n	80033e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	61da      	str	r2, [r3, #28]
 80033d2:	e005      	b.n	80033e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe fe40 	bl	8002080 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003416:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	ea42 0103 	orr.w	r1, r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	f003 0104 	and.w	r1, r3, #4
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	f003 0210 	and.w	r2, r3, #16
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b088      	sub	sp, #32
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	603b      	str	r3, [r7, #0]
 80034c6:	4613      	mov	r3, r2
 80034c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_SPI_Transmit+0x22>
 80034d8:	2302      	movs	r3, #2
 80034da:	e126      	b.n	800372a <HAL_SPI_Transmit+0x270>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034e4:	f7ff f814 	bl	8002510 <HAL_GetTick>
 80034e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034ea:	88fb      	ldrh	r3, [r7, #6]
 80034ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d002      	beq.n	8003500 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
 80034fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034fe:	e10b      	b.n	8003718 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_SPI_Transmit+0x52>
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003510:	e102      	b.n	8003718 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2203      	movs	r2, #3
 8003516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	88fa      	ldrh	r2, [r7, #6]
 800352a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003558:	d10f      	bne.n	800357a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003568:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003578:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d007      	beq.n	8003598 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003596:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a0:	d14b      	bne.n	800363a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_SPI_Transmit+0xf6>
 80035aa:	8afb      	ldrh	r3, [r7, #22]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d13e      	bne.n	800362e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	881a      	ldrh	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	1c9a      	adds	r2, r3, #2
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035d4:	e02b      	b.n	800362e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d112      	bne.n	800360a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	881a      	ldrh	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	1c9a      	adds	r2, r3, #2
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	86da      	strh	r2, [r3, #54]	; 0x36
 8003608:	e011      	b.n	800362e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800360a:	f7fe ff81 	bl	8002510 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d803      	bhi.n	8003622 <HAL_SPI_Transmit+0x168>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d102      	bne.n	8003628 <HAL_SPI_Transmit+0x16e>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800362c:	e074      	b.n	8003718 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ce      	bne.n	80035d6 <HAL_SPI_Transmit+0x11c>
 8003638:	e04c      	b.n	80036d4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_SPI_Transmit+0x18e>
 8003642:	8afb      	ldrh	r3, [r7, #22]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d140      	bne.n	80036ca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	7812      	ldrb	r2, [r2, #0]
 8003654:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800366e:	e02c      	b.n	80036ca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b02      	cmp	r3, #2
 800367c:	d113      	bne.n	80036a6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	7812      	ldrb	r2, [r2, #0]
 800368a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80036a4:	e011      	b.n	80036ca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036a6:	f7fe ff33 	bl	8002510 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d803      	bhi.n	80036be <HAL_SPI_Transmit+0x204>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036bc:	d102      	bne.n	80036c4 <HAL_SPI_Transmit+0x20a>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036c8:	e026      	b.n	8003718 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1cd      	bne.n	8003670 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	6839      	ldr	r1, [r7, #0]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fa55 	bl	8003b88 <SPI_EndRxTxTransaction>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	77fb      	strb	r3, [r7, #31]
 8003714:	e000      	b.n	8003718 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003716:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003728:	7ffb      	ldrb	r3, [r7, #31]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b08c      	sub	sp, #48	; 0x30
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003740:	2301      	movs	r3, #1
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_SPI_TransmitReceive+0x26>
 8003754:	2302      	movs	r3, #2
 8003756:	e18a      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x33c>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003760:	f7fe fed6 	bl	8002510 <HAL_GetTick>
 8003764:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800376c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003776:	887b      	ldrh	r3, [r7, #2]
 8003778:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800377a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800377e:	2b01      	cmp	r3, #1
 8003780:	d00f      	beq.n	80037a2 <HAL_SPI_TransmitReceive+0x70>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003788:	d107      	bne.n	800379a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <HAL_SPI_TransmitReceive+0x68>
 8003792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003796:	2b04      	cmp	r3, #4
 8003798:	d003      	beq.n	80037a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800379a:	2302      	movs	r3, #2
 800379c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037a0:	e15b      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x82>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x82>
 80037ae:	887b      	ldrh	r3, [r7, #2]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d103      	bne.n	80037bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037ba:	e14e      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d003      	beq.n	80037d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2205      	movs	r2, #5
 80037cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	887a      	ldrh	r2, [r7, #2]
 80037e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	887a      	ldrh	r2, [r7, #2]
 80037e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	887a      	ldrh	r2, [r7, #2]
 80037f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	887a      	ldrh	r2, [r7, #2]
 80037f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d007      	beq.n	8003824 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003822:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382c:	d178      	bne.n	8003920 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_SPI_TransmitReceive+0x10a>
 8003836:	8b7b      	ldrh	r3, [r7, #26]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d166      	bne.n	800390a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	881a      	ldrh	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	1c9a      	adds	r2, r3, #2
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003860:	e053      	b.n	800390a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b02      	cmp	r3, #2
 800386e:	d11b      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x176>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d016      	beq.n	80038a8 <HAL_SPI_TransmitReceive+0x176>
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	2b01      	cmp	r3, #1
 800387e:	d113      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	881a      	ldrh	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	1c9a      	adds	r2, r3, #2
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d119      	bne.n	80038ea <HAL_SPI_TransmitReceive+0x1b8>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d014      	beq.n	80038ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	b292      	uxth	r2, r2
 80038cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	1c9a      	adds	r2, r3, #2
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038e6:	2301      	movs	r3, #1
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038ea:	f7fe fe11 	bl	8002510 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d807      	bhi.n	800390a <HAL_SPI_TransmitReceive+0x1d8>
 80038fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d003      	beq.n	800390a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003908:	e0a7      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1a6      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x130>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1a1      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x130>
 800391e:	e07c      	b.n	8003a1a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_SPI_TransmitReceive+0x1fc>
 8003928:	8b7b      	ldrh	r3, [r7, #26]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d16b      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	330c      	adds	r3, #12
 8003938:	7812      	ldrb	r2, [r2, #0]
 800393a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003954:	e057      	b.n	8003a06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b02      	cmp	r3, #2
 8003962:	d11c      	bne.n	800399e <HAL_SPI_TransmitReceive+0x26c>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d017      	beq.n	800399e <HAL_SPI_TransmitReceive+0x26c>
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d114      	bne.n	800399e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	330c      	adds	r3, #12
 800397e:	7812      	ldrb	r2, [r2, #0]
 8003980:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d119      	bne.n	80039e0 <HAL_SPI_TransmitReceive+0x2ae>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d014      	beq.n	80039e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039dc:	2301      	movs	r3, #1
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039e0:	f7fe fd96 	bl	8002510 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d803      	bhi.n	80039f8 <HAL_SPI_TransmitReceive+0x2c6>
 80039f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d102      	bne.n	80039fe <HAL_SPI_TransmitReceive+0x2cc>
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d103      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a04:	e029      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1a2      	bne.n	8003956 <HAL_SPI_TransmitReceive+0x224>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d19d      	bne.n	8003956 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f8b2 	bl	8003b88 <SPI_EndRxTxTransaction>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d006      	beq.n	8003a38 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a36:	e010      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	e000      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3730      	adds	r7, #48	; 0x30
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	4613      	mov	r3, r2
 8003a86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a88:	f7fe fd42 	bl	8002510 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	4413      	add	r3, r2
 8003a96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a98:	f7fe fd3a 	bl	8002510 <HAL_GetTick>
 8003a9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a9e:	4b39      	ldr	r3, [pc, #228]	; (8003b84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	015b      	lsls	r3, r3, #5
 8003aa4:	0d1b      	lsrs	r3, r3, #20
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aae:	e054      	b.n	8003b5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	d050      	beq.n	8003b5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ab8:	f7fe fd2a 	bl	8002510 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d902      	bls.n	8003ace <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d13d      	bne.n	8003b4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003adc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae6:	d111      	bne.n	8003b0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af0:	d004      	beq.n	8003afc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afa:	d107      	bne.n	8003b0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b14:	d10f      	bne.n	8003b36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e017      	b.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4013      	ands	r3, r2
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	bf0c      	ite	eq
 8003b6a:	2301      	moveq	r3, #1
 8003b6c:	2300      	movne	r3, #0
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	461a      	mov	r2, r3
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d19b      	bne.n	8003ab0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000004 	.word	0x20000004

08003b88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b94:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <SPI_EndRxTxTransaction+0x7c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <SPI_EndRxTxTransaction+0x80>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0d5b      	lsrs	r3, r3, #21
 8003ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ba4:	fb02 f303 	mul.w	r3, r2, r3
 8003ba8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb2:	d112      	bne.n	8003bda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2180      	movs	r1, #128	; 0x80
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7ff ff5a 	bl	8003a78 <SPI_WaitFlagStateUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d016      	beq.n	8003bf8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	f043 0220 	orr.w	r2, r3, #32
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e00f      	b.n	8003bfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	2b80      	cmp	r3, #128	; 0x80
 8003bf2:	d0f2      	beq.n	8003bda <SPI_EndRxTxTransaction+0x52>
 8003bf4:	e000      	b.n	8003bf8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003bf6:	bf00      	nop
  }

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000004 	.word	0x20000004
 8003c08:	165e9f81 	.word	0x165e9f81

08003c0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003c10:	4904      	ldr	r1, [pc, #16]	; (8003c24 <MX_FATFS_Init+0x18>)
 8003c12:	4805      	ldr	r0, [pc, #20]	; (8003c28 <MX_FATFS_Init+0x1c>)
 8003c14:	f002 fcea 	bl	80065ec <FATFS_LinkDriver>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <MX_FATFS_Init+0x20>)
 8003c1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003c20:	bf00      	nop
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	200053c0 	.word	0x200053c0
 8003c28:	20000010 	.word	0x20000010
 8003c2c:	200053bc 	.word	0x200053bc

08003c30 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003c34:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fd fa2b 	bl	80010a8 <SD_disk_initialize>
 8003c52:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fd fb03 	bl	8001274 <SD_disk_status>
 8003c6e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	4603      	mov	r3, r0
 8003c86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003c88:	7bf8      	ldrb	r0, [r7, #15]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	f7fd fb06 	bl	80012a0 <SD_disk_read>
 8003c94:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
 8003caa:	4603      	mov	r3, r0
 8003cac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003cae:	7bf8      	ldrb	r0, [r7, #15]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	f7fd fb5d 	bl	8001374 <SD_disk_write>
 8003cba:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	603a      	str	r2, [r7, #0]
 8003cce:	71fb      	strb	r3, [r7, #7]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003cd4:	79b9      	ldrb	r1, [r7, #6]
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd fbce 	bl	800147c <SD_disk_ioctl>
 8003ce0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	4a08      	ldr	r2, [pc, #32]	; (8003d1c <disk_status+0x30>)
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	79fa      	ldrb	r2, [r7, #7]
 8003d04:	4905      	ldr	r1, [pc, #20]	; (8003d1c <disk_status+0x30>)
 8003d06:	440a      	add	r2, r1
 8003d08:	7a12      	ldrb	r2, [r2, #8]
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4798      	blx	r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	200053ec 	.word	0x200053ec

08003d20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	4a0d      	ldr	r2, [pc, #52]	; (8003d68 <disk_initialize+0x48>)
 8003d32:	5cd3      	ldrb	r3, [r2, r3]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d111      	bne.n	8003d5c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	4a0b      	ldr	r2, [pc, #44]	; (8003d68 <disk_initialize+0x48>)
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	4a09      	ldr	r2, [pc, #36]	; (8003d68 <disk_initialize+0x48>)
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	79fa      	ldrb	r2, [r7, #7]
 8003d4e:	4906      	ldr	r1, [pc, #24]	; (8003d68 <disk_initialize+0x48>)
 8003d50:	440a      	add	r2, r1
 8003d52:	7a12      	ldrb	r2, [r2, #8]
 8003d54:	4610      	mov	r0, r2
 8003d56:	4798      	blx	r3
 8003d58:	4603      	mov	r3, r0
 8003d5a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	200053ec 	.word	0x200053ec

08003d6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003d6c:	b590      	push	{r4, r7, lr}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	4603      	mov	r3, r0
 8003d7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <disk_read+0x3c>)
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	689c      	ldr	r4, [r3, #8]
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	4a07      	ldr	r2, [pc, #28]	; (8003da8 <disk_read+0x3c>)
 8003d8c:	4413      	add	r3, r2
 8003d8e:	7a18      	ldrb	r0, [r3, #8]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	47a0      	blx	r4
 8003d98:	4603      	mov	r3, r0
 8003d9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd90      	pop	{r4, r7, pc}
 8003da6:	bf00      	nop
 8003da8:	200053ec 	.word	0x200053ec

08003dac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	4603      	mov	r3, r0
 8003dba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <disk_write+0x3c>)
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	68dc      	ldr	r4, [r3, #12]
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	4a07      	ldr	r2, [pc, #28]	; (8003de8 <disk_write+0x3c>)
 8003dcc:	4413      	add	r3, r2
 8003dce:	7a18      	ldrb	r0, [r3, #8]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	47a0      	blx	r4
 8003dd8:	4603      	mov	r3, r0
 8003dda:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd90      	pop	{r4, r7, pc}
 8003de6:	bf00      	nop
 8003de8:	200053ec 	.word	0x200053ec

08003dec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	603a      	str	r2, [r7, #0]
 8003df6:	71fb      	strb	r3, [r7, #7]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <disk_ioctl+0x38>)
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	79fa      	ldrb	r2, [r7, #7]
 8003e0a:	4906      	ldr	r1, [pc, #24]	; (8003e24 <disk_ioctl+0x38>)
 8003e0c:	440a      	add	r2, r1
 8003e0e:	7a10      	ldrb	r0, [r2, #8]
 8003e10:	79b9      	ldrb	r1, [r7, #6]
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	4798      	blx	r3
 8003e16:	4603      	mov	r3, r0
 8003e18:	73fb      	strb	r3, [r7, #15]
  return res;
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	200053ec 	.word	0x200053ec

08003e28 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3301      	adds	r3, #1
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003e38:	89fb      	ldrh	r3, [r7, #14]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	b21a      	sxth	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	b21b      	sxth	r3, r3
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b21b      	sxth	r3, r3
 8003e48:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003e4a:	89fb      	ldrh	r3, [r7, #14]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3303      	adds	r3, #3
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	3202      	adds	r2, #2
 8003e70:	7812      	ldrb	r2, [r2, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	3201      	adds	r2, #1
 8003e7e:	7812      	ldrb	r2, [r2, #0]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	7812      	ldrb	r2, [r2, #0]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003e90:	68fb      	ldr	r3, [r7, #12]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	887a      	ldrh	r2, [r7, #2]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	887b      	ldrh	r3, [r7, #2]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	887a      	ldrh	r2, [r7, #2]
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	701a      	strb	r2, [r3, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	0a1b      	lsrs	r3, r3, #8
 8003eee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	0a1b      	lsrs	r3, r3, #8
 8003f12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	701a      	strb	r2, [r3, #0]
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00d      	beq.n	8003f62 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	1c53      	adds	r3, r2, #1
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	1c59      	adds	r1, r3, #1
 8003f50:	6179      	str	r1, [r7, #20]
 8003f52:	7812      	ldrb	r2, [r2, #0]
 8003f54:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	607b      	str	r3, [r7, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f1      	bne.n	8003f46 <mem_cpy+0x1a>
	}
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003f6e:	b480      	push	{r7}
 8003f70:	b087      	sub	sp, #28
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	617a      	str	r2, [r7, #20]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f3      	bne.n	8003f7e <mem_set+0x10>
}
 8003f96:	bf00      	nop
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003fa4:	b480      	push	{r7}
 8003fa6:	b089      	sub	sp, #36	; 0x24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	61fa      	str	r2, [r7, #28]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	61ba      	str	r2, [r7, #24]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	1acb      	subs	r3, r1, r3
 8003fd0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	607b      	str	r3, [r7, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <mem_cmp+0x40>
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0eb      	beq.n	8003fbc <mem_cmp+0x18>

	return r;
 8003fe4:	697b      	ldr	r3, [r7, #20]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3724      	adds	r7, #36	; 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003ffc:	e002      	b.n	8004004 <chk_chr+0x12>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3301      	adds	r3, #1
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <chk_chr+0x26>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	4293      	cmp	r3, r2
 8004016:	d1f2      	bne.n	8003ffe <chk_chr+0xc>
	return *str;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	781b      	ldrb	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004032:	2300      	movs	r3, #0
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	e029      	b.n	8004090 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800403c:	4a27      	ldr	r2, [pc, #156]	; (80040dc <chk_lock+0xb4>)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	4413      	add	r3, r2
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01d      	beq.n	8004086 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800404a:	4a24      	ldr	r2, [pc, #144]	; (80040dc <chk_lock+0xb4>)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	4413      	add	r3, r2
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d116      	bne.n	800408a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800405c:	4a1f      	ldr	r2, [pc, #124]	; (80040dc <chk_lock+0xb4>)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	4413      	add	r3, r2
 8004064:	3304      	adds	r3, #4
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800406c:	429a      	cmp	r2, r3
 800406e:	d10c      	bne.n	800408a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004070:	4a1a      	ldr	r2, [pc, #104]	; (80040dc <chk_lock+0xb4>)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	4413      	add	r3, r2
 8004078:	3308      	adds	r3, #8
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004080:	429a      	cmp	r2, r3
 8004082:	d102      	bne.n	800408a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004084:	e007      	b.n	8004096 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004086:	2301      	movs	r3, #1
 8004088:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3301      	adds	r3, #1
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d9d2      	bls.n	800403c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d109      	bne.n	80040b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d102      	bne.n	80040a8 <chk_lock+0x80>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d101      	bne.n	80040ac <chk_lock+0x84>
 80040a8:	2300      	movs	r3, #0
 80040aa:	e010      	b.n	80040ce <chk_lock+0xa6>
 80040ac:	2312      	movs	r3, #18
 80040ae:	e00e      	b.n	80040ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d108      	bne.n	80040c8 <chk_lock+0xa0>
 80040b6:	4a09      	ldr	r2, [pc, #36]	; (80040dc <chk_lock+0xb4>)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	4413      	add	r3, r2
 80040be:	330c      	adds	r3, #12
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c6:	d101      	bne.n	80040cc <chk_lock+0xa4>
 80040c8:	2310      	movs	r3, #16
 80040ca:	e000      	b.n	80040ce <chk_lock+0xa6>
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	200053cc 	.word	0x200053cc

080040e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80040e6:	2300      	movs	r3, #0
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	e002      	b.n	80040f2 <enq_lock+0x12>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3301      	adds	r3, #1
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d806      	bhi.n	8004106 <enq_lock+0x26>
 80040f8:	4a09      	ldr	r2, [pc, #36]	; (8004120 <enq_lock+0x40>)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	4413      	add	r3, r2
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f2      	bne.n	80040ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b02      	cmp	r3, #2
 800410a:	bf14      	ite	ne
 800410c:	2301      	movne	r3, #1
 800410e:	2300      	moveq	r3, #0
 8004110:	b2db      	uxtb	r3, r3
}
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	200053cc 	.word	0x200053cc

08004124 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	e01f      	b.n	8004174 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004134:	4a41      	ldr	r2, [pc, #260]	; (800423c <inc_lock+0x118>)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	4413      	add	r3, r2
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d113      	bne.n	800416e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004146:	4a3d      	ldr	r2, [pc, #244]	; (800423c <inc_lock+0x118>)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	4413      	add	r3, r2
 800414e:	3304      	adds	r3, #4
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004156:	429a      	cmp	r2, r3
 8004158:	d109      	bne.n	800416e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800415a:	4a38      	ldr	r2, [pc, #224]	; (800423c <inc_lock+0x118>)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	4413      	add	r3, r2
 8004162:	3308      	adds	r3, #8
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800416a:	429a      	cmp	r2, r3
 800416c:	d006      	beq.n	800417c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3301      	adds	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d9dc      	bls.n	8004134 <inc_lock+0x10>
 800417a:	e000      	b.n	800417e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800417c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d132      	bne.n	80041ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	e002      	b.n	8004190 <inc_lock+0x6c>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3301      	adds	r3, #1
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d806      	bhi.n	80041a4 <inc_lock+0x80>
 8004196:	4a29      	ldr	r2, [pc, #164]	; (800423c <inc_lock+0x118>)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	4413      	add	r3, r2
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f2      	bne.n	800418a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d101      	bne.n	80041ae <inc_lock+0x8a>
 80041aa:	2300      	movs	r3, #0
 80041ac:	e040      	b.n	8004230 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4922      	ldr	r1, [pc, #136]	; (800423c <inc_lock+0x118>)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	440b      	add	r3, r1
 80041ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	491e      	ldr	r1, [pc, #120]	; (800423c <inc_lock+0x118>)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	440b      	add	r3, r1
 80041c8:	3304      	adds	r3, #4
 80041ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	491a      	ldr	r1, [pc, #104]	; (800423c <inc_lock+0x118>)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	440b      	add	r3, r1
 80041d8:	3308      	adds	r3, #8
 80041da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80041dc:	4a17      	ldr	r2, [pc, #92]	; (800423c <inc_lock+0x118>)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	4413      	add	r3, r2
 80041e4:	330c      	adds	r3, #12
 80041e6:	2200      	movs	r2, #0
 80041e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d009      	beq.n	8004204 <inc_lock+0xe0>
 80041f0:	4a12      	ldr	r2, [pc, #72]	; (800423c <inc_lock+0x118>)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	4413      	add	r3, r2
 80041f8:	330c      	adds	r3, #12
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <inc_lock+0xe0>
 8004200:	2300      	movs	r3, #0
 8004202:	e015      	b.n	8004230 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d108      	bne.n	800421c <inc_lock+0xf8>
 800420a:	4a0c      	ldr	r2, [pc, #48]	; (800423c <inc_lock+0x118>)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	4413      	add	r3, r2
 8004212:	330c      	adds	r3, #12
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	3301      	adds	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	e001      	b.n	8004220 <inc_lock+0xfc>
 800421c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004220:	4906      	ldr	r1, [pc, #24]	; (800423c <inc_lock+0x118>)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	440b      	add	r3, r1
 8004228:	330c      	adds	r3, #12
 800422a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3301      	adds	r3, #1
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	200053cc 	.word	0x200053cc

08004240 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3b01      	subs	r3, #1
 800424c:	607b      	str	r3, [r7, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d825      	bhi.n	80042a0 <dec_lock+0x60>
		n = Files[i].ctr;
 8004254:	4a17      	ldr	r2, [pc, #92]	; (80042b4 <dec_lock+0x74>)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	4413      	add	r3, r2
 800425c:	330c      	adds	r3, #12
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004262:	89fb      	ldrh	r3, [r7, #14]
 8004264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004268:	d101      	bne.n	800426e <dec_lock+0x2e>
 800426a:	2300      	movs	r3, #0
 800426c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800426e:	89fb      	ldrh	r3, [r7, #14]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <dec_lock+0x3a>
 8004274:	89fb      	ldrh	r3, [r7, #14]
 8004276:	3b01      	subs	r3, #1
 8004278:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800427a:	4a0e      	ldr	r2, [pc, #56]	; (80042b4 <dec_lock+0x74>)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	4413      	add	r3, r2
 8004282:	330c      	adds	r3, #12
 8004284:	89fa      	ldrh	r2, [r7, #14]
 8004286:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004288:	89fb      	ldrh	r3, [r7, #14]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <dec_lock+0x5a>
 800428e:	4a09      	ldr	r2, [pc, #36]	; (80042b4 <dec_lock+0x74>)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	4413      	add	r3, r2
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	737b      	strb	r3, [r7, #13]
 800429e:	e001      	b.n	80042a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80042a0:	2302      	movs	r3, #2
 80042a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80042a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	200053cc 	.word	0x200053cc

080042b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	e010      	b.n	80042e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80042c6:	4a0d      	ldr	r2, [pc, #52]	; (80042fc <clear_lock+0x44>)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	4413      	add	r3, r2
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d105      	bne.n	80042e2 <clear_lock+0x2a>
 80042d6:	4a09      	ldr	r2, [pc, #36]	; (80042fc <clear_lock+0x44>)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	4413      	add	r3, r2
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3301      	adds	r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d9eb      	bls.n	80042c6 <clear_lock+0xe>
	}
}
 80042ee:	bf00      	nop
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	200053cc 	.word	0x200053cc

08004300 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	78db      	ldrb	r3, [r3, #3]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d034      	beq.n	800437e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	7858      	ldrb	r0, [r3, #1]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004324:	2301      	movs	r3, #1
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	f7ff fd40 	bl	8003dac <disk_write>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004332:	2301      	movs	r3, #1
 8004334:	73fb      	strb	r3, [r7, #15]
 8004336:	e022      	b.n	800437e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	1ad2      	subs	r2, r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	429a      	cmp	r2, r3
 800434c:	d217      	bcs.n	800437e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	789b      	ldrb	r3, [r3, #2]
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	e010      	b.n	8004378 <sync_window+0x78>
					wsect += fs->fsize;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4413      	add	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	7858      	ldrb	r0, [r3, #1]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800436a:	2301      	movs	r3, #1
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	f7ff fd1d 	bl	8003dac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	3b01      	subs	r3, #1
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d8eb      	bhi.n	8004356 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800437e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d01b      	beq.n	80043d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff ffad 	bl	8004300 <sync_window>
 80043a6:	4603      	mov	r3, r0
 80043a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d113      	bne.n	80043d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	7858      	ldrb	r0, [r3, #1]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80043ba:	2301      	movs	r3, #1
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	f7ff fcd5 	bl	8003d6c <disk_read>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80043c8:	f04f 33ff 	mov.w	r3, #4294967295
 80043cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff ff87 	bl	8004300 <sync_window>
 80043f2:	4603      	mov	r3, r0
 80043f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d159      	bne.n	80044b0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b03      	cmp	r3, #3
 8004402:	d149      	bne.n	8004498 <sync_fs+0xb4>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	791b      	ldrb	r3, [r3, #4]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d145      	bne.n	8004498 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	899b      	ldrh	r3, [r3, #12]
 8004416:	461a      	mov	r2, r3
 8004418:	2100      	movs	r1, #0
 800441a:	f7ff fda8 	bl	8003f6e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3334      	adds	r3, #52	; 0x34
 8004422:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004426:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fd37 	bl	8003e9e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3334      	adds	r3, #52	; 0x34
 8004434:	4921      	ldr	r1, [pc, #132]	; (80044bc <sync_fs+0xd8>)
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff fd4c 	bl	8003ed4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3334      	adds	r3, #52	; 0x34
 8004440:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004444:	491e      	ldr	r1, [pc, #120]	; (80044c0 <sync_fs+0xdc>)
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fd44 	bl	8003ed4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3334      	adds	r3, #52	; 0x34
 8004450:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f7ff fd3a 	bl	8003ed4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3334      	adds	r3, #52	; 0x34
 8004464:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f7ff fd30 	bl	8003ed4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	7858      	ldrb	r0, [r3, #1]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800448c:	2301      	movs	r3, #1
 800448e:	f7ff fc8d 	bl	8003dac <disk_write>
			fs->fsi_flag = 0;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	785b      	ldrb	r3, [r3, #1]
 800449c:	2200      	movs	r2, #0
 800449e:	2100      	movs	r1, #0
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fca3 	bl	8003dec <disk_ioctl>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <sync_fs+0xcc>
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	41615252 	.word	0x41615252
 80044c0:	61417272 	.word	0x61417272

080044c4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	3b02      	subs	r3, #2
 80044d2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	3b02      	subs	r3, #2
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d301      	bcc.n	80044e4 <clust2sect+0x20>
 80044e0:	2300      	movs	r3, #0
 80044e2:	e008      	b.n	80044f6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	895b      	ldrh	r3, [r3, #10]
 80044e8:	461a      	mov	r2, r3
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	fb03 f202 	mul.w	r2, r3, r2
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	4413      	add	r3, r2
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b086      	sub	sp, #24
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d904      	bls.n	8004522 <get_fat+0x20>
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004522:	2301      	movs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e0bb      	b.n	80046a0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004528:	f04f 33ff 	mov.w	r3, #4294967295
 800452c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b03      	cmp	r3, #3
 8004534:	f000 8083 	beq.w	800463e <get_fat+0x13c>
 8004538:	2b03      	cmp	r3, #3
 800453a:	f300 80a7 	bgt.w	800468c <get_fat+0x18a>
 800453e:	2b01      	cmp	r3, #1
 8004540:	d002      	beq.n	8004548 <get_fat+0x46>
 8004542:	2b02      	cmp	r3, #2
 8004544:	d056      	beq.n	80045f4 <get_fat+0xf2>
 8004546:	e0a1      	b.n	800468c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	085b      	lsrs	r3, r3, #1
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	899b      	ldrh	r3, [r3, #12]
 800455e:	4619      	mov	r1, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	fbb3 f3f1 	udiv	r3, r3, r1
 8004566:	4413      	add	r3, r2
 8004568:	4619      	mov	r1, r3
 800456a:	6938      	ldr	r0, [r7, #16]
 800456c:	f7ff ff0c 	bl	8004388 <move_window>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	f040 808d 	bne.w	8004692 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	60fa      	str	r2, [r7, #12]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	8992      	ldrh	r2, [r2, #12]
 8004582:	fbb3 f1f2 	udiv	r1, r3, r2
 8004586:	fb01 f202 	mul.w	r2, r1, r2
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4413      	add	r3, r2
 8004590:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004594:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	899b      	ldrh	r3, [r3, #12]
 800459e:	4619      	mov	r1, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80045a6:	4413      	add	r3, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	6938      	ldr	r0, [r7, #16]
 80045ac:	f7ff feec 	bl	8004388 <move_window>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d16f      	bne.n	8004696 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	899b      	ldrh	r3, [r3, #12]
 80045ba:	461a      	mov	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	fbb3 f1f2 	udiv	r1, r3, r2
 80045c2:	fb01 f202 	mul.w	r2, r1, r2
 80045c6:	1a9b      	subs	r3, r3, r2
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4413      	add	r3, r2
 80045cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	461a      	mov	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <get_fat+0xe8>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	091b      	lsrs	r3, r3, #4
 80045e8:	e002      	b.n	80045f0 <get_fat+0xee>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f0:	617b      	str	r3, [r7, #20]
			break;
 80045f2:	e055      	b.n	80046a0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	899b      	ldrh	r3, [r3, #12]
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	b29b      	uxth	r3, r3
 8004600:	4619      	mov	r1, r3
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	fbb3 f3f1 	udiv	r3, r3, r1
 8004608:	4413      	add	r3, r2
 800460a:	4619      	mov	r1, r3
 800460c:	6938      	ldr	r0, [r7, #16]
 800460e:	f7ff febb 	bl	8004388 <move_window>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d140      	bne.n	800469a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	8992      	ldrh	r2, [r2, #12]
 8004626:	fbb3 f0f2 	udiv	r0, r3, r2
 800462a:	fb00 f202 	mul.w	r2, r0, r2
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	440b      	add	r3, r1
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fbf8 	bl	8003e28 <ld_word>
 8004638:	4603      	mov	r3, r0
 800463a:	617b      	str	r3, [r7, #20]
			break;
 800463c:	e030      	b.n	80046a0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	899b      	ldrh	r3, [r3, #12]
 8004646:	089b      	lsrs	r3, r3, #2
 8004648:	b29b      	uxth	r3, r3
 800464a:	4619      	mov	r1, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004652:	4413      	add	r3, r2
 8004654:	4619      	mov	r1, r3
 8004656:	6938      	ldr	r0, [r7, #16]
 8004658:	f7ff fe96 	bl	8004388 <move_window>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d11d      	bne.n	800469e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	8992      	ldrh	r2, [r2, #12]
 8004670:	fbb3 f0f2 	udiv	r0, r3, r2
 8004674:	fb00 f202 	mul.w	r2, r0, r2
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	440b      	add	r3, r1
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fbeb 	bl	8003e58 <ld_dword>
 8004682:	4603      	mov	r3, r0
 8004684:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004688:	617b      	str	r3, [r7, #20]
			break;
 800468a:	e009      	b.n	80046a0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800468c:	2301      	movs	r3, #1
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e006      	b.n	80046a0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004692:	bf00      	nop
 8004694:	e004      	b.n	80046a0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004696:	bf00      	nop
 8004698:	e002      	b.n	80046a0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800469e:	bf00      	nop
		}
	}

	return val;
 80046a0:	697b      	ldr	r3, [r7, #20]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80046aa:	b590      	push	{r4, r7, lr}
 80046ac:	b089      	sub	sp, #36	; 0x24
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80046b6:	2302      	movs	r3, #2
 80046b8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	f240 8102 	bls.w	80048c6 <put_fat+0x21c>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	f080 80fc 	bcs.w	80048c6 <put_fat+0x21c>
		switch (fs->fs_type) {
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	f000 80b6 	beq.w	8004844 <put_fat+0x19a>
 80046d8:	2b03      	cmp	r3, #3
 80046da:	f300 80fd 	bgt.w	80048d8 <put_fat+0x22e>
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d003      	beq.n	80046ea <put_fat+0x40>
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	f000 8083 	beq.w	80047ee <put_fat+0x144>
 80046e8:	e0f6      	b.n	80048d8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	085b      	lsrs	r3, r3, #1
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4413      	add	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	899b      	ldrh	r3, [r3, #12]
 8004700:	4619      	mov	r1, r3
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	fbb3 f3f1 	udiv	r3, r3, r1
 8004708:	4413      	add	r3, r2
 800470a:	4619      	mov	r1, r3
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f7ff fe3b 	bl	8004388 <move_window>
 8004712:	4603      	mov	r3, r0
 8004714:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004716:	7ffb      	ldrb	r3, [r7, #31]
 8004718:	2b00      	cmp	r3, #0
 800471a:	f040 80d6 	bne.w	80048ca <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	61ba      	str	r2, [r7, #24]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	8992      	ldrh	r2, [r2, #12]
 800472e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004732:	fb00 f202 	mul.w	r2, r0, r2
 8004736:	1a9b      	subs	r3, r3, r2
 8004738:	440b      	add	r3, r1
 800473a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <put_fat+0xb8>
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	b25b      	sxtb	r3, r3
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	b25a      	sxtb	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	b25b      	sxtb	r3, r3
 800475a:	4313      	orrs	r3, r2
 800475c:	b25b      	sxtb	r3, r3
 800475e:	b2db      	uxtb	r3, r3
 8004760:	e001      	b.n	8004766 <put_fat+0xbc>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	899b      	ldrh	r3, [r3, #12]
 8004778:	4619      	mov	r1, r3
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004780:	4413      	add	r3, r2
 8004782:	4619      	mov	r1, r3
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f7ff fdff 	bl	8004388 <move_window>
 800478a:	4603      	mov	r3, r0
 800478c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800478e:	7ffb      	ldrb	r3, [r7, #31]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f040 809c 	bne.w	80048ce <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	899b      	ldrh	r3, [r3, #12]
 80047a0:	461a      	mov	r2, r3
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80047a8:	fb00 f202 	mul.w	r2, r0, r2
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	440b      	add	r3, r1
 80047b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <put_fat+0x11a>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	e00e      	b.n	80047e2 <put_fat+0x138>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	b25b      	sxtb	r3, r3
 80047ca:	f023 030f 	bic.w	r3, r3, #15
 80047ce:	b25a      	sxtb	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	0a1b      	lsrs	r3, r3, #8
 80047d4:	b25b      	sxtb	r3, r3
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	b25b      	sxtb	r3, r3
 80047dc:	4313      	orrs	r3, r2
 80047de:	b25b      	sxtb	r3, r3
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	70da      	strb	r2, [r3, #3]
			break;
 80047ec:	e074      	b.n	80048d8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	899b      	ldrh	r3, [r3, #12]
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	4619      	mov	r1, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004802:	4413      	add	r3, r2
 8004804:	4619      	mov	r1, r3
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff fdbe 	bl	8004388 <move_window>
 800480c:	4603      	mov	r3, r0
 800480e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004810:	7ffb      	ldrb	r3, [r7, #31]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d15d      	bne.n	80048d2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	8992      	ldrh	r2, [r2, #12]
 8004824:	fbb3 f0f2 	udiv	r0, r3, r2
 8004828:	fb00 f202 	mul.w	r2, r0, r2
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	440b      	add	r3, r1
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	b292      	uxth	r2, r2
 8004834:	4611      	mov	r1, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fb31 	bl	8003e9e <st_word>
			fs->wflag = 1;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	70da      	strb	r2, [r3, #3]
			break;
 8004842:	e049      	b.n	80048d8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	899b      	ldrh	r3, [r3, #12]
 800484c:	089b      	lsrs	r3, r3, #2
 800484e:	b29b      	uxth	r3, r3
 8004850:	4619      	mov	r1, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	fbb3 f3f1 	udiv	r3, r3, r1
 8004858:	4413      	add	r3, r2
 800485a:	4619      	mov	r1, r3
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f7ff fd93 	bl	8004388 <move_window>
 8004862:	4603      	mov	r3, r0
 8004864:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004866:	7ffb      	ldrb	r3, [r7, #31]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d134      	bne.n	80048d6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	8992      	ldrh	r2, [r2, #12]
 8004880:	fbb3 f0f2 	udiv	r0, r3, r2
 8004884:	fb00 f202 	mul.w	r2, r0, r2
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	440b      	add	r3, r1
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff fae3 	bl	8003e58 <ld_dword>
 8004892:	4603      	mov	r3, r0
 8004894:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004898:	4323      	orrs	r3, r4
 800489a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	8992      	ldrh	r2, [r2, #12]
 80048aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80048ae:	fb00 f202 	mul.w	r2, r0, r2
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	440b      	add	r3, r1
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff fb0b 	bl	8003ed4 <st_dword>
			fs->wflag = 1;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	70da      	strb	r2, [r3, #3]
			break;
 80048c4:	e008      	b.n	80048d8 <put_fat+0x22e>
		}
	}
 80048c6:	bf00      	nop
 80048c8:	e006      	b.n	80048d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80048ca:	bf00      	nop
 80048cc:	e004      	b.n	80048d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80048ce:	bf00      	nop
 80048d0:	e002      	b.n	80048d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80048d2:	bf00      	nop
 80048d4:	e000      	b.n	80048d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80048d6:	bf00      	nop
	return res;
 80048d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3724      	adds	r7, #36	; 0x24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd90      	pop	{r4, r7, pc}

080048e2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b088      	sub	sp, #32
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d904      	bls.n	8004908 <remove_chain+0x26>
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	429a      	cmp	r2, r3
 8004906:	d301      	bcc.n	800490c <remove_chain+0x2a>
 8004908:	2302      	movs	r3, #2
 800490a:	e04b      	b.n	80049a4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00c      	beq.n	800492c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004912:	f04f 32ff 	mov.w	r2, #4294967295
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	69b8      	ldr	r0, [r7, #24]
 800491a:	f7ff fec6 	bl	80046aa <put_fat>
 800491e:	4603      	mov	r3, r0
 8004920:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004922:	7ffb      	ldrb	r3, [r7, #31]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <remove_chain+0x4a>
 8004928:	7ffb      	ldrb	r3, [r7, #31]
 800492a:	e03b      	b.n	80049a4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7ff fde7 	bl	8004502 <get_fat>
 8004934:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d031      	beq.n	80049a0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <remove_chain+0x64>
 8004942:	2302      	movs	r3, #2
 8004944:	e02e      	b.n	80049a4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d101      	bne.n	8004952 <remove_chain+0x70>
 800494e:	2301      	movs	r3, #1
 8004950:	e028      	b.n	80049a4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004952:	2200      	movs	r2, #0
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	69b8      	ldr	r0, [r7, #24]
 8004958:	f7ff fea7 	bl	80046aa <put_fat>
 800495c:	4603      	mov	r3, r0
 800495e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004960:	7ffb      	ldrb	r3, [r7, #31]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <remove_chain+0x88>
 8004966:	7ffb      	ldrb	r3, [r7, #31]
 8004968:	e01c      	b.n	80049a4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	695a      	ldr	r2, [r3, #20]
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	3b02      	subs	r3, #2
 8004974:	429a      	cmp	r2, r3
 8004976:	d20b      	bcs.n	8004990 <remove_chain+0xae>
			fs->free_clst++;
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	791b      	ldrb	r3, [r3, #4]
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	b2da      	uxtb	r2, r3
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	429a      	cmp	r2, r3
 800499c:	d3c6      	bcc.n	800492c <remove_chain+0x4a>
 800499e:	e000      	b.n	80049a2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80049a0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3720      	adds	r7, #32
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10d      	bne.n	80049de <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d004      	beq.n	80049d8 <create_chain+0x2c>
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d31b      	bcc.n	8004a10 <create_chain+0x64>
 80049d8:	2301      	movs	r3, #1
 80049da:	61bb      	str	r3, [r7, #24]
 80049dc:	e018      	b.n	8004a10 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80049de:	6839      	ldr	r1, [r7, #0]
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff fd8e 	bl	8004502 <get_fat>
 80049e6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d801      	bhi.n	80049f2 <create_chain+0x46>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e070      	b.n	8004ad4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f8:	d101      	bne.n	80049fe <create_chain+0x52>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	e06a      	b.n	8004ad4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d201      	bcs.n	8004a0c <create_chain+0x60>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	e063      	b.n	8004ad4 <create_chain+0x128>
		scl = clst;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	3301      	adds	r3, #1
 8004a18:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d307      	bcc.n	8004a34 <create_chain+0x88>
				ncl = 2;
 8004a24:	2302      	movs	r3, #2
 8004a26:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d901      	bls.n	8004a34 <create_chain+0x88>
 8004a30:	2300      	movs	r3, #0
 8004a32:	e04f      	b.n	8004ad4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004a34:	69f9      	ldr	r1, [r7, #28]
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff fd63 	bl	8004502 <get_fat>
 8004a3c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00e      	beq.n	8004a62 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d003      	beq.n	8004a52 <create_chain+0xa6>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d101      	bne.n	8004a56 <create_chain+0xaa>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	e03e      	b.n	8004ad4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d1da      	bne.n	8004a14 <create_chain+0x68>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e038      	b.n	8004ad4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004a62:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004a64:	f04f 32ff 	mov.w	r2, #4294967295
 8004a68:	69f9      	ldr	r1, [r7, #28]
 8004a6a:	6938      	ldr	r0, [r7, #16]
 8004a6c:	f7ff fe1d 	bl	80046aa <put_fat>
 8004a70:	4603      	mov	r3, r0
 8004a72:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <create_chain+0xe2>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d006      	beq.n	8004a8e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	6839      	ldr	r1, [r7, #0]
 8004a84:	6938      	ldr	r0, [r7, #16]
 8004a86:	f7ff fe10 	bl	80046aa <put_fat>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d116      	bne.n	8004ac2 <create_chain+0x116>
		fs->last_clst = ncl;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	3b02      	subs	r3, #2
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d804      	bhi.n	8004ab2 <create_chain+0x106>
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	1e5a      	subs	r2, r3, #1
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	791b      	ldrb	r3, [r3, #4]
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	711a      	strb	r2, [r3, #4]
 8004ac0:	e007      	b.n	8004ad2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004ac2:	7dfb      	ldrb	r3, [r7, #23]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d102      	bne.n	8004ace <create_chain+0x122>
 8004ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8004acc:	e000      	b.n	8004ad0 <create_chain+0x124>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004ad2:	69fb      	ldr	r3, [r7, #28]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	3304      	adds	r3, #4
 8004af2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	899b      	ldrh	r3, [r3, #12]
 8004af8:	461a      	mov	r2, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	8952      	ldrh	r2, [r2, #10]
 8004b04:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b08:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1d1a      	adds	r2, r3, #4
 8004b0e:	613a      	str	r2, [r7, #16]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <clmt_clust+0x42>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e010      	b.n	8004b40 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d307      	bcc.n	8004b36 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	3304      	adds	r3, #4
 8004b32:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004b34:	e7e9      	b.n	8004b0a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004b36:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	4413      	add	r3, r2
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b62:	d204      	bcs.n	8004b6e <dir_sdi+0x22>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e071      	b.n	8004c56 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <dir_sdi+0x46>
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d902      	bls.n	8004b92 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10c      	bne.n	8004bb2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	8912      	ldrh	r2, [r2, #8]
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d301      	bcc.n	8004ba8 <dir_sdi+0x5c>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e056      	b.n	8004c56 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	61da      	str	r2, [r3, #28]
 8004bb0:	e02d      	b.n	8004c0e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	895b      	ldrh	r3, [r3, #10]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	899b      	ldrh	r3, [r3, #12]
 8004bbc:	fb02 f303 	mul.w	r3, r2, r3
 8004bc0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004bc2:	e019      	b.n	8004bf8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6979      	ldr	r1, [r7, #20]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff fc9a 	bl	8004502 <get_fat>
 8004bce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d101      	bne.n	8004bdc <dir_sdi+0x90>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e03c      	b.n	8004c56 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d904      	bls.n	8004bec <dir_sdi+0xa0>
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d301      	bcc.n	8004bf0 <dir_sdi+0xa4>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e032      	b.n	8004c56 <dir_sdi+0x10a>
			ofs -= csz;
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d2e1      	bcs.n	8004bc4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004c00:	6979      	ldr	r1, [r7, #20]
 8004c02:	6938      	ldr	r0, [r7, #16]
 8004c04:	f7ff fc5e 	bl	80044c4 <clust2sect>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <dir_sdi+0xd4>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e01a      	b.n	8004c56 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	899b      	ldrh	r3, [r3, #12]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c30:	441a      	add	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	899b      	ldrh	r3, [r3, #12]
 8004c40:	461a      	mov	r2, r3
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c48:	fb00 f202 	mul.w	r2, r0, r2
 8004c4c:	1a9b      	subs	r3, r3, r2
 8004c4e:	18ca      	adds	r2, r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b086      	sub	sp, #24
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	3320      	adds	r3, #32
 8004c74:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <dir_next+0x28>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c84:	d301      	bcc.n	8004c8a <dir_next+0x2c>
 8004c86:	2304      	movs	r3, #4
 8004c88:	e0bb      	b.n	8004e02 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	899b      	ldrh	r3, [r3, #12]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c96:	fb01 f202 	mul.w	r2, r1, r2
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f040 809d 	bne.w	8004ddc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10b      	bne.n	8004ccc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	8912      	ldrh	r2, [r2, #8]
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	f0c0 808d 	bcc.w	8004ddc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	61da      	str	r2, [r3, #28]
 8004cc8:	2304      	movs	r3, #4
 8004cca:	e09a      	b.n	8004e02 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	899b      	ldrh	r3, [r3, #12]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	8952      	ldrh	r2, [r2, #10]
 8004cdc:	3a01      	subs	r2, #1
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d17b      	bne.n	8004ddc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	4619      	mov	r1, r3
 8004cec:	4610      	mov	r0, r2
 8004cee:	f7ff fc08 	bl	8004502 <get_fat>
 8004cf2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d801      	bhi.n	8004cfe <dir_next+0xa0>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	e081      	b.n	8004e02 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d101      	bne.n	8004d0a <dir_next+0xac>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e07b      	b.n	8004e02 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d359      	bcc.n	8004dc8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d104      	bne.n	8004d24 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	61da      	str	r2, [r3, #28]
 8004d20:	2304      	movs	r3, #4
 8004d22:	e06e      	b.n	8004e02 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	f7ff fe3d 	bl	80049ac <create_chain>
 8004d32:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <dir_next+0xe0>
 8004d3a:	2307      	movs	r3, #7
 8004d3c:	e061      	b.n	8004e02 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <dir_next+0xea>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e05c      	b.n	8004e02 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d101      	bne.n	8004d54 <dir_next+0xf6>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e056      	b.n	8004e02 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff fad3 	bl	8004300 <sync_window>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <dir_next+0x106>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e04e      	b.n	8004e02 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	899b      	ldrh	r3, [r3, #12]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	2100      	movs	r1, #0
 8004d72:	f7ff f8fc 	bl	8003f6e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004d76:	2300      	movs	r3, #0
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	6979      	ldr	r1, [r7, #20]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f7ff fba1 	bl	80044c4 <clust2sect>
 8004d82:	4602      	mov	r2, r0
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
 8004d88:	e012      	b.n	8004db0 <dir_next+0x152>
						fs->wflag = 1;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7ff fab5 	bl	8004300 <sync_window>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <dir_next+0x142>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e030      	b.n	8004e02 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	3301      	adds	r3, #1
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	895b      	ldrh	r3, [r3, #10]
 8004db4:	461a      	mov	r2, r3
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d3e6      	bcc.n	8004d8a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad2      	subs	r2, r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004dce:	6979      	ldr	r1, [r7, #20]
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f7ff fb77 	bl	80044c4 <clust2sect>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	899b      	ldrh	r3, [r3, #12]
 8004dec:	461a      	mov	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	fbb3 f0f2 	udiv	r0, r3, r2
 8004df4:	fb00 f202 	mul.w	r2, r0, r2
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	18ca      	adds	r2, r1, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b086      	sub	sp, #24
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff fe95 	bl	8004b4c <dir_sdi>
 8004e22:	4603      	mov	r3, r0
 8004e24:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004e26:	7dfb      	ldrb	r3, [r7, #23]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d12b      	bne.n	8004e84 <dir_alloc+0x7a>
		n = 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	4619      	mov	r1, r3
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7ff faa6 	bl	8004388 <move_window>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d11d      	bne.n	8004e82 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2be5      	cmp	r3, #229	; 0xe5
 8004e4e:	d004      	beq.n	8004e5a <dir_alloc+0x50>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d107      	bne.n	8004e6a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d102      	bne.n	8004e6e <dir_alloc+0x64>
 8004e68:	e00c      	b.n	8004e84 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004e6e:	2101      	movs	r1, #1
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fef4 	bl	8004c5e <dir_next>
 8004e76:	4603      	mov	r3, r0
 8004e78:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004e7a:	7dfb      	ldrb	r3, [r7, #23]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0d7      	beq.n	8004e30 <dir_alloc+0x26>
 8004e80:	e000      	b.n	8004e84 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004e82:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004e84:	7dfb      	ldrb	r3, [r7, #23]
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d101      	bne.n	8004e8e <dir_alloc+0x84>
 8004e8a:	2307      	movs	r3, #7
 8004e8c:	75fb      	strb	r3, [r7, #23]
	return res;
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	331a      	adds	r3, #26
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fe ffbe 	bl	8003e28 <ld_word>
 8004eac:	4603      	mov	r3, r0
 8004eae:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d109      	bne.n	8004ecc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	3314      	adds	r3, #20
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe ffb3 	bl	8003e28 <ld_word>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	041b      	lsls	r3, r3, #16
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	331a      	adds	r3, #26
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	b292      	uxth	r2, r2
 8004eea:	4611      	mov	r1, r2
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fe ffd6 	bl	8003e9e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d109      	bne.n	8004f0e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f103 0214 	add.w	r2, r3, #20
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	0c1b      	lsrs	r3, r3, #16
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f7fe ffc8 	bl	8003e9e <st_word>
	}
}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b086      	sub	sp, #24
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004f24:	2100      	movs	r1, #0
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fe10 	bl	8004b4c <dir_sdi>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004f30:	7dfb      	ldrb	r3, [r7, #23]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <dir_find+0x24>
 8004f36:	7dfb      	ldrb	r3, [r7, #23]
 8004f38:	e03e      	b.n	8004fb8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6938      	ldr	r0, [r7, #16]
 8004f42:	f7ff fa21 	bl	8004388 <move_window>
 8004f46:	4603      	mov	r3, r0
 8004f48:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d12f      	bne.n	8004fb0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d102      	bne.n	8004f64 <dir_find+0x4e>
 8004f5e:	2304      	movs	r3, #4
 8004f60:	75fb      	strb	r3, [r7, #23]
 8004f62:	e028      	b.n	8004fb6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	330b      	adds	r3, #11
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	330b      	adds	r3, #11
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10a      	bne.n	8004f9c <dir_find+0x86>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a18      	ldr	r0, [r3, #32]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3324      	adds	r3, #36	; 0x24
 8004f8e:	220b      	movs	r2, #11
 8004f90:	4619      	mov	r1, r3
 8004f92:	f7ff f807 	bl	8003fa4 <mem_cmp>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00b      	beq.n	8004fb4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff fe5d 	bl	8004c5e <dir_next>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004fa8:	7dfb      	ldrb	r3, [r7, #23]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0c5      	beq.n	8004f3a <dir_find+0x24>
 8004fae:	e002      	b.n	8004fb6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004fb0:	bf00      	nop
 8004fb2:	e000      	b.n	8004fb6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004fb4:	bf00      	nop

	return res;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004fce:	2101      	movs	r1, #1
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff ff1a 	bl	8004e0a <dir_alloc>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d11c      	bne.n	800501a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	68b8      	ldr	r0, [r7, #8]
 8004fe8:	f7ff f9ce 	bl	8004388 <move_window>
 8004fec:	4603      	mov	r3, r0
 8004fee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d111      	bne.n	800501a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe ffb5 	bl	8003f6e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a18      	ldr	r0, [r3, #32]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3324      	adds	r3, #36	; 0x24
 800500c:	220b      	movs	r2, #11
 800500e:	4619      	mov	r1, r3
 8005010:	f7fe ff8c 	bl	8003f2c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2201      	movs	r2, #1
 8005018:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800501a:	7bfb      	ldrb	r3, [r7, #15]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3324      	adds	r3, #36	; 0x24
 8005038:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800503a:	220b      	movs	r2, #11
 800503c:	2120      	movs	r1, #32
 800503e:	68b8      	ldr	r0, [r7, #8]
 8005040:	f7fe ff95 	bl	8003f6e <mem_set>
	si = i = 0; ni = 8;
 8005044:	2300      	movs	r3, #0
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	61fb      	str	r3, [r7, #28]
 800504c:	2308      	movs	r3, #8
 800504e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	61fa      	str	r2, [r7, #28]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800505e:	7efb      	ldrb	r3, [r7, #27]
 8005060:	2b20      	cmp	r3, #32
 8005062:	d94e      	bls.n	8005102 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005064:	7efb      	ldrb	r3, [r7, #27]
 8005066:	2b2f      	cmp	r3, #47	; 0x2f
 8005068:	d006      	beq.n	8005078 <create_name+0x54>
 800506a:	7efb      	ldrb	r3, [r7, #27]
 800506c:	2b5c      	cmp	r3, #92	; 0x5c
 800506e:	d110      	bne.n	8005092 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005070:	e002      	b.n	8005078 <create_name+0x54>
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3301      	adds	r3, #1
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	4413      	add	r3, r2
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b2f      	cmp	r3, #47	; 0x2f
 8005082:	d0f6      	beq.n	8005072 <create_name+0x4e>
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b5c      	cmp	r3, #92	; 0x5c
 800508e:	d0f0      	beq.n	8005072 <create_name+0x4e>
			break;
 8005090:	e038      	b.n	8005104 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005092:	7efb      	ldrb	r3, [r7, #27]
 8005094:	2b2e      	cmp	r3, #46	; 0x2e
 8005096:	d003      	beq.n	80050a0 <create_name+0x7c>
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	429a      	cmp	r2, r3
 800509e:	d30c      	bcc.n	80050ba <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b0b      	cmp	r3, #11
 80050a4:	d002      	beq.n	80050ac <create_name+0x88>
 80050a6:	7efb      	ldrb	r3, [r7, #27]
 80050a8:	2b2e      	cmp	r3, #46	; 0x2e
 80050aa:	d001      	beq.n	80050b0 <create_name+0x8c>
 80050ac:	2306      	movs	r3, #6
 80050ae:	e044      	b.n	800513a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80050b0:	2308      	movs	r3, #8
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	230b      	movs	r3, #11
 80050b6:	617b      	str	r3, [r7, #20]
			continue;
 80050b8:	e022      	b.n	8005100 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80050ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	da04      	bge.n	80050cc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80050c2:	7efb      	ldrb	r3, [r7, #27]
 80050c4:	3b80      	subs	r3, #128	; 0x80
 80050c6:	4a1f      	ldr	r2, [pc, #124]	; (8005144 <create_name+0x120>)
 80050c8:	5cd3      	ldrb	r3, [r2, r3]
 80050ca:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80050cc:	7efb      	ldrb	r3, [r7, #27]
 80050ce:	4619      	mov	r1, r3
 80050d0:	481d      	ldr	r0, [pc, #116]	; (8005148 <create_name+0x124>)
 80050d2:	f7fe ff8e 	bl	8003ff2 <chk_chr>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <create_name+0xbc>
 80050dc:	2306      	movs	r3, #6
 80050de:	e02c      	b.n	800513a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80050e0:	7efb      	ldrb	r3, [r7, #27]
 80050e2:	2b60      	cmp	r3, #96	; 0x60
 80050e4:	d905      	bls.n	80050f2 <create_name+0xce>
 80050e6:	7efb      	ldrb	r3, [r7, #27]
 80050e8:	2b7a      	cmp	r3, #122	; 0x7a
 80050ea:	d802      	bhi.n	80050f2 <create_name+0xce>
 80050ec:	7efb      	ldrb	r3, [r7, #27]
 80050ee:	3b20      	subs	r3, #32
 80050f0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	613a      	str	r2, [r7, #16]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	4413      	add	r3, r2
 80050fc:	7efa      	ldrb	r2, [r7, #27]
 80050fe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005100:	e7a6      	b.n	8005050 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005102:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	441a      	add	r2, r3
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <create_name+0xf4>
 8005114:	2306      	movs	r3, #6
 8005116:	e010      	b.n	800513a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2be5      	cmp	r3, #229	; 0xe5
 800511e:	d102      	bne.n	8005126 <create_name+0x102>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2205      	movs	r2, #5
 8005124:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005126:	7efb      	ldrb	r3, [r7, #27]
 8005128:	2b20      	cmp	r3, #32
 800512a:	d801      	bhi.n	8005130 <create_name+0x10c>
 800512c:	2204      	movs	r2, #4
 800512e:	e000      	b.n	8005132 <create_name+0x10e>
 8005130:	2200      	movs	r2, #0
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	330b      	adds	r3, #11
 8005136:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005138:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800513a:	4618      	mov	r0, r3
 800513c:	3720      	adds	r7, #32
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	08012b5c 	.word	0x08012b5c
 8005148:	080129c4 	.word	0x080129c4

0800514c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005160:	e002      	b.n	8005168 <follow_path+0x1c>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	3301      	adds	r3, #1
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b2f      	cmp	r3, #47	; 0x2f
 800516e:	d0f8      	beq.n	8005162 <follow_path+0x16>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b5c      	cmp	r3, #92	; 0x5c
 8005176:	d0f4      	beq.n	8005162 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2200      	movs	r2, #0
 800517c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b1f      	cmp	r3, #31
 8005184:	d80a      	bhi.n	800519c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2280      	movs	r2, #128	; 0x80
 800518a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800518e:	2100      	movs	r1, #0
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff fcdb 	bl	8004b4c <dir_sdi>
 8005196:	4603      	mov	r3, r0
 8005198:	75fb      	strb	r3, [r7, #23]
 800519a:	e048      	b.n	800522e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800519c:	463b      	mov	r3, r7
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff ff3f 	bl	8005024 <create_name>
 80051a6:	4603      	mov	r3, r0
 80051a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d139      	bne.n	8005224 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff feb0 	bl	8004f16 <dir_find>
 80051b6:	4603      	mov	r3, r0
 80051b8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80051c0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80051c2:	7dfb      	ldrb	r3, [r7, #23]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d12c      	bne.n	8005228 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80051ce:	7afb      	ldrb	r3, [r7, #11]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d127      	bne.n	8005228 <follow_path+0xdc>
 80051d8:	2305      	movs	r3, #5
 80051da:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80051dc:	e024      	b.n	8005228 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80051de:	7afb      	ldrb	r3, [r7, #11]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d121      	bne.n	800522c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	799b      	ldrb	r3, [r3, #6]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d102      	bne.n	80051fa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80051f4:	2305      	movs	r3, #5
 80051f6:	75fb      	strb	r3, [r7, #23]
 80051f8:	e019      	b.n	800522e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	8992      	ldrh	r2, [r2, #12]
 8005208:	fbb3 f0f2 	udiv	r0, r3, r2
 800520c:	fb00 f202 	mul.w	r2, r0, r2
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	440b      	add	r3, r1
 8005214:	4619      	mov	r1, r3
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7ff fe3e 	bl	8004e98 <ld_clust>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005222:	e7bb      	b.n	800519c <follow_path+0x50>
			if (res != FR_OK) break;
 8005224:	bf00      	nop
 8005226:	e002      	b.n	800522e <follow_path+0xe2>
				break;
 8005228:	bf00      	nop
 800522a:	e000      	b.n	800522e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800522c:	bf00      	nop
			}
		}
	}

	return res;
 800522e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005240:	f04f 33ff 	mov.w	r3, #4294967295
 8005244:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d031      	beq.n	80052b2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	e002      	b.n	800525c <get_ldnumber+0x24>
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	3301      	adds	r3, #1
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b20      	cmp	r3, #32
 8005262:	d903      	bls.n	800526c <get_ldnumber+0x34>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b3a      	cmp	r3, #58	; 0x3a
 800526a:	d1f4      	bne.n	8005256 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b3a      	cmp	r3, #58	; 0x3a
 8005272:	d11c      	bne.n	80052ae <get_ldnumber+0x76>
			tp = *path;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	60fa      	str	r2, [r7, #12]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	3b30      	subs	r3, #48	; 0x30
 8005284:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b09      	cmp	r3, #9
 800528a:	d80e      	bhi.n	80052aa <get_ldnumber+0x72>
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	429a      	cmp	r2, r3
 8005292:	d10a      	bne.n	80052aa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d107      	bne.n	80052aa <get_ldnumber+0x72>
					vol = (int)i;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	3301      	adds	r3, #1
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	e002      	b.n	80052b4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80052ae:	2300      	movs	r3, #0
 80052b0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80052b2:	693b      	ldr	r3, [r7, #16]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	70da      	strb	r2, [r3, #3]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f04f 32ff 	mov.w	r2, #4294967295
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff f854 	bl	8004388 <move_window>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <check_fs+0x2a>
 80052e6:	2304      	movs	r3, #4
 80052e8:	e038      	b.n	800535c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3334      	adds	r3, #52	; 0x34
 80052ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fd98 	bl	8003e28 <ld_word>
 80052f8:	4603      	mov	r3, r0
 80052fa:	461a      	mov	r2, r3
 80052fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005300:	429a      	cmp	r2, r3
 8005302:	d001      	beq.n	8005308 <check_fs+0x48>
 8005304:	2303      	movs	r3, #3
 8005306:	e029      	b.n	800535c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800530e:	2be9      	cmp	r3, #233	; 0xe9
 8005310:	d009      	beq.n	8005326 <check_fs+0x66>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005318:	2beb      	cmp	r3, #235	; 0xeb
 800531a:	d11e      	bne.n	800535a <check_fs+0x9a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005322:	2b90      	cmp	r3, #144	; 0x90
 8005324:	d119      	bne.n	800535a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3334      	adds	r3, #52	; 0x34
 800532a:	3336      	adds	r3, #54	; 0x36
 800532c:	4618      	mov	r0, r3
 800532e:	f7fe fd93 	bl	8003e58 <ld_dword>
 8005332:	4603      	mov	r3, r0
 8005334:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005338:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <check_fs+0xa4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d101      	bne.n	8005342 <check_fs+0x82>
 800533e:	2300      	movs	r3, #0
 8005340:	e00c      	b.n	800535c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3334      	adds	r3, #52	; 0x34
 8005346:	3352      	adds	r3, #82	; 0x52
 8005348:	4618      	mov	r0, r3
 800534a:	f7fe fd85 	bl	8003e58 <ld_dword>
 800534e:	4603      	mov	r3, r0
 8005350:	4a05      	ldr	r2, [pc, #20]	; (8005368 <check_fs+0xa8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d101      	bne.n	800535a <check_fs+0x9a>
 8005356:	2300      	movs	r3, #0
 8005358:	e000      	b.n	800535c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800535a:	2302      	movs	r3, #2
}
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	00544146 	.word	0x00544146
 8005368:	33544146 	.word	0x33544146

0800536c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b096      	sub	sp, #88	; 0x58
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	4613      	mov	r3, r2
 8005378:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff ff59 	bl	8005238 <get_ldnumber>
 8005386:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538a:	2b00      	cmp	r3, #0
 800538c:	da01      	bge.n	8005392 <find_volume+0x26>
 800538e:	230b      	movs	r3, #11
 8005390:	e262      	b.n	8005858 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005392:	4a9f      	ldr	r2, [pc, #636]	; (8005610 <find_volume+0x2a4>)
 8005394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800539a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800539c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <find_volume+0x3a>
 80053a2:	230c      	movs	r3, #12
 80053a4:	e258      	b.n	8005858 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	f023 0301 	bic.w	r3, r3, #1
 80053b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01a      	beq.n	80053f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80053bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053be:	785b      	ldrb	r3, [r3, #1]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fe fc93 	bl	8003cec <disk_status>
 80053c6:	4603      	mov	r3, r0
 80053c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80053cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10c      	bne.n	80053f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <find_volume+0x82>
 80053de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80053ea:	230a      	movs	r3, #10
 80053ec:	e234      	b.n	8005858 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80053ee:	2300      	movs	r3, #0
 80053f0:	e232      	b.n	8005858 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	2200      	movs	r2, #0
 80053f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80053f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	4618      	mov	r0, r3
 8005406:	f7fe fc8b 	bl	8003d20 <disk_initialize>
 800540a:	4603      	mov	r3, r0
 800540c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005410:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800541c:	2303      	movs	r3, #3
 800541e:	e21b      	b.n	8005858 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <find_volume+0xca>
 8005426:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005432:	230a      	movs	r3, #10
 8005434:	e210      	b.n	8005858 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005438:	7858      	ldrb	r0, [r3, #1]
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	330c      	adds	r3, #12
 800543e:	461a      	mov	r2, r3
 8005440:	2102      	movs	r1, #2
 8005442:	f7fe fcd3 	bl	8003dec <disk_ioctl>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <find_volume+0xe4>
 800544c:	2301      	movs	r3, #1
 800544e:	e203      	b.n	8005858 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	899b      	ldrh	r3, [r3, #12]
 8005454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005458:	d80d      	bhi.n	8005476 <find_volume+0x10a>
 800545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545c:	899b      	ldrh	r3, [r3, #12]
 800545e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005462:	d308      	bcc.n	8005476 <find_volume+0x10a>
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	899b      	ldrh	r3, [r3, #12]
 8005468:	461a      	mov	r2, r3
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	899b      	ldrh	r3, [r3, #12]
 800546e:	3b01      	subs	r3, #1
 8005470:	4013      	ands	r3, r2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <find_volume+0x10e>
 8005476:	2301      	movs	r3, #1
 8005478:	e1ee      	b.n	8005858 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800547e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005482:	f7ff ff1d 	bl	80052c0 <check_fs>
 8005486:	4603      	mov	r3, r0
 8005488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800548c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005490:	2b02      	cmp	r3, #2
 8005492:	d149      	bne.n	8005528 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005494:	2300      	movs	r3, #0
 8005496:	643b      	str	r3, [r7, #64]	; 0x40
 8005498:	e01e      	b.n	80054d8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80054a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80054a8:	4413      	add	r3, r2
 80054aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80054ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ae:	3304      	adds	r3, #4
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d006      	beq.n	80054c4 <find_volume+0x158>
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	3308      	adds	r3, #8
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fe fccc 	bl	8003e58 <ld_dword>
 80054c0:	4602      	mov	r2, r0
 80054c2:	e000      	b.n	80054c6 <find_volume+0x15a>
 80054c4:	2200      	movs	r2, #0
 80054c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	3358      	adds	r3, #88	; 0x58
 80054cc:	443b      	add	r3, r7
 80054ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80054d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d4:	3301      	adds	r3, #1
 80054d6:	643b      	str	r3, [r7, #64]	; 0x40
 80054d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d9dd      	bls.n	800549a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80054de:	2300      	movs	r3, #0
 80054e0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80054e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <find_volume+0x182>
 80054e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ea:	3b01      	subs	r3, #1
 80054ec:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80054ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	3358      	adds	r3, #88	; 0x58
 80054f4:	443b      	add	r3, r7
 80054f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80054fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80054fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <find_volume+0x1a2>
 8005502:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005504:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005506:	f7ff fedb 	bl	80052c0 <check_fs>
 800550a:	4603      	mov	r3, r0
 800550c:	e000      	b.n	8005510 <find_volume+0x1a4>
 800550e:	2303      	movs	r3, #3
 8005510:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005514:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005518:	2b01      	cmp	r3, #1
 800551a:	d905      	bls.n	8005528 <find_volume+0x1bc>
 800551c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800551e:	3301      	adds	r3, #1
 8005520:	643b      	str	r3, [r7, #64]	; 0x40
 8005522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005524:	2b03      	cmp	r3, #3
 8005526:	d9e2      	bls.n	80054ee <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005528:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800552c:	2b04      	cmp	r3, #4
 800552e:	d101      	bne.n	8005534 <find_volume+0x1c8>
 8005530:	2301      	movs	r3, #1
 8005532:	e191      	b.n	8005858 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005534:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005538:	2b01      	cmp	r3, #1
 800553a:	d901      	bls.n	8005540 <find_volume+0x1d4>
 800553c:	230d      	movs	r3, #13
 800553e:	e18b      	b.n	8005858 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	3334      	adds	r3, #52	; 0x34
 8005544:	330b      	adds	r3, #11
 8005546:	4618      	mov	r0, r3
 8005548:	f7fe fc6e 	bl	8003e28 <ld_word>
 800554c:	4603      	mov	r3, r0
 800554e:	461a      	mov	r2, r3
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	899b      	ldrh	r3, [r3, #12]
 8005554:	429a      	cmp	r2, r3
 8005556:	d001      	beq.n	800555c <find_volume+0x1f0>
 8005558:	230d      	movs	r3, #13
 800555a:	e17d      	b.n	8005858 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	3334      	adds	r3, #52	; 0x34
 8005560:	3316      	adds	r3, #22
 8005562:	4618      	mov	r0, r3
 8005564:	f7fe fc60 	bl	8003e28 <ld_word>
 8005568:	4603      	mov	r3, r0
 800556a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800556c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <find_volume+0x214>
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	3334      	adds	r3, #52	; 0x34
 8005576:	3324      	adds	r3, #36	; 0x24
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe fc6d 	bl	8003e58 <ld_dword>
 800557e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005584:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	789b      	ldrb	r3, [r3, #2]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d005      	beq.n	80055a4 <find_volume+0x238>
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	789b      	ldrb	r3, [r3, #2]
 800559c:	2b02      	cmp	r3, #2
 800559e:	d001      	beq.n	80055a4 <find_volume+0x238>
 80055a0:	230d      	movs	r3, #13
 80055a2:	e159      	b.n	8005858 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	789b      	ldrb	r3, [r3, #2]
 80055a8:	461a      	mov	r2, r3
 80055aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ac:	fb02 f303 	mul.w	r3, r2, r3
 80055b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	895b      	ldrh	r3, [r3, #10]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d008      	beq.n	80055d8 <find_volume+0x26c>
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	895b      	ldrh	r3, [r3, #10]
 80055ca:	461a      	mov	r2, r3
 80055cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ce:	895b      	ldrh	r3, [r3, #10]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	4013      	ands	r3, r2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <find_volume+0x270>
 80055d8:	230d      	movs	r3, #13
 80055da:	e13d      	b.n	8005858 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055de:	3334      	adds	r3, #52	; 0x34
 80055e0:	3311      	adds	r3, #17
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe fc20 	bl	8003e28 <ld_word>
 80055e8:	4603      	mov	r3, r0
 80055ea:	461a      	mov	r2, r3
 80055ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	891b      	ldrh	r3, [r3, #8]
 80055f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055f6:	8992      	ldrh	r2, [r2, #12]
 80055f8:	0952      	lsrs	r2, r2, #5
 80055fa:	b292      	uxth	r2, r2
 80055fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005600:	fb01 f202 	mul.w	r2, r1, r2
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	b29b      	uxth	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <find_volume+0x2a8>
 800560c:	230d      	movs	r3, #13
 800560e:	e123      	b.n	8005858 <find_volume+0x4ec>
 8005610:	200053c4 	.word	0x200053c4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005616:	3334      	adds	r3, #52	; 0x34
 8005618:	3313      	adds	r3, #19
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe fc04 	bl	8003e28 <ld_word>
 8005620:	4603      	mov	r3, r0
 8005622:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <find_volume+0x2cc>
 800562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562c:	3334      	adds	r3, #52	; 0x34
 800562e:	3320      	adds	r3, #32
 8005630:	4618      	mov	r0, r3
 8005632:	f7fe fc11 	bl	8003e58 <ld_dword>
 8005636:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563a:	3334      	adds	r3, #52	; 0x34
 800563c:	330e      	adds	r3, #14
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe fbf2 	bl	8003e28 <ld_word>
 8005644:	4603      	mov	r3, r0
 8005646:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005648:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <find_volume+0x2e6>
 800564e:	230d      	movs	r3, #13
 8005650:	e102      	b.n	8005858 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005652:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005656:	4413      	add	r3, r2
 8005658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800565a:	8911      	ldrh	r1, [r2, #8]
 800565c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800565e:	8992      	ldrh	r2, [r2, #12]
 8005660:	0952      	lsrs	r2, r2, #5
 8005662:	b292      	uxth	r2, r2
 8005664:	fbb1 f2f2 	udiv	r2, r1, r2
 8005668:	b292      	uxth	r2, r2
 800566a:	4413      	add	r3, r2
 800566c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800566e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	429a      	cmp	r2, r3
 8005674:	d201      	bcs.n	800567a <find_volume+0x30e>
 8005676:	230d      	movs	r3, #13
 8005678:	e0ee      	b.n	8005858 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800567a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005682:	8952      	ldrh	r2, [r2, #10]
 8005684:	fbb3 f3f2 	udiv	r3, r3, r2
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <find_volume+0x328>
 8005690:	230d      	movs	r3, #13
 8005692:	e0e1      	b.n	8005858 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8005694:	2303      	movs	r3, #3
 8005696:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d802      	bhi.n	80056aa <find_volume+0x33e>
 80056a4:	2302      	movs	r3, #2
 80056a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d802      	bhi.n	80056ba <find_volume+0x34e>
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	1c9a      	adds	r2, r3, #2
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056c6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80056c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80056ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056cc:	441a      	add	r2, r3
 80056ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80056d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d6:	441a      	add	r2, r3
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80056dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d11e      	bne.n	8005722 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80056e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e6:	3334      	adds	r3, #52	; 0x34
 80056e8:	332a      	adds	r3, #42	; 0x2a
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe fb9c 	bl	8003e28 <ld_word>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <find_volume+0x38e>
 80056f6:	230d      	movs	r3, #13
 80056f8:	e0ae      	b.n	8005858 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	891b      	ldrh	r3, [r3, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <find_volume+0x39a>
 8005702:	230d      	movs	r3, #13
 8005704:	e0a8      	b.n	8005858 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	3334      	adds	r3, #52	; 0x34
 800570a:	332c      	adds	r3, #44	; 0x2c
 800570c:	4618      	mov	r0, r3
 800570e:	f7fe fba3 	bl	8003e58 <ld_dword>
 8005712:	4602      	mov	r2, r0
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	647b      	str	r3, [r7, #68]	; 0x44
 8005720:	e01f      	b.n	8005762 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	891b      	ldrh	r3, [r3, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <find_volume+0x3c2>
 800572a:	230d      	movs	r3, #13
 800572c:	e094      	b.n	8005858 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005734:	441a      	add	r2, r3
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800573a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800573e:	2b02      	cmp	r3, #2
 8005740:	d103      	bne.n	800574a <find_volume+0x3de>
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	e00a      	b.n	8005760 <find_volume+0x3f4>
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	699a      	ldr	r2, [r3, #24]
 800574e:	4613      	mov	r3, r2
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	4413      	add	r3, r2
 8005754:	085a      	lsrs	r2, r3, #1
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005760:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	69da      	ldr	r2, [r3, #28]
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	899b      	ldrh	r3, [r3, #12]
 800576a:	4619      	mov	r1, r3
 800576c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800576e:	440b      	add	r3, r1
 8005770:	3b01      	subs	r3, #1
 8005772:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005774:	8989      	ldrh	r1, [r1, #12]
 8005776:	fbb3 f3f1 	udiv	r3, r3, r1
 800577a:	429a      	cmp	r2, r3
 800577c:	d201      	bcs.n	8005782 <find_volume+0x416>
 800577e:	230d      	movs	r3, #13
 8005780:	e06a      	b.n	8005858 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	f04f 32ff 	mov.w	r2, #4294967295
 8005788:	615a      	str	r2, [r3, #20]
 800578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578c:	695a      	ldr	r2, [r3, #20]
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	2280      	movs	r2, #128	; 0x80
 8005796:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005798:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800579c:	2b03      	cmp	r3, #3
 800579e:	d149      	bne.n	8005834 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80057a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a2:	3334      	adds	r3, #52	; 0x34
 80057a4:	3330      	adds	r3, #48	; 0x30
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe fb3e 	bl	8003e28 <ld_word>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d140      	bne.n	8005834 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80057b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b4:	3301      	adds	r3, #1
 80057b6:	4619      	mov	r1, r3
 80057b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057ba:	f7fe fde5 	bl	8004388 <move_window>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d137      	bne.n	8005834 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	2200      	movs	r2, #0
 80057c8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80057ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057cc:	3334      	adds	r3, #52	; 0x34
 80057ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe fb28 	bl	8003e28 <ld_word>
 80057d8:	4603      	mov	r3, r0
 80057da:	461a      	mov	r2, r3
 80057dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d127      	bne.n	8005834 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80057e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e6:	3334      	adds	r3, #52	; 0x34
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe fb35 	bl	8003e58 <ld_dword>
 80057ee:	4603      	mov	r3, r0
 80057f0:	4a1b      	ldr	r2, [pc, #108]	; (8005860 <find_volume+0x4f4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d11e      	bne.n	8005834 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	3334      	adds	r3, #52	; 0x34
 80057fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fe fb2a 	bl	8003e58 <ld_dword>
 8005804:	4603      	mov	r3, r0
 8005806:	4a17      	ldr	r2, [pc, #92]	; (8005864 <find_volume+0x4f8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d113      	bne.n	8005834 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	3334      	adds	r3, #52	; 0x34
 8005810:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005814:	4618      	mov	r0, r3
 8005816:	f7fe fb1f 	bl	8003e58 <ld_dword>
 800581a:	4602      	mov	r2, r0
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005822:	3334      	adds	r3, #52	; 0x34
 8005824:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005828:	4618      	mov	r0, r3
 800582a:	f7fe fb15 	bl	8003e58 <ld_dword>
 800582e:	4602      	mov	r2, r0
 8005830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005832:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800583a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800583c:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <find_volume+0x4fc>)
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	3301      	adds	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	4b08      	ldr	r3, [pc, #32]	; (8005868 <find_volume+0x4fc>)
 8005846:	801a      	strh	r2, [r3, #0]
 8005848:	4b07      	ldr	r3, [pc, #28]	; (8005868 <find_volume+0x4fc>)
 800584a:	881a      	ldrh	r2, [r3, #0]
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005850:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005852:	f7fe fd31 	bl	80042b8 <clear_lock>
#endif
	return FR_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3758      	adds	r7, #88	; 0x58
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	41615252 	.word	0x41615252
 8005864:	61417272 	.word	0x61417272
 8005868:	200053c8 	.word	0x200053c8

0800586c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005876:	2309      	movs	r3, #9
 8005878:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01c      	beq.n	80058ba <validate+0x4e>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d018      	beq.n	80058ba <validate+0x4e>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d013      	beq.n	80058ba <validate+0x4e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	889a      	ldrh	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	88db      	ldrh	r3, [r3, #6]
 800589c:	429a      	cmp	r2, r3
 800589e:	d10c      	bne.n	80058ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe fa20 	bl	8003cec <disk_status>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <validate+0x4e>
			res = FR_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d102      	bne.n	80058c6 <validate+0x5a>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	e000      	b.n	80058c8 <validate+0x5c>
 80058c6:	2300      	movs	r3, #0
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	6013      	str	r3, [r2, #0]
	return res;
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	4613      	mov	r3, r2
 80058e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80058ea:	f107 0310 	add.w	r3, r7, #16
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff fca2 	bl	8005238 <get_ldnumber>
 80058f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	da01      	bge.n	8005900 <f_mount+0x28>
 80058fc:	230b      	movs	r3, #11
 80058fe:	e02b      	b.n	8005958 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005900:	4a17      	ldr	r2, [pc, #92]	; (8005960 <f_mount+0x88>)
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005908:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005910:	69b8      	ldr	r0, [r7, #24]
 8005912:	f7fe fcd1 	bl	80042b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	2200      	movs	r2, #0
 800591a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	490d      	ldr	r1, [pc, #52]	; (8005960 <f_mount+0x88>)
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <f_mount+0x66>
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d001      	beq.n	8005942 <f_mount+0x6a>
 800593e:	2300      	movs	r3, #0
 8005940:	e00a      	b.n	8005958 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005942:	f107 010c 	add.w	r1, r7, #12
 8005946:	f107 0308 	add.w	r3, r7, #8
 800594a:	2200      	movs	r2, #0
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fd0d 	bl	800536c <find_volume>
 8005952:	4603      	mov	r3, r0
 8005954:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005956:	7dfb      	ldrb	r3, [r7, #23]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3720      	adds	r7, #32
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	200053c4 	.word	0x200053c4

08005964 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b098      	sub	sp, #96	; 0x60
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <f_open+0x18>
 8005978:	2309      	movs	r3, #9
 800597a:	e1bb      	b.n	8005cf4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005982:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005984:	79fa      	ldrb	r2, [r7, #7]
 8005986:	f107 0110 	add.w	r1, r7, #16
 800598a:	f107 0308 	add.w	r3, r7, #8
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff fcec 	bl	800536c <find_volume>
 8005994:	4603      	mov	r3, r0
 8005996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800599a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f040 819f 	bne.w	8005ce2 <f_open+0x37e>
		dj.obj.fs = fs;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	f107 0314 	add.w	r3, r7, #20
 80059ae:	4611      	mov	r1, r2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fbcb 	bl	800514c <follow_path>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80059bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d11a      	bne.n	80059fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80059c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80059c8:	b25b      	sxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	da03      	bge.n	80059d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80059ce:	2306      	movs	r3, #6
 80059d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80059d4:	e011      	b.n	80059fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	bf14      	ite	ne
 80059e0:	2301      	movne	r3, #1
 80059e2:	2300      	moveq	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	461a      	mov	r2, r3
 80059e8:	f107 0314 	add.w	r3, r7, #20
 80059ec:	4611      	mov	r1, r2
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe fb1a 	bl	8004028 <chk_lock>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	f003 031c 	and.w	r3, r3, #28
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d07f      	beq.n	8005b04 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005a04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d017      	beq.n	8005a3c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005a0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d10e      	bne.n	8005a32 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005a14:	f7fe fb64 	bl	80040e0 <enq_lock>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d006      	beq.n	8005a2c <f_open+0xc8>
 8005a1e:	f107 0314 	add.w	r3, r7, #20
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff facc 	bl	8004fc0 <dir_register>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	e000      	b.n	8005a2e <f_open+0xca>
 8005a2c:	2312      	movs	r3, #18
 8005a2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	f043 0308 	orr.w	r3, r3, #8
 8005a38:	71fb      	strb	r3, [r7, #7]
 8005a3a:	e010      	b.n	8005a5e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005a3c:	7ebb      	ldrb	r3, [r7, #26]
 8005a3e:	f003 0311 	and.w	r3, r3, #17
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <f_open+0xea>
					res = FR_DENIED;
 8005a46:	2307      	movs	r3, #7
 8005a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005a4c:	e007      	b.n	8005a5e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <f_open+0xfa>
 8005a58:	2308      	movs	r3, #8
 8005a5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005a5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d168      	bne.n	8005b38 <f_open+0x1d4>
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d063      	beq.n	8005b38 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005a70:	f7fe f8de 	bl	8003c30 <get_fattime>
 8005a74:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a78:	330e      	adds	r3, #14
 8005a7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fe fa29 	bl	8003ed4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a84:	3316      	adds	r3, #22
 8005a86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fe fa23 	bl	8003ed4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a90:	330b      	adds	r3, #11
 8005a92:	2220      	movs	r2, #32
 8005a94:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff f9fb 	bl	8004e98 <ld_clust>
 8005aa2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff fa13 	bl	8004ed6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab2:	331c      	adds	r3, #28
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe fa0c 	bl	8003ed4 <st_dword>
					fs->wflag = 1;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d037      	beq.n	8005b38 <f_open+0x1d4>
						dw = fs->winsect;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005ace:	f107 0314 	add.w	r3, r7, #20
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fe ff03 	bl	80048e2 <remove_chain>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005ae2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d126      	bne.n	8005b38 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe fc4a 	bl	8004388 <move_window>
 8005af4:	4603      	mov	r3, r0
 8005af6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005afe:	3a01      	subs	r2, #1
 8005b00:	611a      	str	r2, [r3, #16]
 8005b02:	e019      	b.n	8005b38 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005b04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d115      	bne.n	8005b38 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005b0c:	7ebb      	ldrb	r3, [r7, #26]
 8005b0e:	f003 0310 	and.w	r3, r3, #16
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <f_open+0x1ba>
					res = FR_NO_FILE;
 8005b16:	2304      	movs	r3, #4
 8005b18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005b1c:	e00c      	b.n	8005b38 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d007      	beq.n	8005b38 <f_open+0x1d4>
 8005b28:	7ebb      	ldrb	r3, [r7, #26]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <f_open+0x1d4>
						res = FR_DENIED;
 8005b32:	2307      	movs	r3, #7
 8005b34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005b38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d128      	bne.n	8005b92 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b50:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	f023 0301 	bic.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bf14      	ite	ne
 8005b6a:	2301      	movne	r3, #1
 8005b6c:	2300      	moveq	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	f107 0314 	add.w	r3, r7, #20
 8005b76:	4611      	mov	r1, r2
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fe fad3 	bl	8004124 <inc_lock>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <f_open+0x22e>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005b92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f040 80a3 	bne.w	8005ce2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff f978 	bl	8004e98 <ld_clust>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb0:	331c      	adds	r3, #28
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fe f950 	bl	8003e58 <ld_dword>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	88da      	ldrh	r2, [r3, #6]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	79fa      	ldrb	r2, [r7, #7]
 8005bd6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3330      	adds	r3, #48	; 0x30
 8005bee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fe f9ba 	bl	8003f6e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	f003 0320 	and.w	r3, r3, #32
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d06e      	beq.n	8005ce2 <f_open+0x37e>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d06a      	beq.n	8005ce2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	895b      	ldrh	r3, [r3, #10]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	899b      	ldrh	r3, [r3, #12]
 8005c1e:	fb02 f303 	mul.w	r3, r2, r3
 8005c22:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c30:	e016      	b.n	8005c60 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fe fc63 	bl	8004502 <get_fat>
 8005c3c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d802      	bhi.n	8005c4a <f_open+0x2e6>
 8005c44:	2302      	movs	r3, #2
 8005c46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c50:	d102      	bne.n	8005c58 <f_open+0x2f4>
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005c58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d103      	bne.n	8005c70 <f_open+0x30c>
 8005c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d8e0      	bhi.n	8005c32 <f_open+0x2ce>
				}
				fp->clust = clst;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c74:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005c76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d131      	bne.n	8005ce2 <f_open+0x37e>
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	899b      	ldrh	r3, [r3, #12]
 8005c82:	461a      	mov	r2, r3
 8005c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c86:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c8a:	fb01 f202 	mul.w	r2, r1, r2
 8005c8e:	1a9b      	subs	r3, r3, r2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d026      	beq.n	8005ce2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe fc13 	bl	80044c4 <clust2sect>
 8005c9e:	6478      	str	r0, [r7, #68]	; 0x44
 8005ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d103      	bne.n	8005cae <f_open+0x34a>
						res = FR_INT_ERR;
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005cac:	e019      	b.n	8005ce2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	899b      	ldrh	r3, [r3, #12]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cbc:	441a      	add	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	7858      	ldrb	r0, [r3, #1]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a1a      	ldr	r2, [r3, #32]
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f7fe f84b 	bl	8003d6c <disk_read>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <f_open+0x37e>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005ce2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <f_open+0x38c>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005cf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3760      	adds	r7, #96	; 0x60
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08e      	sub	sp, #56	; 0x38
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
 8005d08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f107 0214 	add.w	r2, r7, #20
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff fda5 	bl	800586c <validate>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005d28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d107      	bne.n	8005d40 <f_read+0x44>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	7d5b      	ldrb	r3, [r3, #21]
 8005d34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005d38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <f_read+0x4a>
 8005d40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d44:	e135      	b.n	8005fb2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	7d1b      	ldrb	r3, [r3, #20]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <f_read+0x5a>
 8005d52:	2307      	movs	r3, #7
 8005d54:	e12d      	b.n	8005fb2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	f240 811e 	bls.w	8005fa8 <f_read+0x2ac>
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005d70:	e11a      	b.n	8005fa8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	8992      	ldrh	r2, [r2, #12]
 8005d7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d7e:	fb01 f202 	mul.w	r2, r1, r2
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f040 80d5 	bne.w	8005f34 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	8992      	ldrh	r2, [r2, #12]
 8005d92:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	8952      	ldrh	r2, [r2, #10]
 8005d9a:	3a01      	subs	r2, #1
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d12f      	bne.n	8005e06 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d103      	bne.n	8005db6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	633b      	str	r3, [r7, #48]	; 0x30
 8005db4:	e013      	b.n	8005dde <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7fe fe89 	bl	8004adc <clmt_clust>
 8005dca:	6338      	str	r0, [r7, #48]	; 0x30
 8005dcc:	e007      	b.n	8005dde <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f7fe fb93 	bl	8004502 <get_fat>
 8005ddc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d804      	bhi.n	8005dee <f_read+0xf2>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2202      	movs	r2, #2
 8005de8:	755a      	strb	r2, [r3, #21]
 8005dea:	2302      	movs	r3, #2
 8005dec:	e0e1      	b.n	8005fb2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df4:	d104      	bne.n	8005e00 <f_read+0x104>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	755a      	strb	r2, [r3, #21]
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e0d8      	b.n	8005fb2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e04:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4610      	mov	r0, r2
 8005e10:	f7fe fb58 	bl	80044c4 <clust2sect>
 8005e14:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d104      	bne.n	8005e26 <f_read+0x12a>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	755a      	strb	r2, [r3, #21]
 8005e22:	2302      	movs	r3, #2
 8005e24:	e0c5      	b.n	8005fb2 <f_read+0x2b6>
			sect += csect;
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	899b      	ldrh	r3, [r3, #12]
 8005e32:	461a      	mov	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d041      	beq.n	8005ec6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	4413      	add	r3, r2
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	8952      	ldrh	r2, [r2, #10]
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d905      	bls.n	8005e5c <f_read+0x160>
					cc = fs->csize - csect;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	895b      	ldrh	r3, [r3, #10]
 8005e54:	461a      	mov	r2, r3
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	7858      	ldrb	r0, [r3, #1]
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e66:	f7fd ff81 	bl	8003d6c <disk_read>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d004      	beq.n	8005e7a <f_read+0x17e>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2201      	movs	r2, #1
 8005e74:	755a      	strb	r2, [r3, #21]
 8005e76:	2301      	movs	r3, #1
 8005e78:	e09b      	b.n	8005fb2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	7d1b      	ldrb	r3, [r3, #20]
 8005e7e:	b25b      	sxtb	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	da18      	bge.n	8005eb6 <f_read+0x1ba>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a1a      	ldr	r2, [r3, #32]
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d911      	bls.n	8005eb6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a1a      	ldr	r2, [r3, #32]
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	8992      	ldrh	r2, [r2, #12]
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea4:	18d0      	adds	r0, r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	899b      	ldrh	r3, [r3, #12]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f7fe f83b 	bl	8003f2c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	899b      	ldrh	r3, [r3, #12]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebe:	fb02 f303 	mul.w	r3, r2, r3
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005ec4:	e05c      	b.n	8005f80 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d02e      	beq.n	8005f2e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	7d1b      	ldrb	r3, [r3, #20]
 8005ed4:	b25b      	sxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	da18      	bge.n	8005f0c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	7858      	ldrb	r0, [r3, #1]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a1a      	ldr	r2, [r3, #32]
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f7fd ff5f 	bl	8003dac <disk_write>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d004      	beq.n	8005efe <f_read+0x202>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	755a      	strb	r2, [r3, #21]
 8005efa:	2301      	movs	r3, #1
 8005efc:	e059      	b.n	8005fb2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	7d1b      	ldrb	r3, [r3, #20]
 8005f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	7858      	ldrb	r0, [r3, #1]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f16:	2301      	movs	r3, #1
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	f7fd ff27 	bl	8003d6c <disk_read>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d004      	beq.n	8005f2e <f_read+0x232>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2201      	movs	r2, #1
 8005f28:	755a      	strb	r2, [r3, #21]
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e041      	b.n	8005fb2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	899b      	ldrh	r3, [r3, #12]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	8992      	ldrh	r2, [r2, #12]
 8005f42:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f46:	fb01 f202 	mul.w	r2, r1, r2
 8005f4a:	1a9b      	subs	r3, r3, r2
 8005f4c:	1ac3      	subs	r3, r0, r3
 8005f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d901      	bls.n	8005f5c <f_read+0x260>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	8992      	ldrh	r2, [r2, #12]
 8005f6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f6e:	fb00 f202 	mul.w	r2, r0, r2
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	440b      	add	r3, r1
 8005f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f7c:	f7fd ffd6 	bl	8003f2c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	4413      	add	r3, r2
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	699a      	ldr	r2, [r3, #24]
 8005f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8e:	441a      	add	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	619a      	str	r2, [r3, #24]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	441a      	add	r2, r3
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f47f aee1 	bne.w	8005d72 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3738      	adds	r7, #56	; 0x38
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b086      	sub	sp, #24
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f107 0208 	add.w	r2, r7, #8
 8005fc8:	4611      	mov	r1, r2
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff fc4e 	bl	800586c <validate>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d168      	bne.n	80060ac <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	7d1b      	ldrb	r3, [r3, #20]
 8005fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d062      	beq.n	80060ac <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	7d1b      	ldrb	r3, [r3, #20]
 8005fea:	b25b      	sxtb	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	da15      	bge.n	800601c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	7858      	ldrb	r0, [r3, #1]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1a      	ldr	r2, [r3, #32]
 8005ffe:	2301      	movs	r3, #1
 8006000:	f7fd fed4 	bl	8003dac <disk_write>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <f_sync+0x54>
 800600a:	2301      	movs	r3, #1
 800600c:	e04f      	b.n	80060ae <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	7d1b      	ldrb	r3, [r3, #20]
 8006012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006016:	b2da      	uxtb	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800601c:	f7fd fe08 	bl	8003c30 <get_fattime>
 8006020:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	4619      	mov	r1, r3
 800602a:	4610      	mov	r0, r2
 800602c:	f7fe f9ac 	bl	8004388 <move_window>
 8006030:	4603      	mov	r3, r0
 8006032:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006034:	7dfb      	ldrb	r3, [r7, #23]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d138      	bne.n	80060ac <f_sync+0xf2>
					dir = fp->dir_ptr;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	330b      	adds	r3, #11
 8006044:	781a      	ldrb	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	330b      	adds	r3, #11
 800604a:	f042 0220 	orr.w	r2, r2, #32
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	461a      	mov	r2, r3
 800605c:	68f9      	ldr	r1, [r7, #12]
 800605e:	f7fe ff3a 	bl	8004ed6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f103 021c 	add.w	r2, r3, #28
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f7fd ff30 	bl	8003ed4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3316      	adds	r3, #22
 8006078:	6939      	ldr	r1, [r7, #16]
 800607a:	4618      	mov	r0, r3
 800607c:	f7fd ff2a 	bl	8003ed4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3312      	adds	r3, #18
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f7fd ff09 	bl	8003e9e <st_word>
					fs->wflag = 1;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2201      	movs	r2, #1
 8006090:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4618      	mov	r0, r3
 8006096:	f7fe f9a5 	bl	80043e4 <sync_fs>
 800609a:	4603      	mov	r3, r0
 800609c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	7d1b      	ldrb	r3, [r3, #20]
 80060a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80060ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff ff7b 	bl	8005fba <f_sync>
 80060c4:	4603      	mov	r3, r0
 80060c6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d118      	bne.n	8006100 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f107 0208 	add.w	r2, r7, #8
 80060d4:	4611      	mov	r1, r2
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff fbc8 	bl	800586c <validate>
 80060dc:	4603      	mov	r3, r0
 80060de:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10c      	bne.n	8006100 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe f8a8 	bl	8004240 <dec_lock>
 80060f0:	4603      	mov	r3, r0
 80060f2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d102      	bne.n	8006100 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006100:	7bfb      	ldrb	r3, [r7, #15]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b090      	sub	sp, #64	; 0x40
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f107 0208 	add.w	r2, r7, #8
 800611a:	4611      	mov	r1, r2
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff fba5 	bl	800586c <validate>
 8006122:	4603      	mov	r3, r0
 8006124:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006128:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800612c:	2b00      	cmp	r3, #0
 800612e:	d103      	bne.n	8006138 <f_lseek+0x2e>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	7d5b      	ldrb	r3, [r3, #21]
 8006134:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006138:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <f_lseek+0x3c>
 8006140:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006144:	e201      	b.n	800654a <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 80d9 	beq.w	8006302 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d15a      	bne.n	800620e <f_lseek+0x104>
			tbl = fp->cltbl;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	1d1a      	adds	r2, r3, #4
 8006162:	627a      	str	r2, [r7, #36]	; 0x24
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	2302      	movs	r3, #2
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	2b00      	cmp	r3, #0
 8006176:	d03a      	beq.n	80061ee <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	2300      	movs	r3, #0
 800617e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	3302      	adds	r3, #2
 8006184:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	3301      	adds	r3, #1
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe f9b4 	bl	8004502 <get_fat>
 800619a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d804      	bhi.n	80061ac <f_lseek+0xa2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2202      	movs	r2, #2
 80061a6:	755a      	strb	r2, [r3, #21]
 80061a8:	2302      	movs	r3, #2
 80061aa:	e1ce      	b.n	800654a <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d104      	bne.n	80061be <f_lseek+0xb4>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	755a      	strb	r2, [r3, #21]
 80061ba:	2301      	movs	r3, #1
 80061bc:	e1c5      	b.n	800654a <f_lseek+0x440>
					} while (cl == pcl + 1);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3301      	adds	r3, #1
 80061c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d0de      	beq.n	8006186 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80061c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d809      	bhi.n	80061e4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	1d1a      	adds	r2, r3, #4
 80061d4:	627a      	str	r2, [r7, #36]	; 0x24
 80061d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	1d1a      	adds	r2, r3, #4
 80061de:	627a      	str	r2, [r7, #36]	; 0x24
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d3c4      	bcc.n	8006178 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061f4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80061f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d803      	bhi.n	8006206 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	e19f      	b.n	8006546 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006206:	2311      	movs	r3, #17
 8006208:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800620c:	e19b      	b.n	8006546 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d902      	bls.n	800621e <f_lseek+0x114>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 818d 	beq.w	8006546 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	3b01      	subs	r3, #1
 8006230:	4619      	mov	r1, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7fe fc52 	bl	8004adc <clmt_clust>
 8006238:	4602      	mov	r2, r0
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f7fe f93c 	bl	80044c4 <clust2sect>
 800624c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <f_lseek+0x154>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	755a      	strb	r2, [r3, #21]
 800625a:	2302      	movs	r3, #2
 800625c:	e175      	b.n	800654a <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	3b01      	subs	r3, #1
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	8992      	ldrh	r2, [r2, #12]
 8006266:	fbb3 f3f2 	udiv	r3, r3, r2
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	8952      	ldrh	r2, [r2, #10]
 800626e:	3a01      	subs	r2, #1
 8006270:	4013      	ands	r3, r2
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	4413      	add	r3, r2
 8006276:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	8992      	ldrh	r2, [r2, #12]
 8006280:	fbb3 f1f2 	udiv	r1, r3, r2
 8006284:	fb01 f202 	mul.w	r2, r1, r2
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 815b 	beq.w	8006546 <f_lseek+0x43c>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	429a      	cmp	r2, r3
 8006298:	f000 8155 	beq.w	8006546 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	7d1b      	ldrb	r3, [r3, #20]
 80062a0:	b25b      	sxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	da18      	bge.n	80062d8 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	7858      	ldrb	r0, [r3, #1]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a1a      	ldr	r2, [r3, #32]
 80062b4:	2301      	movs	r3, #1
 80062b6:	f7fd fd79 	bl	8003dac <disk_write>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d004      	beq.n	80062ca <f_lseek+0x1c0>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	755a      	strb	r2, [r3, #21]
 80062c6:	2301      	movs	r3, #1
 80062c8:	e13f      	b.n	800654a <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	7d1b      	ldrb	r3, [r3, #20]
 80062ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	7858      	ldrb	r0, [r3, #1]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062e2:	2301      	movs	r3, #1
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	f7fd fd41 	bl	8003d6c <disk_read>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d004      	beq.n	80062fa <f_lseek+0x1f0>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	755a      	strb	r2, [r3, #21]
 80062f6:	2301      	movs	r3, #1
 80062f8:	e127      	b.n	800654a <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	621a      	str	r2, [r3, #32]
 8006300:	e121      	b.n	8006546 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d908      	bls.n	800631e <f_lseek+0x214>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	7d1b      	ldrb	r3, [r3, #20]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d102      	bne.n	800631e <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	637b      	str	r3, [r7, #52]	; 0x34
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800632c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 80b5 	beq.w	80064a0 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	895b      	ldrh	r3, [r3, #10]
 800633a:	461a      	mov	r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	899b      	ldrh	r3, [r3, #12]
 8006340:	fb02 f303 	mul.w	r3, r2, r3
 8006344:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01b      	beq.n	8006384 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	1e5a      	subs	r2, r3, #1
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	fbb2 f2f3 	udiv	r2, r2, r3
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	1e59      	subs	r1, r3, #1
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006360:	429a      	cmp	r2, r3
 8006362:	d30f      	bcc.n	8006384 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	1e5a      	subs	r2, r3, #1
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	425b      	negs	r3, r3
 800636c:	401a      	ands	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	63bb      	str	r3, [r7, #56]	; 0x38
 8006382:	e022      	b.n	80063ca <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	2b00      	cmp	r3, #0
 800638e:	d119      	bne.n	80063c4 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2100      	movs	r1, #0
 8006394:	4618      	mov	r0, r3
 8006396:	f7fe fb09 	bl	80049ac <create_chain>
 800639a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d104      	bne.n	80063ac <f_lseek+0x2a2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2202      	movs	r2, #2
 80063a6:	755a      	strb	r2, [r3, #21]
 80063a8:	2302      	movs	r3, #2
 80063aa:	e0ce      	b.n	800654a <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80063ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d104      	bne.n	80063be <f_lseek+0x2b4>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	755a      	strb	r2, [r3, #21]
 80063ba:	2301      	movs	r3, #1
 80063bc:	e0c5      	b.n	800654a <f_lseek+0x440>
					fp->obj.sclust = clst;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d067      	beq.n	80064a0 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80063d0:	e03a      	b.n	8006448 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	603b      	str	r3, [r7, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	441a      	add	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	7d1b      	ldrb	r3, [r3, #20]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00b      	beq.n	800640a <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe fad8 	bl	80049ac <create_chain>
 80063fc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	2b00      	cmp	r3, #0
 8006402:	d108      	bne.n	8006416 <f_lseek+0x30c>
							ofs = 0; break;
 8006404:	2300      	movs	r3, #0
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	e022      	b.n	8006450 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe f877 	bl	8004502 <get_fat>
 8006414:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641c:	d104      	bne.n	8006428 <f_lseek+0x31e>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	755a      	strb	r2, [r3, #21]
 8006424:	2301      	movs	r3, #1
 8006426:	e090      	b.n	800654a <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642a:	2b01      	cmp	r3, #1
 800642c:	d904      	bls.n	8006438 <f_lseek+0x32e>
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006434:	429a      	cmp	r2, r3
 8006436:	d304      	bcc.n	8006442 <f_lseek+0x338>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	755a      	strb	r2, [r3, #21]
 800643e:	2302      	movs	r3, #2
 8006440:	e083      	b.n	800654a <f_lseek+0x440>
					fp->clust = clst;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006446:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	429a      	cmp	r2, r3
 800644e:	d8c0      	bhi.n	80063d2 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	699a      	ldr	r2, [r3, #24]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	441a      	add	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	899b      	ldrh	r3, [r3, #12]
 8006460:	461a      	mov	r2, r3
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	fbb3 f1f2 	udiv	r1, r3, r2
 8006468:	fb01 f202 	mul.w	r2, r1, r2
 800646c:	1a9b      	subs	r3, r3, r2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d016      	beq.n	80064a0 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006476:	4618      	mov	r0, r3
 8006478:	f7fe f824 	bl	80044c4 <clust2sect>
 800647c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006480:	2b00      	cmp	r3, #0
 8006482:	d104      	bne.n	800648e <f_lseek+0x384>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	755a      	strb	r2, [r3, #21]
 800648a:	2302      	movs	r3, #2
 800648c:	e05d      	b.n	800654a <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	899b      	ldrh	r3, [r3, #12]
 8006492:	461a      	mov	r2, r3
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	fbb3 f3f2 	udiv	r3, r3, r2
 800649a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800649c:	4413      	add	r3, r2
 800649e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699a      	ldr	r2, [r3, #24]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d90a      	bls.n	80064c2 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	699a      	ldr	r2, [r3, #24]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	7d1b      	ldrb	r3, [r3, #20]
 80064b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	8992      	ldrh	r2, [r2, #12]
 80064ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80064ce:	fb01 f202 	mul.w	r2, r1, r2
 80064d2:	1a9b      	subs	r3, r3, r2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d036      	beq.n	8006546 <f_lseek+0x43c>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064de:	429a      	cmp	r2, r3
 80064e0:	d031      	beq.n	8006546 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	7d1b      	ldrb	r3, [r3, #20]
 80064e6:	b25b      	sxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	da18      	bge.n	800651e <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	7858      	ldrb	r0, [r3, #1]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1a      	ldr	r2, [r3, #32]
 80064fa:	2301      	movs	r3, #1
 80064fc:	f7fd fc56 	bl	8003dac <disk_write>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d004      	beq.n	8006510 <f_lseek+0x406>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	755a      	strb	r2, [r3, #21]
 800650c:	2301      	movs	r3, #1
 800650e:	e01c      	b.n	800654a <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	7d1b      	ldrb	r3, [r3, #20]
 8006514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006518:	b2da      	uxtb	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	7858      	ldrb	r0, [r3, #1]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006528:	2301      	movs	r3, #1
 800652a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800652c:	f7fd fc1e 	bl	8003d6c <disk_read>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d004      	beq.n	8006540 <f_lseek+0x436>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	755a      	strb	r2, [r3, #21]
 800653c:	2301      	movs	r3, #1
 800653e:	e004      	b.n	800654a <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006544:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8006546:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800654a:	4618      	mov	r0, r3
 800654c:	3740      	adds	r7, #64	; 0x40
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006562:	2301      	movs	r3, #1
 8006564:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800656a:	4b1f      	ldr	r3, [pc, #124]	; (80065e8 <FATFS_LinkDriverEx+0x94>)
 800656c:	7a5b      	ldrb	r3, [r3, #9]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d131      	bne.n	80065d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006574:	4b1c      	ldr	r3, [pc, #112]	; (80065e8 <FATFS_LinkDriverEx+0x94>)
 8006576:	7a5b      	ldrb	r3, [r3, #9]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	461a      	mov	r2, r3
 800657c:	4b1a      	ldr	r3, [pc, #104]	; (80065e8 <FATFS_LinkDriverEx+0x94>)
 800657e:	2100      	movs	r1, #0
 8006580:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006582:	4b19      	ldr	r3, [pc, #100]	; (80065e8 <FATFS_LinkDriverEx+0x94>)
 8006584:	7a5b      	ldrb	r3, [r3, #9]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <FATFS_LinkDriverEx+0x94>)
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <FATFS_LinkDriverEx+0x94>)
 8006594:	7a5b      	ldrb	r3, [r3, #9]
 8006596:	b2db      	uxtb	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	4b13      	ldr	r3, [pc, #76]	; (80065e8 <FATFS_LinkDriverEx+0x94>)
 800659c:	4413      	add	r3, r2
 800659e:	79fa      	ldrb	r2, [r7, #7]
 80065a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80065a2:	4b11      	ldr	r3, [pc, #68]	; (80065e8 <FATFS_LinkDriverEx+0x94>)
 80065a4:	7a5b      	ldrb	r3, [r3, #9]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	b2d1      	uxtb	r1, r2
 80065ac:	4a0e      	ldr	r2, [pc, #56]	; (80065e8 <FATFS_LinkDriverEx+0x94>)
 80065ae:	7251      	strb	r1, [r2, #9]
 80065b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80065b2:	7dbb      	ldrb	r3, [r7, #22]
 80065b4:	3330      	adds	r3, #48	; 0x30
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	3301      	adds	r3, #1
 80065c0:	223a      	movs	r2, #58	; 0x3a
 80065c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	3302      	adds	r3, #2
 80065c8:	222f      	movs	r2, #47	; 0x2f
 80065ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	3303      	adds	r3, #3
 80065d0:	2200      	movs	r2, #0
 80065d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80065d4:	2300      	movs	r3, #0
 80065d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80065d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	200053ec 	.word	0x200053ec

080065ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80065f6:	2200      	movs	r2, #0
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff ffaa 	bl	8006554 <FATFS_LinkDriverEx>
 8006600:	4603      	mov	r3, r0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <TEXT_Callback>:
 800660a:	b530      	push	{r4, r5, lr}
 800660c:	6845      	ldr	r5, [r0, #4]
 800660e:	4604      	mov	r4, r0
 8006610:	b085      	sub	sp, #20
 8006612:	4628      	mov	r0, r5
 8006614:	4621      	mov	r1, r4
 8006616:	f008 f859 	bl	800e6cc <WIDGET_HandleActive>
 800661a:	2800      	cmp	r0, #0
 800661c:	d056      	beq.n	80066cc <TEXT_Callback+0xc2>
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	2b0f      	cmp	r3, #15
 8006622:	d01e      	beq.n	8006662 <TEXT_Callback+0x58>
 8006624:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8006628:	d00e      	beq.n	8006648 <TEXT_Callback+0x3e>
 800662a:	2b0b      	cmp	r3, #11
 800662c:	d14b      	bne.n	80066c6 <TEXT_Callback+0xbc>
 800662e:	4628      	mov	r0, r5
 8006630:	f007 fd8a 	bl	800e148 <GUI_ALLOC_LockH>
 8006634:	ad04      	add	r5, sp, #16
 8006636:	f845 0d08 	str.w	r0, [r5, #-8]!
 800663a:	3044      	adds	r0, #68	; 0x44
 800663c:	f007 ff54 	bl	800e4e8 <GUI_ALLOC_FreePtr>
 8006640:	4628      	mov	r0, r5
 8006642:	f007 fd8f 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006646:	e03e      	b.n	80066c6 <TEXT_Callback+0xbc>
 8006648:	68e3      	ldr	r3, [r4, #12]
 800664a:	b12b      	cbz	r3, 8006658 <TEXT_Callback+0x4e>
 800664c:	7a1b      	ldrb	r3, [r3, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	bf0c      	ite	eq
 8006652:	2102      	moveq	r1, #2
 8006654:	2101      	movne	r1, #1
 8006656:	e000      	b.n	800665a <TEXT_Callback+0x50>
 8006658:	2103      	movs	r1, #3
 800665a:	4628      	mov	r0, r5
 800665c:	f001 f975 	bl	800794a <WM_NotifyParent>
 8006660:	e031      	b.n	80066c6 <TEXT_Callback+0xbc>
 8006662:	4628      	mov	r0, r5
 8006664:	f007 fd70 	bl	800e148 <GUI_ALLOC_LockH>
 8006668:	9000      	str	r0, [sp, #0]
 800666a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800666c:	f005 fa2e 	bl	800bacc <LCD_SetColor>
 8006670:	9b00      	ldr	r3, [sp, #0]
 8006672:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006674:	f006 fb18 	bl	800cca8 <GUI_SetFont>
 8006678:	4628      	mov	r0, r5
 800667a:	f000 fe03 	bl	8007284 <WM_GetHasTrans>
 800667e:	b928      	cbnz	r0, 800668c <TEXT_Callback+0x82>
 8006680:	9b00      	ldr	r3, [sp, #0]
 8006682:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006684:	f005 fa1a 	bl	800babc <LCD_SetBkColor>
 8006688:	f006 f96e 	bl	800c968 <GUI_Clear>
 800668c:	9b00      	ldr	r3, [sp, #0]
 800668e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006690:	b1ab      	cbz	r3, 80066be <TEXT_Callback+0xb4>
 8006692:	2002      	movs	r0, #2
 8006694:	f006 fb3e 	bl	800cd14 <GUI_SetTextMode>
 8006698:	a802      	add	r0, sp, #8
 800669a:	f000 ff85 	bl	80075a8 <WM_GetClientRect>
 800669e:	9b00      	ldr	r3, [sp, #0]
 80066a0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80066a2:	f007 fd51 	bl	800e148 <GUI_ALLOC_LockH>
 80066a6:	9b00      	ldr	r3, [sp, #0]
 80066a8:	9001      	str	r0, [sp, #4]
 80066aa:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80066ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066b2:	a902      	add	r1, sp, #8
 80066b4:	f005 ff6f 	bl	800c596 <GUI_DispStringInRectWrap>
 80066b8:	a801      	add	r0, sp, #4
 80066ba:	f007 fd53 	bl	800e164 <GUI_ALLOC_UnlockH>
 80066be:	4668      	mov	r0, sp
 80066c0:	f007 fd50 	bl	800e164 <GUI_ALLOC_UnlockH>
 80066c4:	e002      	b.n	80066cc <TEXT_Callback+0xc2>
 80066c6:	4620      	mov	r0, r4
 80066c8:	f002 fb86 	bl	8008dd8 <WM_DefaultProc>
 80066cc:	b005      	add	sp, #20
 80066ce:	bd30      	pop	{r4, r5, pc}

080066d0 <TEXT_CreateUser>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80066d6:	9500      	str	r5, [sp, #0]
 80066d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80066da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80066dc:	f045 0501 	orr.w	r5, r5, #1
 80066e0:	9501      	str	r5, [sp, #4]
 80066e2:	4d1a      	ldr	r5, [pc, #104]	; (800674c <TEXT_CreateUser+0x7c>)
 80066e4:	9502      	str	r5, [sp, #8]
 80066e6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80066e8:	3520      	adds	r5, #32
 80066ea:	9503      	str	r5, [sp, #12]
 80066ec:	f001 ff82 	bl	80085f4 <WM_CreateWindowAsChild>
 80066f0:	4605      	mov	r5, r0
 80066f2:	b340      	cbz	r0, 8006746 <TEXT_CreateUser+0x76>
 80066f4:	b18c      	cbz	r4, 800671a <TEXT_CreateUser+0x4a>
 80066f6:	4620      	mov	r0, r4
 80066f8:	f7f9 fd6a 	bl	80001d0 <strlen>
 80066fc:	3001      	adds	r0, #1
 80066fe:	f007 fefb 	bl	800e4f8 <GUI_ALLOC_AllocZero>
 8006702:	4606      	mov	r6, r0
 8006704:	b150      	cbz	r0, 800671c <TEXT_CreateUser+0x4c>
 8006706:	f007 fd1f 	bl	800e148 <GUI_ALLOC_LockH>
 800670a:	4621      	mov	r1, r4
 800670c:	9005      	str	r0, [sp, #20]
 800670e:	f00a ff12 	bl	8011536 <strcpy>
 8006712:	a805      	add	r0, sp, #20
 8006714:	f007 fd26 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006718:	e000      	b.n	800671c <TEXT_CreateUser+0x4c>
 800671a:	4626      	mov	r6, r4
 800671c:	4628      	mov	r0, r5
 800671e:	f007 fd13 	bl	800e148 <GUI_ALLOC_LockH>
 8006722:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006724:	9005      	str	r0, [sp, #20]
 8006726:	2200      	movs	r2, #0
 8006728:	f007 ffa0 	bl	800e66c <WIDGET__Init>
 800672c:	9c05      	ldr	r4, [sp, #20]
 800672e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006730:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8006734:	4b06      	ldr	r3, [pc, #24]	; (8006750 <TEXT_CreateUser+0x80>)
 8006736:	6466      	str	r6, [r4, #68]	; 0x44
 8006738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800673a:	3434      	adds	r4, #52	; 0x34
 800673c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006740:	a805      	add	r0, sp, #20
 8006742:	f007 fd0f 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006746:	4628      	mov	r0, r5
 8006748:	b006      	add	sp, #24
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	0800660b 	.word	0x0800660b
 8006750:	20000024 	.word	0x20000024

08006754 <TEXT_CreateIndirect>:
 8006754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006756:	b087      	sub	sp, #28
 8006758:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 800675c:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8006760:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8006764:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8006768:	9100      	str	r1, [sp, #0]
 800676a:	2102      	movs	r1, #2
 800676c:	9101      	str	r1, [sp, #4]
 800676e:	8a41      	ldrh	r1, [r0, #18]
 8006770:	9102      	str	r1, [sp, #8]
 8006772:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8006776:	9103      	str	r1, [sp, #12]
 8006778:	6844      	ldr	r4, [r0, #4]
 800677a:	9404      	str	r4, [sp, #16]
 800677c:	6984      	ldr	r4, [r0, #24]
 800677e:	9405      	str	r4, [sp, #20]
 8006780:	eb0e 0002 	add.w	r0, lr, r2
 8006784:	18f9      	adds	r1, r7, r3
 8006786:	4632      	mov	r2, r6
 8006788:	462b      	mov	r3, r5
 800678a:	f7ff ffa1 	bl	80066d0 <TEXT_CreateUser>
 800678e:	b007      	add	sp, #28
 8006790:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006792 <TEXT_SetFont>:
 8006792:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006794:	460c      	mov	r4, r1
 8006796:	4605      	mov	r5, r0
 8006798:	b160      	cbz	r0, 80067b4 <TEXT_SetFont+0x22>
 800679a:	f007 fcd5 	bl	800e148 <GUI_ALLOC_LockH>
 800679e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80067a0:	9001      	str	r0, [sp, #4]
 80067a2:	42a2      	cmp	r2, r4
 80067a4:	d003      	beq.n	80067ae <TEXT_SetFont+0x1c>
 80067a6:	6344      	str	r4, [r0, #52]	; 0x34
 80067a8:	4628      	mov	r0, r5
 80067aa:	f001 fef5 	bl	8008598 <WM_InvalidateWindow>
 80067ae:	a801      	add	r0, sp, #4
 80067b0:	f007 fcd8 	bl	800e164 <GUI_ALLOC_UnlockH>
 80067b4:	b003      	add	sp, #12
 80067b6:	bd30      	pop	{r4, r5, pc}

080067b8 <TEXT_SetText>:
 80067b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067ba:	460c      	mov	r4, r1
 80067bc:	4605      	mov	r5, r0
 80067be:	b300      	cbz	r0, 8006802 <TEXT_SetText+0x4a>
 80067c0:	f007 fcc2 	bl	800e148 <GUI_ALLOC_LockH>
 80067c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80067c6:	9000      	str	r0, [sp, #0]
 80067c8:	4668      	mov	r0, sp
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	f007 fcca 	bl	800e164 <GUI_ALLOC_UnlockH>
 80067d0:	4621      	mov	r1, r4
 80067d2:	a801      	add	r0, sp, #4
 80067d4:	f005 fa80 	bl	800bcd8 <GUI__SetText>
 80067d8:	f1d0 0401 	rsbs	r4, r0, #1
 80067dc:	bf38      	it	cc
 80067de:	2400      	movcc	r4, #0
 80067e0:	b984      	cbnz	r4, 8006804 <TEXT_SetText+0x4c>
 80067e2:	4628      	mov	r0, r5
 80067e4:	f007 fcb0 	bl	800e148 <GUI_ALLOC_LockH>
 80067e8:	9a01      	ldr	r2, [sp, #4]
 80067ea:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80067ec:	9000      	str	r0, [sp, #0]
 80067ee:	4291      	cmp	r1, r2
 80067f0:	bf18      	it	ne
 80067f2:	6442      	strne	r2, [r0, #68]	; 0x44
 80067f4:	4668      	mov	r0, sp
 80067f6:	f007 fcb5 	bl	800e164 <GUI_ALLOC_UnlockH>
 80067fa:	4628      	mov	r0, r5
 80067fc:	f001 fecc 	bl	8008598 <WM_InvalidateWindow>
 8006800:	e000      	b.n	8006804 <TEXT_SetText+0x4c>
 8006802:	2401      	movs	r4, #1
 8006804:	4620      	mov	r0, r4
 8006806:	b003      	add	sp, #12
 8006808:	bd30      	pop	{r4, r5, pc}

0800680a <FRAMEWIN__GetBorderSize>:
 800680a:	b570      	push	{r4, r5, r6, lr}
 800680c:	b08a      	sub	sp, #40	; 0x28
 800680e:	4605      	mov	r5, r0
 8006810:	460c      	mov	r4, r1
 8006812:	f007 fc99 	bl	800e148 <GUI_ALLOC_LockH>
 8006816:	ab0a      	add	r3, sp, #40	; 0x28
 8006818:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800681a:	f843 0d28 	str.w	r0, [r3, #-40]!
 800681e:	4668      	mov	r0, sp
 8006820:	6896      	ldr	r6, [r2, #8]
 8006822:	f007 fc9f 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006826:	9501      	str	r5, [sp, #4]
 8006828:	2c03      	cmp	r4, #3
 800682a:	d80b      	bhi.n	8006844 <FRAMEWIN__GetBorderSize+0x3a>
 800682c:	e8df f004 	tbb	[pc, r4]
 8006830:	08060402 	.word	0x08060402
 8006834:	2318      	movs	r3, #24
 8006836:	e004      	b.n	8006842 <FRAMEWIN__GetBorderSize+0x38>
 8006838:	2316      	movs	r3, #22
 800683a:	e002      	b.n	8006842 <FRAMEWIN__GetBorderSize+0x38>
 800683c:	2315      	movs	r3, #21
 800683e:	e000      	b.n	8006842 <FRAMEWIN__GetBorderSize+0x38>
 8006840:	2317      	movs	r3, #23
 8006842:	9302      	str	r3, [sp, #8]
 8006844:	6873      	ldr	r3, [r6, #4]
 8006846:	a801      	add	r0, sp, #4
 8006848:	4798      	blx	r3
 800684a:	b00a      	add	sp, #40	; 0x28
 800684c:	bd70      	pop	{r4, r5, r6, pc}

0800684e <_SetActive>:
 800684e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006850:	4604      	mov	r4, r0
 8006852:	460d      	mov	r5, r1
 8006854:	f007 fc78 	bl	800e148 <GUI_ALLOC_LockH>
 8006858:	9001      	str	r0, [sp, #4]
 800685a:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 800685e:	b125      	cbz	r5, 800686a <_SetActive+0x1c>
 8006860:	0711      	lsls	r1, r2, #28
 8006862:	d40b      	bmi.n	800687c <_SetActive+0x2e>
 8006864:	f042 0208 	orr.w	r2, r2, #8
 8006868:	e003      	b.n	8006872 <_SetActive+0x24>
 800686a:	0713      	lsls	r3, r2, #28
 800686c:	d506      	bpl.n	800687c <_SetActive+0x2e>
 800686e:	f022 0208 	bic.w	r2, r2, #8
 8006872:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
 8006876:	4620      	mov	r0, r4
 8006878:	f001 fe8e 	bl	8008598 <WM_InvalidateWindow>
 800687c:	a801      	add	r0, sp, #4
 800687e:	f007 fc71 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006882:	b003      	add	sp, #12
 8006884:	bd30      	pop	{r4, r5, pc}

08006886 <FRAMEWIN__cbClient>:
 8006886:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800688a:	6845      	ldr	r5, [r0, #4]
 800688c:	b087      	sub	sp, #28
 800688e:	4604      	mov	r4, r0
 8006890:	4628      	mov	r0, r5
 8006892:	f000 ff26 	bl	80076e2 <WM_GetParent>
 8006896:	4681      	mov	r9, r0
 8006898:	f007 fc56 	bl	800e148 <GUI_ALLOC_LockH>
 800689c:	4603      	mov	r3, r0
 800689e:	a806      	add	r0, sp, #24
 80068a0:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 80068a2:	f840 3d14 	str.w	r3, [r0, #-20]!
 80068a6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 80068a8:	f8d3 8080 	ldr.w	r8, [r3, #128]	; 0x80
 80068ac:	f007 fc5a 	bl	800e164 <GUI_ALLOC_UnlockH>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	2b17      	cmp	r3, #23
 80068b4:	d053      	beq.n	800695e <FRAMEWIN__cbClient+0xd8>
 80068b6:	dc09      	bgt.n	80068cc <FRAMEWIN__cbClient+0x46>
 80068b8:	2b0f      	cmp	r3, #15
 80068ba:	d014      	beq.n	80068e6 <FRAMEWIN__cbClient+0x60>
 80068bc:	dc02      	bgt.n	80068c4 <FRAMEWIN__cbClient+0x3e>
 80068be:	2b0e      	cmp	r3, #14
 80068c0:	d034      	beq.n	800692c <FRAMEWIN__cbClient+0xa6>
 80068c2:	e046      	b.n	8006952 <FRAMEWIN__cbClient+0xcc>
 80068c4:	3b14      	subs	r3, #20
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d949      	bls.n	800695e <FRAMEWIN__cbClient+0xd8>
 80068ca:	e042      	b.n	8006952 <FRAMEWIN__cbClient+0xcc>
 80068cc:	2b1f      	cmp	r3, #31
 80068ce:	d028      	beq.n	8006922 <FRAMEWIN__cbClient+0x9c>
 80068d0:	dc02      	bgt.n	80068d8 <FRAMEWIN__cbClient+0x52>
 80068d2:	2b1e      	cmp	r3, #30
 80068d4:	d01a      	beq.n	800690c <FRAMEWIN__cbClient+0x86>
 80068d6:	e03c      	b.n	8006952 <FRAMEWIN__cbClient+0xcc>
 80068d8:	2b22      	cmp	r3, #34	; 0x22
 80068da:	d038      	beq.n	800694e <FRAMEWIN__cbClient+0xc8>
 80068dc:	2b31      	cmp	r3, #49	; 0x31
 80068de:	d138      	bne.n	8006952 <FRAMEWIN__cbClient+0xcc>
 80068e0:	2300      	movs	r3, #0
 80068e2:	60e3      	str	r3, [r4, #12]
 80068e4:	e03e      	b.n	8006964 <FRAMEWIN__cbClient+0xde>
 80068e6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80068ea:	429e      	cmp	r6, r3
 80068ec:	d004      	beq.n	80068f8 <FRAMEWIN__cbClient+0x72>
 80068ee:	4630      	mov	r0, r6
 80068f0:	f005 f8e4 	bl	800babc <LCD_SetBkColor>
 80068f4:	f006 f838 	bl	800c968 <GUI_Clear>
 80068f8:	2f00      	cmp	r7, #0
 80068fa:	d033      	beq.n	8006964 <FRAMEWIN__cbClient+0xde>
 80068fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006900:	ae02      	add	r6, sp, #8
 8006902:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8006906:	9503      	str	r5, [sp, #12]
 8006908:	4630      	mov	r0, r6
 800690a:	e026      	b.n	800695a <FRAMEWIN__cbClient+0xd4>
 800690c:	68e3      	ldr	r3, [r4, #12]
 800690e:	b34b      	cbz	r3, 8006964 <FRAMEWIN__cbClient+0xde>
 8006910:	f1b8 0f00 	cmp.w	r8, #0
 8006914:	d017      	beq.n	8006946 <FRAMEWIN__cbClient+0xc0>
 8006916:	45a8      	cmp	r8, r5
 8006918:	d015      	beq.n	8006946 <FRAMEWIN__cbClient+0xc0>
 800691a:	4640      	mov	r0, r8
 800691c:	f001 f820 	bl	8007960 <WM_SetFocus>
 8006920:	e020      	b.n	8006964 <FRAMEWIN__cbClient+0xde>
 8006922:	4648      	mov	r0, r9
 8006924:	4621      	mov	r1, r4
 8006926:	f007 fed1 	bl	800e6cc <WIDGET_HandleActive>
 800692a:	e01b      	b.n	8006964 <FRAMEWIN__cbClient+0xde>
 800692c:	68e3      	ldr	r3, [r4, #12]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	2a00      	cmp	r2, #0
 8006932:	dd0e      	ble.n	8006952 <FRAMEWIN__cbClient+0xcc>
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b09      	cmp	r3, #9
 8006938:	d005      	beq.n	8006946 <FRAMEWIN__cbClient+0xc0>
 800693a:	2b0a      	cmp	r3, #10
 800693c:	d109      	bne.n	8006952 <FRAMEWIN__cbClient+0xcc>
 800693e:	4628      	mov	r0, r5
 8006940:	f000 fcb8 	bl	80072b4 <WM_SetFocusOnPrevChild>
 8006944:	e00e      	b.n	8006964 <FRAMEWIN__cbClient+0xde>
 8006946:	4628      	mov	r0, r5
 8006948:	f000 fce4 	bl	8007314 <WM_SetFocusOnNextChild>
 800694c:	e00a      	b.n	8006964 <FRAMEWIN__cbClient+0xde>
 800694e:	60e6      	str	r6, [r4, #12]
 8006950:	e008      	b.n	8006964 <FRAMEWIN__cbClient+0xde>
 8006952:	b127      	cbz	r7, 800695e <FRAMEWIN__cbClient+0xd8>
 8006954:	f8c4 9004 	str.w	r9, [r4, #4]
 8006958:	4620      	mov	r0, r4
 800695a:	47b8      	blx	r7
 800695c:	e002      	b.n	8006964 <FRAMEWIN__cbClient+0xde>
 800695e:	4620      	mov	r0, r4
 8006960:	f002 fa3a 	bl	8008dd8 <WM_DefaultProc>
 8006964:	b007      	add	sp, #28
 8006966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800696a <FRAMEWIN__CalcTitleHeight>:
 800696a:	b508      	push	{r3, lr}
 800696c:	4603      	mov	r3, r0
 800696e:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8006970:	f000 0020 	and.w	r0, r0, #32
 8006974:	b280      	uxth	r0, r0
 8006976:	b130      	cbz	r0, 8006986 <FRAMEWIN__CalcTitleHeight+0x1c>
 8006978:	f9b3 0054 	ldrsh.w	r0, [r3, #84]	; 0x54
 800697c:	b918      	cbnz	r0, 8006986 <FRAMEWIN__CalcTitleHeight+0x1c>
 800697e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006980:	f006 f8d6 	bl	800cb30 <GUI_GetYSizeOfFont>
 8006984:	3002      	adds	r0, #2
 8006986:	bd08      	pop	{r3, pc}

08006988 <FRAMEWIN__GetTitleLimits>:
 8006988:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800698c:	4607      	mov	r7, r0
 800698e:	460d      	mov	r5, r1
 8006990:	4616      	mov	r6, r2
 8006992:	f007 fbd9 	bl	800e148 <GUI_ALLOC_LockH>
 8006996:	4603      	mov	r3, r0
 8006998:	a802      	add	r0, sp, #8
 800699a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800699c:	f840 3d08 	str.w	r3, [r0, #-8]!
 80069a0:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80069a4:	f8b3 8000 	ldrh.w	r8, [r3]
 80069a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80069ac:	4668      	mov	r0, sp
 80069ae:	f007 fbd9 	bl	800e164 <GUI_ALLOC_UnlockH>
 80069b2:	f8da 3000 	ldr.w	r3, [sl]
 80069b6:	4638      	mov	r0, r7
 80069b8:	2100      	movs	r1, #0
 80069ba:	4798      	blx	r3
 80069bc:	4682      	mov	sl, r0
 80069be:	4638      	mov	r0, r7
 80069c0:	f000 fe1a 	bl	80075f8 <WM_GetFirstChild>
 80069c4:	4604      	mov	r4, r0
 80069c6:	b340      	cbz	r0, 8006a1a <FRAMEWIN__GetTitleLimits+0x92>
 80069c8:	4620      	mov	r0, r4
 80069ca:	f007 fbbd 	bl	800e148 <GUI_ALLOC_LockH>
 80069ce:	4603      	mov	r3, r0
 80069d0:	fa0f f289 	sxth.w	r2, r9
 80069d4:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
 80069d8:	9001      	str	r0, [sp, #4]
 80069da:	1aba      	subs	r2, r7, r2
 80069dc:	4552      	cmp	r2, sl
 80069de:	8800      	ldrh	r0, [r0, #0]
 80069e0:	8899      	ldrh	r1, [r3, #4]
 80069e2:	d113      	bne.n	8006a0c <FRAMEWIN__GetTitleLimits+0x84>
 80069e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e6:	061b      	lsls	r3, r3, #24
 80069e8:	fa0f f288 	sxth.w	r2, r8
 80069ec:	d507      	bpl.n	80069fe <FRAMEWIN__GetTitleLimits+0x76>
 80069ee:	b203      	sxth	r3, r0
 80069f0:	1a9a      	subs	r2, r3, r2
 80069f2:	6833      	ldr	r3, [r6, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	dc09      	bgt.n	8006a0c <FRAMEWIN__GetTitleLimits+0x84>
 80069f8:	3a01      	subs	r2, #1
 80069fa:	6032      	str	r2, [r6, #0]
 80069fc:	e006      	b.n	8006a0c <FRAMEWIN__GetTitleLimits+0x84>
 80069fe:	b20b      	sxth	r3, r1
 8006a00:	1a9b      	subs	r3, r3, r2
 8006a02:	682a      	ldr	r2, [r5, #0]
 8006a04:	4293      	cmp	r3, r2
 8006a06:	bfa4      	itt	ge
 8006a08:	3301      	addge	r3, #1
 8006a0a:	602b      	strge	r3, [r5, #0]
 8006a0c:	a801      	add	r0, sp, #4
 8006a0e:	f007 fba9 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 fe55 	bl	80076c2 <WM_GetNextSibling>
 8006a18:	e7d4      	b.n	80069c4 <FRAMEWIN__GetTitleLimits+0x3c>
 8006a1a:	b002      	add	sp, #8
 8006a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006a20 <FRAMEWIN__CalcPositions>:
 8006a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a24:	b087      	sub	sp, #28
 8006a26:	4604      	mov	r4, r0
 8006a28:	460f      	mov	r7, r1
 8006a2a:	f007 fb8d 	bl	800e148 <GUI_ALLOC_LockH>
 8006a2e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006a30:	9003      	str	r0, [sp, #12]
 8006a32:	6895      	ldr	r5, [r2, #8]
 8006a34:	2101      	movs	r1, #1
 8006a36:	682a      	ldr	r2, [r5, #0]
 8006a38:	4620      	mov	r0, r4
 8006a3a:	4790      	blx	r2
 8006a3c:	682a      	ldr	r2, [r5, #0]
 8006a3e:	2103      	movs	r1, #3
 8006a40:	4683      	mov	fp, r0
 8006a42:	4620      	mov	r0, r4
 8006a44:	4790      	blx	r2
 8006a46:	682a      	ldr	r2, [r5, #0]
 8006a48:	2102      	movs	r1, #2
 8006a4a:	4681      	mov	r9, r0
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	4790      	blx	r2
 8006a50:	682a      	ldr	r2, [r5, #0]
 8006a52:	9001      	str	r0, [sp, #4]
 8006a54:	2100      	movs	r1, #0
 8006a56:	4620      	mov	r0, r4
 8006a58:	4790      	blx	r2
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	9803      	ldr	r0, [sp, #12]
 8006a5e:	f001 f83d 	bl	8007adc <WM__GetWindowSizeX>
 8006a62:	4682      	mov	sl, r0
 8006a64:	9803      	ldr	r0, [sp, #12]
 8006a66:	f001 f840 	bl	8007aea <WM__GetWindowSizeY>
 8006a6a:	4680      	mov	r8, r0
 8006a6c:	9803      	ldr	r0, [sp, #12]
 8006a6e:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 8006a70:	f006 0620 	and.w	r6, r6, #32
 8006a74:	b2b6      	uxth	r6, r6
 8006a76:	b10e      	cbz	r6, 8006a7c <FRAMEWIN__CalcPositions+0x5c>
 8006a78:	f9b0 6058 	ldrsh.w	r6, [r0, #88]	; 0x58
 8006a7c:	f7ff ff75 	bl	800696a <FRAMEWIN__CalcTitleHeight>
 8006a80:	9903      	ldr	r1, [sp, #12]
 8006a82:	4602      	mov	r2, r0
 8006a84:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
 8006a86:	b118      	cbz	r0, 8006a90 <FRAMEWIN__CalcPositions+0x70>
 8006a88:	9200      	str	r2, [sp, #0]
 8006a8a:	f001 f84a 	bl	8007b22 <WM_GetWindowSizeY>
 8006a8e:	9a00      	ldr	r2, [sp, #0]
 8006a90:	803a      	strh	r2, [r7, #0]
 8006a92:	b292      	uxth	r2, r2
 8006a94:	b2a9      	uxth	r1, r5
 8006a96:	4416      	add	r6, r2
 8006a98:	440e      	add	r6, r1
 8006a9a:	8078      	strh	r0, [r7, #2]
 8006a9c:	4430      	add	r0, r6
 8006a9e:	80f8      	strh	r0, [r7, #6]
 8006aa0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aa4:	9801      	ldr	r0, [sp, #4]
 8006aa6:	81fd      	strh	r5, [r7, #14]
 8006aa8:	3901      	subs	r1, #1
 8006aaa:	ebc9 090a 	rsb	r9, r9, sl
 8006aae:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ab2:	ebc0 0308 	rsb	r3, r0, r8
 8006ab6:	440a      	add	r2, r1
 8006ab8:	fa1f fb8b 	uxth.w	fp, fp
 8006abc:	fa1f f989 	uxth.w	r9, r9
 8006ac0:	817b      	strh	r3, [r7, #10]
 8006ac2:	827a      	strh	r2, [r7, #18]
 8006ac4:	f8a7 b004 	strh.w	fp, [r7, #4]
 8006ac8:	f8a7 9008 	strh.w	r9, [r7, #8]
 8006acc:	f8a7 b00c 	strh.w	fp, [r7, #12]
 8006ad0:	f8a7 9010 	strh.w	r9, [r7, #16]
 8006ad4:	a803      	add	r0, sp, #12
 8006ad6:	f007 fb45 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006ada:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006ade:	9204      	str	r2, [sp, #16]
 8006ae0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006ae4:	9205      	str	r2, [sp, #20]
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	aa05      	add	r2, sp, #20
 8006aea:	a904      	add	r1, sp, #16
 8006aec:	f7ff ff4c 	bl	8006988 <FRAMEWIN__GetTitleLimits>
 8006af0:	9a04      	ldr	r2, [sp, #16]
 8006af2:	81ba      	strh	r2, [r7, #12]
 8006af4:	9a05      	ldr	r2, [sp, #20]
 8006af6:	823a      	strh	r2, [r7, #16]
 8006af8:	b007      	add	sp, #28
 8006afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006afe <FRAMEWIN_SetText>:
 8006afe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b00:	460d      	mov	r5, r1
 8006b02:	4604      	mov	r4, r0
 8006b04:	b1c0      	cbz	r0, 8006b38 <FRAMEWIN_SetText+0x3a>
 8006b06:	f007 fb1f 	bl	800e148 <GUI_ALLOC_LockH>
 8006b0a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006b0c:	9000      	str	r0, [sp, #0]
 8006b0e:	4668      	mov	r0, sp
 8006b10:	9301      	str	r3, [sp, #4]
 8006b12:	f007 fb27 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006b16:	a801      	add	r0, sp, #4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f005 f8dd 	bl	800bcd8 <GUI__SetText>
 8006b1e:	b158      	cbz	r0, 8006b38 <FRAMEWIN_SetText+0x3a>
 8006b20:	4620      	mov	r0, r4
 8006b22:	f007 fb11 	bl	800e148 <GUI_ALLOC_LockH>
 8006b26:	9b01      	ldr	r3, [sp, #4]
 8006b28:	9000      	str	r0, [sp, #0]
 8006b2a:	6703      	str	r3, [r0, #112]	; 0x70
 8006b2c:	4668      	mov	r0, sp
 8006b2e:	f007 fb19 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006b32:	4620      	mov	r0, r4
 8006b34:	f001 fd30 	bl	8008598 <WM_InvalidateWindow>
 8006b38:	b003      	add	sp, #12
 8006b3a:	bd30      	pop	{r4, r5, pc}

08006b3c <FRAMEWIN_CreateUser>:
 8006b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b40:	b08b      	sub	sp, #44	; 0x2c
 8006b42:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8006b46:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8006b48:	9400      	str	r4, [sp, #0]
 8006b4a:	f449 5480 	orr.w	r4, r9, #4096	; 0x1000
 8006b4e:	9401      	str	r4, [sp, #4]
 8006b50:	4c33      	ldr	r4, [pc, #204]	; (8006c20 <FRAMEWIN_CreateUser+0xe4>)
 8006b52:	9402      	str	r4, [sp, #8]
 8006b54:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8006b56:	3460      	adds	r4, #96	; 0x60
 8006b58:	9403      	str	r4, [sp, #12]
 8006b5a:	f001 fd4b 	bl	80085f4 <WM_CreateWindowAsChild>
 8006b5e:	4606      	mov	r6, r0
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d058      	beq.n	8006c16 <FRAMEWIN_CreateUser+0xda>
 8006b64:	f007 faf0 	bl	800e148 <GUI_ALLOC_LockH>
 8006b68:	4d2e      	ldr	r5, [pc, #184]	; (8006c24 <FRAMEWIN_CreateUser+0xe8>)
 8006b6a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006b6c:	9004      	str	r0, [sp, #16]
 8006b6e:	2230      	movs	r2, #48	; 0x30
 8006b70:	f007 fd7c 	bl	800e66c <WIDGET__Init>
 8006b74:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b7a:	f858 7d18 	ldr.w	r7, [r8, #-24]!
 8006b7e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8006b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006b8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b8e:	4d26      	ldr	r5, [pc, #152]	; (8006c28 <FRAMEWIN_CreateUser+0xec>)
 8006b90:	e884 0003 	stmia.w	r4, {r0, r1}
 8006b94:	667b      	str	r3, [r7, #100]	; 0x64
 8006b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b98:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8006b9c:	2400      	movs	r4, #0
 8006b9e:	682b      	ldr	r3, [r5, #0]
 8006ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ba2:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8006ba6:	66fc      	str	r4, [r7, #108]	; 0x6c
 8006ba8:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8006bac:	4640      	mov	r0, r8
 8006bae:	f007 fad9 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	a905      	add	r1, sp, #20
 8006bb6:	f7ff ff33 	bl	8006a20 <FRAMEWIN__CalcPositions>
 8006bba:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8006bbe:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8006bc2:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8006bc6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8006bca:	9403      	str	r4, [sp, #12]
 8006bcc:	f241 7782 	movw	r7, #6018	; 0x1782
 8006bd0:	1a5b      	subs	r3, r3, r1
 8006bd2:	1a12      	subs	r2, r2, r0
 8006bd4:	9701      	str	r7, [sp, #4]
 8006bd6:	4f15      	ldr	r7, [pc, #84]	; (8006c2c <FRAMEWIN_CreateUser+0xf0>)
 8006bd8:	9600      	str	r6, [sp, #0]
 8006bda:	3201      	adds	r2, #1
 8006bdc:	3301      	adds	r3, #1
 8006bde:	9702      	str	r7, [sp, #8]
 8006be0:	f001 fd08 	bl	80085f4 <WM_CreateWindowAsChild>
 8006be4:	682b      	ldr	r3, [r5, #0]
 8006be6:	4604      	mov	r4, r0
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	4630      	mov	r0, r6
 8006bec:	4798      	blx	r3
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f007 faaa 	bl	800e148 <GUI_ALLOC_LockH>
 8006bf4:	9004      	str	r0, [sp, #16]
 8006bf6:	6684      	str	r4, [r0, #104]	; 0x68
 8006bf8:	4640      	mov	r0, r8
 8006bfa:	f007 fab3 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006bfe:	f242 0304 	movw	r3, #8196	; 0x2004
 8006c02:	ea09 0303 	and.w	r3, r9, r3
 8006c06:	b913      	cbnz	r3, 8006c0e <FRAMEWIN_CreateUser+0xd2>
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f000 fcbf 	bl	800758c <WM_DisableMemdev>
 8006c0e:	4630      	mov	r0, r6
 8006c10:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006c12:	f7ff ff74 	bl	8006afe <FRAMEWIN_SetText>
 8006c16:	4630      	mov	r0, r6
 8006c18:	b00b      	add	sp, #44	; 0x2c
 8006c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c1e:	bf00      	nop
 8006c20:	08006c7b 	.word	0x08006c7b
 8006c24:	20000034 	.word	0x20000034
 8006c28:	2000005c 	.word	0x2000005c
 8006c2c:	08006887 	.word	0x08006887

08006c30 <FRAMEWIN_CreateIndirect>:
 8006c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c32:	b089      	sub	sp, #36	; 0x24
 8006c34:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8006c38:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8006c3c:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8006c40:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8006c44:	9100      	str	r1, [sp, #0]
 8006c46:	2100      	movs	r1, #0
 8006c48:	9101      	str	r1, [sp, #4]
 8006c4a:	8a41      	ldrh	r1, [r0, #18]
 8006c4c:	9102      	str	r1, [sp, #8]
 8006c4e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8006c52:	9103      	str	r1, [sp, #12]
 8006c54:	6844      	ldr	r4, [r0, #4]
 8006c56:	9404      	str	r4, [sp, #16]
 8006c58:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006c5a:	9405      	str	r4, [sp, #20]
 8006c5c:	6984      	ldr	r4, [r0, #24]
 8006c5e:	9406      	str	r4, [sp, #24]
 8006c60:	eb0e 0002 	add.w	r0, lr, r2
 8006c64:	18f9      	adds	r1, r7, r3
 8006c66:	4632      	mov	r2, r6
 8006c68:	462b      	mov	r3, r5
 8006c6a:	f7ff ff67 	bl	8006b3c <FRAMEWIN_CreateUser>
 8006c6e:	b009      	add	sp, #36	; 0x24
 8006c70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c72 <FRAMEWIN_SetActive>:
 8006c72:	b108      	cbz	r0, 8006c78 <FRAMEWIN_SetActive+0x6>
 8006c74:	f7ff bdeb 	b.w	800684e <_SetActive>
 8006c78:	4770      	bx	lr

08006c7a <FRAMEWIN_Callback>:
 8006c7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c7e:	6844      	ldr	r4, [r0, #4]
 8006c80:	b086      	sub	sp, #24
 8006c82:	4605      	mov	r5, r0
 8006c84:	4620      	mov	r0, r4
 8006c86:	f007 fa5f 	bl	800e148 <GUI_ALLOC_LockH>
 8006c8a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8006c8c:	9000      	str	r0, [sp, #0]
 8006c8e:	f8d0 7088 	ldr.w	r7, [r0, #136]	; 0x88
 8006c92:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 8006c96:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
 8006c9a:	f8b0 907c 	ldrh.w	r9, [r0, #124]	; 0x7c
 8006c9e:	b113      	cbz	r3, 8006ca6 <FRAMEWIN_Callback+0x2c>
 8006ca0:	f8d3 a000 	ldr.w	sl, [r3]
 8006ca4:	e000      	b.n	8006ca8 <FRAMEWIN_Callback+0x2e>
 8006ca6:	469a      	mov	sl, r3
 8006ca8:	4668      	mov	r0, sp
 8006caa:	f007 fa5b 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006cae:	b13f      	cbz	r7, 8006cc0 <FRAMEWIN_Callback+0x46>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	4798      	blx	r3
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	f040 811d 	bne.w	8006ef6 <FRAMEWIN_Callback+0x27c>
 8006cbc:	683f      	ldr	r7, [r7, #0]
 8006cbe:	e7f6      	b.n	8006cae <FRAMEWIN_Callback+0x34>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	2b17      	cmp	r3, #23
 8006cc4:	f000 808a 	beq.w	8006ddc <FRAMEWIN_Callback+0x162>
 8006cc8:	dc18      	bgt.n	8006cfc <FRAMEWIN_Callback+0x82>
 8006cca:	2b0f      	cmp	r3, #15
 8006ccc:	d043      	beq.n	8006d56 <FRAMEWIN_Callback+0xdc>
 8006cce:	dc06      	bgt.n	8006cde <FRAMEWIN_Callback+0x64>
 8006cd0:	2b0b      	cmp	r3, #11
 8006cd2:	f000 80fe 	beq.w	8006ed2 <FRAMEWIN_Callback+0x258>
 8006cd6:	2b0d      	cmp	r3, #13
 8006cd8:	f000 80c0 	beq.w	8006e5c <FRAMEWIN_Callback+0x1e2>
 8006cdc:	e103      	b.n	8006ee6 <FRAMEWIN_Callback+0x26c>
 8006cde:	2b11      	cmp	r3, #17
 8006ce0:	d01b      	beq.n	8006d1a <FRAMEWIN_Callback+0xa0>
 8006ce2:	2b14      	cmp	r3, #20
 8006ce4:	f040 80ff 	bne.w	8006ee6 <FRAMEWIN_Callback+0x26c>
 8006ce8:	4620      	mov	r0, r4
 8006cea:	a901      	add	r1, sp, #4
 8006cec:	f7ff fe98 	bl	8006a20 <FRAMEWIN__CalcPositions>
 8006cf0:	ab02      	add	r3, sp, #8
 8006cf2:	cb03      	ldmia	r3!, {r0, r1}
 8006cf4:	68ea      	ldr	r2, [r5, #12]
 8006cf6:	6010      	str	r0, [r2, #0]
 8006cf8:	6051      	str	r1, [r2, #4]
 8006cfa:	e0fc      	b.n	8006ef6 <FRAMEWIN_Callback+0x27c>
 8006cfc:	2b26      	cmp	r3, #38	; 0x26
 8006cfe:	d070      	beq.n	8006de2 <FRAMEWIN_Callback+0x168>
 8006d00:	dc05      	bgt.n	8006d0e <FRAMEWIN_Callback+0x94>
 8006d02:	2b1e      	cmp	r3, #30
 8006d04:	d07b      	beq.n	8006dfe <FRAMEWIN_Callback+0x184>
 8006d06:	2b20      	cmp	r3, #32
 8006d08:	f000 80b6 	beq.w	8006e78 <FRAMEWIN_Callback+0x1fe>
 8006d0c:	e0eb      	b.n	8006ee6 <FRAMEWIN_Callback+0x26c>
 8006d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d10:	d013      	beq.n	8006d3a <FRAMEWIN_Callback+0xc0>
 8006d12:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8006d16:	d025      	beq.n	8006d64 <FRAMEWIN_Callback+0xea>
 8006d18:	e0e5      	b.n	8006ee6 <FRAMEWIN_Callback+0x26c>
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	68ee      	ldr	r6, [r5, #12]
 8006d1e:	f007 fa13 	bl	800e148 <GUI_ALLOC_LockH>
 8006d22:	9001      	str	r0, [sp, #4]
 8006d24:	8933      	ldrh	r3, [r6, #8]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d105      	bne.n	8006d36 <FRAMEWIN_Callback+0xbc>
 8006d2a:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8006d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d32:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 8006d36:	a801      	add	r0, sp, #4
 8006d38:	e0d3      	b.n	8006ee2 <FRAMEWIN_Callback+0x268>
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f007 fa04 	bl	800e148 <GUI_ALLOC_LockH>
 8006d40:	68eb      	ldr	r3, [r5, #12]
 8006d42:	9000      	str	r0, [sp, #0]
 8006d44:	b113      	cbz	r3, 8006d4c <FRAMEWIN_Callback+0xd2>
 8006d46:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 8006d4a:	e002      	b.n	8006d52 <FRAMEWIN_Callback+0xd8>
 8006d4c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006d50:	60eb      	str	r3, [r5, #12]
 8006d52:	4668      	mov	r0, sp
 8006d54:	e03f      	b.n	8006dd6 <FRAMEWIN_Callback+0x15c>
 8006d56:	f1ba 0f00 	cmp.w	sl, #0
 8006d5a:	f000 80c4 	beq.w	8006ee6 <FRAMEWIN_Callback+0x26c>
 8006d5e:	4620      	mov	r0, r4
 8006d60:	47d0      	blx	sl
 8006d62:	e0c0      	b.n	8006ee6 <FRAMEWIN_Callback+0x26c>
 8006d64:	4620      	mov	r0, r4
 8006d66:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8006d6a:	f007 f9ed 	bl	800e148 <GUI_ALLOC_LockH>
 8006d6e:	ae06      	add	r6, sp, #24
 8006d70:	f8b0 707c 	ldrh.w	r7, [r0, #124]	; 0x7c
 8006d74:	f846 0d14 	str.w	r0, [r6, #-20]!
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f007 f9f3 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006d7e:	68eb      	ldr	r3, [r5, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 80b8 	beq.w	8006ef6 <FRAMEWIN_Callback+0x27c>
 8006d86:	f898 3008 	ldrb.w	r3, [r8, #8]
 8006d8a:	b1cb      	cbz	r3, 8006dc0 <FRAMEWIN_Callback+0x146>
 8006d8c:	073b      	lsls	r3, r7, #28
 8006d8e:	d402      	bmi.n	8006d96 <FRAMEWIN_Callback+0x11c>
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 fde5 	bl	8007960 <WM_SetFocus>
 8006d96:	4620      	mov	r0, r4
 8006d98:	f000 feda 	bl	8007b50 <WM_BringToTop>
 8006d9c:	f407 7388 	and.w	r3, r7, #272	; 0x110
 8006da0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8006da4:	f040 80a7 	bne.w	8006ef6 <FRAMEWIN_Callback+0x27c>
 8006da8:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8006dac:	b2bb      	uxth	r3, r7
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f040 80a1 	bne.w	8006ef6 <FRAMEWIN_Callback+0x27c>
 8006db4:	4620      	mov	r0, r4
 8006db6:	4641      	mov	r1, r8
 8006db8:	2205      	movs	r2, #5
 8006dba:	f000 fad9 	bl	8007370 <WM_SetCaptureMove>
 8006dbe:	e09a      	b.n	8006ef6 <FRAMEWIN_Callback+0x27c>
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f007 f9c1 	bl	800e148 <GUI_ALLOC_LockH>
 8006dc6:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8006dca:	9001      	str	r0, [sp, #4]
 8006dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd0:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f007 f9c5 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006dda:	e08c      	b.n	8006ef6 <FRAMEWIN_Callback+0x27c>
 8006ddc:	f8c5 800c 	str.w	r8, [r5, #12]
 8006de0:	e089      	b.n	8006ef6 <FRAMEWIN_Callback+0x27c>
 8006de2:	68eb      	ldr	r3, [r5, #12]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	f040 8086 	bne.w	8006ef6 <FRAMEWIN_Callback+0x27c>
 8006dea:	a906      	add	r1, sp, #24
 8006dec:	9304      	str	r3, [sp, #16]
 8006dee:	2327      	movs	r3, #39	; 0x27
 8006df0:	f841 3d14 	str.w	r3, [r1, #-20]!
 8006df4:	68a8      	ldr	r0, [r5, #8]
 8006df6:	9403      	str	r4, [sp, #12]
 8006df8:	f000 f95e 	bl	80070b8 <WM__SendMessage>
 8006dfc:	e07b      	b.n	8006ef6 <FRAMEWIN_Callback+0x27c>
 8006dfe:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8006e02:	f1b9 0f01 	cmp.w	r9, #1
 8006e06:	d124      	bne.n	8006e52 <FRAMEWIN_Callback+0x1d8>
 8006e08:	4630      	mov	r0, r6
 8006e0a:	f000 fcf6 	bl	80077fa <WM_IsWindow>
 8006e0e:	b158      	cbz	r0, 8006e28 <FRAMEWIN_Callback+0x1ae>
 8006e10:	4630      	mov	r0, r6
 8006e12:	f000 fda5 	bl	8007960 <WM_SetFocus>
 8006e16:	4630      	mov	r0, r6
 8006e18:	f000 fcc8 	bl	80077ac <WM_HasFocus>
 8006e1c:	b188      	cbz	r0, 8006e42 <FRAMEWIN_Callback+0x1c8>
 8006e1e:	4630      	mov	r0, r6
 8006e20:	4649      	mov	r1, r9
 8006e22:	f007 fc3d 	bl	800e6a0 <WIDGET_OrState>
 8006e26:	e00c      	b.n	8006e42 <FRAMEWIN_Callback+0x1c8>
 8006e28:	4640      	mov	r0, r8
 8006e2a:	f000 fa73 	bl	8007314 <WM_SetFocusOnNextChild>
 8006e2e:	4606      	mov	r6, r0
 8006e30:	4620      	mov	r0, r4
 8006e32:	f007 f989 	bl	800e148 <GUI_ALLOC_LockH>
 8006e36:	9000      	str	r0, [sp, #0]
 8006e38:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
 8006e3c:	4668      	mov	r0, sp
 8006e3e:	f007 f991 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006e42:	4620      	mov	r0, r4
 8006e44:	2101      	movs	r1, #1
 8006e46:	f7ff ff14 	bl	8006c72 <FRAMEWIN_SetActive>
 8006e4a:	2e00      	cmp	r6, #0
 8006e4c:	d153      	bne.n	8006ef6 <FRAMEWIN_Callback+0x27c>
 8006e4e:	60ee      	str	r6, [r5, #12]
 8006e50:	e051      	b.n	8006ef6 <FRAMEWIN_Callback+0x27c>
 8006e52:	4620      	mov	r0, r4
 8006e54:	4639      	mov	r1, r7
 8006e56:	f7ff ff0c 	bl	8006c72 <FRAMEWIN_SetActive>
 8006e5a:	e04c      	b.n	8006ef6 <FRAMEWIN_Callback+0x27c>
 8006e5c:	f019 0f08 	tst.w	r9, #8
 8006e60:	d141      	bne.n	8006ee6 <FRAMEWIN_Callback+0x26c>
 8006e62:	68eb      	ldr	r3, [r5, #12]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d03d      	beq.n	8006ee6 <FRAMEWIN_Callback+0x26c>
 8006e6a:	7a1b      	ldrb	r3, [r3, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d03a      	beq.n	8006ee6 <FRAMEWIN_Callback+0x26c>
 8006e70:	4620      	mov	r0, r4
 8006e72:	f000 fd75 	bl	8007960 <WM_SetFocus>
 8006e76:	e036      	b.n	8006ee6 <FRAMEWIN_Callback+0x26c>
 8006e78:	68ee      	ldr	r6, [r5, #12]
 8006e7a:	2e00      	cmp	r6, #0
 8006e7c:	d033      	beq.n	8006ee6 <FRAMEWIN_Callback+0x26c>
 8006e7e:	6870      	ldr	r0, [r6, #4]
 8006e80:	4621      	mov	r1, r4
 8006e82:	f000 f8ed 	bl	8007060 <WM__IsAncestorOrSelf>
 8006e86:	b180      	cbz	r0, 8006eaa <FRAMEWIN_Callback+0x230>
 8006e88:	4620      	mov	r0, r4
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	f7ff fcdf 	bl	800684e <_SetActive>
 8006e90:	6870      	ldr	r0, [r6, #4]
 8006e92:	4621      	mov	r1, r4
 8006e94:	f000 f8d3 	bl	800703e <WM__IsAncestor>
 8006e98:	b328      	cbz	r0, 8006ee6 <FRAMEWIN_Callback+0x26c>
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f007 f954 	bl	800e148 <GUI_ALLOC_LockH>
 8006ea0:	ab06      	add	r3, sp, #24
 8006ea2:	6872      	ldr	r2, [r6, #4]
 8006ea4:	f843 0d14 	str.w	r0, [r3, #-20]!
 8006ea8:	e00f      	b.n	8006eca <FRAMEWIN_Callback+0x250>
 8006eaa:	4620      	mov	r0, r4
 8006eac:	4639      	mov	r1, r7
 8006eae:	f7ff fcce 	bl	800684e <_SetActive>
 8006eb2:	6830      	ldr	r0, [r6, #0]
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	f000 f8c2 	bl	800703e <WM__IsAncestor>
 8006eba:	b1a0      	cbz	r0, 8006ee6 <FRAMEWIN_Callback+0x26c>
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f007 f943 	bl	800e148 <GUI_ALLOC_LockH>
 8006ec2:	ab06      	add	r3, sp, #24
 8006ec4:	6832      	ldr	r2, [r6, #0]
 8006ec6:	f843 0d14 	str.w	r0, [r3, #-20]!
 8006eca:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8006ece:	4618      	mov	r0, r3
 8006ed0:	e007      	b.n	8006ee2 <FRAMEWIN_Callback+0x268>
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f007 f938 	bl	800e148 <GUI_ALLOC_LockH>
 8006ed8:	9000      	str	r0, [sp, #0]
 8006eda:	3070      	adds	r0, #112	; 0x70
 8006edc:	f007 fb04 	bl	800e4e8 <GUI_ALLOC_FreePtr>
 8006ee0:	4668      	mov	r0, sp
 8006ee2:	f007 f93f 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	f007 fbef 	bl	800e6cc <WIDGET_HandleActive>
 8006eee:	b110      	cbz	r0, 8006ef6 <FRAMEWIN_Callback+0x27c>
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	f001 ff71 	bl	8008dd8 <WM_DefaultProc>
 8006ef6:	b006      	add	sp, #24
 8006ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006efc <FRAMEWIN_GetActive>:
 8006efc:	b513      	push	{r0, r1, r4, lr}
 8006efe:	4604      	mov	r4, r0
 8006f00:	b158      	cbz	r0, 8006f1a <FRAMEWIN_GetActive+0x1e>
 8006f02:	f007 f921 	bl	800e148 <GUI_ALLOC_LockH>
 8006f06:	ab02      	add	r3, sp, #8
 8006f08:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
 8006f0c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8006f10:	4618      	mov	r0, r3
 8006f12:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8006f16:	f007 f925 	bl	800e164 <GUI_ALLOC_UnlockH>
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	b002      	add	sp, #8
 8006f1e:	bd10      	pop	{r4, pc}

08006f20 <GUI_CreateDialogBox>:
 8006f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f24:	4606      	mov	r6, r0
 8006f26:	4688      	mov	r8, r1
 8006f28:	4614      	mov	r4, r2
 8006f2a:	461d      	mov	r5, r3
 8006f2c:	b913      	cbnz	r3, 8006f34 <GUI_CreateDialogBox+0x14>
 8006f2e:	f000 fb57 	bl	80075e0 <WM_GetDesktopWindow>
 8006f32:	4605      	mov	r5, r0
 8006f34:	9400      	str	r4, [sp, #0]
 8006f36:	4630      	mov	r0, r6
 8006f38:	6834      	ldr	r4, [r6, #0]
 8006f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f3e:	4629      	mov	r1, r5
 8006f40:	47a0      	blx	r4
 8006f42:	4604      	mov	r4, r0
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d039      	beq.n	8006fbc <GUI_CreateDialogBox+0x9c>
 8006f48:	f000 fb3c 	bl	80075c4 <WM_GetClientWindow>
 8006f4c:	8a71      	ldrh	r1, [r6, #18]
 8006f4e:	4607      	mov	r7, r0
 8006f50:	4620      	mov	r0, r4
 8006f52:	f007 fba5 	bl	800e6a0 <WIDGET_OrState>
 8006f56:	4620      	mov	r0, r4
 8006f58:	f000 fd93 	bl	8007a82 <WM_ShowWindow>
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f62:	f000 fd8e 	bl	8007a82 <WM_ShowWindow>
 8006f66:	f1b8 0f00 	cmp.w	r8, #0
 8006f6a:	dd0f      	ble.n	8006f8c <GUI_CreateDialogBox+0x6c>
 8006f6c:	f856 cf1c 	ldr.w	ip, [r6, #28]!
 8006f70:	2200      	movs	r2, #0
 8006f72:	9200      	str	r2, [sp, #0]
 8006f74:	4630      	mov	r0, r6
 8006f76:	4639      	mov	r1, r7
 8006f78:	4613      	mov	r3, r2
 8006f7a:	47e0      	blx	ip
 8006f7c:	4681      	mov	r9, r0
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d1ed      	bne.n	8006f5e <GUI_CreateDialogBox+0x3e>
 8006f82:	4620      	mov	r0, r4
 8006f84:	f001 fbe0 	bl	8008748 <WM_DeleteWindow>
 8006f88:	4648      	mov	r0, r9
 8006f8a:	e018      	b.n	8006fbe <GUI_CreateDialogBox+0x9e>
 8006f8c:	4638      	mov	r0, r7
 8006f8e:	211d      	movs	r1, #29
 8006f90:	f000 fccb 	bl	800792a <WM_SendMessageNoPara>
 8006f94:	1c6b      	adds	r3, r5, #1
 8006f96:	d011      	beq.n	8006fbc <GUI_CreateDialogBox+0x9c>
 8006f98:	f000 fb36 	bl	8007608 <WM_GetFocusedWindow>
 8006f9c:	b150      	cbz	r0, 8006fb4 <GUI_CreateDialogBox+0x94>
 8006f9e:	f007 f8c9 	bl	800e134 <GUI_ALLOC_h2p>
 8006fa2:	6980      	ldr	r0, [r0, #24]
 8006fa4:	42a0      	cmp	r0, r4
 8006fa6:	d00a      	beq.n	8006fbe <GUI_CreateDialogBox+0x9e>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d1f8      	bne.n	8006f9e <GUI_CreateDialogBox+0x7e>
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 f9b1 	bl	8007314 <WM_SetFocusOnNextChild>
 8006fb2:	e003      	b.n	8006fbc <GUI_CreateDialogBox+0x9c>
 8006fb4:	42a5      	cmp	r5, r4
 8006fb6:	d1f9      	bne.n	8006fac <GUI_CreateDialogBox+0x8c>
 8006fb8:	4628      	mov	r0, r5
 8006fba:	e000      	b.n	8006fbe <GUI_CreateDialogBox+0x9e>
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	b003      	add	sp, #12
 8006fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006fc4 <WM__ForEachDesc>:
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	460d      	mov	r5, r1
 8006fc8:	4616      	mov	r6, r2
 8006fca:	f007 f8b3 	bl	800e134 <GUI_ALLOC_h2p>
 8006fce:	69c4      	ldr	r4, [r0, #28]
 8006fd0:	b164      	cbz	r4, 8006fec <WM__ForEachDesc+0x28>
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	47a8      	blx	r5
 8006fd8:	4620      	mov	r0, r4
 8006fda:	4629      	mov	r1, r5
 8006fdc:	4632      	mov	r2, r6
 8006fde:	f7ff fff1 	bl	8006fc4 <WM__ForEachDesc>
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f007 f8a6 	bl	800e134 <GUI_ALLOC_h2p>
 8006fe8:	6a04      	ldr	r4, [r0, #32]
 8006fea:	e7f1      	b.n	8006fd0 <WM__ForEachDesc+0xc>
 8006fec:	bd70      	pop	{r4, r5, r6, pc}

08006fee <WM__GetFirstSibling>:
 8006fee:	b508      	push	{r3, lr}
 8006ff0:	f000 fb77 	bl	80076e2 <WM_GetParent>
 8006ff4:	b118      	cbz	r0, 8006ffe <WM__GetFirstSibling+0x10>
 8006ff6:	f007 f89d 	bl	800e134 <GUI_ALLOC_h2p>
 8006ffa:	69c0      	ldr	r0, [r0, #28]
 8006ffc:	bd08      	pop	{r3, pc}
 8006ffe:	bd08      	pop	{r3, pc}

08007000 <WM__GetLastSibling>:
 8007000:	b510      	push	{r4, lr}
 8007002:	4604      	mov	r4, r0
 8007004:	b130      	cbz	r0, 8007014 <WM__GetLastSibling+0x14>
 8007006:	4620      	mov	r0, r4
 8007008:	f007 f894 	bl	800e134 <GUI_ALLOC_h2p>
 800700c:	6a03      	ldr	r3, [r0, #32]
 800700e:	b10b      	cbz	r3, 8007014 <WM__GetLastSibling+0x14>
 8007010:	461c      	mov	r4, r3
 8007012:	e7f8      	b.n	8007006 <WM__GetLastSibling+0x6>
 8007014:	4620      	mov	r0, r4
 8007016:	bd10      	pop	{r4, pc}

08007018 <WM__GetPrevSibling>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4605      	mov	r5, r0
 800701c:	f7ff ffe7 	bl	8006fee <WM__GetFirstSibling>
 8007020:	4604      	mov	r4, r0
 8007022:	b154      	cbz	r4, 800703a <WM__GetPrevSibling+0x22>
 8007024:	42ac      	cmp	r4, r5
 8007026:	d007      	beq.n	8007038 <WM__GetPrevSibling+0x20>
 8007028:	4620      	mov	r0, r4
 800702a:	f007 f883 	bl	800e134 <GUI_ALLOC_h2p>
 800702e:	6a03      	ldr	r3, [r0, #32]
 8007030:	42ab      	cmp	r3, r5
 8007032:	d002      	beq.n	800703a <WM__GetPrevSibling+0x22>
 8007034:	461c      	mov	r4, r3
 8007036:	e7f4      	b.n	8007022 <WM__GetPrevSibling+0xa>
 8007038:	2400      	movs	r4, #0
 800703a:	4620      	mov	r0, r4
 800703c:	bd38      	pop	{r3, r4, r5, pc}

0800703e <WM__IsAncestor>:
 800703e:	b510      	push	{r4, lr}
 8007040:	460c      	mov	r4, r1
 8007042:	b908      	cbnz	r0, 8007048 <WM__IsAncestor+0xa>
 8007044:	2000      	movs	r0, #0
 8007046:	bd10      	pop	{r4, pc}
 8007048:	2900      	cmp	r1, #0
 800704a:	d0fb      	beq.n	8007044 <WM__IsAncestor+0x6>
 800704c:	f007 f872 	bl	800e134 <GUI_ALLOC_h2p>
 8007050:	6980      	ldr	r0, [r0, #24]
 8007052:	42a0      	cmp	r0, r4
 8007054:	d002      	beq.n	800705c <WM__IsAncestor+0x1e>
 8007056:	2800      	cmp	r0, #0
 8007058:	d1f8      	bne.n	800704c <WM__IsAncestor+0xe>
 800705a:	e7f3      	b.n	8007044 <WM__IsAncestor+0x6>
 800705c:	2001      	movs	r0, #1
 800705e:	bd10      	pop	{r4, pc}

08007060 <WM__IsAncestorOrSelf>:
 8007060:	4288      	cmp	r0, r1
 8007062:	d001      	beq.n	8007068 <WM__IsAncestorOrSelf+0x8>
 8007064:	f7ff bfeb 	b.w	800703e <WM__IsAncestor>
 8007068:	2001      	movs	r0, #1
 800706a:	4770      	bx	lr

0800706c <WM__IsChild>:
 800706c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800706e:	460d      	mov	r5, r1
 8007070:	4604      	mov	r4, r0
 8007072:	b160      	cbz	r0, 800708e <WM__IsChild+0x22>
 8007074:	f007 f868 	bl	800e148 <GUI_ALLOC_LockH>
 8007078:	9001      	str	r0, [sp, #4]
 800707a:	b120      	cbz	r0, 8007086 <WM__IsChild+0x1a>
 800707c:	6984      	ldr	r4, [r0, #24]
 800707e:	1b63      	subs	r3, r4, r5
 8007080:	425c      	negs	r4, r3
 8007082:	415c      	adcs	r4, r3
 8007084:	e000      	b.n	8007088 <WM__IsChild+0x1c>
 8007086:	4604      	mov	r4, r0
 8007088:	a801      	add	r0, sp, #4
 800708a:	f007 f86b 	bl	800e164 <GUI_ALLOC_UnlockH>
 800708e:	4620      	mov	r0, r4
 8007090:	b003      	add	sp, #12
 8007092:	bd30      	pop	{r4, r5, pc}

08007094 <WM__GetFocusedChild>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4d06      	ldr	r5, [pc, #24]	; (80070b0 <WM__GetFocusedChild+0x1c>)
 8007098:	4c06      	ldr	r4, [pc, #24]	; (80070b4 <WM__GetFocusedChild+0x20>)
 800709a:	682b      	ldr	r3, [r5, #0]
 800709c:	4601      	mov	r1, r0
 800709e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80070a2:	f7ff ffe3 	bl	800706c <WM__IsChild>
 80070a6:	b110      	cbz	r0, 80070ae <WM__GetFocusedChild+0x1a>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	2000560c 	.word	0x2000560c
 80070b4:	200055fc 	.word	0x200055fc

080070b8 <WM__SendMessage>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	4c0d      	ldr	r4, [pc, #52]	; (80070f0 <WM__SendMessage+0x38>)
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	2b13      	cmp	r3, #19
 80070c0:	4606      	mov	r6, r0
 80070c2:	460d      	mov	r5, r1
 80070c4:	dc12      	bgt.n	80070ec <WM__SendMessage+0x34>
 80070c6:	f007 f835 	bl	800e134 <GUI_ALLOC_h2p>
 80070ca:	6903      	ldr	r3, [r0, #16]
 80070cc:	606e      	str	r6, [r5, #4]
 80070ce:	b143      	cbz	r3, 80070e2 <WM__SendMessage+0x2a>
 80070d0:	6822      	ldr	r2, [r4, #0]
 80070d2:	4628      	mov	r0, r5
 80070d4:	3201      	adds	r2, #1
 80070d6:	6022      	str	r2, [r4, #0]
 80070d8:	4798      	blx	r3
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	3b01      	subs	r3, #1
 80070de:	6023      	str	r3, [r4, #0]
 80070e0:	bd70      	pop	{r4, r5, r6, pc}
 80070e2:	4628      	mov	r0, r5
 80070e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070e8:	f001 be76 	b.w	8008dd8 <WM_DefaultProc>
 80070ec:	bd70      	pop	{r4, r5, r6, pc}
 80070ee:	bf00      	nop
 80070f0:	200053f8 	.word	0x200053f8

080070f4 <WM__SendMessageNoPara>:
 80070f4:	b530      	push	{r4, r5, lr}
 80070f6:	b085      	sub	sp, #20
 80070f8:	4604      	mov	r4, r0
 80070fa:	2210      	movs	r2, #16
 80070fc:	460d      	mov	r5, r1
 80070fe:	4668      	mov	r0, sp
 8007100:	2100      	movs	r1, #0
 8007102:	f00a f9e3 	bl	80114cc <memset>
 8007106:	4620      	mov	r0, r4
 8007108:	f007 f814 	bl	800e134 <GUI_ALLOC_h2p>
 800710c:	6903      	ldr	r3, [r0, #16]
 800710e:	b11b      	cbz	r3, 8007118 <WM__SendMessageNoPara+0x24>
 8007110:	9401      	str	r4, [sp, #4]
 8007112:	9500      	str	r5, [sp, #0]
 8007114:	4668      	mov	r0, sp
 8007116:	4798      	blx	r3
 8007118:	b005      	add	sp, #20
 800711a:	bd30      	pop	{r4, r5, pc}

0800711c <WM__UpdateChildPositions>:
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	b087      	sub	sp, #28
 8007122:	69c4      	ldr	r4, [r0, #28]
 8007124:	9303      	str	r3, [sp, #12]
 8007126:	468a      	mov	sl, r1
 8007128:	4693      	mov	fp, r2
 800712a:	2c00      	cmp	r4, #0
 800712c:	d06d      	beq.n	800720a <WM__UpdateChildPositions+0xee>
 800712e:	4620      	mov	r0, r4
 8007130:	f007 f80a 	bl	800e148 <GUI_ALLOC_LockH>
 8007134:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007136:	9005      	str	r0, [sp, #20]
 8007138:	f401 7320 	and.w	r3, r1, #640	; 0x280
 800713c:	2b80      	cmp	r3, #128	; 0x80
 800713e:	f8b0 8000 	ldrh.w	r8, [r0]
 8007142:	8842      	ldrh	r2, [r0, #2]
 8007144:	8886      	ldrh	r6, [r0, #4]
 8007146:	88c5      	ldrh	r5, [r0, #6]
 8007148:	d008      	beq.n	800715c <WM__UpdateChildPositions+0x40>
 800714a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800714e:	d108      	bne.n	8007162 <WM__UpdateChildPositions+0x46>
 8007150:	eb08 090a 	add.w	r9, r8, sl
 8007154:	fa1f f989 	uxth.w	r9, r9
 8007158:	9b03      	ldr	r3, [sp, #12]
 800715a:	e008      	b.n	800716e <WM__UpdateChildPositions+0x52>
 800715c:	9803      	ldr	r0, [sp, #12]
 800715e:	b283      	uxth	r3, r0
 8007160:	e001      	b.n	8007166 <WM__UpdateChildPositions+0x4a>
 8007162:	fa1f f38a 	uxth.w	r3, sl
 8007166:	eb03 0908 	add.w	r9, r3, r8
 800716a:	fa1f f989 	uxth.w	r9, r9
 800716e:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 8007172:	4433      	add	r3, r6
 8007174:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007178:	b29b      	uxth	r3, r3
 800717a:	d008      	beq.n	800718e <WM__UpdateChildPositions+0x72>
 800717c:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8007180:	d108      	bne.n	8007194 <WM__UpdateChildPositions+0x78>
 8007182:	eb02 0c0b 	add.w	ip, r2, fp
 8007186:	fa1f fc8c 	uxth.w	ip, ip
 800718a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800718c:	e008      	b.n	80071a0 <WM__UpdateChildPositions+0x84>
 800718e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007190:	b28f      	uxth	r7, r1
 8007192:	e001      	b.n	8007198 <WM__UpdateChildPositions+0x7c>
 8007194:	fa1f f78b 	uxth.w	r7, fp
 8007198:	eb07 0c02 	add.w	ip, r7, r2
 800719c:	fa1f fc8c 	uxth.w	ip, ip
 80071a0:	fa0f f989 	sxth.w	r9, r9
 80071a4:	fa0f f888 	sxth.w	r8, r8
 80071a8:	b212      	sxth	r2, r2
 80071aa:	442f      	add	r7, r5
 80071ac:	fa0f fc8c 	sxth.w	ip, ip
 80071b0:	ebb9 0108 	subs.w	r1, r9, r8
 80071b4:	9202      	str	r2, [sp, #8]
 80071b6:	b2bf      	uxth	r7, r7
 80071b8:	ebc2 020c 	rsb	r2, r2, ip
 80071bc:	d100      	bne.n	80071c0 <WM__UpdateChildPositions+0xa4>
 80071be:	b142      	cbz	r2, 80071d2 <WM__UpdateChildPositions+0xb6>
 80071c0:	4620      	mov	r0, r4
 80071c2:	9301      	str	r3, [sp, #4]
 80071c4:	f8cd c000 	str.w	ip, [sp]
 80071c8:	f000 f9de 	bl	8007588 <WM_MoveWindow>
 80071cc:	f8dd c000 	ldr.w	ip, [sp]
 80071d0:	9b01      	ldr	r3, [sp, #4]
 80071d2:	b21b      	sxth	r3, r3
 80071d4:	ebc9 0903 	rsb	r9, r9, r3
 80071d8:	b236      	sxth	r6, r6
 80071da:	9b02      	ldr	r3, [sp, #8]
 80071dc:	ebc6 0808 	rsb	r8, r6, r8
 80071e0:	b23f      	sxth	r7, r7
 80071e2:	b22d      	sxth	r5, r5
 80071e4:	ebcc 0c07 	rsb	ip, ip, r7
 80071e8:	1b5d      	subs	r5, r3, r5
 80071ea:	eb19 0108 	adds.w	r1, r9, r8
 80071ee:	eb0c 0205 	add.w	r2, ip, r5
 80071f2:	d100      	bne.n	80071f6 <WM__UpdateChildPositions+0xda>
 80071f4:	b112      	cbz	r2, 80071fc <WM__UpdateChildPositions+0xe0>
 80071f6:	4620      	mov	r0, r4
 80071f8:	f000 fb1c 	bl	8007834 <WM_ResizeWindow>
 80071fc:	a806      	add	r0, sp, #24
 80071fe:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8007202:	6a1c      	ldr	r4, [r3, #32]
 8007204:	f006 ffae 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007208:	e78f      	b.n	800712a <WM__UpdateChildPositions+0xe>
 800720a:	b007      	add	sp, #28
 800720c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007210 <WM__AddCriticalHandle>:
 8007210:	4b02      	ldr	r3, [pc, #8]	; (800721c <WM__AddCriticalHandle+0xc>)
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	6002      	str	r2, [r0, #0]
 8007216:	6018      	str	r0, [r3, #0]
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	20005628 	.word	0x20005628

08007220 <WM__GetClientRectEx>:
 8007220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007222:	460d      	mov	r5, r1
 8007224:	b158      	cbz	r0, 800723e <WM__GetClientRectEx+0x1e>
 8007226:	b151      	cbz	r1, 800723e <WM__GetClientRectEx+0x1e>
 8007228:	f006 ff8e 	bl	800e148 <GUI_ALLOC_LockH>
 800722c:	ac02      	add	r4, sp, #8
 800722e:	4629      	mov	r1, r5
 8007230:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007234:	f001 f866 	bl	8008304 <WM__GetClientRectWin>
 8007238:	4620      	mov	r0, r4
 800723a:	f006 ff93 	bl	800e164 <GUI_ALLOC_UnlockH>
 800723e:	b003      	add	sp, #12
 8007240:	bd30      	pop	{r4, r5, pc}
	...

08007244 <WM_SetHasTrans>:
 8007244:	b513      	push	{r0, r1, r4, lr}
 8007246:	4604      	mov	r4, r0
 8007248:	b1b8      	cbz	r0, 800727a <WM_SetHasTrans+0x36>
 800724a:	f006 ff7d 	bl	800e148 <GUI_ALLOC_LockH>
 800724e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007250:	9001      	str	r0, [sp, #4]
 8007252:	07db      	lsls	r3, r3, #31
 8007254:	d40e      	bmi.n	8007274 <WM_SetHasTrans+0x30>
 8007256:	4620      	mov	r0, r4
 8007258:	f000 fc28 	bl	8007aac <WM_ValidateWindow>
 800725c:	9b01      	ldr	r3, [sp, #4]
 800725e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007260:	f042 0201 	orr.w	r2, r2, #1
 8007264:	629a      	str	r2, [r3, #40]	; 0x28
 8007266:	4b06      	ldr	r3, [pc, #24]	; (8007280 <WM_SetHasTrans+0x3c>)
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	4620      	mov	r0, r4
 800726c:	3201      	adds	r2, #1
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	f001 f992 	bl	8008598 <WM_InvalidateWindow>
 8007274:	a801      	add	r0, sp, #4
 8007276:	f006 ff75 	bl	800e164 <GUI_ALLOC_UnlockH>
 800727a:	b002      	add	sp, #8
 800727c:	bd10      	pop	{r4, pc}
 800727e:	bf00      	nop
 8007280:	2000563c 	.word	0x2000563c

08007284 <WM_GetHasTrans>:
 8007284:	b508      	push	{r3, lr}
 8007286:	b128      	cbz	r0, 8007294 <WM_GetHasTrans+0x10>
 8007288:	f006 ff54 	bl	800e134 <GUI_ALLOC_h2p>
 800728c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800728e:	f000 0001 	and.w	r0, r0, #1
 8007292:	bd08      	pop	{r3, pc}
 8007294:	bd08      	pop	{r3, pc}

08007296 <_GetPrevChild>:
 8007296:	b510      	push	{r4, lr}
 8007298:	4604      	mov	r4, r0
 800729a:	b918      	cbnz	r0, 80072a4 <_GetPrevChild+0xe>
 800729c:	4620      	mov	r0, r4
 800729e:	f7ff feaf 	bl	8007000 <WM__GetLastSibling>
 80072a2:	e003      	b.n	80072ac <_GetPrevChild+0x16>
 80072a4:	f7ff feb8 	bl	8007018 <WM__GetPrevSibling>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d0f7      	beq.n	800729c <_GetPrevChild+0x6>
 80072ac:	42a0      	cmp	r0, r4
 80072ae:	bf08      	it	eq
 80072b0:	2000      	moveq	r0, #0
 80072b2:	bd10      	pop	{r4, pc}

080072b4 <WM_SetFocusOnPrevChild>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	4604      	mov	r4, r0
 80072b8:	b1b0      	cbz	r0, 80072e8 <WM_SetFocusOnPrevChild+0x34>
 80072ba:	f7ff feeb 	bl	8007094 <WM__GetFocusedChild>
 80072be:	f7ff ffea 	bl	8007296 <_GetPrevChild>
 80072c2:	4605      	mov	r5, r0
 80072c4:	4604      	mov	r4, r0
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 fa7e 	bl	80077c8 <WM_IsFocusable>
 80072cc:	b930      	cbnz	r0, 80072dc <WM_SetFocusOnPrevChild+0x28>
 80072ce:	b12c      	cbz	r4, 80072dc <WM_SetFocusOnPrevChild+0x28>
 80072d0:	4620      	mov	r0, r4
 80072d2:	f7ff ffe0 	bl	8007296 <_GetPrevChild>
 80072d6:	42a8      	cmp	r0, r5
 80072d8:	4604      	mov	r4, r0
 80072da:	d1f4      	bne.n	80072c6 <WM_SetFocusOnPrevChild+0x12>
 80072dc:	4620      	mov	r0, r4
 80072de:	f000 fb3f 	bl	8007960 <WM_SetFocus>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	bf18      	it	ne
 80072e6:	2400      	movne	r4, #0
 80072e8:	4620      	mov	r0, r4
 80072ea:	bd38      	pop	{r3, r4, r5, pc}

080072ec <_GetNextChild>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4605      	mov	r5, r0
 80072f0:	460c      	mov	r4, r1
 80072f2:	b921      	cbnz	r1, 80072fe <_GetNextChild+0x12>
 80072f4:	4628      	mov	r0, r5
 80072f6:	f006 ff1d 	bl	800e134 <GUI_ALLOC_h2p>
 80072fa:	69c0      	ldr	r0, [r0, #28]
 80072fc:	e005      	b.n	800730a <_GetNextChild+0x1e>
 80072fe:	4608      	mov	r0, r1
 8007300:	f006 ff18 	bl	800e134 <GUI_ALLOC_h2p>
 8007304:	6a00      	ldr	r0, [r0, #32]
 8007306:	2800      	cmp	r0, #0
 8007308:	d0f4      	beq.n	80072f4 <_GetNextChild+0x8>
 800730a:	42a0      	cmp	r0, r4
 800730c:	bf08      	it	eq
 800730e:	2000      	moveq	r0, #0
 8007310:	bd38      	pop	{r3, r4, r5, pc}
	...

08007314 <WM_SetFocusOnNextChild>:
 8007314:	b570      	push	{r4, r5, r6, lr}
 8007316:	4605      	mov	r5, r0
 8007318:	b328      	cbz	r0, 8007366 <WM_SetFocusOnNextChild+0x52>
 800731a:	f7ff febb 	bl	8007094 <WM__GetFocusedChild>
 800731e:	4601      	mov	r1, r0
 8007320:	4628      	mov	r0, r5
 8007322:	f7ff ffe3 	bl	80072ec <_GetNextChild>
 8007326:	4606      	mov	r6, r0
 8007328:	4604      	mov	r4, r0
 800732a:	4620      	mov	r0, r4
 800732c:	f000 fa4c 	bl	80077c8 <WM_IsFocusable>
 8007330:	b938      	cbnz	r0, 8007342 <WM_SetFocusOnNextChild+0x2e>
 8007332:	b13c      	cbz	r4, 8007344 <WM_SetFocusOnNextChild+0x30>
 8007334:	4621      	mov	r1, r4
 8007336:	4628      	mov	r0, r5
 8007338:	f7ff ffd8 	bl	80072ec <_GetNextChild>
 800733c:	42b0      	cmp	r0, r6
 800733e:	4604      	mov	r4, r0
 8007340:	d1f3      	bne.n	800732a <WM_SetFocusOnNextChild+0x16>
 8007342:	b90c      	cbnz	r4, 8007348 <WM_SetFocusOnNextChild+0x34>
 8007344:	2400      	movs	r4, #0
 8007346:	e00f      	b.n	8007368 <WM_SetFocusOnNextChild+0x54>
 8007348:	4d08      	ldr	r5, [pc, #32]	; (800736c <WM_SetFocusOnNextChild+0x58>)
 800734a:	4620      	mov	r0, r4
 800734c:	682e      	ldr	r6, [r5, #0]
 800734e:	f000 ffe5 	bl	800831c <WM__GetTopLevelLayer>
 8007352:	1c43      	adds	r3, r0, #1
 8007354:	d008      	beq.n	8007368 <WM_SetFocusOnNextChild+0x54>
 8007356:	6028      	str	r0, [r5, #0]
 8007358:	4620      	mov	r0, r4
 800735a:	f000 fb01 	bl	8007960 <WM_SetFocus>
 800735e:	602e      	str	r6, [r5, #0]
 8007360:	2800      	cmp	r0, #0
 8007362:	d1ef      	bne.n	8007344 <WM_SetFocusOnNextChild+0x30>
 8007364:	e000      	b.n	8007368 <WM_SetFocusOnNextChild+0x54>
 8007366:	4604      	mov	r4, r0
 8007368:	4620      	mov	r0, r4
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	2000560c 	.word	0x2000560c

08007370 <WM_SetCaptureMove>:
 8007370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007374:	b085      	sub	sp, #20
 8007376:	4604      	mov	r4, r0
 8007378:	460d      	mov	r5, r1
 800737a:	4691      	mov	r9, r2
 800737c:	4698      	mov	r8, r3
 800737e:	f000 fa07 	bl	8007790 <WM_HasCaptured>
 8007382:	4e21      	ldr	r6, [pc, #132]	; (8007408 <WM_SetCaptureMove+0x98>)
 8007384:	b940      	cbnz	r0, 8007398 <WM_SetCaptureMove+0x28>
 8007386:	4620      	mov	r0, r4
 8007388:	2101      	movs	r1, #1
 800738a:	f000 f859 	bl	8007440 <WM_SetCapture>
 800738e:	682b      	ldr	r3, [r5, #0]
 8007390:	8033      	strh	r3, [r6, #0]
 8007392:	686b      	ldr	r3, [r5, #4]
 8007394:	8073      	strh	r3, [r6, #2]
 8007396:	e034      	b.n	8007402 <WM_SetCaptureMove+0x92>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	f9b6 7000 	ldrsh.w	r7, [r6]
 800739e:	686d      	ldr	r5, [r5, #4]
 80073a0:	1bdf      	subs	r7, r3, r7
 80073a2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80073a6:	4620      	mov	r0, r4
 80073a8:	1aed      	subs	r5, r5, r3
 80073aa:	f1b9 0f00 	cmp.w	r9, #0
 80073ae:	d102      	bne.n	80073b6 <WM_SetCaptureMove+0x46>
 80073b0:	f1b8 0f00 	cmp.w	r8, #0
 80073b4:	d021      	beq.n	80073fa <WM_SetCaptureMove+0x8a>
 80073b6:	4669      	mov	r1, sp
 80073b8:	f000 f9de 	bl	8007778 <WM_GetWindowRectEx>
 80073bc:	f1b8 0f00 	cmp.w	r8, #0
 80073c0:	d005      	beq.n	80073ce <WM_SetCaptureMove+0x5e>
 80073c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	4498      	add	r8, r3
 80073ca:	f8ad 8006 	strh.w	r8, [sp, #6]
 80073ce:	4620      	mov	r0, r4
 80073d0:	f000 f987 	bl	80076e2 <WM_GetParent>
 80073d4:	a902      	add	r1, sp, #8
 80073d6:	f000 f9cf 	bl	8007778 <WM_GetWindowRectEx>
 80073da:	4668      	mov	r0, sp
 80073dc:	4639      	mov	r1, r7
 80073de:	462a      	mov	r2, r5
 80073e0:	f005 fbd5 	bl	800cb8e <GUI_MoveRect>
 80073e4:	a802      	add	r0, sp, #8
 80073e6:	4601      	mov	r1, r0
 80073e8:	464a      	mov	r2, r9
 80073ea:	f004 fc20 	bl	800bc2e <GUI__ReduceRect>
 80073ee:	4668      	mov	r0, sp
 80073f0:	a902      	add	r1, sp, #8
 80073f2:	f005 fc17 	bl	800cc24 <GUI_RectsIntersect>
 80073f6:	b120      	cbz	r0, 8007402 <WM_SetCaptureMove+0x92>
 80073f8:	4620      	mov	r0, r4
 80073fa:	4639      	mov	r1, r7
 80073fc:	462a      	mov	r2, r5
 80073fe:	f000 f8c3 	bl	8007588 <WM_MoveWindow>
 8007402:	b005      	add	sp, #20
 8007404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007408:	200053fc 	.word	0x200053fc

0800740c <WM__ReleaseCapture>:
 800740c:	b530      	push	{r4, r5, lr}
 800740e:	4d0a      	ldr	r5, [pc, #40]	; (8007438 <WM__ReleaseCapture+0x2c>)
 8007410:	4c0a      	ldr	r4, [pc, #40]	; (800743c <WM__ReleaseCapture+0x30>)
 8007412:	682b      	ldr	r3, [r5, #0]
 8007414:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8007418:	b085      	sub	sp, #20
 800741a:	b150      	cbz	r0, 8007432 <WM__ReleaseCapture+0x26>
 800741c:	a904      	add	r1, sp, #16
 800741e:	2318      	movs	r3, #24
 8007420:	f841 3d10 	str.w	r3, [r1, #-16]!
 8007424:	4669      	mov	r1, sp
 8007426:	f7ff fe47 	bl	80070b8 <WM__SendMessage>
 800742a:	682b      	ldr	r3, [r5, #0]
 800742c:	2200      	movs	r2, #0
 800742e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8007432:	b005      	add	sp, #20
 8007434:	bd30      	pop	{r4, r5, pc}
 8007436:	bf00      	nop
 8007438:	2000560c 	.word	0x2000560c
 800743c:	20005630 	.word	0x20005630

08007440 <WM_SetCapture>:
 8007440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007442:	4b09      	ldr	r3, [pc, #36]	; (8007468 <WM_SetCapture+0x28>)
 8007444:	4a09      	ldr	r2, [pc, #36]	; (800746c <WM_SetCapture+0x2c>)
 8007446:	4604      	mov	r4, r0
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	460f      	mov	r7, r1
 800744c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8007450:	42a1      	cmp	r1, r4
 8007452:	4615      	mov	r5, r2
 8007454:	461e      	mov	r6, r3
 8007456:	d001      	beq.n	800745c <WM_SetCapture+0x1c>
 8007458:	f7ff ffd8 	bl	800740c <WM__ReleaseCapture>
 800745c:	6833      	ldr	r3, [r6, #0]
 800745e:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
 8007462:	4b03      	ldr	r3, [pc, #12]	; (8007470 <WM_SetCapture+0x30>)
 8007464:	701f      	strb	r7, [r3, #0]
 8007466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007468:	2000560c 	.word	0x2000560c
 800746c:	20005630 	.word	0x20005630
 8007470:	20005610 	.word	0x20005610

08007474 <_MoveDescendents>:
 8007474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007478:	b088      	sub	sp, #32
 800747a:	4606      	mov	r6, r0
 800747c:	460c      	mov	r4, r1
 800747e:	4615      	mov	r5, r2
 8007480:	a804      	add	r0, sp, #16
 8007482:	2100      	movs	r1, #0
 8007484:	2210      	movs	r2, #16
 8007486:	f00a f821 	bl	80114cc <memset>
 800748a:	b336      	cbz	r6, 80074da <_MoveDescendents+0x66>
 800748c:	4630      	mov	r0, r6
 800748e:	f006 fe5b 	bl	800e148 <GUI_ALLOC_LockH>
 8007492:	4621      	mov	r1, r4
 8007494:	462a      	mov	r2, r5
 8007496:	9001      	str	r0, [sp, #4]
 8007498:	f005 fb79 	bl	800cb8e <GUI_MoveRect>
 800749c:	9801      	ldr	r0, [sp, #4]
 800749e:	4621      	mov	r1, r4
 80074a0:	3008      	adds	r0, #8
 80074a2:	462a      	mov	r2, r5
 80074a4:	f005 fb73 	bl	800cb8e <GUI_MoveRect>
 80074a8:	a808      	add	r0, sp, #32
 80074aa:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 80074ae:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80074b2:	6a17      	ldr	r7, [r2, #32]
 80074b4:	f006 fe56 	bl	800e164 <GUI_ALLOC_UnlockH>
 80074b8:	4640      	mov	r0, r8
 80074ba:	4621      	mov	r1, r4
 80074bc:	462a      	mov	r2, r5
 80074be:	f7ff ffd9 	bl	8007474 <_MoveDescendents>
 80074c2:	2303      	movs	r3, #3
 80074c4:	9304      	str	r3, [sp, #16]
 80074c6:	4630      	mov	r0, r6
 80074c8:	ab02      	add	r3, sp, #8
 80074ca:	a904      	add	r1, sp, #16
 80074cc:	9307      	str	r3, [sp, #28]
 80074ce:	9402      	str	r4, [sp, #8]
 80074d0:	9503      	str	r5, [sp, #12]
 80074d2:	463e      	mov	r6, r7
 80074d4:	f7ff fdf0 	bl	80070b8 <WM__SendMessage>
 80074d8:	e7d7      	b.n	800748a <_MoveDescendents+0x16>
 80074da:	b008      	add	sp, #32
 80074dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080074e0 <WM__MoveWindow>:
 80074e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074e4:	b08b      	sub	sp, #44	; 0x2c
 80074e6:	4606      	mov	r6, r0
 80074e8:	460d      	mov	r5, r1
 80074ea:	4614      	mov	r4, r2
 80074ec:	a806      	add	r0, sp, #24
 80074ee:	2100      	movs	r1, #0
 80074f0:	2210      	movs	r2, #16
 80074f2:	f009 ffeb 	bl	80114cc <memset>
 80074f6:	2e00      	cmp	r6, #0
 80074f8:	d043      	beq.n	8007582 <WM__MoveWindow+0xa2>
 80074fa:	b90d      	cbnz	r5, 8007500 <WM__MoveWindow+0x20>
 80074fc:	2c00      	cmp	r4, #0
 80074fe:	d040      	beq.n	8007582 <WM__MoveWindow+0xa2>
 8007500:	4630      	mov	r0, r6
 8007502:	f006 fe21 	bl	800e148 <GUI_ALLOC_LockH>
 8007506:	4603      	mov	r3, r0
 8007508:	9001      	str	r0, [sp, #4]
 800750a:	c803      	ldmia	r0, {r0, r1}
 800750c:	f10d 0808 	add.w	r8, sp, #8
 8007510:	e888 0003 	stmia.w	r8, {r0, r1}
 8007514:	4622      	mov	r2, r4
 8007516:	4618      	mov	r0, r3
 8007518:	4629      	mov	r1, r5
 800751a:	f005 fb38 	bl	800cb8e <GUI_MoveRect>
 800751e:	9801      	ldr	r0, [sp, #4]
 8007520:	af0a      	add	r7, sp, #40	; 0x28
 8007522:	4629      	mov	r1, r5
 8007524:	4622      	mov	r2, r4
 8007526:	3008      	adds	r0, #8
 8007528:	f005 fb31 	bl	800cb8e <GUI_MoveRect>
 800752c:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 8007530:	f8d3 901c 	ldr.w	r9, [r3, #28]
 8007534:	4638      	mov	r0, r7
 8007536:	f006 fe15 	bl	800e164 <GUI_ALLOC_UnlockH>
 800753a:	4622      	mov	r2, r4
 800753c:	4648      	mov	r0, r9
 800753e:	4629      	mov	r1, r5
 8007540:	f7ff ff98 	bl	8007474 <_MoveDescendents>
 8007544:	4630      	mov	r0, r6
 8007546:	f006 fdff 	bl	800e148 <GUI_ALLOC_LockH>
 800754a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800754c:	9001      	str	r0, [sp, #4]
 800754e:	0792      	lsls	r2, r2, #30
 8007550:	d50a      	bpl.n	8007568 <WM__MoveWindow+0x88>
 8007552:	6981      	ldr	r1, [r0, #24]
 8007554:	b141      	cbz	r1, 8007568 <WM__MoveWindow+0x88>
 8007556:	6a02      	ldr	r2, [r0, #32]
 8007558:	f000 ffb5 	bl	80084c6 <WM__InvalidateParent>
 800755c:	9b01      	ldr	r3, [sp, #4]
 800755e:	4640      	mov	r0, r8
 8007560:	6999      	ldr	r1, [r3, #24]
 8007562:	6a1a      	ldr	r2, [r3, #32]
 8007564:	f000 ffaf 	bl	80084c6 <WM__InvalidateParent>
 8007568:	4638      	mov	r0, r7
 800756a:	f006 fdfb 	bl	800e164 <GUI_ALLOC_UnlockH>
 800756e:	2303      	movs	r3, #3
 8007570:	9306      	str	r3, [sp, #24]
 8007572:	4630      	mov	r0, r6
 8007574:	ab04      	add	r3, sp, #16
 8007576:	a906      	add	r1, sp, #24
 8007578:	9309      	str	r3, [sp, #36]	; 0x24
 800757a:	9504      	str	r5, [sp, #16]
 800757c:	9405      	str	r4, [sp, #20]
 800757e:	f7ff fd9b 	bl	80070b8 <WM__SendMessage>
 8007582:	b00b      	add	sp, #44	; 0x2c
 8007584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007588 <WM_MoveWindow>:
 8007588:	f7ff bfaa 	b.w	80074e0 <WM__MoveWindow>

0800758c <WM_DisableMemdev>:
 800758c:	b508      	push	{r3, lr}
 800758e:	b138      	cbz	r0, 80075a0 <WM_DisableMemdev+0x14>
 8007590:	f006 fdd0 	bl	800e134 <GUI_ALLOC_h2p>
 8007594:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007596:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800759a:	f023 0304 	bic.w	r3, r3, #4
 800759e:	6283      	str	r3, [r0, #40]	; 0x28
 80075a0:	bd08      	pop	{r3, pc}

080075a2 <WM_ForEachDesc>:
 80075a2:	f7ff bd0f 	b.w	8006fc4 <WM__ForEachDesc>
	...

080075a8 <WM_GetClientRect>:
 80075a8:	4b04      	ldr	r3, [pc, #16]	; (80075bc <WM_GetClientRect+0x14>)
 80075aa:	4601      	mov	r1, r0
 80075ac:	6818      	ldr	r0, [r3, #0]
 80075ae:	b910      	cbnz	r0, 80075b6 <WM_GetClientRect+0xe>
 80075b0:	4b03      	ldr	r3, [pc, #12]	; (80075c0 <WM_GetClientRect+0x18>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80075b6:	f7ff be33 	b.w	8007220 <WM__GetClientRectEx>
 80075ba:	bf00      	nop
 80075bc:	200055e8 	.word	0x200055e8
 80075c0:	20000084 	.word	0x20000084

080075c4 <WM_GetClientWindow>:
 80075c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075c6:	2300      	movs	r3, #0
 80075c8:	a904      	add	r1, sp, #16
 80075ca:	9303      	str	r3, [sp, #12]
 80075cc:	2317      	movs	r3, #23
 80075ce:	f841 3d10 	str.w	r3, [r1, #-16]!
 80075d2:	4669      	mov	r1, sp
 80075d4:	f000 fe87 	bl	80082e6 <WM_SendMessage>
 80075d8:	9803      	ldr	r0, [sp, #12]
 80075da:	b005      	add	sp, #20
 80075dc:	f85d fb04 	ldr.w	pc, [sp], #4

080075e0 <WM_GetDesktopWindow>:
 80075e0:	4b03      	ldr	r3, [pc, #12]	; (80075f0 <WM_GetDesktopWindow+0x10>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	7c5a      	ldrb	r2, [r3, #17]
 80075e6:	4b03      	ldr	r3, [pc, #12]	; (80075f4 <WM_GetDesktopWindow+0x14>)
 80075e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	20000084 	.word	0x20000084
 80075f4:	200055ec 	.word	0x200055ec

080075f8 <WM_GetFirstChild>:
 80075f8:	b508      	push	{r3, lr}
 80075fa:	4603      	mov	r3, r0
 80075fc:	b110      	cbz	r0, 8007604 <WM_GetFirstChild+0xc>
 80075fe:	f006 fd99 	bl	800e134 <GUI_ALLOC_h2p>
 8007602:	69c3      	ldr	r3, [r0, #28]
 8007604:	4618      	mov	r0, r3
 8007606:	bd08      	pop	{r3, pc}

08007608 <WM_GetFocusedWindow>:
 8007608:	4b02      	ldr	r3, [pc, #8]	; (8007614 <WM_GetFocusedWindow+0xc>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	4b02      	ldr	r3, [pc, #8]	; (8007618 <WM_GetFocusedWindow+0x10>)
 800760e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007612:	4770      	bx	lr
 8007614:	2000560c 	.word	0x2000560c
 8007618:	200055fc 	.word	0x200055fc

0800761c <WM_GetId>:
 800761c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800761e:	4604      	mov	r4, r0
 8007620:	2210      	movs	r2, #16
 8007622:	4668      	mov	r0, sp
 8007624:	2100      	movs	r1, #0
 8007626:	f009 ff51 	bl	80114cc <memset>
 800762a:	2315      	movs	r3, #21
 800762c:	4620      	mov	r0, r4
 800762e:	4669      	mov	r1, sp
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	f000 fe58 	bl	80082e6 <WM_SendMessage>
 8007636:	9803      	ldr	r0, [sp, #12]
 8007638:	b004      	add	sp, #16
 800763a:	bd10      	pop	{r4, pc}

0800763c <_GetDialogItem>:
 800763c:	b570      	push	{r4, r5, r6, lr}
 800763e:	4606      	mov	r6, r0
 8007640:	460d      	mov	r5, r1
 8007642:	f006 fd77 	bl	800e134 <GUI_ALLOC_h2p>
 8007646:	69c4      	ldr	r4, [r0, #28]
 8007648:	b14c      	cbz	r4, 800765e <_GetDialogItem+0x22>
 800764a:	4620      	mov	r0, r4
 800764c:	f7ff ffe6 	bl	800761c <WM_GetId>
 8007650:	42a8      	cmp	r0, r5
 8007652:	4620      	mov	r0, r4
 8007654:	d013      	beq.n	800767e <_GetDialogItem+0x42>
 8007656:	f006 fd6d 	bl	800e134 <GUI_ALLOC_h2p>
 800765a:	6a04      	ldr	r4, [r0, #32]
 800765c:	e7f4      	b.n	8007648 <_GetDialogItem+0xc>
 800765e:	4630      	mov	r0, r6
 8007660:	f006 fd68 	bl	800e134 <GUI_ALLOC_h2p>
 8007664:	69c4      	ldr	r4, [r0, #28]
 8007666:	4620      	mov	r0, r4
 8007668:	b144      	cbz	r4, 800767c <_GetDialogItem+0x40>
 800766a:	4629      	mov	r1, r5
 800766c:	f7ff ffe6 	bl	800763c <_GetDialogItem>
 8007670:	b928      	cbnz	r0, 800767e <_GetDialogItem+0x42>
 8007672:	4620      	mov	r0, r4
 8007674:	f006 fd5e 	bl	800e134 <GUI_ALLOC_h2p>
 8007678:	6a04      	ldr	r4, [r0, #32]
 800767a:	e7f4      	b.n	8007666 <_GetDialogItem+0x2a>
 800767c:	bd70      	pop	{r4, r5, r6, pc}
 800767e:	bd70      	pop	{r4, r5, r6, pc}

08007680 <WM_GetDialogItem>:
 8007680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007682:	460d      	mov	r5, r1
 8007684:	4604      	mov	r4, r0
 8007686:	b1c8      	cbz	r0, 80076bc <WM_GetDialogItem+0x3c>
 8007688:	f006 fd5e 	bl	800e148 <GUI_ALLOC_LockH>
 800768c:	ab02      	add	r3, sp, #8
 800768e:	69c4      	ldr	r4, [r0, #28]
 8007690:	f843 0d04 	str.w	r0, [r3, #-4]!
 8007694:	4618      	mov	r0, r3
 8007696:	f006 fd65 	bl	800e164 <GUI_ALLOC_UnlockH>
 800769a:	b17c      	cbz	r4, 80076bc <WM_GetDialogItem+0x3c>
 800769c:	4620      	mov	r0, r4
 800769e:	f7ff ffbd 	bl	800761c <WM_GetId>
 80076a2:	42a8      	cmp	r0, r5
 80076a4:	d00a      	beq.n	80076bc <WM_GetDialogItem+0x3c>
 80076a6:	4620      	mov	r0, r4
 80076a8:	4629      	mov	r1, r5
 80076aa:	f7ff ffc7 	bl	800763c <_GetDialogItem>
 80076ae:	b920      	cbnz	r0, 80076ba <WM_GetDialogItem+0x3a>
 80076b0:	4620      	mov	r0, r4
 80076b2:	f006 fd3f 	bl	800e134 <GUI_ALLOC_h2p>
 80076b6:	6a04      	ldr	r4, [r0, #32]
 80076b8:	e7ef      	b.n	800769a <WM_GetDialogItem+0x1a>
 80076ba:	4604      	mov	r4, r0
 80076bc:	4620      	mov	r0, r4
 80076be:	b003      	add	sp, #12
 80076c0:	bd30      	pop	{r4, r5, pc}

080076c2 <WM_GetNextSibling>:
 80076c2:	b508      	push	{r3, lr}
 80076c4:	4603      	mov	r3, r0
 80076c6:	b110      	cbz	r0, 80076ce <WM_GetNextSibling+0xc>
 80076c8:	f006 fd34 	bl	800e134 <GUI_ALLOC_h2p>
 80076cc:	6a03      	ldr	r3, [r0, #32]
 80076ce:	4618      	mov	r0, r3
 80076d0:	bd08      	pop	{r3, pc}

080076d2 <WM_GetWindowOrgX>:
 80076d2:	b508      	push	{r3, lr}
 80076d4:	b120      	cbz	r0, 80076e0 <WM_GetWindowOrgX+0xe>
 80076d6:	f006 fd2d 	bl	800e134 <GUI_ALLOC_h2p>
 80076da:	f9b0 0000 	ldrsh.w	r0, [r0]
 80076de:	bd08      	pop	{r3, pc}
 80076e0:	bd08      	pop	{r3, pc}

080076e2 <WM_GetParent>:
 80076e2:	b508      	push	{r3, lr}
 80076e4:	4603      	mov	r3, r0
 80076e6:	b110      	cbz	r0, 80076ee <WM_GetParent+0xc>
 80076e8:	f006 fd24 	bl	800e134 <GUI_ALLOC_h2p>
 80076ec:	6983      	ldr	r3, [r0, #24]
 80076ee:	4618      	mov	r0, r3
 80076f0:	bd08      	pop	{r3, pc}

080076f2 <WM_BringToBottom>:
 80076f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076f6:	4604      	mov	r4, r0
 80076f8:	b087      	sub	sp, #28
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d039      	beq.n	8007772 <WM_BringToBottom+0x80>
 80076fe:	f006 fd23 	bl	800e148 <GUI_ALLOC_LockH>
 8007702:	4603      	mov	r3, r0
 8007704:	9001      	str	r0, [sp, #4]
 8007706:	c803      	ldmia	r0, {r0, r1}
 8007708:	ad04      	add	r5, sp, #16
 800770a:	e885 0003 	stmia.w	r5, {r0, r1}
 800770e:	a801      	add	r0, sp, #4
 8007710:	6a1e      	ldr	r6, [r3, #32]
 8007712:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8007716:	f006 fd25 	bl	800e164 <GUI_ALLOC_UnlockH>
 800771a:	4620      	mov	r0, r4
 800771c:	f7ff fc7c 	bl	8007018 <WM__GetPrevSibling>
 8007720:	4607      	mov	r7, r0
 8007722:	b330      	cbz	r0, 8007772 <WM_BringToBottom+0x80>
 8007724:	4620      	mov	r0, r4
 8007726:	f7ff ffdc 	bl	80076e2 <WM_GetParent>
 800772a:	f019 0f02 	tst.w	r9, #2
 800772e:	4680      	mov	r8, r0
 8007730:	d004      	beq.n	800773c <WM_BringToBottom+0x4a>
 8007732:	4628      	mov	r0, r5
 8007734:	4641      	mov	r1, r8
 8007736:	4632      	mov	r2, r6
 8007738:	f000 feda 	bl	80084f0 <WM__InvalidateRectEx>
 800773c:	4620      	mov	r0, r4
 800773e:	f006 fd03 	bl	800e148 <GUI_ALLOC_LockH>
 8007742:	9001      	str	r0, [sp, #4]
 8007744:	4640      	mov	r0, r8
 8007746:	f006 fcff 	bl	800e148 <GUI_ALLOC_LockH>
 800774a:	9003      	str	r0, [sp, #12]
 800774c:	4638      	mov	r0, r7
 800774e:	f006 fcfb 	bl	800e148 <GUI_ALLOC_LockH>
 8007752:	9b03      	ldr	r3, [sp, #12]
 8007754:	9a01      	ldr	r2, [sp, #4]
 8007756:	69d9      	ldr	r1, [r3, #28]
 8007758:	6206      	str	r6, [r0, #32]
 800775a:	9002      	str	r0, [sp, #8]
 800775c:	6211      	str	r1, [r2, #32]
 800775e:	a801      	add	r0, sp, #4
 8007760:	61dc      	str	r4, [r3, #28]
 8007762:	f006 fcff 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007766:	a803      	add	r0, sp, #12
 8007768:	f006 fcfc 	bl	800e164 <GUI_ALLOC_UnlockH>
 800776c:	a802      	add	r0, sp, #8
 800776e:	f006 fcf9 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007772:	b007      	add	sp, #28
 8007774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007778 <WM_GetWindowRectEx>:
 8007778:	b510      	push	{r4, lr}
 800777a:	460c      	mov	r4, r1
 800777c:	b130      	cbz	r0, 800778c <WM_GetWindowRectEx+0x14>
 800777e:	b129      	cbz	r1, 800778c <WM_GetWindowRectEx+0x14>
 8007780:	f006 fcd8 	bl	800e134 <GUI_ALLOC_h2p>
 8007784:	4603      	mov	r3, r0
 8007786:	cb03      	ldmia	r3!, {r0, r1}
 8007788:	6020      	str	r0, [r4, #0]
 800778a:	6061      	str	r1, [r4, #4]
 800778c:	bd10      	pop	{r4, pc}
	...

08007790 <WM_HasCaptured>:
 8007790:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <WM_HasCaptured+0x14>)
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	4b04      	ldr	r3, [pc, #16]	; (80077a8 <WM_HasCaptured+0x18>)
 8007796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800779a:	1ac3      	subs	r3, r0, r3
 800779c:	4258      	negs	r0, r3
 800779e:	4158      	adcs	r0, r3
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	2000560c 	.word	0x2000560c
 80077a8:	20005630 	.word	0x20005630

080077ac <WM_HasFocus>:
 80077ac:	4b04      	ldr	r3, [pc, #16]	; (80077c0 <WM_HasFocus+0x14>)
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	4b04      	ldr	r3, [pc, #16]	; (80077c4 <WM_HasFocus+0x18>)
 80077b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b6:	1ac3      	subs	r3, r0, r3
 80077b8:	4258      	negs	r0, r3
 80077ba:	4158      	adcs	r0, r3
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	2000560c 	.word	0x2000560c
 80077c4:	200055fc 	.word	0x200055fc

080077c8 <WM_IsFocusable>:
 80077c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077ca:	4604      	mov	r4, r0
 80077cc:	b908      	cbnz	r0, 80077d2 <WM_IsFocusable+0xa>
 80077ce:	2000      	movs	r0, #0
 80077d0:	e011      	b.n	80077f6 <WM_IsFocusable+0x2e>
 80077d2:	f006 fcaf 	bl	800e134 <GUI_ALLOC_h2p>
 80077d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80077d8:	079a      	lsls	r2, r3, #30
 80077da:	d5f8      	bpl.n	80077ce <WM_IsFocusable+0x6>
 80077dc:	f013 0310 	ands.w	r3, r3, #16
 80077e0:	d1f5      	bne.n	80077ce <WM_IsFocusable+0x6>
 80077e2:	a904      	add	r1, sp, #16
 80077e4:	9303      	str	r3, [sp, #12]
 80077e6:	231f      	movs	r3, #31
 80077e8:	f841 3d10 	str.w	r3, [r1, #-16]!
 80077ec:	4620      	mov	r0, r4
 80077ee:	4669      	mov	r1, sp
 80077f0:	f000 fd79 	bl	80082e6 <WM_SendMessage>
 80077f4:	9803      	ldr	r0, [sp, #12]
 80077f6:	b004      	add	sp, #16
 80077f8:	bd10      	pop	{r4, pc}

080077fa <WM_IsWindow>:
 80077fa:	f000 bd2b 	b.w	8008254 <WM__IsWindow>
	...

08007800 <WM_OnKey>:
 8007800:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007802:	4a0a      	ldr	r2, [pc, #40]	; (800782c <WM_OnKey+0x2c>)
 8007804:	4603      	mov	r3, r0
 8007806:	6810      	ldr	r0, [r2, #0]
 8007808:	4a09      	ldr	r2, [pc, #36]	; (8007830 <WM_OnKey+0x30>)
 800780a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800780e:	b148      	cbz	r0, 8007824 <WM_OnKey+0x24>
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	230e      	movs	r3, #14
 8007814:	9101      	str	r1, [sp, #4]
 8007816:	9302      	str	r3, [sp, #8]
 8007818:	a902      	add	r1, sp, #8
 800781a:	ab00      	add	r3, sp, #0
 800781c:	9305      	str	r3, [sp, #20]
 800781e:	f7ff fc4b 	bl	80070b8 <WM__SendMessage>
 8007822:	2001      	movs	r0, #1
 8007824:	b007      	add	sp, #28
 8007826:	f85d fb04 	ldr.w	pc, [sp], #4
 800782a:	bf00      	nop
 800782c:	2000560c 	.word	0x2000560c
 8007830:	200055fc 	.word	0x200055fc

08007834 <WM_ResizeWindow>:
 8007834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007838:	ea51 0302 	orrs.w	r3, r1, r2
 800783c:	b08a      	sub	sp, #40	; 0x28
 800783e:	4680      	mov	r8, r0
 8007840:	460e      	mov	r6, r1
 8007842:	4617      	mov	r7, r2
 8007844:	d06e      	beq.n	8007924 <WM_ResizeWindow+0xf0>
 8007846:	2800      	cmp	r0, #0
 8007848:	d06c      	beq.n	8007924 <WM_ResizeWindow+0xf0>
 800784a:	f006 fc7d 	bl	800e148 <GUI_ALLOC_LockH>
 800784e:	4603      	mov	r3, r0
 8007850:	9003      	str	r0, [sp, #12]
 8007852:	c803      	ldmia	r0, {r0, r1}
 8007854:	ad04      	add	r5, sp, #16
 8007856:	ac06      	add	r4, sp, #24
 8007858:	e885 0003 	stmia.w	r5, {r0, r1}
 800785c:	e884 0003 	stmia.w	r4, {r0, r1}
 8007860:	b17e      	cbz	r6, 8007882 <WM_ResizeWindow+0x4e>
 8007862:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007864:	f402 7220 	and.w	r2, r2, #640	; 0x280
 8007868:	2a80      	cmp	r2, #128	; 0x80
 800786a:	d105      	bne.n	8007878 <WM_ResizeWindow+0x44>
 800786c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8007870:	1b96      	subs	r6, r2, r6
 8007872:	f8ad 6018 	strh.w	r6, [sp, #24]
 8007876:	e004      	b.n	8007882 <WM_ResizeWindow+0x4e>
 8007878:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800787c:	4416      	add	r6, r2
 800787e:	f8ad 601c 	strh.w	r6, [sp, #28]
 8007882:	b187      	cbz	r7, 80078a6 <WM_ResizeWindow+0x72>
 8007884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007886:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800788a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800788e:	d105      	bne.n	800789c <WM_ResizeWindow+0x68>
 8007890:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8007894:	1bd7      	subs	r7, r2, r7
 8007896:	f8ad 701a 	strh.w	r7, [sp, #26]
 800789a:	e004      	b.n	80078a6 <WM_ResizeWindow+0x72>
 800789c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80078a0:	4417      	add	r7, r2
 80078a2:	f8ad 701e 	strh.w	r7, [sp, #30]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a8:	03da      	lsls	r2, r3, #15
 80078aa:	d502      	bpl.n	80078b2 <WM_ResizeWindow+0x7e>
 80078ac:	4640      	mov	r0, r8
 80078ae:	f000 fce1 	bl	8008274 <WM__InvalidateDrawAndDescs>
 80078b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80078b6:	9b03      	ldr	r3, [sp, #12]
 80078b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80078bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078be:	079b      	lsls	r3, r3, #30
 80078c0:	d50a      	bpl.n	80078d8 <WM_ResizeWindow+0xa4>
 80078c2:	a808      	add	r0, sp, #32
 80078c4:	4629      	mov	r1, r5
 80078c6:	4622      	mov	r2, r4
 80078c8:	f005 f936 	bl	800cb38 <GUI_MergeRect>
 80078cc:	9b03      	ldr	r3, [sp, #12]
 80078ce:	a808      	add	r0, sp, #32
 80078d0:	6999      	ldr	r1, [r3, #24]
 80078d2:	6a1a      	ldr	r2, [r3, #32]
 80078d4:	f000 fe0c 	bl	80084f0 <WM__InvalidateRectEx>
 80078d8:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 80078dc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80078e0:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 80078e4:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80078e8:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 80078ec:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80078f0:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 80078f4:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80078f8:	1ae3      	subs	r3, r4, r3
 80078fa:	1a38      	subs	r0, r7, r0
 80078fc:	ac0a      	add	r4, sp, #40	; 0x28
 80078fe:	1aaa      	subs	r2, r5, r2
 8007900:	9000      	str	r0, [sp, #0]
 8007902:	1a71      	subs	r1, r6, r1
 8007904:	9803      	ldr	r0, [sp, #12]
 8007906:	f7ff fc09 	bl	800711c <WM__UpdateChildPositions>
 800790a:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 800790e:	f101 0008 	add.w	r0, r1, #8
 8007912:	f004 f8f7 	bl	800bb04 <GUI__IntersectRect>
 8007916:	4640      	mov	r0, r8
 8007918:	2105      	movs	r1, #5
 800791a:	f000 fce8 	bl	80082ee <WM__SendMsgNoData>
 800791e:	4620      	mov	r0, r4
 8007920:	f006 fc20 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007924:	b00a      	add	sp, #40	; 0x28
 8007926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800792a <WM_SendMessageNoPara>:
 800792a:	f7ff bbe3 	b.w	80070f4 <WM__SendMessageNoPara>

0800792e <WM_SendToParent>:
 800792e:	b538      	push	{r3, r4, r5, lr}
 8007930:	4605      	mov	r5, r0
 8007932:	460c      	mov	r4, r1
 8007934:	b141      	cbz	r1, 8007948 <WM_SendToParent+0x1a>
 8007936:	f7ff fed4 	bl	80076e2 <WM_GetParent>
 800793a:	b128      	cbz	r0, 8007948 <WM_SendToParent+0x1a>
 800793c:	60a5      	str	r5, [r4, #8]
 800793e:	4621      	mov	r1, r4
 8007940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007944:	f7ff bbb8 	b.w	80070b8 <WM__SendMessage>
 8007948:	bd38      	pop	{r3, r4, r5, pc}

0800794a <WM_NotifyParent>:
 800794a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800794c:	2326      	movs	r3, #38	; 0x26
 800794e:	9103      	str	r1, [sp, #12]
 8007950:	4669      	mov	r1, sp
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	f7ff ffeb 	bl	800792e <WM_SendToParent>
 8007958:	b005      	add	sp, #20
 800795a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007960 <WM_SetFocus>:
 8007960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007962:	b087      	sub	sp, #28
 8007964:	4604      	mov	r4, r0
 8007966:	2100      	movs	r1, #0
 8007968:	a802      	add	r0, sp, #8
 800796a:	2210      	movs	r2, #16
 800796c:	f009 fdae 	bl	80114cc <memset>
 8007970:	2c00      	cmp	r4, #0
 8007972:	d03a      	beq.n	80079ea <WM_SetFocus+0x8a>
 8007974:	4b1f      	ldr	r3, [pc, #124]	; (80079f4 <WM_SetFocus+0x94>)
 8007976:	4a20      	ldr	r2, [pc, #128]	; (80079f8 <WM_SetFocus+0x98>)
 8007978:	6819      	ldr	r1, [r3, #0]
 800797a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800797e:	4284      	cmp	r4, r0
 8007980:	4616      	mov	r6, r2
 8007982:	461f      	mov	r7, r3
 8007984:	d031      	beq.n	80079ea <WM_SetFocus+0x8a>
 8007986:	231e      	movs	r3, #30
 8007988:	e88d 0011 	stmia.w	sp, {r0, r4}
 800798c:	9302      	str	r3, [sp, #8]
 800798e:	b110      	cbz	r0, 8007996 <WM_SetFocus+0x36>
 8007990:	a902      	add	r1, sp, #8
 8007992:	f7ff fb91 	bl	80070b8 <WM__SendMessage>
 8007996:	2301      	movs	r3, #1
 8007998:	4620      	mov	r0, r4
 800799a:	a902      	add	r1, sp, #8
 800799c:	9305      	str	r3, [sp, #20]
 800799e:	f7ff fb8b 	bl	80070b8 <WM__SendMessage>
 80079a2:	9d05      	ldr	r5, [sp, #20]
 80079a4:	bb15      	cbnz	r5, 80079ec <WM_SetFocus+0x8c>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
 80079ac:	4620      	mov	r0, r4
 80079ae:	f7ff fe98 	bl	80076e2 <WM_GetParent>
 80079b2:	4604      	mov	r4, r0
 80079b4:	b138      	cbz	r0, 80079c6 <WM_SetFocus+0x66>
 80079b6:	2320      	movs	r3, #32
 80079b8:	9302      	str	r3, [sp, #8]
 80079ba:	a902      	add	r1, sp, #8
 80079bc:	ab00      	add	r3, sp, #0
 80079be:	9305      	str	r3, [sp, #20]
 80079c0:	f7ff fb7a 	bl	80070b8 <WM__SendMessage>
 80079c4:	e7f2      	b.n	80079ac <WM_SetFocus+0x4c>
 80079c6:	9c00      	ldr	r4, [sp, #0]
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 fc43 	bl	8008254 <WM__IsWindow>
 80079ce:	b168      	cbz	r0, 80079ec <WM_SetFocus+0x8c>
 80079d0:	4620      	mov	r0, r4
 80079d2:	f7ff fe86 	bl	80076e2 <WM_GetParent>
 80079d6:	4604      	mov	r4, r0
 80079d8:	b140      	cbz	r0, 80079ec <WM_SetFocus+0x8c>
 80079da:	2320      	movs	r3, #32
 80079dc:	9302      	str	r3, [sp, #8]
 80079de:	a902      	add	r1, sp, #8
 80079e0:	ab00      	add	r3, sp, #0
 80079e2:	9305      	str	r3, [sp, #20]
 80079e4:	f7ff fb68 	bl	80070b8 <WM__SendMessage>
 80079e8:	e7f2      	b.n	80079d0 <WM_SetFocus+0x70>
 80079ea:	2501      	movs	r5, #1
 80079ec:	4628      	mov	r0, r5
 80079ee:	b007      	add	sp, #28
 80079f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f2:	bf00      	nop
 80079f4:	2000560c 	.word	0x2000560c
 80079f8:	200055fc 	.word	0x200055fc

080079fc <WM_SetSize>:
 80079fc:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 8007a00:	460e      	mov	r6, r1
 8007a02:	4690      	mov	r8, r2
 8007a04:	4607      	mov	r7, r0
 8007a06:	b1d0      	cbz	r0, 8007a3e <WM_SetSize+0x42>
 8007a08:	f006 fb9e 	bl	800e148 <GUI_ALLOC_LockH>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	a802      	add	r0, sp, #8
 8007a10:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8007a14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007a18:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8007a1c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8007a20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007a24:	1a8a      	subs	r2, r1, r2
 8007a26:	1aed      	subs	r5, r5, r3
 8007a28:	43d2      	mvns	r2, r2
 8007a2a:	43ed      	mvns	r5, r5
 8007a2c:	4416      	add	r6, r2
 8007a2e:	4445      	add	r5, r8
 8007a30:	f006 fb98 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007a34:	4638      	mov	r0, r7
 8007a36:	4631      	mov	r1, r6
 8007a38:	462a      	mov	r2, r5
 8007a3a:	f7ff fefb 	bl	8007834 <WM_ResizeWindow>
 8007a3e:	b003      	add	sp, #12
 8007a40:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}

08007a44 <WM_SetUserClipRect>:
 8007a44:	4b04      	ldr	r3, [pc, #16]	; (8007a58 <WM_SetUserClipRect+0x14>)
 8007a46:	b510      	push	{r4, lr}
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007a4c:	6458      	str	r0, [r3, #68]	; 0x44
 8007a4e:	f000 fbdd 	bl	800820c <WM__ActivateClipRect>
 8007a52:	4620      	mov	r0, r4
 8007a54:	bd10      	pop	{r4, pc}
 8007a56:	bf00      	nop
 8007a58:	20000084 	.word	0x20000084

08007a5c <WM_InvalidateWindowAndDescs>:
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	4604      	mov	r4, r0
 8007a60:	b170      	cbz	r0, 8007a80 <WM_InvalidateWindowAndDescs+0x24>
 8007a62:	f000 fd99 	bl	8008598 <WM_InvalidateWindow>
 8007a66:	4620      	mov	r0, r4
 8007a68:	f7ff fdc6 	bl	80075f8 <WM_GetFirstChild>
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	b13c      	cbz	r4, 8007a80 <WM_InvalidateWindowAndDescs+0x24>
 8007a70:	4620      	mov	r0, r4
 8007a72:	f7ff fff3 	bl	8007a5c <WM_InvalidateWindowAndDescs>
 8007a76:	4620      	mov	r0, r4
 8007a78:	f006 fb5c 	bl	800e134 <GUI_ALLOC_h2p>
 8007a7c:	6a04      	ldr	r4, [r0, #32]
 8007a7e:	e7f6      	b.n	8007a6e <WM_InvalidateWindowAndDescs+0x12>
 8007a80:	bd10      	pop	{r4, pc}

08007a82 <WM_ShowWindow>:
 8007a82:	b513      	push	{r0, r1, r4, lr}
 8007a84:	4604      	mov	r4, r0
 8007a86:	b170      	cbz	r0, 8007aa6 <WM_ShowWindow+0x24>
 8007a88:	f006 fb5e 	bl	800e148 <GUI_ALLOC_LockH>
 8007a8c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007a8e:	9001      	str	r0, [sp, #4]
 8007a90:	0793      	lsls	r3, r2, #30
 8007a92:	d405      	bmi.n	8007aa0 <WM_ShowWindow+0x1e>
 8007a94:	f042 0202 	orr.w	r2, r2, #2
 8007a98:	6282      	str	r2, [r0, #40]	; 0x28
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f7ff ffde 	bl	8007a5c <WM_InvalidateWindowAndDescs>
 8007aa0:	a801      	add	r0, sp, #4
 8007aa2:	f006 fb5f 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007aa6:	b002      	add	sp, #8
 8007aa8:	bd10      	pop	{r4, pc}
	...

08007aac <WM_ValidateWindow>:
 8007aac:	b507      	push	{r0, r1, r2, lr}
 8007aae:	b178      	cbz	r0, 8007ad0 <WM_ValidateWindow+0x24>
 8007ab0:	f006 fb4a 	bl	800e148 <GUI_ALLOC_LockH>
 8007ab4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007ab6:	9001      	str	r0, [sp, #4]
 8007ab8:	069a      	lsls	r2, r3, #26
 8007aba:	d506      	bpl.n	8007aca <WM_ValidateWindow+0x1e>
 8007abc:	f023 0320 	bic.w	r3, r3, #32
 8007ac0:	6283      	str	r3, [r0, #40]	; 0x28
 8007ac2:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <WM_ValidateWindow+0x2c>)
 8007ac4:	881a      	ldrh	r2, [r3, #0]
 8007ac6:	3a01      	subs	r2, #1
 8007ac8:	801a      	strh	r2, [r3, #0]
 8007aca:	a801      	add	r0, sp, #4
 8007acc:	f006 fb4a 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007ad0:	b003      	add	sp, #12
 8007ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ad6:	bf00      	nop
 8007ad8:	20005604 	.word	0x20005604

08007adc <WM__GetWindowSizeX>:
 8007adc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8007ae0:	f9b0 3000 	ldrsh.w	r3, [r0]
 8007ae4:	1ad0      	subs	r0, r2, r3
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	4770      	bx	lr

08007aea <WM__GetWindowSizeY>:
 8007aea:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8007aee:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8007af2:	1ad0      	subs	r0, r2, r3
 8007af4:	3001      	adds	r0, #1
 8007af6:	4770      	bx	lr

08007af8 <WM_GetWindowSizeX>:
 8007af8:	b513      	push	{r0, r1, r4, lr}
 8007afa:	b908      	cbnz	r0, 8007b00 <WM_GetWindowSizeX+0x8>
 8007afc:	f000 fef0 	bl	80088e0 <WM_GetActiveWindow>
 8007b00:	f006 fb22 	bl	800e148 <GUI_ALLOC_LockH>
 8007b04:	ab02      	add	r3, sp, #8
 8007b06:	f9b0 2000 	ldrsh.w	r2, [r0]
 8007b0a:	f843 0d04 	str.w	r0, [r3, #-4]!
 8007b0e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8007b12:	4618      	mov	r0, r3
 8007b14:	1aa4      	subs	r4, r4, r2
 8007b16:	f006 fb25 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007b1a:	3401      	adds	r4, #1
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	b002      	add	sp, #8
 8007b20:	bd10      	pop	{r4, pc}

08007b22 <WM_GetWindowSizeY>:
 8007b22:	b513      	push	{r0, r1, r4, lr}
 8007b24:	b908      	cbnz	r0, 8007b2a <WM_GetWindowSizeY+0x8>
 8007b26:	f000 fedb 	bl	80088e0 <WM_GetActiveWindow>
 8007b2a:	f006 fb0d 	bl	800e148 <GUI_ALLOC_LockH>
 8007b2e:	ab02      	add	r3, sp, #8
 8007b30:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8007b34:	f843 0d04 	str.w	r0, [r3, #-4]!
 8007b38:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	1aa4      	subs	r4, r4, r2
 8007b40:	f006 fb10 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007b44:	3401      	adds	r4, #1
 8007b46:	4620      	mov	r0, r4
 8007b48:	b002      	add	sp, #8
 8007b4a:	bd10      	pop	{r4, pc}

08007b4c <_cbInvalidateOne>:
 8007b4c:	f000 bd24 	b.w	8008598 <WM_InvalidateWindow>

08007b50 <WM_BringToTop>:
 8007b50:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b52:	4605      	mov	r5, r0
 8007b54:	2800      	cmp	r0, #0
 8007b56:	d032      	beq.n	8007bbe <WM_BringToTop+0x6e>
 8007b58:	f006 faf6 	bl	800e148 <GUI_ALLOC_LockH>
 8007b5c:	ac02      	add	r4, sp, #8
 8007b5e:	4603      	mov	r3, r0
 8007b60:	f844 0d08 	str.w	r0, [r4, #-8]!
 8007b64:	6a00      	ldr	r0, [r0, #32]
 8007b66:	b908      	cbnz	r0, 8007b6c <WM_BringToTop+0x1c>
 8007b68:	4668      	mov	r0, sp
 8007b6a:	e00e      	b.n	8007b8a <WM_BringToTop+0x3a>
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	071a      	lsls	r2, r3, #28
 8007b70:	d411      	bmi.n	8007b96 <WM_BringToTop+0x46>
 8007b72:	f006 fae9 	bl	800e148 <GUI_ALLOC_LockH>
 8007b76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007b78:	ae02      	add	r6, sp, #8
 8007b7a:	071b      	lsls	r3, r3, #28
 8007b7c:	f846 0d04 	str.w	r0, [r6, #-4]!
 8007b80:	d506      	bpl.n	8007b90 <WM_BringToTop+0x40>
 8007b82:	4668      	mov	r0, sp
 8007b84:	f006 faee 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f006 faeb 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007b8e:	e016      	b.n	8007bbe <WM_BringToTop+0x6e>
 8007b90:	4630      	mov	r0, r6
 8007b92:	f006 fae7 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007b96:	9b00      	ldr	r3, [sp, #0]
 8007b98:	4668      	mov	r0, sp
 8007b9a:	699e      	ldr	r6, [r3, #24]
 8007b9c:	f006 fae2 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f000 fae5 	bl	8008170 <WM__RemoveWindowFromList>
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f000 fa8f 	bl	80080cc <WM__InsertWindowIntoList>
 8007bae:	4628      	mov	r0, r5
 8007bb0:	f000 fcf2 	bl	8008598 <WM_InvalidateWindow>
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	4903      	ldr	r1, [pc, #12]	; (8007bc4 <WM_BringToTop+0x74>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f7ff fcf2 	bl	80075a2 <WM_ForEachDesc>
 8007bbe:	b002      	add	sp, #8
 8007bc0:	bd70      	pop	{r4, r5, r6, pc}
 8007bc2:	bf00      	nop
 8007bc4:	08007b4d 	.word	0x08007b4d

08007bc8 <_OnExit>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4b19      	ldr	r3, [pc, #100]	; (8007c30 <_OnExit+0x68>)
 8007bcc:	4d19      	ldr	r5, [pc, #100]	; (8007c34 <_OnExit+0x6c>)
 8007bce:	4a1a      	ldr	r2, [pc, #104]	; (8007c38 <_OnExit+0x70>)
 8007bd0:	481a      	ldr	r0, [pc, #104]	; (8007c3c <_OnExit+0x74>)
 8007bd2:	2400      	movs	r4, #0
 8007bd4:	701c      	strb	r4, [r3, #0]
 8007bd6:	4b1a      	ldr	r3, [pc, #104]	; (8007c40 <_OnExit+0x78>)
 8007bd8:	6014      	str	r4, [r2, #0]
 8007bda:	601c      	str	r4, [r3, #0]
 8007bdc:	4b19      	ldr	r3, [pc, #100]	; (8007c44 <_OnExit+0x7c>)
 8007bde:	6054      	str	r4, [r2, #4]
 8007be0:	601c      	str	r4, [r3, #0]
 8007be2:	4b19      	ldr	r3, [pc, #100]	; (8007c48 <_OnExit+0x80>)
 8007be4:	601c      	str	r4, [r3, #0]
 8007be6:	605c      	str	r4, [r3, #4]
 8007be8:	4b18      	ldr	r3, [pc, #96]	; (8007c4c <_OnExit+0x84>)
 8007bea:	601c      	str	r4, [r3, #0]
 8007bec:	4b18      	ldr	r3, [pc, #96]	; (8007c50 <_OnExit+0x88>)
 8007bee:	601c      	str	r4, [r3, #0]
 8007bf0:	4b18      	ldr	r3, [pc, #96]	; (8007c54 <_OnExit+0x8c>)
 8007bf2:	601c      	str	r4, [r3, #0]
 8007bf4:	4b18      	ldr	r3, [pc, #96]	; (8007c58 <_OnExit+0x90>)
 8007bf6:	601c      	str	r4, [r3, #0]
 8007bf8:	4b18      	ldr	r3, [pc, #96]	; (8007c5c <_OnExit+0x94>)
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	601c      	str	r4, [r3, #0]
 8007bfe:	2218      	movs	r2, #24
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	4798      	blx	r3
 8007c04:	4b16      	ldr	r3, [pc, #88]	; (8007c60 <_OnExit+0x98>)
 8007c06:	4817      	ldr	r0, [pc, #92]	; (8007c64 <_OnExit+0x9c>)
 8007c08:	601c      	str	r4, [r3, #0]
 8007c0a:	4b17      	ldr	r3, [pc, #92]	; (8007c68 <_OnExit+0xa0>)
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	601c      	str	r4, [r3, #0]
 8007c10:	605c      	str	r4, [r3, #4]
 8007c12:	2210      	movs	r2, #16
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	4798      	blx	r3
 8007c18:	682b      	ldr	r3, [r5, #0]
 8007c1a:	4814      	ldr	r0, [pc, #80]	; (8007c6c <_OnExit+0xa4>)
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	2210      	movs	r2, #16
 8007c20:	4798      	blx	r3
 8007c22:	682b      	ldr	r3, [r5, #0]
 8007c24:	4812      	ldr	r0, [pc, #72]	; (8007c70 <_OnExit+0xa8>)
 8007c26:	4621      	mov	r1, r4
 8007c28:	2210      	movs	r2, #16
 8007c2a:	4798      	blx	r3
 8007c2c:	bd38      	pop	{r3, r4, r5, pc}
 8007c2e:	bf00      	nop
 8007c30:	20005428 	.word	0x20005428
 8007c34:	20000070 	.word	0x20000070
 8007c38:	200055fc 	.word	0x200055fc
 8007c3c:	2000540c 	.word	0x2000540c
 8007c40:	20005408 	.word	0x20005408
 8007c44:	20005628 	.word	0x20005628
 8007c48:	20005630 	.word	0x20005630
 8007c4c:	2000563c 	.word	0x2000563c
 8007c50:	200055e8 	.word	0x200055e8
 8007c54:	2000561c 	.word	0x2000561c
 8007c58:	2000562c 	.word	0x2000562c
 8007c5c:	20005424 	.word	0x20005424
 8007c60:	200055f8 	.word	0x200055f8
 8007c64:	20005784 	.word	0x20005784
 8007c68:	200055ec 	.word	0x200055ec
 8007c6c:	20005774 	.word	0x20005774
 8007c70:	20005764 	.word	0x20005764

08007c74 <_Paint1>:
 8007c74:	b510      	push	{r4, lr}
 8007c76:	4604      	mov	r4, r0
 8007c78:	f006 fa5c 	bl	800e134 <GUI_ALLOC_h2p>
 8007c7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007c7e:	4a04      	ldr	r2, [pc, #16]	; (8007c90 <_Paint1+0x1c>)
 8007c80:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007c84:	4b03      	ldr	r3, [pc, #12]	; (8007c94 <_Paint1+0x20>)
 8007c86:	4620      	mov	r0, r4
 8007c88:	bf08      	it	eq
 8007c8a:	4613      	moveq	r3, r2
 8007c8c:	4798      	blx	r3
 8007c8e:	bd10      	pop	{r4, pc}
 8007c90:	08008b81 	.word	0x08008b81
 8007c94:	080090f1 	.word	0x080090f1

08007c98 <_Findy1>:
 8007c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	b085      	sub	sp, #20
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	4616      	mov	r6, r2
 8007ca2:	2d00      	cmp	r5, #0
 8007ca4:	d04c      	beq.n	8007d40 <_Findy1+0xa8>
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f006 fa4e 	bl	800e148 <GUI_ALLOC_LockH>
 8007cac:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8007cae:	9001      	str	r0, [sp, #4]
 8007cb0:	07bb      	lsls	r3, r7, #30
 8007cb2:	4601      	mov	r1, r0
 8007cb4:	d53d      	bpl.n	8007d32 <_Findy1+0x9a>
 8007cb6:	ad02      	add	r5, sp, #8
 8007cb8:	b126      	cbz	r6, 8007cc4 <_Findy1+0x2c>
 8007cba:	4628      	mov	r0, r5
 8007cbc:	4632      	mov	r2, r6
 8007cbe:	f003 ff3f 	bl	800bb40 <GUI__IntersectRects>
 8007cc2:	e002      	b.n	8007cca <_Findy1+0x32>
 8007cc4:	c803      	ldmia	r0, {r0, r1}
 8007cc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8007cca:	4620      	mov	r0, r4
 8007ccc:	4629      	mov	r1, r5
 8007cce:	f004 ffa9 	bl	800cc24 <GUI_RectsIntersect>
 8007cd2:	b370      	cbz	r0, 8007d32 <_Findy1+0x9a>
 8007cd4:	f017 0f01 	tst.w	r7, #1
 8007cd8:	9b01      	ldr	r3, [sp, #4]
 8007cda:	d11e      	bne.n	8007d1a <_Findy1+0x82>
 8007cdc:	b13e      	cbz	r6, 8007cee <_Findy1+0x56>
 8007cde:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8007ce2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	bfa8      	it	ge
 8007cea:	4613      	movge	r3, r2
 8007cec:	e001      	b.n	8007cf2 <_Findy1+0x5a>
 8007cee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007cf2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8007cfc:	dd06      	ble.n	8007d0c <_Findy1+0x74>
 8007cfe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8007d02:	b219      	sxth	r1, r3
 8007d04:	428a      	cmp	r2, r1
 8007d06:	db14      	blt.n	8007d32 <_Findy1+0x9a>
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	e004      	b.n	8007d16 <_Findy1+0x7e>
 8007d0c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007d10:	b219      	sxth	r1, r3
 8007d12:	428a      	cmp	r2, r1
 8007d14:	dd0d      	ble.n	8007d32 <_Findy1+0x9a>
 8007d16:	80e3      	strh	r3, [r4, #6]
 8007d18:	e00b      	b.n	8007d32 <_Findy1+0x9a>
 8007d1a:	69df      	ldr	r7, [r3, #28]
 8007d1c:	b14f      	cbz	r7, 8007d32 <_Findy1+0x9a>
 8007d1e:	4638      	mov	r0, r7
 8007d20:	4621      	mov	r1, r4
 8007d22:	462a      	mov	r2, r5
 8007d24:	f7ff ffb8 	bl	8007c98 <_Findy1>
 8007d28:	4638      	mov	r0, r7
 8007d2a:	f006 fa03 	bl	800e134 <GUI_ALLOC_h2p>
 8007d2e:	6a07      	ldr	r7, [r0, #32]
 8007d30:	e7f4      	b.n	8007d1c <_Findy1+0x84>
 8007d32:	a804      	add	r0, sp, #16
 8007d34:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8007d38:	6a1d      	ldr	r5, [r3, #32]
 8007d3a:	f006 fa13 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007d3e:	e7b0      	b.n	8007ca2 <_Findy1+0xa>
 8007d40:	b005      	add	sp, #20
 8007d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d44 <_Findx0>:
 8007d44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007d48:	4604      	mov	r4, r0
 8007d4a:	460f      	mov	r7, r1
 8007d4c:	4690      	mov	r8, r2
 8007d4e:	2500      	movs	r5, #0
 8007d50:	2c00      	cmp	r4, #0
 8007d52:	d037      	beq.n	8007dc4 <_Findx0+0x80>
 8007d54:	4620      	mov	r0, r4
 8007d56:	f006 f9f7 	bl	800e148 <GUI_ALLOC_LockH>
 8007d5a:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8007d5c:	9001      	str	r0, [sp, #4]
 8007d5e:	07b2      	lsls	r2, r6, #30
 8007d60:	4601      	mov	r1, r0
 8007d62:	d528      	bpl.n	8007db6 <_Findx0+0x72>
 8007d64:	ac02      	add	r4, sp, #8
 8007d66:	f1b8 0f00 	cmp.w	r8, #0
 8007d6a:	d004      	beq.n	8007d76 <_Findx0+0x32>
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	4642      	mov	r2, r8
 8007d70:	f003 fee6 	bl	800bb40 <GUI__IntersectRects>
 8007d74:	e002      	b.n	8007d7c <_Findx0+0x38>
 8007d76:	c803      	ldmia	r0, {r0, r1}
 8007d78:	e884 0003 	stmia.w	r4, {r0, r1}
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	4621      	mov	r1, r4
 8007d80:	f004 ff50 	bl	800cc24 <GUI_RectsIntersect>
 8007d84:	b1b8      	cbz	r0, 8007db6 <_Findx0+0x72>
 8007d86:	07f3      	lsls	r3, r6, #31
 8007d88:	d405      	bmi.n	8007d96 <_Findx0+0x52>
 8007d8a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	803b      	strh	r3, [r7, #0]
 8007d92:	2501      	movs	r5, #1
 8007d94:	e00f      	b.n	8007db6 <_Findx0+0x72>
 8007d96:	9b01      	ldr	r3, [sp, #4]
 8007d98:	69de      	ldr	r6, [r3, #28]
 8007d9a:	b166      	cbz	r6, 8007db6 <_Findx0+0x72>
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	4639      	mov	r1, r7
 8007da0:	4622      	mov	r2, r4
 8007da2:	f7ff ffcf 	bl	8007d44 <_Findx0>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	4630      	mov	r0, r6
 8007daa:	bf18      	it	ne
 8007dac:	2501      	movne	r5, #1
 8007dae:	f006 f9c1 	bl	800e134 <GUI_ALLOC_h2p>
 8007db2:	6a06      	ldr	r6, [r0, #32]
 8007db4:	e7f1      	b.n	8007d9a <_Findx0+0x56>
 8007db6:	a804      	add	r0, sp, #16
 8007db8:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8007dbc:	6a1c      	ldr	r4, [r3, #32]
 8007dbe:	f006 f9d1 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007dc2:	e7c5      	b.n	8007d50 <_Findx0+0xc>
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	b004      	add	sp, #16
 8007dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007dcc <_Findx1>:
 8007dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dce:	4604      	mov	r4, r0
 8007dd0:	b085      	sub	sp, #20
 8007dd2:	460e      	mov	r6, r1
 8007dd4:	4617      	mov	r7, r2
 8007dd6:	2c00      	cmp	r4, #0
 8007dd8:	d031      	beq.n	8007e3e <_Findx1+0x72>
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f006 f9b4 	bl	800e148 <GUI_ALLOC_LockH>
 8007de0:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8007de2:	9001      	str	r0, [sp, #4]
 8007de4:	07aa      	lsls	r2, r5, #30
 8007de6:	4601      	mov	r1, r0
 8007de8:	d522      	bpl.n	8007e30 <_Findx1+0x64>
 8007dea:	ac02      	add	r4, sp, #8
 8007dec:	b127      	cbz	r7, 8007df8 <_Findx1+0x2c>
 8007dee:	4620      	mov	r0, r4
 8007df0:	463a      	mov	r2, r7
 8007df2:	f003 fea5 	bl	800bb40 <GUI__IntersectRects>
 8007df6:	e002      	b.n	8007dfe <_Findx1+0x32>
 8007df8:	c803      	ldmia	r0, {r0, r1}
 8007dfa:	e884 0003 	stmia.w	r4, {r0, r1}
 8007dfe:	4630      	mov	r0, r6
 8007e00:	4621      	mov	r1, r4
 8007e02:	f004 ff0f 	bl	800cc24 <GUI_RectsIntersect>
 8007e06:	b198      	cbz	r0, 8007e30 <_Findx1+0x64>
 8007e08:	07eb      	lsls	r3, r5, #31
 8007e0a:	d404      	bmi.n	8007e16 <_Findx1+0x4a>
 8007e0c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007e10:	3b01      	subs	r3, #1
 8007e12:	80b3      	strh	r3, [r6, #4]
 8007e14:	e00c      	b.n	8007e30 <_Findx1+0x64>
 8007e16:	9b01      	ldr	r3, [sp, #4]
 8007e18:	69dd      	ldr	r5, [r3, #28]
 8007e1a:	b14d      	cbz	r5, 8007e30 <_Findx1+0x64>
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	4631      	mov	r1, r6
 8007e20:	4622      	mov	r2, r4
 8007e22:	f7ff ffd3 	bl	8007dcc <_Findx1>
 8007e26:	4628      	mov	r0, r5
 8007e28:	f006 f984 	bl	800e134 <GUI_ALLOC_h2p>
 8007e2c:	6a05      	ldr	r5, [r0, #32]
 8007e2e:	e7f4      	b.n	8007e1a <_Findx1+0x4e>
 8007e30:	a804      	add	r0, sp, #16
 8007e32:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8007e36:	6a1c      	ldr	r4, [r3, #32]
 8007e38:	f006 f994 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007e3c:	e7cb      	b.n	8007dd6 <_Findx1+0xa>
 8007e3e:	b005      	add	sp, #20
 8007e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007e44 <_Paint1Trans>:
 8007e44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007e48:	4d21      	ldr	r5, [pc, #132]	; (8007ed0 <_Paint1Trans+0x8c>)
 8007e4a:	682b      	ldr	r3, [r5, #0]
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007e50:	f006 f97a 	bl	800e148 <GUI_ALLOC_LockH>
 8007e54:	9000      	str	r0, [sp, #0]
 8007e56:	4630      	mov	r0, r6
 8007e58:	f006 f976 	bl	800e148 <GUI_ALLOC_LockH>
 8007e5c:	ac02      	add	r4, sp, #8
 8007e5e:	4601      	mov	r1, r0
 8007e60:	9001      	str	r0, [sp, #4]
 8007e62:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 8007e66:	3008      	adds	r0, #8
 8007e68:	f004 fedc 	bl	800cc24 <GUI_RectsIntersect>
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	b328      	cbz	r0, 8007ebc <_Paint1Trans+0x78>
 8007e70:	9901      	ldr	r1, [sp, #4]
 8007e72:	9a00      	ldr	r2, [sp, #0]
 8007e74:	682b      	ldr	r3, [r5, #0]
 8007e76:	4c17      	ldr	r4, [pc, #92]	; (8007ed4 <_Paint1Trans+0x90>)
 8007e78:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8007e7a:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 8007e7e:	f101 0008 	add.w	r0, r1, #8
 8007e82:	3208      	adds	r2, #8
 8007e84:	f003 fe5c 	bl	800bb40 <GUI__IntersectRects>
 8007e88:	4668      	mov	r0, sp
 8007e8a:	f006 f96b 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007e8e:	9a01      	ldr	r2, [sp, #4]
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	f9b2 1000 	ldrsh.w	r1, [r2]
 8007e96:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8007e9a:	64d9      	str	r1, [r3, #76]	; 0x4c
 8007e9c:	651a      	str	r2, [r3, #80]	; 0x50
 8007e9e:	a801      	add	r0, sp, #4
 8007ea0:	6026      	str	r6, [r4, #0]
 8007ea2:	f006 f95f 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f7ff fee4 	bl	8007c74 <_Paint1>
 8007eac:	2300      	movs	r3, #0
 8007eae:	6023      	str	r3, [r4, #0]
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	651f      	str	r7, [r3, #80]	; 0x50
 8007eb4:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 8007eb8:	2701      	movs	r7, #1
 8007eba:	e005      	b.n	8007ec8 <_Paint1Trans+0x84>
 8007ebc:	4668      	mov	r0, sp
 8007ebe:	f006 f951 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007ec2:	a801      	add	r0, sp, #4
 8007ec4:	f006 f94e 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007ec8:	4638      	mov	r0, r7
 8007eca:	b002      	add	sp, #8
 8007ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed0:	20000084 	.word	0x20000084
 8007ed4:	200055e8 	.word	0x200055e8

08007ed8 <_PaintTransChildren>:
 8007ed8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007edc:	4606      	mov	r6, r0
 8007ede:	f006 f933 	bl	800e148 <GUI_ALLOC_LockH>
 8007ee2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007ee4:	9001      	str	r0, [sp, #4]
 8007ee6:	079b      	lsls	r3, r3, #30
 8007ee8:	d405      	bmi.n	8007ef6 <_PaintTransChildren+0x1e>
 8007eea:	a801      	add	r0, sp, #4
 8007eec:	f006 f93a 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007ef0:	b002      	add	sp, #8
 8007ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef6:	69c4      	ldr	r4, [r0, #28]
 8007ef8:	2c00      	cmp	r4, #0
 8007efa:	d0f6      	beq.n	8007eea <_PaintTransChildren+0x12>
 8007efc:	4620      	mov	r0, r4
 8007efe:	f006 f923 	bl	800e148 <GUI_ALLOC_LockH>
 8007f02:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007f04:	ad02      	add	r5, sp, #8
 8007f06:	f003 0303 	and.w	r3, r3, #3
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	f845 0d08 	str.w	r0, [r5, #-8]!
 8007f10:	d137      	bne.n	8007f82 <_PaintTransChildren+0xaa>
 8007f12:	9901      	ldr	r1, [sp, #4]
 8007f14:	3108      	adds	r1, #8
 8007f16:	f004 fe85 	bl	800cc24 <GUI_RectsIntersect>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d031      	beq.n	8007f82 <_PaintTransChildren+0xaa>
 8007f1e:	a802      	add	r0, sp, #8
 8007f20:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8007f24:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 8007f28:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8007f2c:	899f      	ldrh	r7, [r3, #12]
 8007f2e:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 8007f32:	f006 f917 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007f36:	4668      	mov	r0, sp
 8007f38:	f006 f914 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f7ff ff81 	bl	8007e44 <_Paint1Trans>
 8007f42:	b170      	cbz	r0, 8007f62 <_PaintTransChildren+0x8a>
 8007f44:	4620      	mov	r0, r4
 8007f46:	f006 f8f5 	bl	800e134 <GUI_ALLOC_h2p>
 8007f4a:	9000      	str	r0, [sp, #0]
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f7ff ffc3 	bl	8007ed8 <_PaintTransChildren>
 8007f52:	4620      	mov	r0, r4
 8007f54:	f006 f8ee 	bl	800e134 <GUI_ALLOC_h2p>
 8007f58:	9000      	str	r0, [sp, #0]
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f006 f8ea 	bl	800e134 <GUI_ALLOC_h2p>
 8007f60:	9001      	str	r0, [sp, #4]
 8007f62:	4630      	mov	r0, r6
 8007f64:	f006 f8f0 	bl	800e148 <GUI_ALLOC_LockH>
 8007f68:	9001      	str	r0, [sp, #4]
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f006 f8ec 	bl	800e148 <GUI_ALLOC_LockH>
 8007f70:	9b01      	ldr	r3, [sp, #4]
 8007f72:	9000      	str	r0, [sp, #0]
 8007f74:	f8a3 9008 	strh.w	r9, [r3, #8]
 8007f78:	f8a3 800a 	strh.w	r8, [r3, #10]
 8007f7c:	819f      	strh	r7, [r3, #12]
 8007f7e:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8007f82:	9b00      	ldr	r3, [sp, #0]
 8007f84:	4668      	mov	r0, sp
 8007f86:	6a1c      	ldr	r4, [r3, #32]
 8007f88:	f006 f8ec 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007f8c:	e7b4      	b.n	8007ef8 <_PaintTransChildren+0x20>
	...

08007f90 <WM__PaintWinAndOverlays>:
 8007f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f92:	4604      	mov	r4, r0
 8007f94:	f006 f8d8 	bl	800e148 <GUI_ALLOC_LockH>
 8007f98:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007f9a:	9001      	str	r0, [sp, #4]
 8007f9c:	f640 0301 	movw	r3, #2049	; 0x801
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d005      	beq.n	8007fb2 <WM__PaintWinAndOverlays+0x22>
 8007fa6:	a801      	add	r0, sp, #4
 8007fa8:	f006 f8dc 	bl	800e164 <GUI_ALLOC_UnlockH>
 8007fac:	4620      	mov	r0, r4
 8007fae:	f7ff fe61 	bl	8007c74 <_Paint1>
 8007fb2:	4b14      	ldr	r3, [pc, #80]	; (8008004 <WM__PaintWinAndOverlays+0x74>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	b313      	cbz	r3, 8007ffe <WM__PaintWinAndOverlays+0x6e>
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f7ff ff8d 	bl	8007ed8 <_PaintTransChildren>
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f006 f8b8 	bl	800e134 <GUI_ALLOC_h2p>
 8007fc4:	6985      	ldr	r5, [r0, #24]
 8007fc6:	6a04      	ldr	r4, [r0, #32]
 8007fc8:	b1cd      	cbz	r5, 8007ffe <WM__PaintWinAndOverlays+0x6e>
 8007fca:	b194      	cbz	r4, 8007ff2 <WM__PaintWinAndOverlays+0x62>
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f006 f8b1 	bl	800e134 <GUI_ALLOC_h2p>
 8007fd2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007fd4:	f003 0303 	and.w	r3, r3, #3
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d102      	bne.n	8007fe2 <WM__PaintWinAndOverlays+0x52>
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f7ff ff31 	bl	8007e44 <_Paint1Trans>
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f7ff ff78 	bl	8007ed8 <_PaintTransChildren>
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f006 f8a3 	bl	800e134 <GUI_ALLOC_h2p>
 8007fee:	6a04      	ldr	r4, [r0, #32]
 8007ff0:	e7eb      	b.n	8007fca <WM__PaintWinAndOverlays+0x3a>
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f006 f89e 	bl	800e134 <GUI_ALLOC_h2p>
 8007ff8:	6a04      	ldr	r4, [r0, #32]
 8007ffa:	6985      	ldr	r5, [r0, #24]
 8007ffc:	e7e4      	b.n	8007fc8 <WM__PaintWinAndOverlays+0x38>
 8007ffe:	b003      	add	sp, #12
 8008000:	bd30      	pop	{r4, r5, pc}
 8008002:	bf00      	nop
 8008004:	2000563c 	.word	0x2000563c

08008008 <_cbPaintMemDev>:
 8008008:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800800c:	4d17      	ldr	r5, [pc, #92]	; (800806c <_cbPaintMemDev+0x64>)
 800800e:	682b      	ldr	r3, [r5, #0]
 8008010:	4606      	mov	r6, r0
 8008012:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008014:	f006 f898 	bl	800e148 <GUI_ALLOC_LockH>
 8008018:	682a      	ldr	r2, [r5, #0]
 800801a:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 800801e:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 8008022:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 8008026:	89c7      	ldrh	r7, [r0, #14]
 8008028:	ac02      	add	r4, sp, #8
 800802a:	3208      	adds	r2, #8
 800802c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008030:	f100 0308 	add.w	r3, r0, #8
 8008034:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008038:	e883 0003 	stmia.w	r3, {r0, r1}
 800803c:	4620      	mov	r0, r4
 800803e:	f006 f891 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008042:	6830      	ldr	r0, [r6, #0]
 8008044:	f7ff ffa4 	bl	8007f90 <WM__PaintWinAndOverlays>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800804c:	f006 f87c 	bl	800e148 <GUI_ALLOC_LockH>
 8008050:	9001      	str	r0, [sp, #4]
 8008052:	f8a0 a008 	strh.w	sl, [r0, #8]
 8008056:	f8a0 900a 	strh.w	r9, [r0, #10]
 800805a:	f8a0 800c 	strh.w	r8, [r0, #12]
 800805e:	81c7      	strh	r7, [r0, #14]
 8008060:	4620      	mov	r0, r4
 8008062:	f006 f87f 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008066:	b002      	add	sp, #8
 8008068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806c:	20000084 	.word	0x20000084

08008070 <WM__ClipAtParentBorders>:
 8008070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008072:	4607      	mov	r7, r0
 8008074:	460d      	mov	r5, r1
 8008076:	4628      	mov	r0, r5
 8008078:	f006 f866 	bl	800e148 <GUI_ALLOC_LockH>
 800807c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800807e:	ac02      	add	r4, sp, #8
 8008080:	f013 0602 	ands.w	r6, r3, #2
 8008084:	4601      	mov	r1, r0
 8008086:	f844 0d04 	str.w	r0, [r4, #-4]!
 800808a:	d104      	bne.n	8008096 <WM__ClipAtParentBorders+0x26>
 800808c:	4620      	mov	r0, r4
 800808e:	f006 f869 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008092:	4630      	mov	r0, r6
 8008094:	e016      	b.n	80080c4 <WM__ClipAtParentBorders+0x54>
 8008096:	4638      	mov	r0, r7
 8008098:	f003 fd34 	bl	800bb04 <GUI__IntersectRect>
 800809c:	9b01      	ldr	r3, [sp, #4]
 800809e:	699e      	ldr	r6, [r3, #24]
 80080a0:	4620      	mov	r0, r4
 80080a2:	b956      	cbnz	r6, 80080ba <WM__ClipAtParentBorders+0x4a>
 80080a4:	f006 f85e 	bl	800e164 <GUI_ALLOC_UnlockH>
 80080a8:	4b07      	ldr	r3, [pc, #28]	; (80080c8 <WM__ClipAtParentBorders+0x58>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	4295      	cmp	r5, r2
 80080ae:	d008      	beq.n	80080c2 <WM__ClipAtParentBorders+0x52>
 80080b0:	6858      	ldr	r0, [r3, #4]
 80080b2:	1a2b      	subs	r3, r5, r0
 80080b4:	4258      	negs	r0, r3
 80080b6:	4158      	adcs	r0, r3
 80080b8:	e004      	b.n	80080c4 <WM__ClipAtParentBorders+0x54>
 80080ba:	f006 f853 	bl	800e164 <GUI_ALLOC_UnlockH>
 80080be:	4635      	mov	r5, r6
 80080c0:	e7d9      	b.n	8008076 <WM__ClipAtParentBorders+0x6>
 80080c2:	2001      	movs	r0, #1
 80080c4:	b003      	add	sp, #12
 80080c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080c8:	200055ec 	.word	0x200055ec

080080cc <WM__InsertWindowIntoList>:
 80080cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ce:	4604      	mov	r4, r0
 80080d0:	b085      	sub	sp, #20
 80080d2:	460d      	mov	r5, r1
 80080d4:	2900      	cmp	r1, #0
 80080d6:	d049      	beq.n	800816c <WM__InsertWindowIntoList+0xa0>
 80080d8:	f006 f836 	bl	800e148 <GUI_ALLOC_LockH>
 80080dc:	2300      	movs	r3, #0
 80080de:	6203      	str	r3, [r0, #32]
 80080e0:	6185      	str	r5, [r0, #24]
 80080e2:	9001      	str	r0, [sp, #4]
 80080e4:	4628      	mov	r0, r5
 80080e6:	f006 f82f 	bl	800e148 <GUI_ALLOC_LockH>
 80080ea:	9b01      	ldr	r3, [sp, #4]
 80080ec:	69c5      	ldr	r5, [r0, #28]
 80080ee:	9002      	str	r0, [sp, #8]
 80080f0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80080f2:	b92d      	cbnz	r5, 8008100 <WM__InsertWindowIntoList+0x34>
 80080f4:	61c4      	str	r4, [r0, #28]
 80080f6:	a801      	add	r0, sp, #4
 80080f8:	f006 f834 	bl	800e164 <GUI_ALLOC_UnlockH>
 80080fc:	a802      	add	r0, sp, #8
 80080fe:	e033      	b.n	8008168 <WM__InsertWindowIntoList+0x9c>
 8008100:	4628      	mov	r0, r5
 8008102:	f006 f821 	bl	800e148 <GUI_ALLOC_LockH>
 8008106:	ae04      	add	r6, sp, #16
 8008108:	f007 0708 	and.w	r7, r7, #8
 800810c:	f846 0d04 	str.w	r0, [r6, #-4]!
 8008110:	b977      	cbnz	r7, 8008130 <WM__InsertWindowIntoList+0x64>
 8008112:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008114:	071a      	lsls	r2, r3, #28
 8008116:	d50b      	bpl.n	8008130 <WM__InsertWindowIntoList+0x64>
 8008118:	9b01      	ldr	r3, [sp, #4]
 800811a:	621d      	str	r5, [r3, #32]
 800811c:	9b02      	ldr	r3, [sp, #8]
 800811e:	a801      	add	r0, sp, #4
 8008120:	61dc      	str	r4, [r3, #28]
 8008122:	f006 f81f 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008126:	a802      	add	r0, sp, #8
 8008128:	f006 f81c 	bl	800e164 <GUI_ALLOC_UnlockH>
 800812c:	4630      	mov	r0, r6
 800812e:	e01b      	b.n	8008168 <WM__InsertWindowIntoList+0x9c>
 8008130:	a802      	add	r0, sp, #8
 8008132:	f006 f817 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008136:	4630      	mov	r0, r6
 8008138:	f006 f814 	bl	800e164 <GUI_ALLOC_UnlockH>
 800813c:	4628      	mov	r0, r5
 800813e:	f005 fff9 	bl	800e134 <GUI_ALLOC_h2p>
 8008142:	9003      	str	r0, [sp, #12]
 8008144:	9b03      	ldr	r3, [sp, #12]
 8008146:	6a1d      	ldr	r5, [r3, #32]
 8008148:	b90d      	cbnz	r5, 800814e <WM__InsertWindowIntoList+0x82>
 800814a:	621c      	str	r4, [r3, #32]
 800814c:	e00b      	b.n	8008166 <WM__InsertWindowIntoList+0x9a>
 800814e:	4628      	mov	r0, r5
 8008150:	f005 fff0 	bl	800e134 <GUI_ALLOC_h2p>
 8008154:	2f00      	cmp	r7, #0
 8008156:	d1f4      	bne.n	8008142 <WM__InsertWindowIntoList+0x76>
 8008158:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800815a:	071b      	lsls	r3, r3, #28
 800815c:	d5f1      	bpl.n	8008142 <WM__InsertWindowIntoList+0x76>
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	621c      	str	r4, [r3, #32]
 8008162:	9b01      	ldr	r3, [sp, #4]
 8008164:	621d      	str	r5, [r3, #32]
 8008166:	a801      	add	r0, sp, #4
 8008168:	f005 fffc 	bl	800e164 <GUI_ALLOC_UnlockH>
 800816c:	b005      	add	sp, #20
 800816e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008170 <WM__RemoveWindowFromList>:
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	4604      	mov	r4, r0
 8008174:	f005 ffde 	bl	800e134 <GUI_ALLOC_h2p>
 8008178:	4605      	mov	r5, r0
 800817a:	6980      	ldr	r0, [r0, #24]
 800817c:	b1a8      	cbz	r0, 80081aa <WM__RemoveWindowFromList+0x3a>
 800817e:	f005 ffd9 	bl	800e134 <GUI_ALLOC_h2p>
 8008182:	69c3      	ldr	r3, [r0, #28]
 8008184:	42a3      	cmp	r3, r4
 8008186:	4606      	mov	r6, r0
 8008188:	d105      	bne.n	8008196 <WM__RemoveWindowFromList+0x26>
 800818a:	4618      	mov	r0, r3
 800818c:	f005 ffd2 	bl	800e134 <GUI_ALLOC_h2p>
 8008190:	6a03      	ldr	r3, [r0, #32]
 8008192:	61f3      	str	r3, [r6, #28]
 8008194:	bd70      	pop	{r4, r5, r6, pc}
 8008196:	b143      	cbz	r3, 80081aa <WM__RemoveWindowFromList+0x3a>
 8008198:	4618      	mov	r0, r3
 800819a:	f005 ffcb 	bl	800e134 <GUI_ALLOC_h2p>
 800819e:	6a03      	ldr	r3, [r0, #32]
 80081a0:	42a3      	cmp	r3, r4
 80081a2:	d1f8      	bne.n	8008196 <WM__RemoveWindowFromList+0x26>
 80081a4:	6a2b      	ldr	r3, [r5, #32]
 80081a6:	6203      	str	r3, [r0, #32]
 80081a8:	bd70      	pop	{r4, r5, r6, pc}
 80081aa:	bd70      	pop	{r4, r5, r6, pc}

080081ac <WM__Client2Screen>:
 80081ac:	4603      	mov	r3, r0
 80081ae:	4608      	mov	r0, r1
 80081b0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80081b4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80081b8:	f004 bce9 	b.w	800cb8e <GUI_MoveRect>

080081bc <_SetClipRectUserIntersect>:
 80081bc:	4b11      	ldr	r3, [pc, #68]	; (8008204 <_SetClipRectUserIntersect+0x48>)
 80081be:	b530      	push	{r4, r5, lr}
 80081c0:	681c      	ldr	r4, [r3, #0]
 80081c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80081c4:	b085      	sub	sp, #20
 80081c6:	4605      	mov	r5, r0
 80081c8:	b1ba      	cbz	r2, 80081fa <_SetClipRectUserIntersect+0x3e>
 80081ca:	6810      	ldr	r0, [r2, #0]
 80081cc:	6851      	ldr	r1, [r2, #4]
 80081ce:	ab02      	add	r3, sp, #8
 80081d0:	c303      	stmia	r3!, {r0, r1}
 80081d2:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <_SetClipRectUserIntersect+0x4c>)
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	b900      	cbnz	r0, 80081da <_SetClipRectUserIntersect+0x1e>
 80081d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80081da:	f005 ffb5 	bl	800e148 <GUI_ALLOC_LockH>
 80081de:	ac04      	add	r4, sp, #16
 80081e0:	a902      	add	r1, sp, #8
 80081e2:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80081e6:	f7ff ffe1 	bl	80081ac <WM__Client2Screen>
 80081ea:	4620      	mov	r0, r4
 80081ec:	f005 ffba 	bl	800e164 <GUI_ALLOC_UnlockH>
 80081f0:	a802      	add	r0, sp, #8
 80081f2:	4629      	mov	r1, r5
 80081f4:	f003 fc86 	bl	800bb04 <GUI__IntersectRect>
 80081f8:	a802      	add	r0, sp, #8
 80081fa:	f002 ffa3 	bl	800b144 <LCD_SetClipRectEx>
 80081fe:	b005      	add	sp, #20
 8008200:	bd30      	pop	{r4, r5, pc}
 8008202:	bf00      	nop
 8008204:	20000084 	.word	0x20000084
 8008208:	200055e8 	.word	0x200055e8

0800820c <WM__ActivateClipRect>:
 800820c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800820e:	4b0e      	ldr	r3, [pc, #56]	; (8008248 <WM__ActivateClipRect+0x3c>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8008216:	b10a      	cbz	r2, 800821c <WM__ActivateClipRect+0x10>
 8008218:	480c      	ldr	r0, [pc, #48]	; (800824c <WM__ActivateClipRect+0x40>)
 800821a:	e011      	b.n	8008240 <WM__ActivateClipRect+0x34>
 800821c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800821e:	f005 ff93 	bl	800e148 <GUI_ALLOC_LockH>
 8008222:	9001      	str	r0, [sp, #4]
 8008224:	c803      	ldmia	r0, {r0, r1}
 8008226:	ac02      	add	r4, sp, #8
 8008228:	e884 0003 	stmia.w	r4, {r0, r1}
 800822c:	a801      	add	r0, sp, #4
 800822e:	f005 ff99 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008232:	4b07      	ldr	r3, [pc, #28]	; (8008250 <WM__ActivateClipRect+0x44>)
 8008234:	6819      	ldr	r1, [r3, #0]
 8008236:	b111      	cbz	r1, 800823e <WM__ActivateClipRect+0x32>
 8008238:	4620      	mov	r0, r4
 800823a:	f7ff ff19 	bl	8008070 <WM__ClipAtParentBorders>
 800823e:	4620      	mov	r0, r4
 8008240:	f7ff ffbc 	bl	80081bc <_SetClipRectUserIntersect>
 8008244:	b004      	add	sp, #16
 8008246:	bd10      	pop	{r4, pc}
 8008248:	20000084 	.word	0x20000084
 800824c:	20005414 	.word	0x20005414
 8008250:	200055e8 	.word	0x200055e8

08008254 <WM__IsWindow>:
 8008254:	4b06      	ldr	r3, [pc, #24]	; (8008270 <WM__IsWindow+0x1c>)
 8008256:	b510      	push	{r4, lr}
 8008258:	4604      	mov	r4, r0
 800825a:	6818      	ldr	r0, [r3, #0]
 800825c:	b128      	cbz	r0, 800826a <WM__IsWindow+0x16>
 800825e:	42a0      	cmp	r0, r4
 8008260:	d004      	beq.n	800826c <WM__IsWindow+0x18>
 8008262:	f005 ff67 	bl	800e134 <GUI_ALLOC_h2p>
 8008266:	6940      	ldr	r0, [r0, #20]
 8008268:	e7f8      	b.n	800825c <WM__IsWindow+0x8>
 800826a:	bd10      	pop	{r4, pc}
 800826c:	2001      	movs	r0, #1
 800826e:	bd10      	pop	{r4, pc}
 8008270:	20005608 	.word	0x20005608

08008274 <WM__InvalidateDrawAndDescs>:
 8008274:	b513      	push	{r0, r1, r4, lr}
 8008276:	4604      	mov	r4, r0
 8008278:	b300      	cbz	r0, 80082bc <WM__InvalidateDrawAndDescs+0x48>
 800827a:	f005 ff65 	bl	800e148 <GUI_ALLOC_LockH>
 800827e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008280:	9001      	str	r0, [sp, #4]
 8008282:	0793      	lsls	r3, r2, #30
 8008284:	d517      	bpl.n	80082b6 <WM__InvalidateDrawAndDescs+0x42>
 8008286:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008288:	b140      	cbz	r0, 800829c <WM__InvalidateDrawAndDescs+0x28>
 800828a:	4b0d      	ldr	r3, [pc, #52]	; (80082c0 <WM__InvalidateDrawAndDescs+0x4c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	42a3      	cmp	r3, r4
 8008290:	d004      	beq.n	800829c <WM__InvalidateDrawAndDescs+0x28>
 8008292:	f001 fdf9 	bl	8009e88 <GUI_MEMDEV_Delete>
 8008296:	9b01      	ldr	r3, [sp, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	625a      	str	r2, [r3, #36]	; 0x24
 800829c:	4620      	mov	r0, r4
 800829e:	f7ff f9ab 	bl	80075f8 <WM_GetFirstChild>
 80082a2:	4604      	mov	r4, r0
 80082a4:	b13c      	cbz	r4, 80082b6 <WM__InvalidateDrawAndDescs+0x42>
 80082a6:	4620      	mov	r0, r4
 80082a8:	f7ff ffe4 	bl	8008274 <WM__InvalidateDrawAndDescs>
 80082ac:	4620      	mov	r0, r4
 80082ae:	f005 ff41 	bl	800e134 <GUI_ALLOC_h2p>
 80082b2:	6a04      	ldr	r4, [r0, #32]
 80082b4:	e7f6      	b.n	80082a4 <WM__InvalidateDrawAndDescs+0x30>
 80082b6:	a801      	add	r0, sp, #4
 80082b8:	f005 ff54 	bl	800e164 <GUI_ALLOC_UnlockH>
 80082bc:	b002      	add	sp, #8
 80082be:	bd10      	pop	{r4, pc}
 80082c0:	20005638 	.word	0x20005638

080082c4 <WM__RectIsNZ>:
 80082c4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80082c8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	dc08      	bgt.n	80082e2 <WM__RectIsNZ+0x1e>
 80082d0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80082d4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80082d8:	429a      	cmp	r2, r3
 80082da:	bfcc      	ite	gt
 80082dc:	2000      	movgt	r0, #0
 80082de:	2001      	movle	r0, #1
 80082e0:	4770      	bx	lr
 80082e2:	2000      	movs	r0, #0
 80082e4:	4770      	bx	lr

080082e6 <WM_SendMessage>:
 80082e6:	b108      	cbz	r0, 80082ec <WM_SendMessage+0x6>
 80082e8:	f7fe bee6 	b.w	80070b8 <WM__SendMessage>
 80082ec:	4770      	bx	lr

080082ee <WM__SendMsgNoData>:
 80082ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082f0:	ab04      	add	r3, sp, #16
 80082f2:	9001      	str	r0, [sp, #4]
 80082f4:	f843 1d10 	str.w	r1, [r3, #-16]!
 80082f8:	4669      	mov	r1, sp
 80082fa:	f7fe fedd 	bl	80070b8 <WM__SendMessage>
 80082fe:	b005      	add	sp, #20
 8008300:	f85d fb04 	ldr.w	pc, [sp], #4

08008304 <WM__GetClientRectWin>:
 8008304:	2300      	movs	r3, #0
 8008306:	800b      	strh	r3, [r1, #0]
 8008308:	8882      	ldrh	r2, [r0, #4]
 800830a:	804b      	strh	r3, [r1, #2]
 800830c:	8803      	ldrh	r3, [r0, #0]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	808b      	strh	r3, [r1, #4]
 8008312:	88c2      	ldrh	r2, [r0, #6]
 8008314:	8843      	ldrh	r3, [r0, #2]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	80cb      	strh	r3, [r1, #6]
 800831a:	4770      	bx	lr

0800831c <WM__GetTopLevelLayer>:
 800831c:	b510      	push	{r4, lr}
 800831e:	4604      	mov	r4, r0
 8008320:	f005 ff08 	bl	800e134 <GUI_ALLOC_h2p>
 8008324:	6980      	ldr	r0, [r0, #24]
 8008326:	2800      	cmp	r0, #0
 8008328:	d1f9      	bne.n	800831e <WM__GetTopLevelLayer+0x2>
 800832a:	4b05      	ldr	r3, [pc, #20]	; (8008340 <WM__GetTopLevelLayer+0x24>)
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	4294      	cmp	r4, r2
 8008330:	d005      	beq.n	800833e <WM__GetTopLevelLayer+0x22>
 8008332:	6858      	ldr	r0, [r3, #4]
 8008334:	4284      	cmp	r4, r0
 8008336:	bf14      	ite	ne
 8008338:	f04f 30ff 	movne.w	r0, #4294967295
 800833c:	2001      	moveq	r0, #1
 800833e:	bd10      	pop	{r4, pc}
 8008340:	200055ec 	.word	0x200055ec

08008344 <_Invalidate1Abs>:
 8008344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008346:	b085      	sub	sp, #20
 8008348:	4606      	mov	r6, r0
 800834a:	460d      	mov	r5, r1
 800834c:	4617      	mov	r7, r2
 800834e:	f005 fef1 	bl	800e134 <GUI_ALLOC_h2p>
 8008352:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008354:	9001      	str	r0, [sp, #4]
 8008356:	07a3      	lsls	r3, r4, #30
 8008358:	d53e      	bpl.n	80083d8 <_Invalidate1Abs+0x94>
 800835a:	4628      	mov	r0, r5
 800835c:	f7ff ffb2 	bl	80082c4 <WM__RectIsNZ>
 8008360:	2800      	cmp	r0, #0
 8008362:	d039      	beq.n	80083d8 <_Invalidate1Abs+0x94>
 8008364:	f640 0301 	movw	r3, #2049	; 0x801
 8008368:	4023      	ands	r3, r4
 800836a:	2b01      	cmp	r3, #1
 800836c:	d034      	beq.n	80083d8 <_Invalidate1Abs+0x94>
 800836e:	4630      	mov	r0, r6
 8008370:	f005 feea 	bl	800e148 <GUI_ALLOC_LockH>
 8008374:	ac02      	add	r4, sp, #8
 8008376:	4602      	mov	r2, r0
 8008378:	9001      	str	r0, [sp, #4]
 800837a:	4629      	mov	r1, r5
 800837c:	4620      	mov	r0, r4
 800837e:	f003 fbdf 	bl	800bb40 <GUI__IntersectRects>
 8008382:	4620      	mov	r0, r4
 8008384:	f7ff ff9e 	bl	80082c4 <WM__RectIsNZ>
 8008388:	b318      	cbz	r0, 80083d2 <_Invalidate1Abs+0x8e>
 800838a:	9b01      	ldr	r3, [sp, #4]
 800838c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800838e:	f244 0120 	movw	r1, #16416	; 0x4020
 8008392:	4011      	ands	r1, r2
 8008394:	f103 0508 	add.w	r5, r3, #8
 8008398:	b129      	cbz	r1, 80083a6 <_Invalidate1Abs+0x62>
 800839a:	4628      	mov	r0, r5
 800839c:	4629      	mov	r1, r5
 800839e:	4622      	mov	r2, r4
 80083a0:	f004 fbca 	bl	800cb38 <GUI_MergeRect>
 80083a4:	e015      	b.n	80083d2 <_Invalidate1Abs+0x8e>
 80083a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80083aa:	4317      	orrs	r7, r2
 80083ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80083b0:	629f      	str	r7, [r3, #40]	; 0x28
 80083b2:	4b0a      	ldr	r3, [pc, #40]	; (80083dc <_Invalidate1Abs+0x98>)
 80083b4:	881a      	ldrh	r2, [r3, #0]
 80083b6:	4630      	mov	r0, r6
 80083b8:	3201      	adds	r2, #1
 80083ba:	801a      	strh	r2, [r3, #0]
 80083bc:	f7ff ffae 	bl	800831c <WM__GetTopLevelLayer>
 80083c0:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <_Invalidate1Abs+0x9c>)
 80083c2:	2201      	movs	r2, #1
 80083c4:	fa02 f000 	lsl.w	r0, r2, r0
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	4302      	orrs	r2, r0
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	f003 fee7 	bl	800c1a0 <GUI_SignalEvent>
 80083d2:	a801      	add	r0, sp, #4
 80083d4:	f005 fec6 	bl	800e164 <GUI_ALLOC_UnlockH>
 80083d8:	b005      	add	sp, #20
 80083da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083dc:	20005604 	.word	0x20005604
 80083e0:	20005614 	.word	0x20005614

080083e4 <WM__Invalidate1Abs>:
 80083e4:	2220      	movs	r2, #32
 80083e6:	f7ff bfad 	b.w	8008344 <_Invalidate1Abs>

080083ea <WM_InvalidateWindowAndDescsEx>:
 80083ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ec:	460f      	mov	r7, r1
 80083ee:	b085      	sub	sp, #20
 80083f0:	4615      	mov	r5, r2
 80083f2:	4606      	mov	r6, r0
 80083f4:	b348      	cbz	r0, 800844a <WM_InvalidateWindowAndDescsEx+0x60>
 80083f6:	f005 fea7 	bl	800e148 <GUI_ALLOC_LockH>
 80083fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80083fc:	ac04      	add	r4, sp, #16
 80083fe:	079b      	lsls	r3, r3, #30
 8008400:	4602      	mov	r2, r0
 8008402:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8008406:	d403      	bmi.n	8008410 <WM_InvalidateWindowAndDescsEx+0x26>
 8008408:	4620      	mov	r0, r4
 800840a:	f005 feab 	bl	800e164 <GUI_ALLOC_UnlockH>
 800840e:	e01c      	b.n	800844a <WM_InvalidateWindowAndDescsEx+0x60>
 8008410:	a802      	add	r0, sp, #8
 8008412:	4639      	mov	r1, r7
 8008414:	f003 fb94 	bl	800bb40 <GUI__IntersectRects>
 8008418:	2800      	cmp	r0, #0
 800841a:	d0f5      	beq.n	8008408 <WM_InvalidateWindowAndDescsEx+0x1e>
 800841c:	4620      	mov	r0, r4
 800841e:	f005 fea1 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008422:	4630      	mov	r0, r6
 8008424:	a902      	add	r1, sp, #8
 8008426:	462a      	mov	r2, r5
 8008428:	f7ff ff8c 	bl	8008344 <_Invalidate1Abs>
 800842c:	4630      	mov	r0, r6
 800842e:	f7ff f8e3 	bl	80075f8 <WM_GetFirstChild>
 8008432:	4604      	mov	r4, r0
 8008434:	b14c      	cbz	r4, 800844a <WM_InvalidateWindowAndDescsEx+0x60>
 8008436:	4620      	mov	r0, r4
 8008438:	a902      	add	r1, sp, #8
 800843a:	462a      	mov	r2, r5
 800843c:	f7ff ffd5 	bl	80083ea <WM_InvalidateWindowAndDescsEx>
 8008440:	4620      	mov	r0, r4
 8008442:	f005 fe77 	bl	800e134 <GUI_ALLOC_h2p>
 8008446:	6a04      	ldr	r4, [r0, #32]
 8008448:	e7f4      	b.n	8008434 <WM_InvalidateWindowAndDescsEx+0x4a>
 800844a:	b005      	add	sp, #20
 800844c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800844e <WM__InvalidateRect>:
 800844e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008452:	4680      	mov	r8, r0
 8008454:	4617      	mov	r7, r2
 8008456:	461d      	mov	r5, r3
 8008458:	460c      	mov	r4, r1
 800845a:	2900      	cmp	r1, #0
 800845c:	d030      	beq.n	80084c0 <WM__InvalidateRect+0x72>
 800845e:	4608      	mov	r0, r1
 8008460:	f005 fe72 	bl	800e148 <GUI_ALLOC_LockH>
 8008464:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008466:	9001      	str	r0, [sp, #4]
 8008468:	07b3      	lsls	r3, r6, #30
 800846a:	4602      	mov	r2, r0
 800846c:	d525      	bpl.n	80084ba <WM__InvalidateRect+0x6c>
 800846e:	a802      	add	r0, sp, #8
 8008470:	4641      	mov	r1, r8
 8008472:	f003 fb65 	bl	800bb40 <GUI__IntersectRects>
 8008476:	b300      	cbz	r0, 80084ba <WM__InvalidateRect+0x6c>
 8008478:	f640 0301 	movw	r3, #2049	; 0x801
 800847c:	4033      	ands	r3, r6
 800847e:	2b01      	cmp	r3, #1
 8008480:	d107      	bne.n	8008492 <WM__InvalidateRect+0x44>
 8008482:	9b01      	ldr	r3, [sp, #4]
 8008484:	a802      	add	r0, sp, #8
 8008486:	6999      	ldr	r1, [r3, #24]
 8008488:	6a1a      	ldr	r2, [r3, #32]
 800848a:	462b      	mov	r3, r5
 800848c:	f7ff ffdf 	bl	800844e <WM__InvalidateRect>
 8008490:	e004      	b.n	800849c <WM__InvalidateRect+0x4e>
 8008492:	4620      	mov	r0, r4
 8008494:	a902      	add	r1, sp, #8
 8008496:	462a      	mov	r2, r5
 8008498:	f7ff ff54 	bl	8008344 <_Invalidate1Abs>
 800849c:	9b01      	ldr	r3, [sp, #4]
 800849e:	69dc      	ldr	r4, [r3, #28]
 80084a0:	b15c      	cbz	r4, 80084ba <WM__InvalidateRect+0x6c>
 80084a2:	42bc      	cmp	r4, r7
 80084a4:	d009      	beq.n	80084ba <WM__InvalidateRect+0x6c>
 80084a6:	4620      	mov	r0, r4
 80084a8:	a902      	add	r1, sp, #8
 80084aa:	462a      	mov	r2, r5
 80084ac:	f7ff ff9d 	bl	80083ea <WM_InvalidateWindowAndDescsEx>
 80084b0:	4620      	mov	r0, r4
 80084b2:	f005 fe3f 	bl	800e134 <GUI_ALLOC_h2p>
 80084b6:	6a04      	ldr	r4, [r0, #32]
 80084b8:	e7f2      	b.n	80084a0 <WM__InvalidateRect+0x52>
 80084ba:	a801      	add	r0, sp, #4
 80084bc:	f005 fe52 	bl	800e164 <GUI_ALLOC_UnlockH>
 80084c0:	b004      	add	sp, #16
 80084c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080084c6 <WM__InvalidateParent>:
 80084c6:	b570      	push	{r4, r5, r6, lr}
 80084c8:	4605      	mov	r5, r0
 80084ca:	4608      	mov	r0, r1
 80084cc:	460c      	mov	r4, r1
 80084ce:	4616      	mov	r6, r2
 80084d0:	f005 fe30 	bl	800e134 <GUI_ALLOC_h2p>
 80084d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80084d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80084da:	4628      	mov	r0, r5
 80084dc:	4621      	mov	r1, r4
 80084de:	4632      	mov	r2, r6
 80084e0:	bf0c      	ite	eq
 80084e2:	2320      	moveq	r3, #32
 80084e4:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 80084e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084ec:	f7ff bfaf 	b.w	800844e <WM__InvalidateRect>

080084f0 <WM__InvalidateRectEx>:
 80084f0:	2320      	movs	r3, #32
 80084f2:	f7ff bfac 	b.w	800844e <WM__InvalidateRect>

080084f6 <WM__DetachWindow>:
 80084f6:	b513      	push	{r0, r1, r4, lr}
 80084f8:	4604      	mov	r4, r0
 80084fa:	f005 fe25 	bl	800e148 <GUI_ALLOC_LockH>
 80084fe:	6981      	ldr	r1, [r0, #24]
 8008500:	9001      	str	r0, [sp, #4]
 8008502:	b141      	cbz	r1, 8008516 <WM__DetachWindow+0x20>
 8008504:	6a02      	ldr	r2, [r0, #32]
 8008506:	f7ff fff3 	bl	80084f0 <WM__InvalidateRectEx>
 800850a:	4620      	mov	r0, r4
 800850c:	f7ff fe30 	bl	8008170 <WM__RemoveWindowFromList>
 8008510:	9b01      	ldr	r3, [sp, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	619a      	str	r2, [r3, #24]
 8008516:	a801      	add	r0, sp, #4
 8008518:	f005 fe24 	bl	800e164 <GUI_ALLOC_UnlockH>
 800851c:	b002      	add	sp, #8
 800851e:	bd10      	pop	{r4, pc}

08008520 <WM_InvalidateRect>:
 8008520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008522:	460f      	mov	r7, r1
 8008524:	b087      	sub	sp, #28
 8008526:	4605      	mov	r5, r0
 8008528:	2800      	cmp	r0, #0
 800852a:	d033      	beq.n	8008594 <WM_InvalidateRect+0x74>
 800852c:	f005 fe0c 	bl	800e148 <GUI_ALLOC_LockH>
 8008530:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008532:	9001      	str	r0, [sp, #4]
 8008534:	07b2      	lsls	r2, r6, #30
 8008536:	d52a      	bpl.n	800858e <WM_InvalidateRect+0x6e>
 8008538:	c803      	ldmia	r0, {r0, r1}
 800853a:	ac04      	add	r4, sp, #16
 800853c:	03f3      	lsls	r3, r6, #15
 800853e:	e884 0003 	stmia.w	r4, {r0, r1}
 8008542:	d502      	bpl.n	800854a <WM_InvalidateRect+0x2a>
 8008544:	4628      	mov	r0, r5
 8008546:	f7ff fe95 	bl	8008274 <WM__InvalidateDrawAndDescs>
 800854a:	b15f      	cbz	r7, 8008564 <WM_InvalidateRect+0x44>
 800854c:	6838      	ldr	r0, [r7, #0]
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	ab02      	add	r3, sp, #8
 8008552:	c303      	stmia	r3!, {r0, r1}
 8008554:	9801      	ldr	r0, [sp, #4]
 8008556:	a902      	add	r1, sp, #8
 8008558:	f7ff fe28 	bl	80081ac <WM__Client2Screen>
 800855c:	4620      	mov	r0, r4
 800855e:	a902      	add	r1, sp, #8
 8008560:	f003 fad0 	bl	800bb04 <GUI__IntersectRect>
 8008564:	4620      	mov	r0, r4
 8008566:	4629      	mov	r1, r5
 8008568:	f7ff fd82 	bl	8008070 <WM__ClipAtParentBorders>
 800856c:	b178      	cbz	r0, 800858e <WM_InvalidateRect+0x6e>
 800856e:	f640 0301 	movw	r3, #2049	; 0x801
 8008572:	4033      	ands	r3, r6
 8008574:	2b01      	cmp	r3, #1
 8008576:	d106      	bne.n	8008586 <WM_InvalidateRect+0x66>
 8008578:	9b01      	ldr	r3, [sp, #4]
 800857a:	4620      	mov	r0, r4
 800857c:	6999      	ldr	r1, [r3, #24]
 800857e:	6a1a      	ldr	r2, [r3, #32]
 8008580:	f7ff ffb6 	bl	80084f0 <WM__InvalidateRectEx>
 8008584:	e003      	b.n	800858e <WM_InvalidateRect+0x6e>
 8008586:	4628      	mov	r0, r5
 8008588:	4621      	mov	r1, r4
 800858a:	f7ff ff2b 	bl	80083e4 <WM__Invalidate1Abs>
 800858e:	a801      	add	r0, sp, #4
 8008590:	f005 fde8 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008594:	b007      	add	sp, #28
 8008596:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008598 <WM_InvalidateWindow>:
 8008598:	2100      	movs	r1, #0
 800859a:	f7ff bfc1 	b.w	8008520 <WM_InvalidateRect>

0800859e <WM__SelectTopLevelLayer>:
 800859e:	b508      	push	{r3, lr}
 80085a0:	f7ff febc 	bl	800831c <WM__GetTopLevelLayer>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	db03      	blt.n	80085b0 <WM__SelectTopLevelLayer+0x12>
 80085a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80085ac:	f003 bedc 	b.w	800c368 <GUI_SelectLayer>
 80085b0:	bd08      	pop	{r3, pc}
	...

080085b4 <WM_SelectWindow>:
 80085b4:	4a0d      	ldr	r2, [pc, #52]	; (80085ec <WM_SelectWindow+0x38>)
 80085b6:	6813      	ldr	r3, [r2, #0]
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80085bc:	4604      	mov	r4, r0
 80085be:	4616      	mov	r6, r2
 80085c0:	b908      	cbnz	r0, 80085c6 <WM_SelectWindow+0x12>
 80085c2:	4a0b      	ldr	r2, [pc, #44]	; (80085f0 <WM_SelectWindow+0x3c>)
 80085c4:	6814      	ldr	r4, [r2, #0]
 80085c6:	649c      	str	r4, [r3, #72]	; 0x48
 80085c8:	4620      	mov	r0, r4
 80085ca:	f7ff ffe8 	bl	800859e <WM__SelectTopLevelLayer>
 80085ce:	f003 f9b9 	bl	800b944 <LCD_SetClipRectMax>
 80085d2:	4620      	mov	r0, r4
 80085d4:	f005 fdae 	bl	800e134 <GUI_ALLOC_h2p>
 80085d8:	6833      	ldr	r3, [r6, #0]
 80085da:	f9b0 1000 	ldrsh.w	r1, [r0]
 80085de:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80085e2:	64d9      	str	r1, [r3, #76]	; 0x4c
 80085e4:	651a      	str	r2, [r3, #80]	; 0x50
 80085e6:	4628      	mov	r0, r5
 80085e8:	bd70      	pop	{r4, r5, r6, pc}
 80085ea:	bf00      	nop
 80085ec:	20000084 	.word	0x20000084
 80085f0:	20005608 	.word	0x20005608

080085f4 <WM_CreateWindowAsChild>:
 80085f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085fa:	469b      	mov	fp, r3
 80085fc:	4b4b      	ldr	r3, [pc, #300]	; (800872c <WM_CreateWindowAsChild+0x138>)
 80085fe:	4607      	mov	r7, r0
 8008600:	4688      	mov	r8, r1
 8008602:	4692      	mov	sl, r2
 8008604:	681e      	ldr	r6, [r3, #0]
 8008606:	bb65      	cbnz	r5, 8008662 <WM_CreateWindowAsChild+0x6e>
 8008608:	4b49      	ldr	r3, [pc, #292]	; (8008730 <WM_CreateWindowAsChild+0x13c>)
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	b363      	cbz	r3, 8008668 <WM_CreateWindowAsChild+0x74>
 800860e:	4b49      	ldr	r3, [pc, #292]	; (8008734 <WM_CreateWindowAsChild+0x140>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	7c5a      	ldrb	r2, [r3, #17]
 8008614:	4b48      	ldr	r3, [pc, #288]	; (8008738 <WM_CreateWindowAsChild+0x144>)
 8008616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	d024      	beq.n	8008668 <WM_CreateWindowAsChild+0x74>
 800861e:	b31b      	cbz	r3, 8008668 <WM_CreateWindowAsChild+0x74>
 8008620:	461d      	mov	r5, r3
 8008622:	4628      	mov	r0, r5
 8008624:	f005 fd90 	bl	800e148 <GUI_ALLOC_LockH>
 8008628:	f9b0 2000 	ldrsh.w	r2, [r0]
 800862c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008630:	9001      	str	r0, [sp, #4]
 8008632:	4417      	add	r7, r2
 8008634:	4498      	add	r8, r3
 8008636:	f1ba 0f00 	cmp.w	sl, #0
 800863a:	d105      	bne.n	8008648 <WM_CreateWindowAsChild+0x54>
 800863c:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 8008640:	ebc2 0a0a 	rsb	sl, r2, sl
 8008644:	f10a 0a01 	add.w	sl, sl, #1
 8008648:	f1bb 0f00 	cmp.w	fp, #0
 800864c:	d105      	bne.n	800865a <WM_CreateWindowAsChild+0x66>
 800864e:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 8008652:	ebc3 0b0b 	rsb	fp, r3, fp
 8008656:	f10b 0b01 	add.w	fp, fp, #1
 800865a:	a801      	add	r0, sp, #4
 800865c:	f005 fd82 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008660:	e002      	b.n	8008668 <WM_CreateWindowAsChild+0x74>
 8008662:	1c6b      	adds	r3, r5, #1
 8008664:	d1dd      	bne.n	8008622 <WM_CreateWindowAsChild+0x2e>
 8008666:	2500      	movs	r5, #0
 8008668:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800866a:	302c      	adds	r0, #44	; 0x2c
 800866c:	f005 ff44 	bl	800e4f8 <GUI_ALLOC_AllocZero>
 8008670:	4604      	mov	r4, r0
 8008672:	2800      	cmp	r0, #0
 8008674:	d056      	beq.n	8008724 <WM_CreateWindowAsChild+0x130>
 8008676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008678:	431e      	orrs	r6, r3
 800867a:	4b2d      	ldr	r3, [pc, #180]	; (8008730 <WM_CreateWindowAsChild+0x13c>)
 800867c:	881a      	ldrh	r2, [r3, #0]
 800867e:	3201      	adds	r2, #1
 8008680:	801a      	strh	r2, [r3, #0]
 8008682:	f005 fd61 	bl	800e148 <GUI_ALLOC_LockH>
 8008686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008688:	6103      	str	r3, [r0, #16]
 800868a:	f10d 0908 	add.w	r9, sp, #8
 800868e:	4b2b      	ldr	r3, [pc, #172]	; (800873c <WM_CreateWindowAsChild+0x148>)
 8008690:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008692:	f849 0d08 	str.w	r0, [r9, #-8]!
 8008696:	4033      	ands	r3, r6
 8008698:	8007      	strh	r7, [r0, #0]
 800869a:	f8a0 8002 	strh.w	r8, [r0, #2]
 800869e:	4457      	add	r7, sl
 80086a0:	44d8      	add	r8, fp
 80086a2:	4313      	orrs	r3, r2
 80086a4:	3f01      	subs	r7, #1
 80086a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80086aa:	6283      	str	r3, [r0, #40]	; 0x28
 80086ac:	8087      	strh	r7, [r0, #4]
 80086ae:	f8a0 8006 	strh.w	r8, [r0, #6]
 80086b2:	4668      	mov	r0, sp
 80086b4:	f005 fd56 	bl	800e164 <GUI_ALLOC_UnlockH>
 80086b8:	4b21      	ldr	r3, [pc, #132]	; (8008740 <WM_CreateWindowAsChild+0x14c>)
 80086ba:	6818      	ldr	r0, [r3, #0]
 80086bc:	b148      	cbz	r0, 80086d2 <WM_CreateWindowAsChild+0xde>
 80086be:	f005 fd39 	bl	800e134 <GUI_ALLOC_h2p>
 80086c2:	4607      	mov	r7, r0
 80086c4:	4620      	mov	r0, r4
 80086c6:	f005 fd35 	bl	800e134 <GUI_ALLOC_h2p>
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	6143      	str	r3, [r0, #20]
 80086ce:	617c      	str	r4, [r7, #20]
 80086d0:	e000      	b.n	80086d4 <WM_CreateWindowAsChild+0xe0>
 80086d2:	601c      	str	r4, [r3, #0]
 80086d4:	4629      	mov	r1, r5
 80086d6:	4620      	mov	r0, r4
 80086d8:	f7ff fcf8 	bl	80080cc <WM__InsertWindowIntoList>
 80086dc:	06b5      	lsls	r5, r6, #26
 80086de:	d502      	bpl.n	80086e6 <WM_CreateWindowAsChild+0xf2>
 80086e0:	4620      	mov	r0, r4
 80086e2:	f7ff ff67 	bl	80085b4 <WM_SelectWindow>
 80086e6:	07f0      	lsls	r0, r6, #31
 80086e8:	d503      	bpl.n	80086f2 <WM_CreateWindowAsChild+0xfe>
 80086ea:	4b16      	ldr	r3, [pc, #88]	; (8008744 <WM_CreateWindowAsChild+0x150>)
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	3201      	adds	r2, #1
 80086f0:	601a      	str	r2, [r3, #0]
 80086f2:	0671      	lsls	r1, r6, #25
 80086f4:	d502      	bpl.n	80086fc <WM_CreateWindowAsChild+0x108>
 80086f6:	4620      	mov	r0, r4
 80086f8:	f7fe fffb 	bl	80076f2 <WM_BringToBottom>
 80086fc:	07b2      	lsls	r2, r6, #30
 80086fe:	d50d      	bpl.n	800871c <WM_CreateWindowAsChild+0x128>
 8008700:	4620      	mov	r0, r4
 8008702:	f005 fd21 	bl	800e148 <GUI_ALLOC_LockH>
 8008706:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008708:	9000      	str	r0, [sp, #0]
 800870a:	f043 0302 	orr.w	r3, r3, #2
 800870e:	6283      	str	r3, [r0, #40]	; 0x28
 8008710:	4668      	mov	r0, sp
 8008712:	f005 fd27 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008716:	4620      	mov	r0, r4
 8008718:	f7ff ff3e 	bl	8008598 <WM_InvalidateWindow>
 800871c:	4620      	mov	r0, r4
 800871e:	2101      	movs	r1, #1
 8008720:	f7ff fde5 	bl	80082ee <WM__SendMsgNoData>
 8008724:	4620      	mov	r0, r4
 8008726:	b003      	add	sp, #12
 8008728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872c:	2000561c 	.word	0x2000561c
 8008730:	200055e4 	.word	0x200055e4
 8008734:	20000084 	.word	0x20000084
 8008738:	200055ec 	.word	0x200055ec
 800873c:	003f3f9f 	.word	0x003f3f9f
 8008740:	20005608 	.word	0x20005608
 8008744:	2000563c 	.word	0x2000563c

08008748 <WM_DeleteWindow>:
 8008748:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800874a:	4604      	mov	r4, r0
 800874c:	2800      	cmp	r0, #0
 800874e:	d06e      	beq.n	800882e <WM_DeleteWindow+0xe6>
 8008750:	f7ff fd80 	bl	8008254 <WM__IsWindow>
 8008754:	2800      	cmp	r0, #0
 8008756:	d06a      	beq.n	800882e <WM_DeleteWindow+0xe6>
 8008758:	4620      	mov	r0, r4
 800875a:	f7ff fddf 	bl	800831c <WM__GetTopLevelLayer>
 800875e:	210b      	movs	r1, #11
 8008760:	4605      	mov	r5, r0
 8008762:	4620      	mov	r0, r4
 8008764:	f7ff fdc3 	bl	80082ee <WM__SendMsgNoData>
 8008768:	4620      	mov	r0, r4
 800876a:	f006 fad9 	bl	800ed20 <WM__DeleteAssocTimer>
 800876e:	4620      	mov	r0, r4
 8008770:	f005 fcea 	bl	800e148 <GUI_ALLOC_LockH>
 8008774:	9001      	str	r0, [sp, #4]
 8008776:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008778:	b108      	cbz	r0, 800877e <WM_DeleteWindow+0x36>
 800877a:	f001 fb85 	bl	8009e88 <GUI_MEMDEV_Delete>
 800877e:	4b2d      	ldr	r3, [pc, #180]	; (8008834 <WM_DeleteWindow+0xec>)
 8008780:	4a2d      	ldr	r2, [pc, #180]	; (8008838 <WM_DeleteWindow+0xf0>)
 8008782:	2100      	movs	r1, #0
 8008784:	6019      	str	r1, [r3, #0]
 8008786:	4b2d      	ldr	r3, [pc, #180]	; (800883c <WM_DeleteWindow+0xf4>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800878e:	42a0      	cmp	r0, r4
 8008790:	bf08      	it	eq
 8008792:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 8008796:	4a2a      	ldr	r2, [pc, #168]	; (8008840 <WM_DeleteWindow+0xf8>)
 8008798:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800879c:	42a1      	cmp	r1, r4
 800879e:	bf04      	itt	eq
 80087a0:	2100      	moveq	r1, #0
 80087a2:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 80087a6:	4b27      	ldr	r3, [pc, #156]	; (8008844 <WM_DeleteWindow+0xfc>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	b12b      	cbz	r3, 80087b8 <WM_DeleteWindow+0x70>
 80087ac:	685a      	ldr	r2, [r3, #4]
 80087ae:	42a2      	cmp	r2, r4
 80087b0:	bf04      	itt	eq
 80087b2:	2200      	moveq	r2, #0
 80087b4:	605a      	streq	r2, [r3, #4]
 80087b6:	e7f7      	b.n	80087a8 <WM_DeleteWindow+0x60>
 80087b8:	4620      	mov	r0, r4
 80087ba:	2107      	movs	r1, #7
 80087bc:	f7ff f8c5 	bl	800794a <WM_NotifyParent>
 80087c0:	9e01      	ldr	r6, [sp, #4]
 80087c2:	69f0      	ldr	r0, [r6, #28]
 80087c4:	f7ff ffc0 	bl	8008748 <WM_DeleteWindow>
 80087c8:	69f3      	ldr	r3, [r6, #28]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1f9      	bne.n	80087c2 <WM_DeleteWindow+0x7a>
 80087ce:	4620      	mov	r0, r4
 80087d0:	f7ff fe91 	bl	80084f6 <WM__DetachWindow>
 80087d4:	4b1c      	ldr	r3, [pc, #112]	; (8008848 <WM_DeleteWindow+0x100>)
 80087d6:	6818      	ldr	r0, [r3, #0]
 80087d8:	b150      	cbz	r0, 80087f0 <WM_DeleteWindow+0xa8>
 80087da:	f005 fcab 	bl	800e134 <GUI_ALLOC_h2p>
 80087de:	4606      	mov	r6, r0
 80087e0:	6940      	ldr	r0, [r0, #20]
 80087e2:	42a0      	cmp	r0, r4
 80087e4:	d1f8      	bne.n	80087d8 <WM_DeleteWindow+0x90>
 80087e6:	4620      	mov	r0, r4
 80087e8:	f005 fca4 	bl	800e134 <GUI_ALLOC_h2p>
 80087ec:	6943      	ldr	r3, [r0, #20]
 80087ee:	6173      	str	r3, [r6, #20]
 80087f0:	9b01      	ldr	r3, [sp, #4]
 80087f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f4:	07da      	lsls	r2, r3, #31
 80087f6:	d503      	bpl.n	8008800 <WM_DeleteWindow+0xb8>
 80087f8:	4a14      	ldr	r2, [pc, #80]	; (800884c <WM_DeleteWindow+0x104>)
 80087fa:	6811      	ldr	r1, [r2, #0]
 80087fc:	3901      	subs	r1, #1
 80087fe:	6011      	str	r1, [r2, #0]
 8008800:	069b      	lsls	r3, r3, #26
 8008802:	d503      	bpl.n	800880c <WM_DeleteWindow+0xc4>
 8008804:	4b12      	ldr	r3, [pc, #72]	; (8008850 <WM_DeleteWindow+0x108>)
 8008806:	881a      	ldrh	r2, [r3, #0]
 8008808:	3a01      	subs	r2, #1
 800880a:	801a      	strh	r2, [r3, #0]
 800880c:	a801      	add	r0, sp, #4
 800880e:	f005 fca9 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008812:	4b10      	ldr	r3, [pc, #64]	; (8008854 <WM_DeleteWindow+0x10c>)
 8008814:	881a      	ldrh	r2, [r3, #0]
 8008816:	4620      	mov	r0, r4
 8008818:	3a01      	subs	r2, #1
 800881a:	801a      	strh	r2, [r3, #0]
 800881c:	f005 fcce 	bl	800e1bc <GUI_ALLOC_Free>
 8008820:	2d00      	cmp	r5, #0
 8008822:	db04      	blt.n	800882e <WM_DeleteWindow+0xe6>
 8008824:	4b0c      	ldr	r3, [pc, #48]	; (8008858 <WM_DeleteWindow+0x110>)
 8008826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800882a:	f7ff fec3 	bl	80085b4 <WM_SelectWindow>
 800882e:	b002      	add	sp, #8
 8008830:	bd70      	pop	{r4, r5, r6, pc}
 8008832:	bf00      	nop
 8008834:	20005424 	.word	0x20005424
 8008838:	200055fc 	.word	0x200055fc
 800883c:	2000560c 	.word	0x2000560c
 8008840:	20005630 	.word	0x20005630
 8008844:	20005628 	.word	0x20005628
 8008848:	20005608 	.word	0x20005608
 800884c:	2000563c 	.word	0x2000563c
 8008850:	20005604 	.word	0x20005604
 8008854:	200055e4 	.word	0x200055e4
 8008858:	200055ec 	.word	0x200055ec

0800885c <_Exec1Input>:
 800885c:	4b1b      	ldr	r3, [pc, #108]	; (80088cc <_Exec1Input+0x70>)
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008862:	461e      	mov	r6, r3
 8008864:	b1d2      	cbz	r2, 800889c <_Exec1Input+0x40>
 8008866:	4b1a      	ldr	r3, [pc, #104]	; (80088d0 <_Exec1Input+0x74>)
 8008868:	681c      	ldr	r4, [r3, #0]
 800886a:	b1b4      	cbz	r4, 800889a <_Exec1Input+0x3e>
 800886c:	4620      	mov	r0, r4
 800886e:	f005 fc6b 	bl	800e148 <GUI_ALLOC_LockH>
 8008872:	4603      	mov	r3, r0
 8008874:	a802      	add	r0, sp, #8
 8008876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008878:	f840 3d04 	str.w	r3, [r0, #-4]!
 800887c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8008880:	695d      	ldr	r5, [r3, #20]
 8008882:	d006      	beq.n	8008892 <_Exec1Input+0x36>
 8008884:	f005 fc6e 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008888:	4620      	mov	r0, r4
 800888a:	f7ff ff5d 	bl	8008748 <WM_DeleteWindow>
 800888e:	462c      	mov	r4, r5
 8008890:	e7eb      	b.n	800886a <_Exec1Input+0xe>
 8008892:	462c      	mov	r4, r5
 8008894:	f005 fc66 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008898:	e7e7      	b.n	800886a <_Exec1Input+0xe>
 800889a:	6034      	str	r4, [r6, #0]
 800889c:	4b0d      	ldr	r3, [pc, #52]	; (80088d4 <_Exec1Input+0x78>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	b103      	cbz	r3, 80088a4 <_Exec1Input+0x48>
 80088a2:	4798      	blx	r3
 80088a4:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <_Exec1Input+0x7c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	b953      	cbnz	r3, 80088c0 <_Exec1Input+0x64>
 80088aa:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <_Exec1Input+0x80>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 80088b2:	b148      	cbz	r0, 80088c8 <_Exec1Input+0x6c>
 80088b4:	f003 fd76 	bl	800c3a4 <GUI_PollKeyMsg>
 80088b8:	3000      	adds	r0, #0
 80088ba:	bf18      	it	ne
 80088bc:	2001      	movne	r0, #1
 80088be:	e003      	b.n	80088c8 <_Exec1Input+0x6c>
 80088c0:	4798      	blx	r3
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d0f1      	beq.n	80088aa <_Exec1Input+0x4e>
 80088c6:	2001      	movs	r0, #1
 80088c8:	b002      	add	sp, #8
 80088ca:	bd70      	pop	{r4, r5, r6, pc}
 80088cc:	20005408 	.word	0x20005408
 80088d0:	20005608 	.word	0x20005608
 80088d4:	200055f4 	.word	0x200055f4
 80088d8:	200056a0 	.word	0x200056a0
 80088dc:	20000084 	.word	0x20000084

080088e0 <WM_GetActiveWindow>:
 80088e0:	4b01      	ldr	r3, [pc, #4]	; (80088e8 <WM_GetActiveWindow+0x8>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80088e6:	4770      	bx	lr
 80088e8:	20000084 	.word	0x20000084

080088ec <WM__GetNextIVR>:
 80088ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80088f0:	4f5d      	ldr	r7, [pc, #372]	; (8008a68 <WM__GetNextIVR+0x17c>)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 80088f8:	2800      	cmp	r0, #0
 80088fa:	f000 80b2 	beq.w	8008a62 <WM__GetNextIVR+0x176>
 80088fe:	4b5b      	ldr	r3, [pc, #364]	; (8008a6c <WM__GetNextIVR+0x180>)
 8008900:	695a      	ldr	r2, [r3, #20]
 8008902:	2a01      	cmp	r2, #1
 8008904:	461c      	mov	r4, r3
 8008906:	dd03      	ble.n	8008910 <WM__GetNextIVR+0x24>
 8008908:	3a01      	subs	r2, #1
 800890a:	615a      	str	r2, [r3, #20]
 800890c:	2000      	movs	r0, #0
 800890e:	e0a8      	b.n	8008a62 <WM__GetNextIVR+0x176>
 8008910:	f104 0608 	add.w	r6, r4, #8
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	e896 0003 	ldmia.w	r6, {r0, r1}
 800891a:	3301      	adds	r3, #1
 800891c:	ad02      	add	r5, sp, #8
 800891e:	6123      	str	r3, [r4, #16]
 8008920:	e885 0003 	stmia.w	r5, {r0, r1}
 8008924:	b923      	cbnz	r3, 8008930 <WM__GetNextIVR+0x44>
 8008926:	8823      	ldrh	r3, [r4, #0]
 8008928:	f8ad 3008 	strh.w	r3, [sp, #8]
 800892c:	8863      	ldrh	r3, [r4, #2]
 800892e:	e011      	b.n	8008954 <WM__GetNextIVR+0x68>
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	8962      	ldrh	r2, [r4, #10]
 8008934:	f8ad 200a 	strh.w	r2, [sp, #10]
 8008938:	3301      	adds	r3, #1
 800893a:	b29b      	uxth	r3, r3
 800893c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8008940:	f8ad 3008 	strh.w	r3, [sp, #8]
 8008944:	b21b      	sxth	r3, r3
 8008946:	429a      	cmp	r2, r3
 8008948:	da06      	bge.n	8008958 <WM__GetNextIVR+0x6c>
 800894a:	8823      	ldrh	r3, [r4, #0]
 800894c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8008950:	89e3      	ldrh	r3, [r4, #14]
 8008952:	3301      	adds	r3, #1
 8008954:	f8ad 300a 	strh.w	r3, [sp, #10]
 8008958:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800895c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8008960:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8008a6c <WM__GetNextIVR+0x180>
 8008964:	429a      	cmp	r2, r3
 8008966:	dd04      	ble.n	8008972 <WM__GetNextIVR+0x86>
 8008968:	6963      	ldr	r3, [r4, #20]
 800896a:	3b01      	subs	r3, #1
 800896c:	2000      	movs	r0, #0
 800896e:	6163      	str	r3, [r4, #20]
 8008970:	e077      	b.n	8008a62 <WM__GetNextIVR+0x176>
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008976:	f005 fbe7 	bl	800e148 <GUI_ALLOC_LockH>
 800897a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800897e:	f9b8 3000 	ldrsh.w	r3, [r8]
 8008982:	9001      	str	r0, [sp, #4]
 8008984:	429a      	cmp	r2, r3
 8008986:	d11c      	bne.n	80089c2 <WM__GetNextIVR+0xd6>
 8008988:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800898c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008990:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8008994:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008998:	4b33      	ldr	r3, [pc, #204]	; (8008a68 <WM__GetNextIVR+0x17c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800899e:	b15a      	cbz	r2, 80089b8 <WM__GetNextIVR+0xcc>
 80089a0:	4610      	mov	r0, r2
 80089a2:	f005 fbc7 	bl	800e134 <GUI_ALLOC_h2p>
 80089a6:	4680      	mov	r8, r0
 80089a8:	2200      	movs	r2, #0
 80089aa:	6a00      	ldr	r0, [r0, #32]
 80089ac:	4629      	mov	r1, r5
 80089ae:	f7ff f973 	bl	8007c98 <_Findy1>
 80089b2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80089b6:	e7f2      	b.n	800899e <WM__GetNextIVR+0xb2>
 80089b8:	9b01      	ldr	r3, [sp, #4]
 80089ba:	4629      	mov	r1, r5
 80089bc:	69d8      	ldr	r0, [r3, #28]
 80089be:	f7ff f96b 	bl	8007c98 <_Findy1>
 80089c2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80089c6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089ce:	b16a      	cbz	r2, 80089ec <WM__GetNextIVR+0x100>
 80089d0:	4610      	mov	r0, r2
 80089d2:	f005 fbaf 	bl	800e134 <GUI_ALLOC_h2p>
 80089d6:	4629      	mov	r1, r5
 80089d8:	4680      	mov	r8, r0
 80089da:	2200      	movs	r2, #0
 80089dc:	6a00      	ldr	r0, [r0, #32]
 80089de:	f7ff f9b1 	bl	8007d44 <_Findx0>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d1ed      	bne.n	80089c2 <WM__GetNextIVR+0xd6>
 80089e6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80089ea:	e7f0      	b.n	80089ce <WM__GetNextIVR+0xe2>
 80089ec:	9b01      	ldr	r3, [sp, #4]
 80089ee:	4629      	mov	r1, r5
 80089f0:	69d8      	ldr	r0, [r3, #28]
 80089f2:	f7ff f9a7 	bl	8007d44 <_Findx0>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d1e3      	bne.n	80089c2 <WM__GetNextIVR+0xd6>
 80089fa:	88a3      	ldrh	r3, [r4, #4]
 80089fc:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8008a00:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008a04:	b21b      	sxth	r3, r3
 8008a06:	429a      	cmp	r2, r3
 8008a08:	dd07      	ble.n	8008a1a <WM__GetNextIVR+0x12e>
 8008a0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008a0e:	e886 0003 	stmia.w	r6, {r0, r1}
 8008a12:	a801      	add	r0, sp, #4
 8008a14:	f005 fba6 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008a18:	e797      	b.n	800894a <WM__GetNextIVR+0x5e>
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a1e:	b152      	cbz	r2, 8008a36 <WM__GetNextIVR+0x14a>
 8008a20:	4610      	mov	r0, r2
 8008a22:	f005 fb87 	bl	800e134 <GUI_ALLOC_h2p>
 8008a26:	4607      	mov	r7, r0
 8008a28:	2200      	movs	r2, #0
 8008a2a:	6a00      	ldr	r0, [r0, #32]
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	f7ff f9cd 	bl	8007dcc <_Findx1>
 8008a32:	69ba      	ldr	r2, [r7, #24]
 8008a34:	e7f3      	b.n	8008a1e <WM__GetNextIVR+0x132>
 8008a36:	af04      	add	r7, sp, #16
 8008a38:	4629      	mov	r1, r5
 8008a3a:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8008a3e:	69d8      	ldr	r0, [r3, #28]
 8008a40:	f7ff f9c4 	bl	8007dcc <_Findx1>
 8008a44:	4638      	mov	r0, r7
 8008a46:	f005 fb8d 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008a4a:	6923      	ldr	r3, [r4, #16]
 8008a4c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008a50:	4293      	cmp	r3, r2
 8008a52:	dc89      	bgt.n	8008968 <WM__GetNextIVR+0x7c>
 8008a54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008a58:	e886 0003 	stmia.w	r6, {r0, r1}
 8008a5c:	f7ff fbd6 	bl	800820c <WM__ActivateClipRect>
 8008a60:	2001      	movs	r0, #1
 8008a62:	b004      	add	sp, #16
 8008a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a68:	20000084 	.word	0x20000084
 8008a6c:	2000540c 	.word	0x2000540c

08008a70 <WM__InitIVRSearch>:
 8008a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a74:	4f39      	ldr	r7, [pc, #228]	; (8008b5c <WM__InitIVRSearch+0xec>)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8008a7c:	b086      	sub	sp, #24
 8008a7e:	4606      	mov	r6, r0
 8008a80:	b912      	cbnz	r2, 8008a88 <WM__InitIVRSearch+0x18>
 8008a82:	f7ff fbc3 	bl	800820c <WM__ActivateClipRect>
 8008a86:	e064      	b.n	8008b52 <WM__InitIVRSearch+0xe2>
 8008a88:	4d35      	ldr	r5, [pc, #212]	; (8008b60 <WM__InitIVRSearch+0xf0>)
 8008a8a:	696a      	ldr	r2, [r5, #20]
 8008a8c:	3201      	adds	r2, #1
 8008a8e:	2a01      	cmp	r2, #1
 8008a90:	616a      	str	r2, [r5, #20]
 8008a92:	462c      	mov	r4, r5
 8008a94:	dc5d      	bgt.n	8008b52 <WM__InitIVRSearch+0xe2>
 8008a96:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008a98:	f005 fb56 	bl	800e148 <GUI_ALLOC_LockH>
 8008a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa0:	612a      	str	r2, [r5, #16]
 8008aa2:	4a30      	ldr	r2, [pc, #192]	; (8008b64 <WM__InitIVRSearch+0xf4>)
 8008aa4:	9000      	str	r0, [sp, #0]
 8008aa6:	7812      	ldrb	r2, [r2, #0]
 8008aa8:	b12a      	cbz	r2, 8008ab6 <WM__InitIVRSearch+0x46>
 8008aaa:	f100 0308 	add.w	r3, r0, #8
 8008aae:	aa02      	add	r2, sp, #8
 8008ab0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008ab4:	e005      	b.n	8008ac2 <WM__InitIVRSearch+0x52>
 8008ab6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008ab8:	f012 0802 	ands.w	r8, r2, #2
 8008abc:	d00a      	beq.n	8008ad4 <WM__InitIVRSearch+0x64>
 8008abe:	c803      	ldmia	r0, {r0, r1}
 8008ac0:	aa02      	add	r2, sp, #8
 8008ac2:	e882 0003 	stmia.w	r2, {r0, r1}
 8008ac6:	ad02      	add	r5, sp, #8
 8008ac8:	b166      	cbz	r6, 8008ae4 <WM__InitIVRSearch+0x74>
 8008aca:	4628      	mov	r0, r5
 8008acc:	4631      	mov	r1, r6
 8008ace:	f003 f819 	bl	800bb04 <GUI__IntersectRect>
 8008ad2:	e007      	b.n	8008ae4 <WM__InitIVRSearch+0x74>
 8008ad4:	696b      	ldr	r3, [r5, #20]
 8008ad6:	4668      	mov	r0, sp
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	616b      	str	r3, [r5, #20]
 8008adc:	f005 fb42 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	e037      	b.n	8008b54 <WM__InitIVRSearch+0xe4>
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	4e20      	ldr	r6, [pc, #128]	; (8008b68 <WM__InitIVRSearch+0xf8>)
 8008ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aea:	b1c2      	cbz	r2, 8008b1e <WM__InitIVRSearch+0xae>
 8008aec:	9b00      	ldr	r3, [sp, #0]
 8008aee:	6810      	ldr	r0, [r2, #0]
 8008af0:	6851      	ldr	r1, [r2, #4]
 8008af2:	9301      	str	r3, [sp, #4]
 8008af4:	ab04      	add	r3, sp, #16
 8008af6:	c303      	stmia	r3!, {r0, r1}
 8008af8:	6833      	ldr	r3, [r6, #0]
 8008afa:	b133      	cbz	r3, 8008b0a <WM__InitIVRSearch+0x9a>
 8008afc:	a801      	add	r0, sp, #4
 8008afe:	f005 fb31 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008b02:	6830      	ldr	r0, [r6, #0]
 8008b04:	f005 fb20 	bl	800e148 <GUI_ALLOC_LockH>
 8008b08:	9001      	str	r0, [sp, #4]
 8008b0a:	9801      	ldr	r0, [sp, #4]
 8008b0c:	a904      	add	r1, sp, #16
 8008b0e:	f7ff fb4d 	bl	80081ac <WM__Client2Screen>
 8008b12:	4628      	mov	r0, r5
 8008b14:	a904      	add	r1, sp, #16
 8008b16:	f002 fff5 	bl	800bb04 <GUI__IntersectRect>
 8008b1a:	a801      	add	r0, sp, #4
 8008b1c:	e000      	b.n	8008b20 <WM__InitIVRSearch+0xb0>
 8008b1e:	4668      	mov	r0, sp
 8008b20:	f005 fb20 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008b24:	6831      	ldr	r1, [r6, #0]
 8008b26:	b119      	cbz	r1, 8008b30 <WM__InitIVRSearch+0xc0>
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f7ff faa1 	bl	8008070 <WM__ClipAtParentBorders>
 8008b2e:	b128      	cbz	r0, 8008b3c <WM__InitIVRSearch+0xcc>
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	4628      	mov	r0, r5
 8008b34:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008b36:	f7ff fa9b 	bl	8008070 <WM__ClipAtParentBorders>
 8008b3a:	b918      	cbnz	r0, 8008b44 <WM__InitIVRSearch+0xd4>
 8008b3c:	6963      	ldr	r3, [r4, #20]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	6163      	str	r3, [r4, #20]
 8008b42:	e007      	b.n	8008b54 <WM__InitIVRSearch+0xe4>
 8008b44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008b48:	e884 0003 	stmia.w	r4, {r0, r1}
 8008b4c:	f7ff fece 	bl	80088ec <WM__GetNextIVR>
 8008b50:	e000      	b.n	8008b54 <WM__InitIVRSearch+0xe4>
 8008b52:	2001      	movs	r0, #1
 8008b54:	b006      	add	sp, #24
 8008b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b5a:	bf00      	nop
 8008b5c:	20000084 	.word	0x20000084
 8008b60:	2000540c 	.word	0x2000540c
 8008b64:	20005618 	.word	0x20005618
 8008b68:	200055e8 	.word	0x200055e8

08008b6c <WM_SetDefault>:
 8008b6c:	b508      	push	{r3, lr}
 8008b6e:	f004 f8db 	bl	800cd28 <GL_SetDefault>
 8008b72:	4b02      	ldr	r3, [pc, #8]	; (8008b7c <WM_SetDefault+0x10>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2200      	movs	r2, #0
 8008b78:	645a      	str	r2, [r3, #68]	; 0x44
 8008b7a:	bd08      	pop	{r3, pc}
 8008b7c:	20000084 	.word	0x20000084

08008b80 <WM__Paint1>:
 8008b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b82:	b089      	sub	sp, #36	; 0x24
 8008b84:	4604      	mov	r4, r0
 8008b86:	f005 fadf 	bl	800e148 <GUI_ALLOC_LockH>
 8008b8a:	6907      	ldr	r7, [r0, #16]
 8008b8c:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008b8e:	9001      	str	r0, [sp, #4]
 8008b90:	3008      	adds	r0, #8
 8008b92:	c803      	ldmia	r0, {r0, r1}
 8008b94:	ad02      	add	r5, sp, #8
 8008b96:	e885 0003 	stmia.w	r5, {r0, r1}
 8008b9a:	a801      	add	r0, sp, #4
 8008b9c:	f005 fae2 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008ba0:	2f00      	cmp	r7, #0
 8008ba2:	d031      	beq.n	8008c08 <WM__Paint1+0x88>
 8008ba4:	07b3      	lsls	r3, r6, #30
 8008ba6:	d52f      	bpl.n	8008c08 <WM__Paint1+0x88>
 8008ba8:	4620      	mov	r0, r4
 8008baa:	212e      	movs	r1, #46	; 0x2e
 8008bac:	f7fe febd 	bl	800792a <WM_SendMessageNoPara>
 8008bb0:	4b16      	ldr	r3, [pc, #88]	; (8008c0c <WM__Paint1+0x8c>)
 8008bb2:	781a      	ldrb	r2, [r3, #0]
 8008bb4:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8008bb8:	f102 0201 	add.w	r2, r2, #1
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	461e      	mov	r6, r3
 8008bc0:	d00a      	beq.n	8008bd8 <WM__Paint1+0x58>
 8008bc2:	230f      	movs	r3, #15
 8008bc4:	9405      	str	r4, [sp, #20]
 8008bc6:	9304      	str	r3, [sp, #16]
 8008bc8:	9507      	str	r5, [sp, #28]
 8008bca:	f7ff ffcf 	bl	8008b6c <WM_SetDefault>
 8008bce:	4620      	mov	r0, r4
 8008bd0:	a904      	add	r1, sp, #16
 8008bd2:	f7fe fa71 	bl	80070b8 <WM__SendMessage>
 8008bd6:	e010      	b.n	8008bfa <WM__Paint1+0x7a>
 8008bd8:	4628      	mov	r0, r5
 8008bda:	f7ff ff49 	bl	8008a70 <WM__InitIVRSearch>
 8008bde:	b160      	cbz	r0, 8008bfa <WM__Paint1+0x7a>
 8008be0:	230f      	movs	r3, #15
 8008be2:	9304      	str	r3, [sp, #16]
 8008be4:	9405      	str	r4, [sp, #20]
 8008be6:	9507      	str	r5, [sp, #28]
 8008be8:	f7ff ffc0 	bl	8008b6c <WM_SetDefault>
 8008bec:	4620      	mov	r0, r4
 8008bee:	a904      	add	r1, sp, #16
 8008bf0:	f7fe fa62 	bl	80070b8 <WM__SendMessage>
 8008bf4:	f7ff fe7a 	bl	80088ec <WM__GetNextIVR>
 8008bf8:	e7f1      	b.n	8008bde <WM__Paint1+0x5e>
 8008bfa:	7833      	ldrb	r3, [r6, #0]
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	212f      	movs	r1, #47	; 0x2f
 8008c02:	7033      	strb	r3, [r6, #0]
 8008c04:	f7fe fe91 	bl	800792a <WM_SendMessageNoPara>
 8008c08:	b009      	add	sp, #36	; 0x24
 8008c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c0c:	20005618 	.word	0x20005618

08008c10 <WM__Paint>:
 8008c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c12:	b089      	sub	sp, #36	; 0x24
 8008c14:	ac06      	add	r4, sp, #24
 8008c16:	9003      	str	r0, [sp, #12]
 8008c18:	f005 fa96 	bl	800e148 <GUI_ALLOC_LockH>
 8008c1c:	f100 0208 	add.w	r2, r0, #8
 8008c20:	4603      	mov	r3, r0
 8008c22:	9005      	str	r0, [sp, #20]
 8008c24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c28:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8008c2a:	699e      	ldr	r6, [r3, #24]
 8008c2c:	691f      	ldr	r7, [r3, #16]
 8008c2e:	e884 0003 	stmia.w	r4, {r0, r1}
 8008c32:	a805      	add	r0, sp, #20
 8008c34:	f005 fa96 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008c38:	f244 0320 	movw	r3, #16416	; 0x4020
 8008c3c:	402b      	ands	r3, r5
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d034      	beq.n	8008cac <WM__Paint+0x9c>
 8008c42:	b1bf      	cbz	r7, 8008c74 <WM__Paint+0x64>
 8008c44:	4620      	mov	r0, r4
 8008c46:	9903      	ldr	r1, [sp, #12]
 8008c48:	f7ff fa12 	bl	8008070 <WM__ClipAtParentBorders>
 8008c4c:	b190      	cbz	r0, 8008c74 <WM__Paint+0x64>
 8008c4e:	9803      	ldr	r0, [sp, #12]
 8008c50:	f7ff fcb0 	bl	80085b4 <WM_SelectWindow>
 8008c54:	0769      	lsls	r1, r5, #29
 8008c56:	d50f      	bpl.n	8008c78 <WM__Paint+0x68>
 8008c58:	b126      	cbz	r6, 8008c64 <WM__Paint+0x54>
 8008c5a:	f005 0501 	and.w	r5, r5, #1
 8008c5e:	f085 0501 	eor.w	r5, r5, #1
 8008c62:	e000      	b.n	8008c66 <WM__Paint+0x56>
 8008c64:	2501      	movs	r5, #1
 8008c66:	9500      	str	r5, [sp, #0]
 8008c68:	4620      	mov	r0, r4
 8008c6a:	4912      	ldr	r1, [pc, #72]	; (8008cb4 <WM__Paint+0xa4>)
 8008c6c:	aa03      	add	r2, sp, #12
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f000 fa9c 	bl	80091ac <GUI_MEMDEV_Draw>
 8008c74:	2400      	movs	r4, #0
 8008c76:	e003      	b.n	8008c80 <WM__Paint+0x70>
 8008c78:	9803      	ldr	r0, [sp, #12]
 8008c7a:	f7ff f989 	bl	8007f90 <WM__PaintWinAndOverlays>
 8008c7e:	2401      	movs	r4, #1
 8008c80:	9803      	ldr	r0, [sp, #12]
 8008c82:	f005 fa61 	bl	800e148 <GUI_ALLOC_LockH>
 8008c86:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008c88:	9005      	str	r0, [sp, #20]
 8008c8a:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 8008c8e:	f023 0320 	bic.w	r3, r3, #32
 8008c92:	0492      	lsls	r2, r2, #18
 8008c94:	bf48      	it	mi
 8008c96:	f043 0304 	orrmi.w	r3, r3, #4
 8008c9a:	6283      	str	r3, [r0, #40]	; 0x28
 8008c9c:	a805      	add	r0, sp, #20
 8008c9e:	f005 fa61 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008ca2:	4b05      	ldr	r3, [pc, #20]	; (8008cb8 <WM__Paint+0xa8>)
 8008ca4:	881a      	ldrh	r2, [r3, #0]
 8008ca6:	3a01      	subs	r2, #1
 8008ca8:	801a      	strh	r2, [r3, #0]
 8008caa:	e000      	b.n	8008cae <WM__Paint+0x9e>
 8008cac:	461c      	mov	r4, r3
 8008cae:	4620      	mov	r0, r4
 8008cb0:	b009      	add	sp, #36	; 0x24
 8008cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cb4:	08008009 	.word	0x08008009
 8008cb8:	20005604 	.word	0x20005604

08008cbc <_Exec1Draw>:
 8008cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc0:	4b1a      	ldr	r3, [pc, #104]	; (8008d2c <_Exec1Draw+0x70>)
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
 8008cc8:	b09c      	sub	sp, #112	; 0x70
 8008cca:	461d      	mov	r5, r3
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d02a      	beq.n	8008d26 <_Exec1Draw+0x6a>
 8008cd0:	4b17      	ldr	r3, [pc, #92]	; (8008d30 <_Exec1Draw+0x74>)
 8008cd2:	8818      	ldrh	r0, [r3, #0]
 8008cd4:	b338      	cbz	r0, 8008d26 <_Exec1Draw+0x6a>
 8008cd6:	4a17      	ldr	r2, [pc, #92]	; (8008d34 <_Exec1Draw+0x78>)
 8008cd8:	6814      	ldr	r4, [r2, #0]
 8008cda:	4616      	mov	r6, r2
 8008cdc:	b90c      	cbnz	r4, 8008ce2 <_Exec1Draw+0x26>
 8008cde:	4b16      	ldr	r3, [pc, #88]	; (8008d38 <_Exec1Draw+0x7c>)
 8008ce0:	681c      	ldr	r4, [r3, #0]
 8008ce2:	4668      	mov	r0, sp
 8008ce4:	f003 ffbc 	bl	800cc60 <GUI_SaveContext_W>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8008cec:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8008cee:	b924      	cbnz	r4, 8008cfa <_Exec1Draw+0x3e>
 8008cf0:	2400      	movs	r4, #0
 8008cf2:	e00d      	b.n	8008d10 <_Exec1Draw+0x54>
 8008cf4:	f1b8 0f00 	cmp.w	r8, #0
 8008cf8:	d10a      	bne.n	8008d10 <_Exec1Draw+0x54>
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f7ff ff88 	bl	8008c10 <WM__Paint>
 8008d00:	4680      	mov	r8, r0
 8008d02:	4620      	mov	r0, r4
 8008d04:	f005 fa16 	bl	800e134 <GUI_ALLOC_h2p>
 8008d08:	6944      	ldr	r4, [r0, #20]
 8008d0a:	2c00      	cmp	r4, #0
 8008d0c:	d1f2      	bne.n	8008cf4 <_Exec1Draw+0x38>
 8008d0e:	e7ef      	b.n	8008cf0 <_Exec1Draw+0x34>
 8008d10:	4638      	mov	r0, r7
 8008d12:	6034      	str	r4, [r6, #0]
 8008d14:	f003 ffc3 	bl	800cc9e <GUI_SetColor>
 8008d18:	4628      	mov	r0, r5
 8008d1a:	f003 ffbe 	bl	800cc9a <GUI_SetBkColor>
 8008d1e:	4668      	mov	r0, sp
 8008d20:	f003 ffa8 	bl	800cc74 <GUI_RestoreContext>
 8008d24:	2001      	movs	r0, #1
 8008d26:	b01c      	add	sp, #112	; 0x70
 8008d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d2c:	20000084 	.word	0x20000084
 8008d30:	20005604 	.word	0x20005604
 8008d34:	20005424 	.word	0x20005424
 8008d38:	20005608 	.word	0x20005608

08008d3c <WM_Exec>:
 8008d3c:	4b18      	ldr	r3, [pc, #96]	; (8008da0 <WM_Exec+0x64>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	b570      	push	{r4, r5, r6, lr}
 8008d42:	b103      	cbz	r3, 8008d46 <WM_Exec+0xa>
 8008d44:	4798      	blx	r3
 8008d46:	2500      	movs	r5, #0
 8008d48:	f7ff fd88 	bl	800885c <_Exec1Input>
 8008d4c:	b108      	cbz	r0, 8008d52 <WM_Exec+0x16>
 8008d4e:	2501      	movs	r5, #1
 8008d50:	e7fa      	b.n	8008d48 <WM_Exec+0xc>
 8008d52:	4b14      	ldr	r3, [pc, #80]	; (8008da4 <WM_Exec+0x68>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 8008d5a:	b144      	cbz	r4, 8008d6e <WM_Exec+0x32>
 8008d5c:	4b12      	ldr	r3, [pc, #72]	; (8008da8 <WM_Exec+0x6c>)
 8008d5e:	881c      	ldrh	r4, [r3, #0]
 8008d60:	b12c      	cbz	r4, 8008d6e <WM_Exec+0x32>
 8008d62:	4b12      	ldr	r3, [pc, #72]	; (8008dac <WM_Exec+0x70>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	b1a3      	cbz	r3, 8008d92 <WM_Exec+0x56>
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4798      	blx	r3
 8008d6c:	2401      	movs	r4, #1
 8008d6e:	f7ff ffa5 	bl	8008cbc <_Exec1Draw>
 8008d72:	4606      	mov	r6, r0
 8008d74:	b108      	cbz	r0, 8008d7a <WM_Exec+0x3e>
 8008d76:	2501      	movs	r5, #1
 8008d78:	e7f9      	b.n	8008d6e <WM_Exec+0x32>
 8008d7a:	b174      	cbz	r4, 8008d9a <WM_Exec+0x5e>
 8008d7c:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <WM_Exec+0x70>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	b123      	cbz	r3, 8008d8c <WM_Exec+0x50>
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	4798      	blx	r3
 8008d86:	4b0a      	ldr	r3, [pc, #40]	; (8008db0 <WM_Exec+0x74>)
 8008d88:	601e      	str	r6, [r3, #0]
 8008d8a:	e006      	b.n	8008d9a <WM_Exec+0x5e>
 8008d8c:	f003 f856 	bl	800be3c <GUI__ManageCache>
 8008d90:	e003      	b.n	8008d9a <WM_Exec+0x5e>
 8008d92:	2001      	movs	r0, #1
 8008d94:	f003 f852 	bl	800be3c <GUI__ManageCache>
 8008d98:	e7e8      	b.n	8008d6c <WM_Exec+0x30>
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	bd70      	pop	{r4, r5, r6, pc}
 8008d9e:	bf00      	nop
 8008da0:	200055f8 	.word	0x200055f8
 8008da4:	20000084 	.word	0x20000084
 8008da8:	20005604 	.word	0x20005604
 8008dac:	2000562c 	.word	0x2000562c
 8008db0:	20005614 	.word	0x20005614

08008db4 <WM_Activate>:
 8008db4:	4b02      	ldr	r3, [pc, #8]	; (8008dc0 <WM_Activate+0xc>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008dbe:	4770      	bx	lr
 8008dc0:	20000084 	.word	0x20000084

08008dc4 <WM_Deactivate>:
 8008dc4:	4b03      	ldr	r3, [pc, #12]	; (8008dd4 <WM_Deactivate+0x10>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008dce:	f002 bdb9 	b.w	800b944 <LCD_SetClipRectMax>
 8008dd2:	bf00      	nop
 8008dd4:	20000084 	.word	0x20000084

08008dd8 <WM_DefaultProc>:
 8008dd8:	b510      	push	{r4, lr}
 8008dda:	4604      	mov	r4, r0
 8008ddc:	6840      	ldr	r0, [r0, #4]
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	68e1      	ldr	r1, [r4, #12]
 8008de2:	2b17      	cmp	r3, #23
 8008de4:	d00f      	beq.n	8008e06 <WM_DefaultProc+0x2e>
 8008de6:	dc06      	bgt.n	8008df6 <WM_DefaultProc+0x1e>
 8008de8:	2b0e      	cmp	r3, #14
 8008dea:	d00e      	beq.n	8008e0a <WM_DefaultProc+0x32>
 8008dec:	2b14      	cmp	r3, #20
 8008dee:	d114      	bne.n	8008e1a <WM_DefaultProc+0x42>
 8008df0:	f7fe fa16 	bl	8007220 <WM__GetClientRectEx>
 8008df4:	e011      	b.n	8008e1a <WM_DefaultProc+0x42>
 8008df6:	2b22      	cmp	r3, #34	; 0x22
 8008df8:	d00c      	beq.n	8008e14 <WM_DefaultProc+0x3c>
 8008dfa:	2b28      	cmp	r3, #40	; 0x28
 8008dfc:	d10d      	bne.n	8008e1a <WM_DefaultProc+0x42>
 8008dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e02:	f7ff bbc9 	b.w	8008598 <WM_InvalidateWindow>
 8008e06:	60e0      	str	r0, [r4, #12]
 8008e08:	bd10      	pop	{r4, pc}
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e10:	f7fe bd8d 	b.w	800792e <WM_SendToParent>
 8008e14:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008e18:	e000      	b.n	8008e1c <WM_DefaultProc+0x44>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60e3      	str	r3, [r4, #12]
 8008e1e:	bd10      	pop	{r4, pc}

08008e20 <_cbBackWin>:
 8008e20:	6803      	ldr	r3, [r0, #0]
 8008e22:	2b0e      	cmp	r3, #14
 8008e24:	b510      	push	{r4, lr}
 8008e26:	4604      	mov	r4, r0
 8008e28:	d002      	beq.n	8008e30 <_cbBackWin+0x10>
 8008e2a:	2b0f      	cmp	r3, #15
 8008e2c:	d009      	beq.n	8008e42 <_cbBackWin+0x22>
 8008e2e:	e020      	b.n	8008e72 <_cbBackWin+0x52>
 8008e30:	68c3      	ldr	r3, [r0, #12]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	2a01      	cmp	r2, #1
 8008e36:	d121      	bne.n	8008e7c <_cbBackWin+0x5c>
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e3e:	f003 baa9 	b.w	800c394 <GUI_StoreKey>
 8008e42:	4a0f      	ldr	r2, [pc, #60]	; (8008e80 <_cbBackWin+0x60>)
 8008e44:	6843      	ldr	r3, [r0, #4]
 8008e46:	6811      	ldr	r1, [r2, #0]
 8008e48:	428b      	cmp	r3, r1
 8008e4a:	d006      	beq.n	8008e5a <_cbBackWin+0x3a>
 8008e4c:	6852      	ldr	r2, [r2, #4]
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	bf14      	ite	ne
 8008e52:	f04f 33ff 	movne.w	r3, #4294967295
 8008e56:	2301      	moveq	r3, #1
 8008e58:	e000      	b.n	8008e5c <_cbBackWin+0x3c>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	4a09      	ldr	r2, [pc, #36]	; (8008e84 <_cbBackWin+0x64>)
 8008e5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008e62:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008e66:	4298      	cmp	r0, r3
 8008e68:	d003      	beq.n	8008e72 <_cbBackWin+0x52>
 8008e6a:	f003 ff16 	bl	800cc9a <GUI_SetBkColor>
 8008e6e:	f003 fd7b 	bl	800c968 <GUI_Clear>
 8008e72:	4620      	mov	r0, r4
 8008e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e78:	f7ff bfae 	b.w	8008dd8 <WM_DefaultProc>
 8008e7c:	bd10      	pop	{r4, pc}
 8008e7e:	bf00      	nop
 8008e80:	200055ec 	.word	0x200055ec
 8008e84:	20005620 	.word	0x20005620

08008e88 <WM_Init>:
 8008e88:	b530      	push	{r4, r5, lr}
 8008e8a:	4b2b      	ldr	r3, [pc, #172]	; (8008f38 <WM_Init+0xb0>)
 8008e8c:	7818      	ldrb	r0, [r3, #0]
 8008e8e:	b085      	sub	sp, #20
 8008e90:	461d      	mov	r5, r3
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d14d      	bne.n	8008f32 <WM_Init+0xaa>
 8008e96:	4b29      	ldr	r3, [pc, #164]	; (8008f3c <WM_Init+0xb4>)
 8008e98:	6018      	str	r0, [r3, #0]
 8008e9a:	4b29      	ldr	r3, [pc, #164]	; (8008f40 <WM_Init+0xb8>)
 8008e9c:	6018      	str	r0, [r3, #0]
 8008e9e:	4b29      	ldr	r3, [pc, #164]	; (8008f44 <WM_Init+0xbc>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	6458      	str	r0, [r3, #68]	; 0x44
 8008ea4:	4b28      	ldr	r3, [pc, #160]	; (8008f48 <WM_Init+0xc0>)
 8008ea6:	8018      	strh	r0, [r3, #0]
 8008ea8:	4b28      	ldr	r3, [pc, #160]	; (8008f4c <WM_Init+0xc4>)
 8008eaa:	4604      	mov	r4, r0
 8008eac:	8018      	strh	r0, [r3, #0]
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f003 fc10 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 8008eb4:	b1c0      	cbz	r0, 8008ee8 <WM_Init+0x60>
 8008eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8008eba:	2302      	movs	r3, #2
 8008ebc:	e88d 000c 	stmia.w	sp, {r2, r3}
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8008ec6:	4b22      	ldr	r3, [pc, #136]	; (8008f50 <WM_Init+0xc8>)
 8008ec8:	9302      	str	r3, [sp, #8]
 8008eca:	9003      	str	r0, [sp, #12]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	4601      	mov	r1, r0
 8008ed0:	f7ff fb90 	bl	80085f4 <WM_CreateWindowAsChild>
 8008ed4:	4b1f      	ldr	r3, [pc, #124]	; (8008f54 <WM_Init+0xcc>)
 8008ed6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008eda:	4b1f      	ldr	r3, [pc, #124]	; (8008f58 <WM_Init+0xd0>)
 8008edc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8008ee0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008ee4:	f7ff fb58 	bl	8008598 <WM_InvalidateWindow>
 8008ee8:	3401      	adds	r4, #1
 8008eea:	2c02      	cmp	r4, #2
 8008eec:	d1df      	bne.n	8008eae <WM_Init+0x26>
 8008eee:	481b      	ldr	r0, [pc, #108]	; (8008f5c <WM_Init+0xd4>)
 8008ef0:	f7fe f98e 	bl	8007210 <WM__AddCriticalHandle>
 8008ef4:	481a      	ldr	r0, [pc, #104]	; (8008f60 <WM_Init+0xd8>)
 8008ef6:	f7fe f98b 	bl	8007210 <WM__AddCriticalHandle>
 8008efa:	481a      	ldr	r0, [pc, #104]	; (8008f64 <WM_Init+0xdc>)
 8008efc:	f7fe f988 	bl	8007210 <WM__AddCriticalHandle>
 8008f00:	4819      	ldr	r0, [pc, #100]	; (8008f68 <WM_Init+0xe0>)
 8008f02:	f7fe f985 	bl	8007210 <WM__AddCriticalHandle>
 8008f06:	4819      	ldr	r0, [pc, #100]	; (8008f6c <WM_Init+0xe4>)
 8008f08:	f7fe f982 	bl	8007210 <WM__AddCriticalHandle>
 8008f0c:	4818      	ldr	r0, [pc, #96]	; (8008f70 <WM_Init+0xe8>)
 8008f0e:	f7fe f97f 	bl	8007210 <WM__AddCriticalHandle>
 8008f12:	4b10      	ldr	r3, [pc, #64]	; (8008f54 <WM_Init+0xcc>)
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	f7ff fb4d 	bl	80085b4 <WM_SelectWindow>
 8008f1a:	f7ff ff4b 	bl	8008db4 <WM_Activate>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	702b      	strb	r3, [r5, #0]
 8008f22:	4814      	ldr	r0, [pc, #80]	; (8008f74 <WM_Init+0xec>)
 8008f24:	4b14      	ldr	r3, [pc, #80]	; (8008f78 <WM_Init+0xf0>)
 8008f26:	6003      	str	r3, [r0, #0]
 8008f28:	b005      	add	sp, #20
 8008f2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f2e:	f003 bd2b 	b.w	800c988 <GUI__RegisterExit>
 8008f32:	b005      	add	sp, #20
 8008f34:	bd30      	pop	{r4, r5, pc}
 8008f36:	bf00      	nop
 8008f38:	20005428 	.word	0x20005428
 8008f3c:	20005608 	.word	0x20005608
 8008f40:	20005424 	.word	0x20005424
 8008f44:	20000084 	.word	0x20000084
 8008f48:	20005604 	.word	0x20005604
 8008f4c:	200055e4 	.word	0x200055e4
 8008f50:	08008e21 	.word	0x08008e21
 8008f54:	200055ec 	.word	0x200055ec
 8008f58:	20005620 	.word	0x20005620
 8008f5c:	20005784 	.word	0x20005784
 8008f60:	20005774 	.word	0x20005774
 8008f64:	20005764 	.word	0x20005764
 8008f68:	2000578c 	.word	0x2000578c
 8008f6c:	2000577c 	.word	0x2000577c
 8008f70:	2000576c 	.word	0x2000576c
 8008f74:	20005400 	.word	0x20005400
 8008f78:	08007bc9 	.word	0x08007bc9

08008f7c <_CreateStaticDevice>:
 8008f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f80:	b087      	sub	sp, #28
 8008f82:	4604      	mov	r4, r0
 8008f84:	f005 f8e0 	bl	800e148 <GUI_ALLOC_LockH>
 8008f88:	af06      	add	r7, sp, #24
 8008f8a:	f8b0 8000 	ldrh.w	r8, [r0]
 8008f8e:	8886      	ldrh	r6, [r0, #4]
 8008f90:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 8008f94:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 8008f98:	f847 0d04 	str.w	r0, [r7, #-4]!
 8008f9c:	fa0f f888 	sxth.w	r8, r8
 8008fa0:	b236      	sxth	r6, r6
 8008fa2:	ebc8 0606 	rsb	r6, r8, r6
 8008fa6:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8008faa:	3601      	adds	r6, #1
 8008fac:	4638      	mov	r0, r7
 8008fae:	fa0f f989 	sxth.w	r9, r9
 8008fb2:	fa0f f58b 	sxth.w	r5, fp
 8008fb6:	f005 f8d5 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008fba:	ebc9 0505 	rsb	r5, r9, r5
 8008fbe:	2e00      	cmp	r6, #0
 8008fc0:	f105 0501 	add.w	r5, r5, #1
 8008fc4:	dd4d      	ble.n	8009062 <_CreateStaticDevice+0xe6>
 8008fc6:	2d00      	cmp	r5, #0
 8008fc8:	dd4b      	ble.n	8009062 <_CreateStaticDevice+0xe6>
 8008fca:	f1ba 0f00 	cmp.w	sl, #0
 8008fce:	d04a      	beq.n	8009066 <_CreateStaticDevice+0xea>
 8008fd0:	4650      	mov	r0, sl
 8008fd2:	f005 f8b9 	bl	800e148 <GUI_ALLOC_LockH>
 8008fd6:	ab06      	add	r3, sp, #24
 8008fd8:	8886      	ldrh	r6, [r0, #4]
 8008fda:	f843 0d08 	str.w	r0, [r3, #-8]!
 8008fde:	88c5      	ldrh	r5, [r0, #6]
 8008fe0:	b236      	sxth	r6, r6
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f005 f8be 	bl	800e164 <GUI_ALLOC_UnlockH>
 8008fe8:	4546      	cmp	r6, r8
 8008fea:	d102      	bne.n	8008ff2 <_CreateStaticDevice+0x76>
 8008fec:	b22d      	sxth	r5, r5
 8008fee:	454d      	cmp	r5, r9
 8008ff0:	d032      	beq.n	8009058 <_CreateStaticDevice+0xdc>
 8008ff2:	4650      	mov	r0, sl
 8008ff4:	4641      	mov	r1, r8
 8008ff6:	464a      	mov	r2, r9
 8008ff8:	f000 f888 	bl	800910c <GUI_MEMDEV_SetOrg>
 8008ffc:	e02c      	b.n	8009058 <_CreateStaticDevice+0xdc>
 8008ffe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009004:	6283      	str	r3, [r0, #40]	; 0x28
 8009006:	4638      	mov	r0, r7
 8009008:	f005 f8ac 	bl	800e164 <GUI_ALLOC_UnlockH>
 800900c:	4640      	mov	r0, r8
 800900e:	f000 ff99 	bl	8009f44 <GUI_MEMDEV_Select>
 8009012:	4607      	mov	r7, r0
 8009014:	4650      	mov	r0, sl
 8009016:	f003 f995 	bl	800c344 <GUI__AlphaPreserveTrans>
 800901a:	4640      	mov	r0, r8
 800901c:	f000 f8b6 	bl	800918c <GUI_MEMDEV_GetDataPtr>
 8009020:	4a2d      	ldr	r2, [pc, #180]	; (80090d8 <_CreateStaticDevice+0x15c>)
 8009022:	4b2e      	ldr	r3, [pc, #184]	; (80090dc <_CreateStaticDevice+0x160>)
 8009024:	7811      	ldrb	r1, [r2, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4375      	muls	r5, r6
 800902a:	00aa      	lsls	r2, r5, #2
 800902c:	4e2c      	ldr	r6, [pc, #176]	; (80090e0 <_CreateStaticDevice+0x164>)
 800902e:	4d2d      	ldr	r5, [pc, #180]	; (80090e4 <_CreateStaticDevice+0x168>)
 8009030:	4798      	blx	r3
 8009032:	4620      	mov	r0, r4
 8009034:	f8d5 8000 	ldr.w	r8, [r5]
 8009038:	6034      	str	r4, [r6, #0]
 800903a:	f7fe fb4a 	bl	80076d2 <WM_GetWindowOrgX>
 800903e:	6028      	str	r0, [r5, #0]
 8009040:	4620      	mov	r0, r4
 8009042:	f7ff fd9d 	bl	8008b80 <WM__Paint1>
 8009046:	2000      	movs	r0, #0
 8009048:	f8c5 8000 	str.w	r8, [r5]
 800904c:	6030      	str	r0, [r6, #0]
 800904e:	f003 f979 	bl	800c344 <GUI__AlphaPreserveTrans>
 8009052:	4638      	mov	r0, r7
 8009054:	f000 ff76 	bl	8009f44 <GUI_MEMDEV_Select>
 8009058:	4620      	mov	r0, r4
 800905a:	f005 f86b 	bl	800e134 <GUI_ALLOC_h2p>
 800905e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009060:	e037      	b.n	80090d2 <_CreateStaticDevice+0x156>
 8009062:	2000      	movs	r0, #0
 8009064:	e035      	b.n	80090d2 <_CreateStaticDevice+0x156>
 8009066:	f7fe fabb 	bl	80075e0 <WM_GetDesktopWindow>
 800906a:	4284      	cmp	r4, r0
 800906c:	d112      	bne.n	8009094 <_CreateStaticDevice+0x118>
 800906e:	f002 f8fb 	bl	800b268 <LCD_GetXSize>
 8009072:	4682      	mov	sl, r0
 8009074:	f002 f900 	bl	800b278 <LCD_GetYSize>
 8009078:	4556      	cmp	r6, sl
 800907a:	dc02      	bgt.n	8009082 <_CreateStaticDevice+0x106>
 800907c:	4285      	cmp	r5, r0
 800907e:	dd09      	ble.n	8009094 <_CreateStaticDevice+0x118>
 8009080:	e000      	b.n	8009084 <_CreateStaticDevice+0x108>
 8009082:	4656      	mov	r6, sl
 8009084:	4285      	cmp	r5, r0
 8009086:	bfa8      	it	ge
 8009088:	4605      	movge	r5, r0
 800908a:	4631      	mov	r1, r6
 800908c:	4620      	mov	r0, r4
 800908e:	462a      	mov	r2, r5
 8009090:	f7fe fcb4 	bl	80079fc <WM_SetSize>
 8009094:	4b14      	ldr	r3, [pc, #80]	; (80090e8 <_CreateStaticDevice+0x16c>)
 8009096:	9301      	str	r3, [sp, #4]
 8009098:	f04f 0a01 	mov.w	sl, #1
 800909c:	4b13      	ldr	r3, [pc, #76]	; (80090ec <_CreateStaticDevice+0x170>)
 800909e:	9302      	str	r3, [sp, #8]
 80090a0:	4640      	mov	r0, r8
 80090a2:	4649      	mov	r1, r9
 80090a4:	4632      	mov	r2, r6
 80090a6:	462b      	mov	r3, r5
 80090a8:	f8cd a000 	str.w	sl, [sp]
 80090ac:	f000 fe54 	bl	8009d58 <GUI_MEMDEV__CreateFixed>
 80090b0:	4680      	mov	r8, r0
 80090b2:	4620      	mov	r0, r4
 80090b4:	f005 f848 	bl	800e148 <GUI_ALLOC_LockH>
 80090b8:	9005      	str	r0, [sp, #20]
 80090ba:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 80090be:	f1b8 0f00 	cmp.w	r8, #0
 80090c2:	d19c      	bne.n	8008ffe <_CreateStaticDevice+0x82>
 80090c4:	4638      	mov	r0, r7
 80090c6:	f005 f84d 	bl	800e164 <GUI_ALLOC_UnlockH>
 80090ca:	4620      	mov	r0, r4
 80090cc:	f7ff fd58 	bl	8008b80 <WM__Paint1>
 80090d0:	4640      	mov	r0, r8
 80090d2:	b007      	add	sp, #28
 80090d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d8:	20000060 	.word	0x20000060
 80090dc:	20000070 	.word	0x20000070
 80090e0:	20005638 	.word	0x20005638
 80090e4:	20005650 	.word	0x20005650
 80090e8:	08012c1c 	.word	0x08012c1c
 80090ec:	08013d20 	.word	0x08013d20

080090f0 <GUI_MEMDEV_Paint1Static>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	4605      	mov	r5, r0
 80090f4:	2405      	movs	r4, #5
 80090f6:	4628      	mov	r0, r5
 80090f8:	f7ff ff40 	bl	8008f7c <_CreateStaticDevice>
 80090fc:	b910      	cbnz	r0, 8009104 <GUI_MEMDEV_Paint1Static+0x14>
 80090fe:	3c01      	subs	r4, #1
 8009100:	d1f9      	bne.n	80090f6 <GUI_MEMDEV_Paint1Static+0x6>
 8009102:	bd38      	pop	{r3, r4, r5, pc}
 8009104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009108:	f006 bafa 	b.w	800f700 <GUI_MEMDEV_Write>

0800910c <GUI_MEMDEV_SetOrg>:
 800910c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800910e:	460d      	mov	r5, r1
 8009110:	4614      	mov	r4, r2
 8009112:	b918      	cbnz	r0, 800911c <GUI_MEMDEV_SetOrg+0x10>
 8009114:	4b11      	ldr	r3, [pc, #68]	; (800915c <GUI_MEMDEV_SetOrg+0x50>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800911a:	b1e8      	cbz	r0, 8009158 <GUI_MEMDEV_SetOrg+0x4c>
 800911c:	f005 f814 	bl	800e148 <GUI_ALLOC_LockH>
 8009120:	b2a4      	uxth	r4, r4
 8009122:	b2ad      	uxth	r5, r5
 8009124:	80c4      	strh	r4, [r0, #6]
 8009126:	8085      	strh	r5, [r0, #4]
 8009128:	9000      	str	r0, [sp, #0]
 800912a:	f002 fc0b 	bl	800b944 <LCD_SetClipRectMax>
 800912e:	9b00      	ldr	r3, [sp, #0]
 8009130:	6958      	ldr	r0, [r3, #20]
 8009132:	b170      	cbz	r0, 8009152 <GUI_MEMDEV_SetOrg+0x46>
 8009134:	f005 f808 	bl	800e148 <GUI_ALLOC_LockH>
 8009138:	9b00      	ldr	r3, [sp, #0]
 800913a:	9001      	str	r0, [sp, #4]
 800913c:	891a      	ldrh	r2, [r3, #8]
 800913e:	895b      	ldrh	r3, [r3, #10]
 8009140:	8082      	strh	r2, [r0, #4]
 8009142:	80c3      	strh	r3, [r0, #6]
 8009144:	b112      	cbz	r2, 800914c <GUI_MEMDEV_SetOrg+0x40>
 8009146:	b10b      	cbz	r3, 800914c <GUI_MEMDEV_SetOrg+0x40>
 8009148:	8005      	strh	r5, [r0, #0]
 800914a:	8044      	strh	r4, [r0, #2]
 800914c:	a801      	add	r0, sp, #4
 800914e:	f005 f809 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009152:	4668      	mov	r0, sp
 8009154:	f005 f806 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009158:	b003      	add	sp, #12
 800915a:	bd30      	pop	{r4, r5, pc}
 800915c:	20000084 	.word	0x20000084

08009160 <GUI_MEMDEV_GetYSize>:
 8009160:	b513      	push	{r0, r1, r4, lr}
 8009162:	b920      	cbnz	r0, 800916e <GUI_MEMDEV_GetYSize+0xe>
 8009164:	4b08      	ldr	r3, [pc, #32]	; (8009188 <GUI_MEMDEV_GetYSize+0x28>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800916a:	4604      	mov	r4, r0
 800916c:	b148      	cbz	r0, 8009182 <GUI_MEMDEV_GetYSize+0x22>
 800916e:	f004 ffeb 	bl	800e148 <GUI_ALLOC_LockH>
 8009172:	ab02      	add	r3, sp, #8
 8009174:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 8009178:	f843 0d04 	str.w	r0, [r3, #-4]!
 800917c:	4618      	mov	r0, r3
 800917e:	f004 fff1 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009182:	4620      	mov	r0, r4
 8009184:	b002      	add	sp, #8
 8009186:	bd10      	pop	{r4, pc}
 8009188:	20000084 	.word	0x20000084

0800918c <GUI_MEMDEV_GetDataPtr>:
 800918c:	b513      	push	{r0, r1, r4, lr}
 800918e:	b150      	cbz	r0, 80091a6 <GUI_MEMDEV_GetDataPtr+0x1a>
 8009190:	f004 ffda 	bl	800e148 <GUI_ALLOC_LockH>
 8009194:	4604      	mov	r4, r0
 8009196:	a802      	add	r0, sp, #8
 8009198:	f840 4d04 	str.w	r4, [r0, #-4]!
 800919c:	f004 ffe2 	bl	800e164 <GUI_ALLOC_UnlockH>
 80091a0:	f104 0018 	add.w	r0, r4, #24
 80091a4:	e7ff      	b.n	80091a6 <GUI_MEMDEV_GetDataPtr+0x1a>
 80091a6:	b002      	add	sp, #8
 80091a8:	bd10      	pop	{r4, pc}
	...

080091ac <GUI_MEMDEV_Draw>:
 80091ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b0:	461e      	mov	r6, r3
 80091b2:	b089      	sub	sp, #36	; 0x24
 80091b4:	4b4e      	ldr	r3, [pc, #312]	; (80092f0 <GUI_MEMDEV_Draw+0x144>)
 80091b6:	9204      	str	r2, [sp, #16]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	9103      	str	r1, [sp, #12]
 80091bc:	7c54      	ldrb	r4, [r2, #17]
 80091be:	4a4d      	ldr	r2, [pc, #308]	; (80092f4 <GUI_MEMDEV_Draw+0x148>)
 80091c0:	5712      	ldrsb	r2, [r2, r4]
 80091c2:	2a01      	cmp	r2, #1
 80091c4:	4605      	mov	r5, r0
 80091c6:	469b      	mov	fp, r3
 80091c8:	4620      	mov	r0, r4
 80091ca:	dd06      	ble.n	80091da <GUI_MEMDEV_Draw+0x2e>
 80091cc:	f002 f83a 	bl	800b244 <LCD_GetXSizeEx>
 80091d0:	4607      	mov	r7, r0
 80091d2:	4620      	mov	r0, r4
 80091d4:	f002 f839 	bl	800b24a <LCD_GetYSizeEx>
 80091d8:	e005      	b.n	80091e6 <GUI_MEMDEV_Draw+0x3a>
 80091da:	f002 f839 	bl	800b250 <LCD_GetVXSizeEx>
 80091de:	4607      	mov	r7, r0
 80091e0:	4620      	mov	r0, r4
 80091e2:	f002 f838 	bl	800b256 <LCD_GetVYSizeEx>
 80091e6:	4604      	mov	r4, r0
 80091e8:	b325      	cbz	r5, 8009234 <GUI_MEMDEV_Draw+0x88>
 80091ea:	a806      	add	r0, sp, #24
 80091ec:	a907      	add	r1, sp, #28
 80091ee:	f003 fc91 	bl	800cb14 <GUI_GetOrg>
 80091f2:	9b06      	ldr	r3, [sp, #24]
 80091f4:	f9b5 a000 	ldrsh.w	sl, [r5]
 80091f8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80091fc:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 8009200:	441f      	add	r7, r3
 8009202:	9b07      	ldr	r3, [sp, #28]
 8009204:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009208:	3f01      	subs	r7, #1
 800920a:	4297      	cmp	r7, r2
 800920c:	bfd4      	ite	le
 800920e:	ebca 0707 	rsble	r7, sl, r7
 8009212:	ebca 0702 	rsbgt	r7, sl, r2
 8009216:	441c      	add	r4, r3
 8009218:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 800921c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8009220:	3c01      	subs	r4, #1
 8009222:	4294      	cmp	r4, r2
 8009224:	bfd4      	ite	le
 8009226:	ebc8 0404 	rsble	r4, r8, r4
 800922a:	ebc8 0402 	rsbgt	r4, r8, r2
 800922e:	3701      	adds	r7, #1
 8009230:	3401      	adds	r4, #1
 8009232:	e001      	b.n	8009238 <GUI_MEMDEV_Draw+0x8c>
 8009234:	46a8      	mov	r8, r5
 8009236:	46aa      	mov	sl, r5
 8009238:	b906      	cbnz	r6, 800923c <GUI_MEMDEV_Draw+0x90>
 800923a:	4266      	negs	r6, r4
 800923c:	2f00      	cmp	r7, #0
 800923e:	dd52      	ble.n	80092e6 <GUI_MEMDEV_Draw+0x13a>
 8009240:	2c00      	cmp	r4, #0
 8009242:	dd50      	ble.n	80092e6 <GUI_MEMDEV_Draw+0x13a>
 8009244:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	4650      	mov	r0, sl
 800924a:	4641      	mov	r1, r8
 800924c:	463a      	mov	r2, r7
 800924e:	4633      	mov	r3, r6
 8009250:	f000 fe3c 	bl	8009ecc <GUI_MEMDEV_CreateEx>
 8009254:	4605      	mov	r5, r0
 8009256:	b920      	cbnz	r0, 8009262 <GUI_MEMDEV_Draw+0xb6>
 8009258:	9804      	ldr	r0, [sp, #16]
 800925a:	9b03      	ldr	r3, [sp, #12]
 800925c:	4798      	blx	r3
 800925e:	2001      	movs	r0, #1
 8009260:	e042      	b.n	80092e8 <GUI_MEMDEV_Draw+0x13c>
 8009262:	f7ff ff7d 	bl	8009160 <GUI_MEMDEV_GetYSize>
 8009266:	42a0      	cmp	r0, r4
 8009268:	4606      	mov	r6, r0
 800926a:	d006      	beq.n	800927a <GUI_MEMDEV_Draw+0xce>
 800926c:	f8db 3000 	ldr.w	r3, [fp]
 8009270:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009272:	b110      	cbz	r0, 800927a <GUI_MEMDEV_Draw+0xce>
 8009274:	2132      	movs	r1, #50	; 0x32
 8009276:	f7fd ff3d 	bl	80070f4 <WM__SendMessageNoPara>
 800927a:	4628      	mov	r0, r5
 800927c:	f000 fe62 	bl	8009f44 <GUI_MEMDEV_Select>
 8009280:	4273      	negs	r3, r6
 8009282:	9305      	str	r3, [sp, #20]
 8009284:	46a1      	mov	r9, r4
 8009286:	2700      	movs	r7, #0
 8009288:	45b1      	cmp	r9, r6
 800928a:	da03      	bge.n	8009294 <GUI_MEMDEV_Draw+0xe8>
 800928c:	4628      	mov	r0, r5
 800928e:	4649      	mov	r1, r9
 8009290:	f006 fb36 	bl	800f900 <GUI_MEMDEV_ReduceYSize>
 8009294:	b147      	cbz	r7, 80092a8 <GUI_MEMDEV_Draw+0xfc>
 8009296:	4628      	mov	r0, r5
 8009298:	4651      	mov	r1, sl
 800929a:	eb07 0208 	add.w	r2, r7, r8
 800929e:	f7ff ff35 	bl	800910c <GUI_MEMDEV_SetOrg>
 80092a2:	4628      	mov	r0, r5
 80092a4:	f006 fb42 	bl	800f92c <GUI_MEMDEV_Clear>
 80092a8:	9b03      	ldr	r3, [sp, #12]
 80092aa:	9804      	ldr	r0, [sp, #16]
 80092ac:	4798      	blx	r3
 80092ae:	4b12      	ldr	r3, [pc, #72]	; (80092f8 <GUI_MEMDEV_Draw+0x14c>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	b10b      	cbz	r3, 80092b8 <GUI_MEMDEV_Draw+0x10c>
 80092b4:	2000      	movs	r0, #0
 80092b6:	4798      	blx	r3
 80092b8:	4628      	mov	r0, r5
 80092ba:	f000 febb 	bl	800a034 <GUI_MEMDEV_CopyToLCD>
 80092be:	4437      	add	r7, r6
 80092c0:	9b05      	ldr	r3, [sp, #20]
 80092c2:	42a7      	cmp	r7, r4
 80092c4:	4499      	add	r9, r3
 80092c6:	dbdf      	blt.n	8009288 <GUI_MEMDEV_Draw+0xdc>
 80092c8:	4628      	mov	r0, r5
 80092ca:	f000 fddd 	bl	8009e88 <GUI_MEMDEV_Delete>
 80092ce:	2000      	movs	r0, #0
 80092d0:	f000 fe38 	bl	8009f44 <GUI_MEMDEV_Select>
 80092d4:	42a6      	cmp	r6, r4
 80092d6:	d006      	beq.n	80092e6 <GUI_MEMDEV_Draw+0x13a>
 80092d8:	f8db 3000 	ldr.w	r3, [fp]
 80092dc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80092de:	b110      	cbz	r0, 80092e6 <GUI_MEMDEV_Draw+0x13a>
 80092e0:	2133      	movs	r1, #51	; 0x33
 80092e2:	f7fd ff07 	bl	80070f4 <WM__SendMessageNoPara>
 80092e6:	2000      	movs	r0, #0
 80092e8:	b009      	add	sp, #36	; 0x24
 80092ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ee:	bf00      	nop
 80092f0:	20000084 	.word	0x20000084
 80092f4:	20005640 	.word	0x20005640
 80092f8:	2000542c 	.word	0x2000542c

080092fc <_GetDevData>:
 80092fc:	4802      	ldr	r0, [pc, #8]	; (8009308 <_GetDevData+0xc>)
 80092fe:	2901      	cmp	r1, #1
 8009300:	bf18      	it	ne
 8009302:	2000      	movne	r0, #0
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	08012c1c 	.word	0x08012c1c

0800930c <_GetDevFunc>:
 800930c:	4802      	ldr	r0, [pc, #8]	; (8009318 <_GetDevFunc+0xc>)
 800930e:	2916      	cmp	r1, #22
 8009310:	bf18      	it	ne
 8009312:	2000      	movne	r0, #0
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	0800f511 	.word	0x0800f511

0800931c <_GetDevProp>:
 800931c:	2908      	cmp	r1, #8
 800931e:	bf0c      	ite	eq
 8009320:	2020      	moveq	r0, #32
 8009322:	2000      	movne	r0, #0
 8009324:	4770      	bx	lr

08009326 <_SetOrg>:
 8009326:	b508      	push	{r3, lr}
 8009328:	6800      	ldr	r0, [r0, #0]
 800932a:	68c3      	ldr	r3, [r0, #12]
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	4798      	blx	r3
 8009330:	bd08      	pop	{r3, pc}

08009332 <_GetRect>:
 8009332:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009334:	6880      	ldr	r0, [r0, #8]
 8009336:	460c      	mov	r4, r1
 8009338:	f004 ff06 	bl	800e148 <GUI_ALLOC_LockH>
 800933c:	4603      	mov	r3, r0
 800933e:	a802      	add	r0, sp, #8
 8009340:	8899      	ldrh	r1, [r3, #4]
 8009342:	88da      	ldrh	r2, [r3, #6]
 8009344:	891d      	ldrh	r5, [r3, #8]
 8009346:	f840 3d04 	str.w	r3, [r0, #-4]!
 800934a:	895b      	ldrh	r3, [r3, #10]
 800934c:	8021      	strh	r1, [r4, #0]
 800934e:	8062      	strh	r2, [r4, #2]
 8009350:	4429      	add	r1, r5
 8009352:	441a      	add	r2, r3
 8009354:	3901      	subs	r1, #1
 8009356:	3a01      	subs	r2, #1
 8009358:	80a1      	strh	r1, [r4, #4]
 800935a:	80e2      	strh	r2, [r4, #6]
 800935c:	f004 ff02 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009360:	b003      	add	sp, #12
 8009362:	bd30      	pop	{r4, r5, pc}

08009364 <_XY2PTR>:
 8009364:	4b0e      	ldr	r3, [pc, #56]	; (80093a0 <_XY2PTR+0x3c>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800936a:	4605      	mov	r5, r0
 800936c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800936e:	460e      	mov	r6, r1
 8009370:	f004 feea 	bl	800e148 <GUI_ALLOC_LockH>
 8009374:	4603      	mov	r3, r0
 8009376:	a802      	add	r0, sp, #8
 8009378:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800937c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009380:	f103 0118 	add.w	r1, r3, #24
 8009384:	1b36      	subs	r6, r6, r4
 8009386:	68dc      	ldr	r4, [r3, #12]
 8009388:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800938c:	fb04 1406 	mla	r4, r4, r6, r1
 8009390:	1aed      	subs	r5, r5, r3
 8009392:	f004 fee7 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009396:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800939a:	4620      	mov	r0, r4
 800939c:	b002      	add	sp, #8
 800939e:	bd70      	pop	{r4, r5, r6, pc}
 80093a0:	20000084 	.word	0x20000084

080093a4 <_GetPixelIndex>:
 80093a4:	b508      	push	{r3, lr}
 80093a6:	4608      	mov	r0, r1
 80093a8:	4611      	mov	r1, r2
 80093aa:	f7ff ffdb 	bl	8009364 <_XY2PTR>
 80093ae:	6800      	ldr	r0, [r0, #0]
 80093b0:	bd08      	pop	{r3, pc}
	...

080093b4 <_XorPixel>:
 80093b4:	4b15      	ldr	r3, [pc, #84]	; (800940c <_XorPixel+0x58>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093ba:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80093bc:	4615      	mov	r5, r2
 80093be:	460e      	mov	r6, r1
 80093c0:	f004 fec2 	bl	800e148 <GUI_ALLOC_LockH>
 80093c4:	4629      	mov	r1, r5
 80093c6:	9000      	str	r0, [sp, #0]
 80093c8:	4630      	mov	r0, r6
 80093ca:	f7ff ffcb 	bl	8009364 <_XY2PTR>
 80093ce:	9b00      	ldr	r3, [sp, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	4604      	mov	r4, r0
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	4798      	blx	r3
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	4058      	eors	r0, r3
 80093de:	9b00      	ldr	r3, [sp, #0]
 80093e0:	6020      	str	r0, [r4, #0]
 80093e2:	6958      	ldr	r0, [r3, #20]
 80093e4:	b160      	cbz	r0, 8009400 <_XorPixel+0x4c>
 80093e6:	f004 feaf 	bl	800e148 <GUI_ALLOC_LockH>
 80093ea:	ac02      	add	r4, sp, #8
 80093ec:	6883      	ldr	r3, [r0, #8]
 80093ee:	f844 0d04 	str.w	r0, [r4, #-4]!
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4631      	mov	r1, r6
 80093f6:	462a      	mov	r2, r5
 80093f8:	4798      	blx	r3
 80093fa:	4620      	mov	r0, r4
 80093fc:	f004 feb2 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009400:	4668      	mov	r0, sp
 8009402:	f004 feaf 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009406:	b002      	add	sp, #8
 8009408:	bd70      	pop	{r4, r5, r6, pc}
 800940a:	bf00      	nop
 800940c:	20000084 	.word	0x20000084

08009410 <_SetPixelIndex>:
 8009410:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009412:	461c      	mov	r4, r3
 8009414:	4b10      	ldr	r3, [pc, #64]	; (8009458 <_SetPixelIndex+0x48>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800941a:	460e      	mov	r6, r1
 800941c:	4615      	mov	r5, r2
 800941e:	f004 fe93 	bl	800e148 <GUI_ALLOC_LockH>
 8009422:	4629      	mov	r1, r5
 8009424:	9000      	str	r0, [sp, #0]
 8009426:	4630      	mov	r0, r6
 8009428:	f7ff ff9c 	bl	8009364 <_XY2PTR>
 800942c:	9b00      	ldr	r3, [sp, #0]
 800942e:	6004      	str	r4, [r0, #0]
 8009430:	6958      	ldr	r0, [r3, #20]
 8009432:	b160      	cbz	r0, 800944e <_SetPixelIndex+0x3e>
 8009434:	f004 fe88 	bl	800e148 <GUI_ALLOC_LockH>
 8009438:	ac02      	add	r4, sp, #8
 800943a:	6883      	ldr	r3, [r0, #8]
 800943c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4631      	mov	r1, r6
 8009444:	462a      	mov	r2, r5
 8009446:	4798      	blx	r3
 8009448:	4620      	mov	r0, r4
 800944a:	f004 fe8b 	bl	800e164 <GUI_ALLOC_UnlockH>
 800944e:	4668      	mov	r0, sp
 8009450:	f004 fe88 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009454:	b002      	add	sp, #8
 8009456:	bd70      	pop	{r4, r5, r6, pc}
 8009458:	20000084 	.word	0x20000084

0800945c <_DrawVLine>:
 800945c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009460:	4d2c      	ldr	r5, [pc, #176]	; (8009514 <_DrawVLine+0xb8>)
 8009462:	461e      	mov	r6, r3
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009468:	460f      	mov	r7, r1
 800946a:	4614      	mov	r4, r2
 800946c:	f004 fe6c 	bl	800e148 <GUI_ALLOC_LockH>
 8009470:	9000      	str	r0, [sp, #0]
 8009472:	6940      	ldr	r0, [r0, #20]
 8009474:	46a9      	mov	r9, r5
 8009476:	b108      	cbz	r0, 800947c <_DrawVLine+0x20>
 8009478:	f004 fe66 	bl	800e148 <GUI_ALLOC_LockH>
 800947c:	9001      	str	r0, [sp, #4]
 800947e:	4621      	mov	r1, r4
 8009480:	4638      	mov	r0, r7
 8009482:	f7ff ff6f 	bl	8009364 <_XY2PTR>
 8009486:	f8d9 2000 	ldr.w	r2, [r9]
 800948a:	9b00      	ldr	r3, [sp, #0]
 800948c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800948e:	7c12      	ldrb	r2, [r2, #16]
 8009490:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8009494:	f8d1 9000 	ldr.w	r9, [r1]
 8009498:	07d2      	lsls	r2, r2, #31
 800949a:	4605      	mov	r5, r0
 800949c:	d51f      	bpl.n	80094de <_DrawVLine+0x82>
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	4798      	blx	r3
 80094a6:	4680      	mov	r8, r0
 80094a8:	9801      	ldr	r0, [sp, #4]
 80094aa:	b128      	cbz	r0, 80094b8 <_DrawVLine+0x5c>
 80094ac:	6882      	ldr	r2, [r0, #8]
 80094ae:	4639      	mov	r1, r7
 80094b0:	f8d2 c000 	ldr.w	ip, [r2]
 80094b4:	4622      	mov	r2, r4
 80094b6:	47e0      	blx	ip
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	ea83 0308 	eor.w	r3, r3, r8
 80094be:	602b      	str	r3, [r5, #0]
 80094c0:	9b00      	ldr	r3, [sp, #0]
 80094c2:	3401      	adds	r4, #1
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	42b4      	cmp	r4, r6
 80094c8:	441d      	add	r5, r3
 80094ca:	dded      	ble.n	80094a8 <_DrawVLine+0x4c>
 80094cc:	4668      	mov	r0, sp
 80094ce:	f004 fe49 	bl	800e164 <GUI_ALLOC_UnlockH>
 80094d2:	9b01      	ldr	r3, [sp, #4]
 80094d4:	b1d3      	cbz	r3, 800950c <_DrawVLine+0xb0>
 80094d6:	a801      	add	r0, sp, #4
 80094d8:	f004 fe44 	bl	800e164 <GUI_ALLOC_UnlockH>
 80094dc:	e016      	b.n	800950c <_DrawVLine+0xb0>
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	b163      	cbz	r3, 80094fc <_DrawVLine+0xa0>
 80094e2:	9801      	ldr	r0, [sp, #4]
 80094e4:	6883      	ldr	r3, [r0, #8]
 80094e6:	4622      	mov	r2, r4
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4639      	mov	r1, r7
 80094ec:	3401      	adds	r4, #1
 80094ee:	4798      	blx	r3
 80094f0:	42b4      	cmp	r4, r6
 80094f2:	f8c5 9000 	str.w	r9, [r5]
 80094f6:	4445      	add	r5, r8
 80094f8:	ddf3      	ble.n	80094e2 <_DrawVLine+0x86>
 80094fa:	e7e7      	b.n	80094cc <_DrawVLine+0x70>
 80094fc:	1b34      	subs	r4, r6, r4
 80094fe:	3401      	adds	r4, #1
 8009500:	3c01      	subs	r4, #1
 8009502:	f8c5 9000 	str.w	r9, [r5]
 8009506:	4445      	add	r5, r8
 8009508:	d1fa      	bne.n	8009500 <_DrawVLine+0xa4>
 800950a:	e7df      	b.n	80094cc <_DrawVLine+0x70>
 800950c:	b003      	add	sp, #12
 800950e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009512:	bf00      	nop
 8009514:	20000084 	.word	0x20000084

08009518 <_FillRect>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80095cc <_FillRect+0xb4>
 8009520:	4614      	mov	r4, r2
 8009522:	f8db 2000 	ldr.w	r2, [fp]
 8009526:	b085      	sub	sp, #20
 8009528:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800952a:	460f      	mov	r7, r1
 800952c:	461d      	mov	r5, r3
 800952e:	f004 fe0b 	bl	800e148 <GUI_ALLOC_LockH>
 8009532:	4621      	mov	r1, r4
 8009534:	9002      	str	r0, [sp, #8]
 8009536:	4638      	mov	r0, r7
 8009538:	f7ff ff14 	bl	8009364 <_XY2PTR>
 800953c:	9a02      	ldr	r2, [sp, #8]
 800953e:	f8db 3000 	ldr.w	r3, [fp]
 8009542:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8009546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009548:	4606      	mov	r6, r0
 800954a:	6950      	ldr	r0, [r2, #20]
 800954c:	f8d3 a000 	ldr.w	sl, [r3]
 8009550:	1bed      	subs	r5, r5, r7
 8009552:	3501      	adds	r5, #1
 8009554:	b338      	cbz	r0, 80095a6 <_FillRect+0x8e>
 8009556:	f004 fdf7 	bl	800e148 <GUI_ALLOC_LockH>
 800955a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800955c:	f10d 0810 	add.w	r8, sp, #16
 8009560:	1b13      	subs	r3, r2, r4
 8009562:	f848 0d04 	str.w	r0, [r8, #-4]!
 8009566:	3301      	adds	r3, #1
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	4639      	mov	r1, r7
 800956c:	4622      	mov	r2, r4
 800956e:	462b      	mov	r3, r5
 8009570:	f006 f9b0 	bl	800f8d4 <GUI_USAGE_AddRect>
 8009574:	4640      	mov	r0, r8
 8009576:	f004 fdf5 	bl	800e164 <GUI_ALLOC_UnlockH>
 800957a:	e014      	b.n	80095a6 <_FillRect+0x8e>
 800957c:	f8db 3000 	ldr.w	r3, [fp]
 8009580:	7c1b      	ldrb	r3, [r3, #16]
 8009582:	07db      	lsls	r3, r3, #31
 8009584:	d513      	bpl.n	80095ae <_FillRect+0x96>
 8009586:	9b02      	ldr	r3, [sp, #8]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	4798      	blx	r3
 8009590:	4632      	mov	r2, r6
 8009592:	462b      	mov	r3, r5
 8009594:	6811      	ldr	r1, [r2, #0]
 8009596:	3b01      	subs	r3, #1
 8009598:	ea81 0100 	eor.w	r1, r1, r0
 800959c:	f842 1b04 	str.w	r1, [r2], #4
 80095a0:	d1f8      	bne.n	8009594 <_FillRect+0x7c>
 80095a2:	444e      	add	r6, r9
 80095a4:	3401      	adds	r4, #1
 80095a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095a8:	429c      	cmp	r4, r3
 80095aa:	dde7      	ble.n	800957c <_FillRect+0x64>
 80095ac:	e008      	b.n	80095c0 <_FillRect+0xa8>
 80095ae:	2d00      	cmp	r5, #0
 80095b0:	ddf7      	ble.n	80095a2 <_FillRect+0x8a>
 80095b2:	462b      	mov	r3, r5
 80095b4:	4632      	mov	r2, r6
 80095b6:	3b01      	subs	r3, #1
 80095b8:	f842 ab04 	str.w	sl, [r2], #4
 80095bc:	d1fb      	bne.n	80095b6 <_FillRect+0x9e>
 80095be:	e7f0      	b.n	80095a2 <_FillRect+0x8a>
 80095c0:	a802      	add	r0, sp, #8
 80095c2:	f004 fdcf 	bl	800e164 <GUI_ALLOC_UnlockH>
 80095c6:	b005      	add	sp, #20
 80095c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095cc:	20000084 	.word	0x20000084

080095d0 <_DrawHLine>:
 80095d0:	b507      	push	{r0, r1, r2, lr}
 80095d2:	9200      	str	r2, [sp, #0]
 80095d4:	f7ff ffa0 	bl	8009518 <_FillRect>
 80095d8:	b003      	add	sp, #12
 80095da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080095e0 <_DrawBitmap>:
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	4c90      	ldr	r4, [pc, #576]	; (8009828 <_DrawBitmap+0x248>)
 80095e6:	b091      	sub	sp, #68	; 0x44
 80095e8:	469b      	mov	fp, r3
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	9008      	str	r0, [sp, #32]
 80095ee:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80095f0:	9207      	str	r2, [sp, #28]
 80095f2:	460e      	mov	r6, r1
 80095f4:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 80095f8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80095fa:	2800      	cmp	r0, #0
 80095fc:	f000 838b 	beq.w	8009d16 <_DrawBitmap+0x736>
 8009600:	f004 fda2 	bl	800e148 <GUI_ALLOC_LockH>
 8009604:	900e      	str	r0, [sp, #56]	; 0x38
 8009606:	6940      	ldr	r0, [r0, #20]
 8009608:	b108      	cbz	r0, 800960e <_DrawBitmap+0x2e>
 800960a:	f004 fd9d 	bl	800e148 <GUI_ALLOC_LockH>
 800960e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009610:	a810      	add	r0, sp, #64	; 0x40
 8009612:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	930a      	str	r3, [sp, #40]	; 0x28
 800961a:	f004 fda3 	bl	800e164 <GUI_ALLOC_UnlockH>
 800961e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009620:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009622:	4437      	add	r7, r6
 8009624:	9704      	str	r7, [sp, #16]
 8009626:	b150      	cbz	r0, 800963e <_DrawBitmap+0x5e>
 8009628:	6823      	ldr	r3, [r4, #0]
 800962a:	7c1b      	ldrb	r3, [r3, #16]
 800962c:	079c      	lsls	r4, r3, #30
 800962e:	d406      	bmi.n	800963e <_DrawBitmap+0x5e>
 8009630:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009632:	9700      	str	r7, [sp, #0]
 8009634:	9904      	ldr	r1, [sp, #16]
 8009636:	9a07      	ldr	r2, [sp, #28]
 8009638:	465b      	mov	r3, fp
 800963a:	f006 f94b 	bl	800f8d4 <GUI_USAGE_AddRect>
 800963e:	9804      	ldr	r0, [sp, #16]
 8009640:	9907      	ldr	r1, [sp, #28]
 8009642:	f7ff fe8f 	bl	8009364 <_XY2PTR>
 8009646:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009648:	2f17      	cmp	r7, #23
 800964a:	4606      	mov	r6, r0
 800964c:	dd64      	ble.n	8009718 <_DrawBitmap+0x138>
 800964e:	ea4f 078b 	mov.w	r7, fp, lsl #2
 8009652:	9706      	str	r7, [sp, #24]
 8009654:	f04f 0900 	mov.w	r9, #0
 8009658:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800965a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800965c:	45b9      	cmp	r9, r7
 800965e:	da57      	bge.n	8009710 <_DrawBitmap+0x130>
 8009660:	b130      	cbz	r0, 8009670 <_DrawBitmap+0x90>
 8009662:	6883      	ldr	r3, [r0, #8]
 8009664:	9a07      	ldr	r2, [sp, #28]
 8009666:	685c      	ldr	r4, [r3, #4]
 8009668:	9904      	ldr	r1, [sp, #16]
 800966a:	444a      	add	r2, r9
 800966c:	465b      	mov	r3, fp
 800966e:	47a0      	blx	r4
 8009670:	9f08      	ldr	r7, [sp, #32]
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	68d8      	ldr	r0, [r3, #12]
 8009676:	b130      	cbz	r0, 8009686 <_DrawBitmap+0xa6>
 8009678:	4b6c      	ldr	r3, [pc, #432]	; (800982c <_DrawBitmap+0x24c>)
 800967a:	9a06      	ldr	r2, [sp, #24]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4630      	mov	r0, r6
 8009680:	4651      	mov	r1, sl
 8009682:	4798      	blx	r3
 8009684:	e03d      	b.n	8009702 <_DrawBitmap+0x122>
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	4798      	blx	r3
 800968a:	0e00      	lsrs	r0, r0, #24
 800968c:	9005      	str	r0, [sp, #20]
 800968e:	4635      	mov	r5, r6
 8009690:	465f      	mov	r7, fp
 8009692:	4654      	mov	r4, sl
 8009694:	463b      	mov	r3, r7
 8009696:	4622      	mov	r2, r4
 8009698:	f04f 0800 	mov.w	r8, #0
 800969c:	f852 1b04 	ldr.w	r1, [r2], #4
 80096a0:	9805      	ldr	r0, [sp, #20]
 80096a2:	0e09      	lsrs	r1, r1, #24
 80096a4:	4281      	cmp	r1, r0
 80096a6:	9805      	ldr	r0, [sp, #20]
 80096a8:	bf08      	it	eq
 80096aa:	f108 0801 	addeq.w	r8, r8, #1
 80096ae:	4281      	cmp	r1, r0
 80096b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80096b4:	d012      	beq.n	80096dc <_DrawBitmap+0xfc>
 80096b6:	f1b8 0f00 	cmp.w	r8, #0
 80096ba:	d012      	beq.n	80096e2 <_DrawBitmap+0x102>
 80096bc:	4a5b      	ldr	r2, [pc, #364]	; (800982c <_DrawBitmap+0x24c>)
 80096be:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80096c2:	f8d2 c000 	ldr.w	ip, [r2]
 80096c6:	9303      	str	r3, [sp, #12]
 80096c8:	4628      	mov	r0, r5
 80096ca:	4621      	mov	r1, r4
 80096cc:	461a      	mov	r2, r3
 80096ce:	47e0      	blx	ip
 80096d0:	9b03      	ldr	r3, [sp, #12]
 80096d2:	ebc8 0707 	rsb	r7, r8, r7
 80096d6:	441d      	add	r5, r3
 80096d8:	441c      	add	r4, r3
 80096da:	e010      	b.n	80096fe <_DrawBitmap+0x11e>
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1dd      	bne.n	800969c <_DrawBitmap+0xbc>
 80096e0:	e7e9      	b.n	80096b6 <_DrawBitmap+0xd6>
 80096e2:	6820      	ldr	r0, [r4, #0]
 80096e4:	0e02      	lsrs	r2, r0, #24
 80096e6:	2aff      	cmp	r2, #255	; 0xff
 80096e8:	d006      	beq.n	80096f8 <_DrawBitmap+0x118>
 80096ea:	4b51      	ldr	r3, [pc, #324]	; (8009830 <_DrawBitmap+0x250>)
 80096ec:	6829      	ldr	r1, [r5, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	43d2      	mvns	r2, r2
 80096f2:	b2d2      	uxtb	r2, r2
 80096f4:	4798      	blx	r3
 80096f6:	6028      	str	r0, [r5, #0]
 80096f8:	3504      	adds	r5, #4
 80096fa:	3404      	adds	r4, #4
 80096fc:	3f01      	subs	r7, #1
 80096fe:	2f00      	cmp	r7, #0
 8009700:	d1c8      	bne.n	8009694 <_DrawBitmap+0xb4>
 8009702:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009704:	44ba      	add	sl, r7
 8009706:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009708:	f109 0901 	add.w	r9, r9, #1
 800970c:	443e      	add	r6, r7
 800970e:	e7a3      	b.n	8009658 <_DrawBitmap+0x78>
 8009710:	2800      	cmp	r0, #0
 8009712:	f040 82fd 	bne.w	8009d10 <_DrawBitmap+0x730>
 8009716:	e2fe      	b.n	8009d16 <_DrawBitmap+0x736>
 8009718:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800971a:	2f10      	cmp	r7, #16
 800971c:	d134      	bne.n	8009788 <_DrawBitmap+0x1a8>
 800971e:	1f06      	subs	r6, r0, #4
 8009720:	2500      	movs	r5, #0
 8009722:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009724:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8009726:	42bd      	cmp	r5, r7
 8009728:	f280 80a3 	bge.w	8009872 <_DrawBitmap+0x292>
 800972c:	9f07      	ldr	r7, [sp, #28]
 800972e:	442f      	add	r7, r5
 8009730:	b13c      	cbz	r4, 8009742 <_DrawBitmap+0x162>
 8009732:	68a3      	ldr	r3, [r4, #8]
 8009734:	9904      	ldr	r1, [sp, #16]
 8009736:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800973a:	4620      	mov	r0, r4
 800973c:	463a      	mov	r2, r7
 800973e:	465b      	mov	r3, fp
 8009740:	47e0      	blx	ip
 8009742:	f1aa 0902 	sub.w	r9, sl, #2
 8009746:	9605      	str	r6, [sp, #20]
 8009748:	46d8      	mov	r8, fp
 800974a:	9808      	ldr	r0, [sp, #32]
 800974c:	9904      	ldr	r1, [sp, #16]
 800974e:	6903      	ldr	r3, [r0, #16]
 8009750:	f839 0f02 	ldrh.w	r0, [r9, #2]!
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	4459      	add	r1, fp
 8009758:	ebc8 0101 	rsb	r1, r8, r1
 800975c:	9103      	str	r1, [sp, #12]
 800975e:	4798      	blx	r3
 8009760:	9b05      	ldr	r3, [sp, #20]
 8009762:	9903      	ldr	r1, [sp, #12]
 8009764:	f843 0f04 	str.w	r0, [r3, #4]!
 8009768:	9305      	str	r3, [sp, #20]
 800976a:	b124      	cbz	r4, 8009776 <_DrawBitmap+0x196>
 800976c:	68a3      	ldr	r3, [r4, #8]
 800976e:	4620      	mov	r0, r4
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	463a      	mov	r2, r7
 8009774:	4798      	blx	r3
 8009776:	f1b8 0801 	subs.w	r8, r8, #1
 800977a:	d1e6      	bne.n	800974a <_DrawBitmap+0x16a>
 800977c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800977e:	44ba      	add	sl, r7
 8009780:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009782:	3501      	adds	r5, #1
 8009784:	443e      	add	r6, r7
 8009786:	e7cc      	b.n	8009722 <_DrawBitmap+0x142>
 8009788:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800978a:	2f08      	cmp	r7, #8
 800978c:	f100 0604 	add.w	r6, r0, #4
 8009790:	d173      	bne.n	800987a <_DrawBitmap+0x29a>
 8009792:	9f07      	ldr	r7, [sp, #28]
 8009794:	9907      	ldr	r1, [sp, #28]
 8009796:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009798:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800979a:	1a7b      	subs	r3, r7, r1
 800979c:	4293      	cmp	r3, r2
 800979e:	f1a6 0004 	sub.w	r0, r6, #4
 80097a2:	da66      	bge.n	8009872 <_DrawBitmap+0x292>
 80097a4:	4b20      	ldr	r3, [pc, #128]	; (8009828 <_DrawBitmap+0x248>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	7c1b      	ldrb	r3, [r3, #16]
 80097aa:	b36d      	cbz	r5, 8009808 <_DrawBitmap+0x228>
 80097ac:	f013 0303 	ands.w	r3, r3, #3
 80097b0:	d005      	beq.n	80097be <_DrawBitmap+0x1de>
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d157      	bne.n	8009866 <_DrawBitmap+0x286>
 80097b6:	46b1      	mov	r9, r6
 80097b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80097bc:	e01c      	b.n	80097f8 <_DrawBitmap+0x218>
 80097be:	f81a 2003 	ldrb.w	r2, [sl, r3]
 80097c2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80097c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80097ca:	3301      	adds	r3, #1
 80097cc:	455b      	cmp	r3, fp
 80097ce:	d1f6      	bne.n	80097be <_DrawBitmap+0x1de>
 80097d0:	e049      	b.n	8009866 <_DrawBitmap+0x286>
 80097d2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80097d6:	f849 3c04 	str.w	r3, [r9, #-4]
 80097da:	b12c      	cbz	r4, 80097e8 <_DrawBitmap+0x208>
 80097dc:	68a3      	ldr	r3, [r4, #8]
 80097de:	4620      	mov	r0, r4
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4641      	mov	r1, r8
 80097e4:	463a      	mov	r2, r7
 80097e6:	4798      	blx	r3
 80097e8:	9b04      	ldr	r3, [sp, #16]
 80097ea:	f108 0801 	add.w	r8, r8, #1
 80097ee:	445b      	add	r3, fp
 80097f0:	4543      	cmp	r3, r8
 80097f2:	f109 0904 	add.w	r9, r9, #4
 80097f6:	d036      	beq.n	8009866 <_DrawBitmap+0x286>
 80097f8:	9804      	ldr	r0, [sp, #16]
 80097fa:	ebc0 030a 	rsb	r3, r0, sl
 80097fe:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d0f0      	beq.n	80097e8 <_DrawBitmap+0x208>
 8009806:	e7e4      	b.n	80097d2 <_DrawBitmap+0x1f2>
 8009808:	f013 0303 	ands.w	r3, r3, #3
 800980c:	d005      	beq.n	800981a <_DrawBitmap+0x23a>
 800980e:	2b02      	cmp	r3, #2
 8009810:	d129      	bne.n	8009866 <_DrawBitmap+0x286>
 8009812:	46b1      	mov	r9, r6
 8009814:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009818:	e01d      	b.n	8009856 <_DrawBitmap+0x276>
 800981a:	4b04      	ldr	r3, [pc, #16]	; (800982c <_DrawBitmap+0x24c>)
 800981c:	4651      	mov	r1, sl
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	465a      	mov	r2, fp
 8009822:	4798      	blx	r3
 8009824:	e01f      	b.n	8009866 <_DrawBitmap+0x286>
 8009826:	bf00      	nop
 8009828:	20000084 	.word	0x20000084
 800982c:	20000074 	.word	0x20000074
 8009830:	20000078 	.word	0x20000078
 8009834:	f849 3c04 	str.w	r3, [r9, #-4]
 8009838:	b12c      	cbz	r4, 8009846 <_DrawBitmap+0x266>
 800983a:	68a3      	ldr	r3, [r4, #8]
 800983c:	4620      	mov	r0, r4
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4641      	mov	r1, r8
 8009842:	463a      	mov	r2, r7
 8009844:	4798      	blx	r3
 8009846:	9b04      	ldr	r3, [sp, #16]
 8009848:	f108 0801 	add.w	r8, r8, #1
 800984c:	445b      	add	r3, fp
 800984e:	4543      	cmp	r3, r8
 8009850:	f109 0904 	add.w	r9, r9, #4
 8009854:	d007      	beq.n	8009866 <_DrawBitmap+0x286>
 8009856:	9904      	ldr	r1, [sp, #16]
 8009858:	ebc1 030a 	rsb	r3, r1, sl
 800985c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d0f0      	beq.n	8009846 <_DrawBitmap+0x266>
 8009864:	e7e6      	b.n	8009834 <_DrawBitmap+0x254>
 8009866:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800986a:	4492      	add	sl, r2
 800986c:	3701      	adds	r7, #1
 800986e:	441e      	add	r6, r3
 8009870:	e790      	b.n	8009794 <_DrawBitmap+0x1b4>
 8009872:	2c00      	cmp	r4, #0
 8009874:	f040 824c 	bne.w	8009d10 <_DrawBitmap+0x730>
 8009878:	e24d      	b.n	8009d16 <_DrawBitmap+0x736>
 800987a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800987c:	4bb2      	ldr	r3, [pc, #712]	; (8009b48 <_DrawBitmap+0x568>)
 800987e:	9608      	str	r6, [sp, #32]
 8009880:	007f      	lsls	r7, r7, #1
 8009882:	970c      	str	r7, [sp, #48]	; 0x30
 8009884:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009886:	00bf      	lsls	r7, r7, #2
 8009888:	970d      	str	r7, [sp, #52]	; 0x34
 800988a:	9f07      	ldr	r7, [sp, #28]
 800988c:	9705      	str	r7, [sp, #20]
 800988e:	2d00      	cmp	r5, #0
 8009890:	bf08      	it	eq
 8009892:	461d      	moveq	r5, r3
 8009894:	9f08      	ldr	r7, [sp, #32]
 8009896:	9807      	ldr	r0, [sp, #28]
 8009898:	1f3c      	subs	r4, r7, #4
 800989a:	9f05      	ldr	r7, [sp, #20]
 800989c:	1a3b      	subs	r3, r7, r0
 800989e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80098a0:	42bb      	cmp	r3, r7
 80098a2:	f280 8233 	bge.w	8009d0c <_DrawBitmap+0x72c>
 80098a6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80098a8:	2f02      	cmp	r7, #2
 80098aa:	f000 80ad 	beq.w	8009a08 <_DrawBitmap+0x428>
 80098ae:	2f04      	cmp	r7, #4
 80098b0:	f000 8150 	beq.w	8009b54 <_DrawBitmap+0x574>
 80098b4:	2f01      	cmp	r7, #1
 80098b6:	f040 821f 	bne.w	8009cf8 <_DrawBitmap+0x718>
 80098ba:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8009b50 <_DrawBitmap+0x570>
 80098be:	f8d9 3000 	ldr.w	r3, [r9]
 80098c2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80098c4:	f004 fc40 	bl	800e148 <GUI_ALLOC_LockH>
 80098c8:	f89a 3000 	ldrb.w	r3, [sl]
 80098cc:	4a9f      	ldr	r2, [pc, #636]	; (8009b4c <_DrawBitmap+0x56c>)
 80098ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80098d0:	5cd6      	ldrb	r6, [r2, r3]
 80098d2:	f8d9 3000 	ldr.w	r3, [r9]
 80098d6:	900e      	str	r0, [sp, #56]	; 0x38
 80098d8:	7c1b      	ldrb	r3, [r3, #16]
 80098da:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 80098de:	f003 0303 	and.w	r3, r3, #3
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	465f      	mov	r7, fp
 80098e6:	f1c1 0808 	rsb	r8, r1, #8
 80098ea:	fa46 f601 	asr.w	r6, r6, r1
 80098ee:	d020      	beq.n	8009932 <_DrawBitmap+0x352>
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	d061      	beq.n	80099b8 <_DrawBitmap+0x3d8>
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d05f      	beq.n	80099b8 <_DrawBitmap+0x3d8>
 80098f8:	4652      	mov	r2, sl
 80098fa:	4547      	cmp	r7, r8
 80098fc:	bf38      	it	cc
 80098fe:	46b8      	movcc	r8, r7
 8009900:	ebc8 0707 	rsb	r7, r8, r7
 8009904:	4643      	mov	r3, r8
 8009906:	4621      	mov	r1, r4
 8009908:	f006 0001 	and.w	r0, r6, #1
 800990c:	3b01      	subs	r3, #1
 800990e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8009912:	f841 0b04 	str.w	r0, [r1], #4
 8009916:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800991a:	d1f5      	bne.n	8009908 <_DrawBitmap+0x328>
 800991c:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8009920:	2f00      	cmp	r7, #0
 8009922:	d06d      	beq.n	8009a00 <_DrawBitmap+0x420>
 8009924:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009928:	4988      	ldr	r1, [pc, #544]	; (8009b4c <_DrawBitmap+0x56c>)
 800992a:	f04f 0808 	mov.w	r8, #8
 800992e:	5cce      	ldrb	r6, [r1, r3]
 8009930:	e7e3      	b.n	80098fa <_DrawBitmap+0x31a>
 8009932:	686b      	ldr	r3, [r5, #4]
 8009934:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8009938:	930b      	str	r3, [sp, #44]	; 0x2c
 800993a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800993e:	4547      	cmp	r7, r8
 8009940:	bf38      	it	cc
 8009942:	46b8      	movcc	r8, r7
 8009944:	ebc8 0707 	rsb	r7, r8, r7
 8009948:	f1bc 0f00 	cmp.w	ip, #0
 800994c:	d026      	beq.n	800999c <_DrawBitmap+0x3bc>
 800994e:	b91e      	cbnz	r6, 8009958 <_DrawBitmap+0x378>
 8009950:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8009954:	44c1      	add	r9, r8
 8009956:	e025      	b.n	80099a4 <_DrawBitmap+0x3c4>
 8009958:	07f0      	lsls	r0, r6, #31
 800995a:	d50c      	bpl.n	8009976 <_DrawBitmap+0x396>
 800995c:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8009960:	9a05      	ldr	r2, [sp, #20]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f8cd c00c 	str.w	ip, [sp, #12]
 8009968:	4660      	mov	r0, ip
 800996a:	4649      	mov	r1, r9
 800996c:	4798      	blx	r3
 800996e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009970:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	f1b8 0801 	subs.w	r8, r8, #1
 800997a:	f109 0901 	add.w	r9, r9, #1
 800997e:	f104 0404 	add.w	r4, r4, #4
 8009982:	d00f      	beq.n	80099a4 <_DrawBitmap+0x3c4>
 8009984:	0876      	lsrs	r6, r6, #1
 8009986:	e7e2      	b.n	800994e <_DrawBitmap+0x36e>
 8009988:	07f1      	lsls	r1, r6, #31
 800998a:	bf44      	itt	mi
 800998c:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 800998e:	6023      	strmi	r3, [r4, #0]
 8009990:	f1b8 0801 	subs.w	r8, r8, #1
 8009994:	f104 0404 	add.w	r4, r4, #4
 8009998:	d004      	beq.n	80099a4 <_DrawBitmap+0x3c4>
 800999a:	0876      	lsrs	r6, r6, #1
 800999c:	2e00      	cmp	r6, #0
 800999e:	d1f3      	bne.n	8009988 <_DrawBitmap+0x3a8>
 80099a0:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 80099a4:	b367      	cbz	r7, 8009a00 <_DrawBitmap+0x420>
 80099a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099a8:	4a68      	ldr	r2, [pc, #416]	; (8009b4c <_DrawBitmap+0x56c>)
 80099aa:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80099ae:	9009      	str	r0, [sp, #36]	; 0x24
 80099b0:	5cd6      	ldrb	r6, [r2, r3]
 80099b2:	f04f 0808 	mov.w	r8, #8
 80099b6:	e7c2      	b.n	800993e <_DrawBitmap+0x35e>
 80099b8:	6803      	ldr	r3, [r0, #0]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	4798      	blx	r3
 80099c0:	4651      	mov	r1, sl
 80099c2:	4547      	cmp	r7, r8
 80099c4:	bf38      	it	cc
 80099c6:	46b8      	movcc	r8, r7
 80099c8:	ebc8 0707 	rsb	r7, r8, r7
 80099cc:	1d23      	adds	r3, r4, #4
 80099ce:	46c6      	mov	lr, r8
 80099d0:	07f2      	lsls	r2, r6, #31
 80099d2:	d504      	bpl.n	80099de <_DrawBitmap+0x3fe>
 80099d4:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80099d8:	4042      	eors	r2, r0
 80099da:	f843 2c04 	str.w	r2, [r3, #-4]
 80099de:	f1be 0e01 	subs.w	lr, lr, #1
 80099e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80099e6:	f103 0304 	add.w	r3, r3, #4
 80099ea:	d1f1      	bne.n	80099d0 <_DrawBitmap+0x3f0>
 80099ec:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 80099f0:	b137      	cbz	r7, 8009a00 <_DrawBitmap+0x420>
 80099f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80099f6:	4a55      	ldr	r2, [pc, #340]	; (8009b4c <_DrawBitmap+0x56c>)
 80099f8:	f04f 0808 	mov.w	r8, #8
 80099fc:	5cd6      	ldrb	r6, [r2, r3]
 80099fe:	e7e0      	b.n	80099c2 <_DrawBitmap+0x3e2>
 8009a00:	a80e      	add	r0, sp, #56	; 0x38
 8009a02:	f004 fbaf 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009a06:	e177      	b.n	8009cf8 <_DrawBitmap+0x718>
 8009a08:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a0c:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8009a10:	f1c7 0604 	rsb	r6, r7, #4
 8009a14:	f89a 7000 	ldrb.w	r7, [sl]
 8009a18:	409f      	lsls	r7, r3
 8009a1a:	4b4d      	ldr	r3, [pc, #308]	; (8009b50 <_DrawBitmap+0x570>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	7c1b      	ldrb	r3, [r3, #16]
 8009a20:	f003 0303 	and.w	r3, r3, #3
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	b2f6      	uxtb	r6, r6
 8009a28:	b2ff      	uxtb	r7, r7
 8009a2a:	d066      	beq.n	8009afa <_DrawBitmap+0x51a>
 8009a2c:	d308      	bcc.n	8009a40 <_DrawBitmap+0x460>
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	f040 8162 	bne.w	8009cf8 <_DrawBitmap+0x718>
 8009a34:	9804      	ldr	r0, [sp, #16]
 8009a36:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009a3a:	46d8      	mov	r8, fp
 8009a3c:	9006      	str	r0, [sp, #24]
 8009a3e:	e03e      	b.n	8009abe <_DrawBitmap+0x4de>
 8009a40:	4652      	mov	r2, sl
 8009a42:	465b      	mov	r3, fp
 8009a44:	429e      	cmp	r6, r3
 8009a46:	bfc8      	it	gt
 8009a48:	b2de      	uxtbgt	r6, r3
 8009a4a:	1b9b      	subs	r3, r3, r6
 8009a4c:	4631      	mov	r1, r6
 8009a4e:	4620      	mov	r0, r4
 8009a50:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 8009a54:	3901      	subs	r1, #1
 8009a56:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 8009a5a:	f840 cb04 	str.w	ip, [r0], #4
 8009a5e:	00bf      	lsls	r7, r7, #2
 8009a60:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8009a64:	b2ff      	uxtb	r7, r7
 8009a66:	d1f3      	bne.n	8009a50 <_DrawBitmap+0x470>
 8009a68:	3e01      	subs	r6, #1
 8009a6a:	b2f6      	uxtb	r6, r6
 8009a6c:	3601      	adds	r6, #1
 8009a6e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f000 8140 	beq.w	8009cf8 <_DrawBitmap+0x718>
 8009a78:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8009a7c:	2604      	movs	r6, #4
 8009a7e:	e7e1      	b.n	8009a44 <_DrawBitmap+0x464>
 8009a80:	9906      	ldr	r1, [sp, #24]
 8009a82:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 8009a86:	4449      	add	r1, r9
 8009a88:	d122      	bne.n	8009ad0 <_DrawBitmap+0x4f0>
 8009a8a:	f109 0901 	add.w	r9, r9, #1
 8009a8e:	fa5f f289 	uxtb.w	r2, r9
 8009a92:	00bf      	lsls	r7, r7, #2
 8009a94:	4296      	cmp	r6, r2
 8009a96:	b2ff      	uxtb	r7, r7
 8009a98:	d1f2      	bne.n	8009a80 <_DrawBitmap+0x4a0>
 8009a9a:	9f06      	ldr	r7, [sp, #24]
 8009a9c:	3e01      	subs	r6, #1
 8009a9e:	b2f6      	uxtb	r6, r6
 8009aa0:	1c7b      	adds	r3, r7, #1
 8009aa2:	1c72      	adds	r2, r6, #1
 8009aa4:	199e      	adds	r6, r3, r6
 8009aa6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8009aaa:	9606      	str	r6, [sp, #24]
 8009aac:	f1b8 0f00 	cmp.w	r8, #0
 8009ab0:	f000 8122 	beq.w	8009cf8 <_DrawBitmap+0x718>
 8009ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009aba:	9309      	str	r3, [sp, #36]	; 0x24
 8009abc:	2604      	movs	r6, #4
 8009abe:	4546      	cmp	r6, r8
 8009ac0:	bfc8      	it	gt
 8009ac2:	fa5f f688 	uxtbgt.w	r6, r8
 8009ac6:	ebc6 0808 	rsb	r8, r6, r8
 8009aca:	f04f 0900 	mov.w	r9, #0
 8009ace:	e7d7      	b.n	8009a80 <_DrawBitmap+0x4a0>
 8009ad0:	09ba      	lsrs	r2, r7, #6
 8009ad2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8009ad6:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 8009ada:	f1bc 0f00 	cmp.w	ip, #0
 8009ade:	d0d4      	beq.n	8009a8a <_DrawBitmap+0x4aa>
 8009ae0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8009ae4:	6812      	ldr	r2, [r2, #0]
 8009ae6:	920b      	str	r2, [sp, #44]	; 0x2c
 8009ae8:	4660      	mov	r0, ip
 8009aea:	f8cd c00c 	str.w	ip, [sp, #12]
 8009aee:	9a05      	ldr	r2, [sp, #20]
 8009af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009af2:	4798      	blx	r3
 8009af4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009af8:	e7c7      	b.n	8009a8a <_DrawBitmap+0x4aa>
 8009afa:	4650      	mov	r0, sl
 8009afc:	465b      	mov	r3, fp
 8009afe:	429e      	cmp	r6, r3
 8009b00:	bfc8      	it	gt
 8009b02:	b2de      	uxtbgt	r6, r3
 8009b04:	1b9b      	subs	r3, r3, r6
 8009b06:	1d22      	adds	r2, r4, #4
 8009b08:	46b4      	mov	ip, r6
 8009b0a:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 8009b0e:	d005      	beq.n	8009b1c <_DrawBitmap+0x53c>
 8009b10:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8009b14:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 8009b18:	f842 1c04 	str.w	r1, [r2, #-4]
 8009b1c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009b20:	00bf      	lsls	r7, r7, #2
 8009b22:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 8009b26:	b2ff      	uxtb	r7, r7
 8009b28:	f102 0204 	add.w	r2, r2, #4
 8009b2c:	d1ed      	bne.n	8009b0a <_DrawBitmap+0x52a>
 8009b2e:	3e01      	subs	r6, #1
 8009b30:	b2f6      	uxtb	r6, r6
 8009b32:	3601      	adds	r6, #1
 8009b34:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f000 80dd 	beq.w	8009cf8 <_DrawBitmap+0x718>
 8009b3e:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8009b42:	2604      	movs	r6, #4
 8009b44:	e7db      	b.n	8009afe <_DrawBitmap+0x51e>
 8009b46:	bf00      	nop
 8009b48:	08012bdc 	.word	0x08012bdc
 8009b4c:	08013c0c 	.word	0x08013c0c
 8009b50:	20000084 	.word	0x20000084
 8009b54:	4a71      	ldr	r2, [pc, #452]	; (8009d1c <_DrawBitmap+0x73c>)
 8009b56:	f89a 3000 	ldrb.w	r3, [sl]
 8009b5a:	6812      	ldr	r2, [r2, #0]
 8009b5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009b5e:	7c12      	ldrb	r2, [r2, #16]
 8009b60:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009b62:	f002 0203 	and.w	r2, r2, #3
 8009b66:	4083      	lsls	r3, r0
 8009b68:	2a01      	cmp	r2, #1
 8009b6a:	b2de      	uxtb	r6, r3
 8009b6c:	f000 809c 	beq.w	8009ca8 <_DrawBitmap+0x6c8>
 8009b70:	d302      	bcc.n	8009b78 <_DrawBitmap+0x598>
 8009b72:	2a02      	cmp	r2, #2
 8009b74:	d035      	beq.n	8009be2 <_DrawBitmap+0x602>
 8009b76:	e0bf      	b.n	8009cf8 <_DrawBitmap+0x718>
 8009b78:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009b7a:	b15f      	cbz	r7, 8009b94 <_DrawBitmap+0x5b4>
 8009b7c:	0936      	lsrs	r6, r6, #4
 8009b7e:	f10a 0201 	add.w	r2, sl, #1
 8009b82:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8009b8c:	9c08      	ldr	r4, [sp, #32]
 8009b8e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009b92:	e001      	b.n	8009b98 <_DrawBitmap+0x5b8>
 8009b94:	465b      	mov	r3, fp
 8009b96:	4652      	mov	r2, sl
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	dd1a      	ble.n	8009bd2 <_DrawBitmap+0x5f2>
 8009b9c:	1058      	asrs	r0, r3, #1
 8009b9e:	f104 0108 	add.w	r1, r4, #8
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	eb02 0800 	add.w	r8, r2, r0
 8009baa:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 8009bae:	f006 060f 	and.w	r6, r6, #15
 8009bb2:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 8009bb6:	f841 7c08 	str.w	r7, [r1, #-8]
 8009bba:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8009bbe:	f841 6c04 	str.w	r6, [r1, #-4]
 8009bc2:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8009bc6:	4542      	cmp	r2, r8
 8009bc8:	f101 0108 	add.w	r1, r1, #8
 8009bcc:	d1ed      	bne.n	8009baa <_DrawBitmap+0x5ca>
 8009bce:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 8090 	beq.w	8009cf8 <_DrawBitmap+0x718>
 8009bd8:	0936      	lsrs	r6, r6, #4
 8009bda:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8009bde:	6023      	str	r3, [r4, #0]
 8009be0:	e08a      	b.n	8009cf8 <_DrawBitmap+0x718>
 8009be2:	981e      	ldr	r0, [sp, #120]	; 0x78
 8009be4:	b1c0      	cbz	r0, 8009c18 <_DrawBitmap+0x638>
 8009be6:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8009bea:	d00a      	beq.n	8009c02 <_DrawBitmap+0x622>
 8009bec:	0936      	lsrs	r6, r6, #4
 8009bee:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	b12f      	cbz	r7, 8009c02 <_DrawBitmap+0x622>
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	9904      	ldr	r1, [sp, #16]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	9a05      	ldr	r2, [sp, #20]
 8009bfe:	4638      	mov	r0, r7
 8009c00:	4798      	blx	r3
 8009c02:	9904      	ldr	r1, [sp, #16]
 8009c04:	9c08      	ldr	r4, [sp, #32]
 8009c06:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8009c0a:	f101 0801 	add.w	r8, r1, #1
 8009c0e:	f10b 3cff 	add.w	ip, fp, #4294967295
 8009c12:	f10a 0901 	add.w	r9, sl, #1
 8009c16:	e011      	b.n	8009c3c <_DrawBitmap+0x65c>
 8009c18:	46dc      	mov	ip, fp
 8009c1a:	46d1      	mov	r9, sl
 8009c1c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009c20:	e00c      	b.n	8009c3c <_DrawBitmap+0x65c>
 8009c22:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 8009c26:	d10d      	bne.n	8009c44 <_DrawBitmap+0x664>
 8009c28:	f016 060f 	ands.w	r6, r6, #15
 8009c2c:	d11b      	bne.n	8009c66 <_DrawBitmap+0x686>
 8009c2e:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 8009c32:	3408      	adds	r4, #8
 8009c34:	f108 0802 	add.w	r8, r8, #2
 8009c38:	f1ac 0c02 	sub.w	ip, ip, #2
 8009c3c:	f1bc 0f01 	cmp.w	ip, #1
 8009c40:	dcef      	bgt.n	8009c22 <_DrawBitmap+0x642>
 8009c42:	e021      	b.n	8009c88 <_DrawBitmap+0x6a8>
 8009c44:	0933      	lsrs	r3, r6, #4
 8009c46:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8009c4a:	6023      	str	r3, [r4, #0]
 8009c4c:	2f00      	cmp	r7, #0
 8009c4e:	d0eb      	beq.n	8009c28 <_DrawBitmap+0x648>
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	9a05      	ldr	r2, [sp, #20]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f8cd c00c 	str.w	ip, [sp, #12]
 8009c5a:	4638      	mov	r0, r7
 8009c5c:	4641      	mov	r1, r8
 8009c5e:	4798      	blx	r3
 8009c60:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009c64:	e7e0      	b.n	8009c28 <_DrawBitmap+0x648>
 8009c66:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8009c6a:	6063      	str	r3, [r4, #4]
 8009c6c:	2f00      	cmp	r7, #0
 8009c6e:	d0de      	beq.n	8009c2e <_DrawBitmap+0x64e>
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	9a05      	ldr	r2, [sp, #20]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f8cd c00c 	str.w	ip, [sp, #12]
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	f108 0101 	add.w	r1, r8, #1
 8009c80:	4798      	blx	r3
 8009c82:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009c86:	e7d2      	b.n	8009c2e <_DrawBitmap+0x64e>
 8009c88:	f1bc 0f00 	cmp.w	ip, #0
 8009c8c:	d034      	beq.n	8009cf8 <_DrawBitmap+0x718>
 8009c8e:	0936      	lsrs	r6, r6, #4
 8009c90:	d032      	beq.n	8009cf8 <_DrawBitmap+0x718>
 8009c92:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8009c96:	6023      	str	r3, [r4, #0]
 8009c98:	b377      	cbz	r7, 8009cf8 <_DrawBitmap+0x718>
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	9a05      	ldr	r2, [sp, #20]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	4641      	mov	r1, r8
 8009ca4:	4798      	blx	r3
 8009ca6:	e027      	b.n	8009cf8 <_DrawBitmap+0x718>
 8009ca8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009caa:	f1c7 0302 	rsb	r3, r7, #2
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	4657      	mov	r7, sl
 8009cb2:	465a      	mov	r2, fp
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	bfc8      	it	gt
 8009cb8:	b2d3      	uxtbgt	r3, r2
 8009cba:	1ad2      	subs	r2, r2, r3
 8009cbc:	1d20      	adds	r0, r4, #4
 8009cbe:	469c      	mov	ip, r3
 8009cc0:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8009cc4:	d005      	beq.n	8009cd2 <_DrawBitmap+0x6f2>
 8009cc6:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8009cca:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 8009cce:	f840 1c04 	str.w	r1, [r0, #-4]
 8009cd2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009cd6:	0136      	lsls	r6, r6, #4
 8009cd8:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 8009cdc:	b2f6      	uxtb	r6, r6
 8009cde:	f100 0004 	add.w	r0, r0, #4
 8009ce2:	d1ed      	bne.n	8009cc0 <_DrawBitmap+0x6e0>
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	3301      	adds	r3, #1
 8009cea:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009cee:	b11a      	cbz	r2, 8009cf8 <_DrawBitmap+0x718>
 8009cf0:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	e7dd      	b.n	8009cb4 <_DrawBitmap+0x6d4>
 8009cf8:	9b05      	ldr	r3, [sp, #20]
 8009cfa:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	44ba      	add	sl, r7
 8009d00:	9305      	str	r3, [sp, #20]
 8009d02:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009d04:	9b08      	ldr	r3, [sp, #32]
 8009d06:	443b      	add	r3, r7
 8009d08:	9308      	str	r3, [sp, #32]
 8009d0a:	e5c3      	b.n	8009894 <_DrawBitmap+0x2b4>
 8009d0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d0e:	b113      	cbz	r3, 8009d16 <_DrawBitmap+0x736>
 8009d10:	a80f      	add	r0, sp, #60	; 0x3c
 8009d12:	f004 fa27 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009d16:	b011      	add	sp, #68	; 0x44
 8009d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1c:	20000084 	.word	0x20000084

08009d20 <GUI_MEMDEV__WriteToActiveAt>:
 8009d20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009d24:	460e      	mov	r6, r1
 8009d26:	4690      	mov	r8, r2
 8009d28:	4607      	mov	r7, r0
 8009d2a:	f004 fa0d 	bl	800e148 <GUI_ALLOC_LockH>
 8009d2e:	6803      	ldr	r3, [r0, #0]
 8009d30:	ac02      	add	r4, sp, #8
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	2116      	movs	r1, #22
 8009d3e:	4798      	blx	r3
 8009d40:	4605      	mov	r5, r0
 8009d42:	4620      	mov	r0, r4
 8009d44:	f004 fa0e 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009d48:	b11d      	cbz	r5, 8009d52 <GUI_MEMDEV__WriteToActiveAt+0x32>
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	4642      	mov	r2, r8
 8009d50:	47a8      	blx	r5
 8009d52:	b002      	add	sp, #8
 8009d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009d58 <GUI_MEMDEV__CreateFixed>:
 8009d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	4e3e      	ldr	r6, [pc, #248]	; (8009e58 <GUI_MEMDEV__CreateFixed+0x100>)
 8009d5e:	b087      	sub	sp, #28
 8009d60:	461d      	mov	r5, r3
 8009d62:	6833      	ldr	r3, [r6, #0]
 8009d64:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8009d66:	7c5b      	ldrb	r3, [r3, #17]
 8009d68:	4683      	mov	fp, r0
 8009d6a:	468a      	mov	sl, r1
 8009d6c:	4690      	mov	r8, r2
 8009d6e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009d70:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009d72:	2200      	movs	r2, #0
 8009d74:	f002 fcc0 	bl	800c6f8 <GUI_DEVICE_Create>
 8009d78:	4604      	mov	r4, r0
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d033      	beq.n	8009de6 <GUI_MEMDEV__CreateFixed+0x8e>
 8009d7e:	6903      	ldr	r3, [r0, #16]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	4798      	blx	r3
 8009d84:	f001 fb1d 	bl	800b3c2 <LCD__GetBPPDevice>
 8009d88:	fb08 f600 	mul.w	r6, r8, r0
 8009d8c:	9003      	str	r0, [sp, #12]
 8009d8e:	3607      	adds	r6, #7
 8009d90:	f004 fb1a 	bl	800e3c8 <GUI_ALLOC_RequestSize>
 8009d94:	f017 0901 	ands.w	r9, r7, #1
 8009d98:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 8009d9c:	d104      	bne.n	8009da8 <GUI_MEMDEV__CreateFixed+0x50>
 8009d9e:	2304      	movs	r3, #4
 8009da0:	fb90 f0f3 	sdiv	r0, r0, r3
 8009da4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8009da8:	2d00      	cmp	r5, #0
 8009daa:	dc09      	bgt.n	8009dc0 <GUI_MEMDEV__CreateFixed+0x68>
 8009dac:	b11e      	cbz	r6, 8009db6 <GUI_MEMDEV__CreateFixed+0x5e>
 8009dae:	3818      	subs	r0, #24
 8009db0:	fbb0 f0f6 	udiv	r0, r0, r6
 8009db4:	e000      	b.n	8009db8 <GUI_MEMDEV__CreateFixed+0x60>
 8009db6:	4630      	mov	r0, r6
 8009db8:	426d      	negs	r5, r5
 8009dba:	42a8      	cmp	r0, r5
 8009dbc:	bfb8      	it	lt
 8009dbe:	4605      	movlt	r5, r0
 8009dc0:	f1b9 0f00 	cmp.w	r9, #0
 8009dc4:	d109      	bne.n	8009dda <GUI_MEMDEV__CreateFixed+0x82>
 8009dc6:	f8cd 9000 	str.w	r9, [sp]
 8009dca:	4658      	mov	r0, fp
 8009dcc:	4651      	mov	r1, sl
 8009dce:	4642      	mov	r2, r8
 8009dd0:	462b      	mov	r3, r5
 8009dd2:	f005 fd3f 	bl	800f854 <GUI_USAGE_BM_Create>
 8009dd6:	4607      	mov	r7, r0
 8009dd8:	e000      	b.n	8009ddc <GUI_MEMDEV__CreateFixed+0x84>
 8009dda:	2700      	movs	r7, #0
 8009ddc:	2d00      	cmp	r5, #0
 8009dde:	dc04      	bgt.n	8009dea <GUI_MEMDEV__CreateFixed+0x92>
 8009de0:	4620      	mov	r0, r4
 8009de2:	f002 fc87 	bl	800c6f4 <GUI_DEVICE_Delete>
 8009de6:	2000      	movs	r0, #0
 8009de8:	e032      	b.n	8009e50 <GUI_MEMDEV__CreateFixed+0xf8>
 8009dea:	fb06 f005 	mul.w	r0, r6, r5
 8009dee:	3018      	adds	r0, #24
 8009df0:	f1b9 0f00 	cmp.w	r9, #0
 8009df4:	d002      	beq.n	8009dfc <GUI_MEMDEV__CreateFixed+0xa4>
 8009df6:	f004 fb73 	bl	800e4e0 <GUI_ALLOC_AllocNoInit>
 8009dfa:	e001      	b.n	8009e00 <GUI_MEMDEV__CreateFixed+0xa8>
 8009dfc:	f004 fb7c 	bl	800e4f8 <GUI_ALLOC_AllocZero>
 8009e00:	4681      	mov	r9, r0
 8009e02:	b940      	cbnz	r0, 8009e16 <GUI_MEMDEV__CreateFixed+0xbe>
 8009e04:	4620      	mov	r0, r4
 8009e06:	f002 fc75 	bl	800c6f4 <GUI_DEVICE_Delete>
 8009e0a:	2f00      	cmp	r7, #0
 8009e0c:	d0eb      	beq.n	8009de6 <GUI_MEMDEV__CreateFixed+0x8e>
 8009e0e:	4638      	mov	r0, r7
 8009e10:	f004 f9d4 	bl	800e1bc <GUI_ALLOC_Free>
 8009e14:	e01b      	b.n	8009e4e <GUI_MEMDEV__CreateFixed+0xf6>
 8009e16:	f004 f997 	bl	800e148 <GUI_ALLOC_LockH>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	a806      	add	r0, sp, #24
 8009e1e:	9a03      	ldr	r2, [sp, #12]
 8009e20:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009e24:	611a      	str	r2, [r3, #16]
 8009e26:	601c      	str	r4, [r3, #0]
 8009e28:	f8a3 b004 	strh.w	fp, [r3, #4]
 8009e2c:	f8a3 a006 	strh.w	sl, [r3, #6]
 8009e30:	f8a3 8008 	strh.w	r8, [r3, #8]
 8009e34:	815d      	strh	r5, [r3, #10]
 8009e36:	60de      	str	r6, [r3, #12]
 8009e38:	615f      	str	r7, [r3, #20]
 8009e3a:	f004 f993 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009e3e:	4a06      	ldr	r2, [pc, #24]	; (8009e58 <GUI_MEMDEV__CreateFixed+0x100>)
 8009e40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e42:	6123      	str	r3, [r4, #16]
 8009e44:	6813      	ldr	r3, [r2, #0]
 8009e46:	f8c4 9008 	str.w	r9, [r4, #8]
 8009e4a:	7c5b      	ldrb	r3, [r3, #17]
 8009e4c:	61a3      	str	r3, [r4, #24]
 8009e4e:	4648      	mov	r0, r9
 8009e50:	b007      	add	sp, #28
 8009e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e56:	bf00      	nop
 8009e58:	20000084 	.word	0x20000084

08009e5c <GUI_MEMDEV_GetBitsPerPixel>:
 8009e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e5e:	4605      	mov	r5, r0
 8009e60:	b170      	cbz	r0, 8009e80 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 8009e62:	f004 f971 	bl	800e148 <GUI_ALLOC_LockH>
 8009e66:	6803      	ldr	r3, [r0, #0]
 8009e68:	ac02      	add	r4, sp, #8
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	4798      	blx	r3
 8009e74:	f001 faa5 	bl	800b3c2 <LCD__GetBPPDevice>
 8009e78:	4605      	mov	r5, r0
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f004 f972 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009e80:	4628      	mov	r0, r5
 8009e82:	b003      	add	sp, #12
 8009e84:	bd30      	pop	{r4, r5, pc}
	...

08009e88 <GUI_MEMDEV_Delete>:
 8009e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	b1d0      	cbz	r0, 8009ec4 <GUI_MEMDEV_Delete+0x3c>
 8009e8e:	4b0e      	ldr	r3, [pc, #56]	; (8009ec8 <GUI_MEMDEV_Delete+0x40>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e94:	4283      	cmp	r3, r0
 8009e96:	d101      	bne.n	8009e9c <GUI_MEMDEV_Delete+0x14>
 8009e98:	f002 fef6 	bl	800cc88 <GUI_SelectLCD>
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f004 f953 	bl	800e148 <GUI_ALLOC_LockH>
 8009ea2:	9001      	str	r0, [sp, #4]
 8009ea4:	6940      	ldr	r0, [r0, #20]
 8009ea6:	b108      	cbz	r0, 8009eac <GUI_MEMDEV_Delete+0x24>
 8009ea8:	f005 fd00 	bl	800f8ac <GUI_USAGE_DecUseCnt>
 8009eac:	ad02      	add	r5, sp, #8
 8009eae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009eb2:	6818      	ldr	r0, [r3, #0]
 8009eb4:	f002 fc1e 	bl	800c6f4 <GUI_DEVICE_Delete>
 8009eb8:	4628      	mov	r0, r5
 8009eba:	f004 f953 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	f004 f97c 	bl	800e1bc <GUI_ALLOC_Free>
 8009ec4:	b003      	add	sp, #12
 8009ec6:	bd30      	pop	{r4, r5, pc}
 8009ec8:	20000084 	.word	0x20000084

08009ecc <GUI_MEMDEV_CreateEx>:
 8009ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed0:	469a      	mov	sl, r3
 8009ed2:	4b19      	ldr	r3, [pc, #100]	; (8009f38 <GUI_MEMDEV_CreateEx+0x6c>)
 8009ed4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4607      	mov	r7, r0
 8009eda:	7c58      	ldrb	r0, [r3, #17]
 8009edc:	4b17      	ldr	r3, [pc, #92]	; (8009f3c <GUI_MEMDEV_CreateEx+0x70>)
 8009ede:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8009ee2:	4688      	mov	r8, r1
 8009ee4:	4691      	mov	r9, r2
 8009ee6:	68e3      	ldr	r3, [r4, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2b04      	cmp	r3, #4
 8009eec:	d006      	beq.n	8009efc <GUI_MEMDEV_CreateEx+0x30>
 8009eee:	6824      	ldr	r4, [r4, #0]
 8009ef0:	2c00      	cmp	r4, #0
 8009ef2:	d1f8      	bne.n	8009ee6 <GUI_MEMDEV_CreateEx+0x1a>
 8009ef4:	f002 fbee 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 8009ef8:	4604      	mov	r4, r0
 8009efa:	b130      	cbz	r0, 8009f0a <GUI_MEMDEV_CreateEx+0x3e>
 8009efc:	68e3      	ldr	r3, [r4, #12]
 8009efe:	4620      	mov	r0, r4
 8009f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f02:	2101      	movs	r1, #1
 8009f04:	4798      	blx	r3
 8009f06:	4606      	mov	r6, r0
 8009f08:	b908      	cbnz	r0, 8009f0e <GUI_MEMDEV_CreateEx+0x42>
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	e010      	b.n	8009f30 <GUI_MEMDEV_CreateEx+0x64>
 8009f0e:	6924      	ldr	r4, [r4, #16]
 8009f10:	68a3      	ldr	r3, [r4, #8]
 8009f12:	4798      	blx	r3
 8009f14:	3001      	adds	r0, #1
 8009f16:	bf04      	itt	eq
 8009f18:	f045 0501 	orreq.w	r5, r5, #1
 8009f1c:	4c08      	ldreq	r4, [pc, #32]	; (8009f40 <GUI_MEMDEV_CreateEx+0x74>)
 8009f1e:	9402      	str	r4, [sp, #8]
 8009f20:	e88d 0060 	stmia.w	sp, {r5, r6}
 8009f24:	4638      	mov	r0, r7
 8009f26:	4641      	mov	r1, r8
 8009f28:	464a      	mov	r2, r9
 8009f2a:	4653      	mov	r3, sl
 8009f2c:	f7ff ff14 	bl	8009d58 <GUI_MEMDEV__CreateFixed>
 8009f30:	b004      	add	sp, #16
 8009f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f36:	bf00      	nop
 8009f38:	20000084 	.word	0x20000084
 8009f3c:	20005694 	.word	0x20005694
 8009f40:	08013d20 	.word	0x08013d20

08009f44 <GUI_MEMDEV_Select>:
 8009f44:	4b11      	ldr	r3, [pc, #68]	; (8009f8c <GUI_MEMDEV_Select+0x48>)
 8009f46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8009f4e:	461f      	mov	r7, r3
 8009f50:	b910      	cbnz	r0, 8009f58 <GUI_MEMDEV_Select+0x14>
 8009f52:	f002 fe99 	bl	800cc88 <GUI_SelectLCD>
 8009f56:	e016      	b.n	8009f86 <GUI_MEMDEV_Select+0x42>
 8009f58:	b10e      	cbz	r6, 8009f5e <GUI_MEMDEV_Select+0x1a>
 8009f5a:	f002 fe95 	bl	800cc88 <GUI_SelectLCD>
 8009f5e:	f7fe ff31 	bl	8008dc4 <WM_Deactivate>
 8009f62:	4620      	mov	r0, r4
 8009f64:	f004 f8f0 	bl	800e148 <GUI_ALLOC_LockH>
 8009f68:	ad02      	add	r5, sp, #8
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8009f70:	661c      	str	r4, [r3, #96]	; 0x60
 8009f72:	6800      	ldr	r0, [r0, #0]
 8009f74:	f002 fc00 	bl	800c778 <GUI_DEVICE_Link>
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f004 f8f3 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009f7e:	f001 f8cf 	bl	800b120 <LCD_UpdateColorIndices>
 8009f82:	f001 fcdf 	bl	800b944 <LCD_SetClipRectMax>
 8009f86:	4630      	mov	r0, r6
 8009f88:	b003      	add	sp, #12
 8009f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f8c:	20000084 	.word	0x20000084

08009f90 <GUI_MEMDEV_CopyToLCDAt>:
 8009f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f94:	460c      	mov	r4, r1
 8009f96:	b085      	sub	sp, #20
 8009f98:	4615      	mov	r5, r2
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d041      	beq.n	800a024 <GUI_MEMDEV_CopyToLCDAt+0x94>
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	f002 fe7e 	bl	800cca2 <GUI_SetDrawMode>
 8009fa6:	4b21      	ldr	r3, [pc, #132]	; (800a02c <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4607      	mov	r7, r0
 8009fac:	4630      	mov	r0, r6
 8009fae:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 8009fb2:	f004 f8c9 	bl	800e148 <GUI_ALLOC_LockH>
 8009fb6:	6803      	ldr	r3, [r0, #0]
 8009fb8:	9001      	str	r0, [sp, #4]
 8009fba:	6998      	ldr	r0, [r3, #24]
 8009fbc:	f002 f9d4 	bl	800c368 <GUI_SelectLayer>
 8009fc0:	4b1b      	ldr	r3, [pc, #108]	; (800a030 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 8009fc2:	429c      	cmp	r4, r3
 8009fc4:	9b01      	ldr	r3, [sp, #4]
 8009fc6:	bf04      	itt	eq
 8009fc8:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 8009fcc:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 8009fd0:	891a      	ldrh	r2, [r3, #8]
 8009fd2:	895b      	ldrh	r3, [r3, #10]
 8009fd4:	f8ad 4008 	strh.w	r4, [sp, #8]
 8009fd8:	3a01      	subs	r2, #1
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	4422      	add	r2, r4
 8009fde:	442b      	add	r3, r5
 8009fe0:	4681      	mov	r9, r0
 8009fe2:	f8ad 200c 	strh.w	r2, [sp, #12]
 8009fe6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009fea:	f8ad 500a 	strh.w	r5, [sp, #10]
 8009fee:	f7fe fee1 	bl	8008db4 <WM_Activate>
 8009ff2:	a801      	add	r0, sp, #4
 8009ff4:	f004 f8b6 	bl	800e164 <GUI_ALLOC_UnlockH>
 8009ff8:	a802      	add	r0, sp, #8
 8009ffa:	f7fe fd39 	bl	8008a70 <WM__InitIVRSearch>
 8009ffe:	b948      	cbnz	r0, 800a014 <GUI_MEMDEV_CopyToLCDAt+0x84>
 800a000:	4648      	mov	r0, r9
 800a002:	f002 f9b1 	bl	800c368 <GUI_SelectLayer>
 800a006:	4640      	mov	r0, r8
 800a008:	f7ff ff9c 	bl	8009f44 <GUI_MEMDEV_Select>
 800a00c:	4638      	mov	r0, r7
 800a00e:	f002 fe48 	bl	800cca2 <GUI_SetDrawMode>
 800a012:	e007      	b.n	800a024 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800a014:	4630      	mov	r0, r6
 800a016:	4621      	mov	r1, r4
 800a018:	462a      	mov	r2, r5
 800a01a:	f004 fee7 	bl	800edec <GUI_MEMDEV__WriteToActiveOpaque>
 800a01e:	f7fe fc65 	bl	80088ec <WM__GetNextIVR>
 800a022:	e7ec      	b.n	8009ffe <GUI_MEMDEV_CopyToLCDAt+0x6e>
 800a024:	b005      	add	sp, #20
 800a026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a02a:	bf00      	nop
 800a02c:	20000084 	.word	0x20000084
 800a030:	fffff001 	.word	0xfffff001

0800a034 <GUI_MEMDEV_CopyToLCD>:
 800a034:	4901      	ldr	r1, [pc, #4]	; (800a03c <GUI_MEMDEV_CopyToLCD+0x8>)
 800a036:	460a      	mov	r2, r1
 800a038:	f7ff bfaa 	b.w	8009f90 <GUI_MEMDEV_CopyToLCDAt>
 800a03c:	fffff001 	.word	0xfffff001

0800a040 <_SetPhysRAMAddr>:
 800a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a042:	4604      	mov	r4, r0
 800a044:	460e      	mov	r6, r1
 800a046:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800a04a:	212a      	movs	r1, #42	; 0x2a
 800a04c:	4615      	mov	r5, r2
 800a04e:	4798      	blx	r3
 800a050:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a052:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a056:	4431      	add	r1, r6
 800a058:	4620      	mov	r0, r4
 800a05a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800a05e:	4798      	blx	r3
 800a060:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a062:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a066:	b2b7      	uxth	r7, r6
 800a068:	4439      	add	r1, r7
 800a06a:	4620      	mov	r0, r4
 800a06c:	b2c9      	uxtb	r1, r1
 800a06e:	4798      	blx	r3
 800a070:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a072:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a076:	4431      	add	r1, r6
 800a078:	4620      	mov	r0, r4
 800a07a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800a07e:	4798      	blx	r3
 800a080:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a082:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a086:	4439      	add	r1, r7
 800a088:	4620      	mov	r0, r4
 800a08a:	b2c9      	uxtb	r1, r1
 800a08c:	4798      	blx	r3
 800a08e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a092:	4620      	mov	r0, r4
 800a094:	212b      	movs	r1, #43	; 0x2b
 800a096:	4798      	blx	r3
 800a098:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a09a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a09e:	4429      	add	r1, r5
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800a0a6:	4798      	blx	r3
 800a0a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a0aa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a0ae:	b2ae      	uxth	r6, r5
 800a0b0:	4431      	add	r1, r6
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	b2c9      	uxtb	r1, r1
 800a0b6:	4798      	blx	r3
 800a0b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a0ba:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a0be:	4429      	add	r1, r5
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800a0c6:	4798      	blx	r3
 800a0c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a0ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a0ce:	4431      	add	r1, r6
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	b2c9      	uxtb	r1, r1
 800a0d4:	4798      	blx	r3
 800a0d6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a0da:	4620      	mov	r0, r4
 800a0dc:	212c      	movs	r1, #44	; 0x2c
 800a0de:	4798      	blx	r3
 800a0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0e2 <_SetRect>:
 800a0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	4688      	mov	r8, r1
 800a0ea:	461f      	mov	r7, r3
 800a0ec:	212a      	movs	r1, #42	; 0x2a
 800a0ee:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800a0f2:	9d06      	ldr	r5, [sp, #24]
 800a0f4:	4616      	mov	r6, r2
 800a0f6:	4798      	blx	r3
 800a0f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a0fa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a0fe:	4441      	add	r1, r8
 800a100:	4620      	mov	r0, r4
 800a102:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800a106:	4798      	blx	r3
 800a108:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a10a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a10e:	4441      	add	r1, r8
 800a110:	4620      	mov	r0, r4
 800a112:	b2c9      	uxtb	r1, r1
 800a114:	4798      	blx	r3
 800a116:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a118:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a11c:	4439      	add	r1, r7
 800a11e:	4620      	mov	r0, r4
 800a120:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800a124:	4798      	blx	r3
 800a126:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a128:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a12c:	4439      	add	r1, r7
 800a12e:	4620      	mov	r0, r4
 800a130:	b2c9      	uxtb	r1, r1
 800a132:	4798      	blx	r3
 800a134:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a138:	4620      	mov	r0, r4
 800a13a:	212b      	movs	r1, #43	; 0x2b
 800a13c:	4798      	blx	r3
 800a13e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a140:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a144:	4431      	add	r1, r6
 800a146:	4620      	mov	r0, r4
 800a148:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800a14c:	4798      	blx	r3
 800a14e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a150:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a154:	4431      	add	r1, r6
 800a156:	4620      	mov	r0, r4
 800a158:	b2c9      	uxtb	r1, r1
 800a15a:	4798      	blx	r3
 800a15c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a15e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a162:	4429      	add	r1, r5
 800a164:	4620      	mov	r0, r4
 800a166:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800a16a:	4798      	blx	r3
 800a16c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a16e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a172:	4429      	add	r1, r5
 800a174:	4620      	mov	r0, r4
 800a176:	b2c9      	uxtb	r1, r1
 800a178:	4798      	blx	r3
 800a17a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a17e:	4620      	mov	r0, r4
 800a180:	212c      	movs	r1, #44	; 0x2c
 800a182:	4798      	blx	r3
 800a184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a188 <_SetOrientation>:
 800a188:	b513      	push	{r0, r1, r4, lr}
 800a18a:	4a0d      	ldr	r2, [pc, #52]	; (800a1c0 <_SetOrientation+0x38>)
 800a18c:	4604      	mov	r4, r0
 800a18e:	6851      	ldr	r1, [r2, #4]
 800a190:	6810      	ldr	r0, [r2, #0]
 800a192:	466b      	mov	r3, sp
 800a194:	c303      	stmia	r3!, {r0, r1}
 800a196:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a19a:	4620      	mov	r0, r4
 800a19c:	2136      	movs	r1, #54	; 0x36
 800a19e:	4798      	blx	r3
 800a1a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1a2:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800a1a4:	aa02      	add	r2, sp, #8
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800a1ac:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800a1b0:	4319      	orrs	r1, r3
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a1b8:	b289      	uxth	r1, r1
 800a1ba:	4798      	blx	r3
 800a1bc:	b002      	add	sp, #8
 800a1be:	bd10      	pop	{r4, pc}
 800a1c0:	08012a08 	.word	0x08012a08

0800a1c4 <_ReadPixel_16bpp_B8>:
 800a1c4:	b513      	push	{r0, r1, r4, lr}
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800a1cc:	202e      	movs	r0, #46	; 0x2e
 800a1ce:	4798      	blx	r3
 800a1d0:	6a21      	ldr	r1, [r4, #32]
 800a1d2:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800a1d6:	4668      	mov	r0, sp
 800a1d8:	3103      	adds	r1, #3
 800a1da:	4798      	blx	r3
 800a1dc:	6a22      	ldr	r2, [r4, #32]
 800a1de:	ab00      	add	r3, sp, #0
 800a1e0:	4413      	add	r3, r2
 800a1e2:	f81d 2002 	ldrb.w	r2, [sp, r2]
 800a1e6:	7859      	ldrb	r1, [r3, #1]
 800a1e8:	7898      	ldrb	r0, [r3, #2]
 800a1ea:	08d2      	lsrs	r2, r2, #3
 800a1ec:	0889      	lsrs	r1, r1, #2
 800a1ee:	02d2      	lsls	r2, r2, #11
 800a1f0:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 800a1f4:	ea42 00d0 	orr.w	r0, r2, r0, lsr #3
 800a1f8:	b002      	add	sp, #8
 800a1fa:	bd10      	pop	{r4, pc}

0800a1fc <_ReadPixel_16bpp_B16_I>:
 800a1fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1fe:	4604      	mov	r4, r0
 800a200:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800a204:	202e      	movs	r0, #46	; 0x2e
 800a206:	4798      	blx	r3
 800a208:	6a21      	ldr	r1, [r4, #32]
 800a20a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a20e:	4668      	mov	r0, sp
 800a210:	3102      	adds	r1, #2
 800a212:	4798      	blx	r3
 800a214:	6a23      	ldr	r3, [r4, #32]
 800a216:	a900      	add	r1, sp, #0
 800a218:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 800a21c:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 800a220:	8852      	ldrh	r2, [r2, #2]
 800a222:	f402 417c 	and.w	r1, r2, #64512	; 0xfc00
 800a226:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800a22a:	ea42 1251 	orr.w	r2, r2, r1, lsr #5
 800a22e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800a232:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800a236:	b004      	add	sp, #16
 800a238:	bd10      	pop	{r4, pc}

0800a23a <_SetReg_B8>:
 800a23a:	b538      	push	{r3, r4, r5, lr}
 800a23c:	4604      	mov	r4, r0
 800a23e:	460d      	mov	r5, r1
 800a240:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800a244:	0a08      	lsrs	r0, r1, #8
 800a246:	4798      	blx	r3
 800a248:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800a24c:	b2e8      	uxtb	r0, r5
 800a24e:	4798      	blx	r3
 800a250:	bd38      	pop	{r3, r4, r5, pc}

0800a252 <_SetReg_B16>:
 800a252:	b508      	push	{r3, lr}
 800a254:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800a258:	4608      	mov	r0, r1
 800a25a:	4798      	blx	r3
 800a25c:	bd08      	pop	{r3, pc}

0800a25e <_WritePara_B8>:
 800a25e:	b508      	push	{r3, lr}
 800a260:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 800a264:	b2c8      	uxtb	r0, r1
 800a266:	4798      	blx	r3
 800a268:	bd08      	pop	{r3, pc}

0800a26a <_WritePara_B16>:
 800a26a:	b508      	push	{r3, lr}
 800a26c:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 800a270:	4608      	mov	r0, r1
 800a272:	4798      	blx	r3
 800a274:	bd08      	pop	{r3, pc}
	...

0800a278 <_SetInterface>:
 800a278:	2908      	cmp	r1, #8
 800a27a:	d002      	beq.n	800a282 <_SetInterface+0xa>
 800a27c:	2910      	cmp	r1, #16
 800a27e:	d005      	beq.n	800a28c <_SetInterface+0x14>
 800a280:	4770      	bx	lr
 800a282:	4b06      	ldr	r3, [pc, #24]	; (800a29c <_SetInterface+0x24>)
 800a284:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800a288:	4b05      	ldr	r3, [pc, #20]	; (800a2a0 <_SetInterface+0x28>)
 800a28a:	e003      	b.n	800a294 <_SetInterface+0x1c>
 800a28c:	4b05      	ldr	r3, [pc, #20]	; (800a2a4 <_SetInterface+0x2c>)
 800a28e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800a292:	4b05      	ldr	r3, [pc, #20]	; (800a2a8 <_SetInterface+0x30>)
 800a294:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	0800a23b 	.word	0x0800a23b
 800a2a0:	0800a25f 	.word	0x0800a25f
 800a2a4:	0800a253 	.word	0x0800a253
 800a2a8:	0800a26b 	.word	0x0800a26b

0800a2ac <_ReadRect_16bpp_B8>:
 800a2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	6884      	ldr	r4, [r0, #8]
 800a2b2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a2b4:	9700      	str	r7, [sp, #0]
 800a2b6:	1abd      	subs	r5, r7, r2
 800a2b8:	1a58      	subs	r0, r3, r1
 800a2ba:	3501      	adds	r5, #1
 800a2bc:	fb00 5505 	mla	r5, r0, r5, r5
 800a2c0:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800a2c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	47b8      	blx	r7
 800a2ca:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800a2ce:	202e      	movs	r0, #46	; 0x2e
 800a2d0:	4798      	blx	r3
 800a2d2:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800a2d6:	6a21      	ldr	r1, [r4, #32]
 800a2d8:	a802      	add	r0, sp, #8
 800a2da:	4798      	blx	r3
 800a2dc:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800a2e0:	a802      	add	r0, sp, #8
 800a2e2:	2103      	movs	r1, #3
 800a2e4:	4798      	blx	r3
 800a2e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a2ea:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800a2ee:	08db      	lsrs	r3, r3, #3
 800a2f0:	0892      	lsrs	r2, r2, #2
 800a2f2:	02db      	lsls	r3, r3, #11
 800a2f4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800a2f8:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800a2fc:	3d01      	subs	r5, #1
 800a2fe:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 800a302:	f826 3b02 	strh.w	r3, [r6], #2
 800a306:	d1e9      	bne.n	800a2dc <_ReadRect_16bpp_B8+0x30>
 800a308:	b005      	add	sp, #20
 800a30a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a30c <_ReadRect_16bpp_B16_I>:
 800a30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a30e:	b087      	sub	sp, #28
 800a310:	6884      	ldr	r4, [r0, #8]
 800a312:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800a314:	9700      	str	r7, [sp, #0]
 800a316:	1abd      	subs	r5, r7, r2
 800a318:	1a58      	subs	r0, r3, r1
 800a31a:	3501      	adds	r5, #1
 800a31c:	fb00 5505 	mla	r5, r0, r5, r5
 800a320:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800a324:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a326:	4620      	mov	r0, r4
 800a328:	47b8      	blx	r7
 800a32a:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 800a32e:	202e      	movs	r0, #46	; 0x2e
 800a330:	4798      	blx	r3
 800a332:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a336:	6a21      	ldr	r1, [r4, #32]
 800a338:	a802      	add	r0, sp, #8
 800a33a:	4798      	blx	r3
 800a33c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a340:	a802      	add	r0, sp, #8
 800a342:	2102      	movs	r1, #2
 800a344:	4798      	blx	r3
 800a346:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800a34a:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 800a34e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800a352:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 800a356:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800a35a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 800a35e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a362:	3d01      	subs	r5, #1
 800a364:	f826 3b02 	strh.w	r3, [r6], #2
 800a368:	d1e8      	bne.n	800a33c <_ReadRect_16bpp_B16_I+0x30>
 800a36a:	b007      	add	sp, #28
 800a36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a370 <GUIDRV_FlexColor_SetFunc66709>:
 800a370:	b510      	push	{r4, lr}
 800a372:	4604      	mov	r4, r0
 800a374:	f000 fde2 	bl	800af3c <GUIDRV_FlexColor__InitOnce>
 800a378:	68a3      	ldr	r3, [r4, #8]
 800a37a:	4a12      	ldr	r2, [pc, #72]	; (800a3c4 <GUIDRV_FlexColor_SetFunc66709+0x54>)
 800a37c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800a380:	4a11      	ldr	r2, [pc, #68]	; (800a3c8 <GUIDRV_FlexColor_SetFunc66709+0x58>)
 800a382:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800a386:	4a11      	ldr	r2, [pc, #68]	; (800a3cc <GUIDRV_FlexColor_SetFunc66709+0x5c>)
 800a388:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800a38c:	4a10      	ldr	r2, [pc, #64]	; (800a3d0 <GUIDRV_FlexColor_SetFunc66709+0x60>)
 800a38e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800a392:	2200      	movs	r2, #0
 800a394:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800a398:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800a39c:	4a0d      	ldr	r2, [pc, #52]	; (800a3d4 <GUIDRV_FlexColor_SetFunc66709+0x64>)
 800a39e:	490e      	ldr	r1, [pc, #56]	; (800a3d8 <GUIDRV_FlexColor_SetFunc66709+0x68>)
 800a3a0:	6812      	ldr	r2, [r2, #0]
 800a3a2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800a3a6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800a3a8:	6809      	ldr	r1, [r1, #0]
 800a3aa:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 800a3ae:	f022 0203 	bic.w	r2, r2, #3
 800a3b2:	490a      	ldr	r1, [pc, #40]	; (800a3dc <GUIDRV_FlexColor_SetFunc66709+0x6c>)
 800a3b4:	84da      	strh	r2, [r3, #38]	; 0x26
 800a3b6:	4a0a      	ldr	r2, [pc, #40]	; (800a3e0 <GUIDRV_FlexColor_SetFunc66709+0x70>)
 800a3b8:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 800a3bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800a3c0:	bd10      	pop	{r4, pc}
 800a3c2:	bf00      	nop
 800a3c4:	0800a041 	.word	0x0800a041
 800a3c8:	0800a0e3 	.word	0x0800a0e3
 800a3cc:	0800a189 	.word	0x0800a189
 800a3d0:	0800a1c5 	.word	0x0800a1c5
 800a3d4:	20000068 	.word	0x20000068
 800a3d8:	20000064 	.word	0x20000064
 800a3dc:	0800a2ad 	.word	0x0800a2ad
 800a3e0:	0800a279 	.word	0x0800a279

0800a3e4 <_WriteU16_A1>:
 800a3e4:	b508      	push	{r3, lr}
 800a3e6:	0a0b      	lsrs	r3, r1, #8
 800a3e8:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 800a3ec:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
 800a3f0:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 800a3f4:	2102      	movs	r1, #2
 800a3f6:	3071      	adds	r0, #113	; 0x71
 800a3f8:	4798      	blx	r3
 800a3fa:	bd08      	pop	{r3, pc}

0800a3fc <_WriteDataMP>:
 800a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fe:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800a400:	4604      	mov	r4, r0
 800a402:	460f      	mov	r7, r1
 800a404:	4615      	mov	r5, r2
 800a406:	2300      	movs	r3, #0
 800a408:	b1a5      	cbz	r5, 800a434 <_WriteDataMP+0x38>
 800a40a:	f837 2b02 	ldrh.w	r2, [r7], #2
 800a40e:	4630      	mov	r0, r6
 800a410:	3301      	adds	r3, #1
 800a412:	0a11      	lsrs	r1, r2, #8
 800a414:	2bfa      	cmp	r3, #250	; 0xfa
 800a416:	f800 1b02 	strb.w	r1, [r0], #2
 800a41a:	7072      	strb	r2, [r6, #1]
 800a41c:	d107      	bne.n	800a42e <_WriteDataMP+0x32>
 800a41e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a422:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a424:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a428:	4798      	blx	r3
 800a42a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a42c:	2300      	movs	r3, #0
 800a42e:	3d01      	subs	r5, #1
 800a430:	4606      	mov	r6, r0
 800a432:	e7e9      	b.n	800a408 <_WriteDataMP+0xc>
 800a434:	b123      	cbz	r3, 800a440 <_WriteDataMP+0x44>
 800a436:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a43a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a43c:	0059      	lsls	r1, r3, #1
 800a43e:	4790      	blx	r2
 800a440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a442 <_ReadData>:
 800a442:	b508      	push	{r3, lr}
 800a444:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 800a448:	4798      	blx	r3
 800a44a:	bd08      	pop	{r3, pc}

0800a44c <_WriteData>:
 800a44c:	b289      	uxth	r1, r1
 800a44e:	f7ff bfc9 	b.w	800a3e4 <_WriteU16_A1>
	...

0800a454 <_FillRect>:
 800a454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a458:	4f40      	ldr	r7, [pc, #256]	; (800a55c <_FillRect+0x108>)
 800a45a:	6884      	ldr	r4, [r0, #8]
 800a45c:	4682      	mov	sl, r0
 800a45e:	6838      	ldr	r0, [r7, #0]
 800a460:	7c00      	ldrb	r0, [r0, #16]
 800a462:	f010 0f01 	tst.w	r0, #1
 800a466:	b085      	sub	sp, #20
 800a468:	460e      	mov	r6, r1
 800a46a:	4615      	mov	r5, r2
 800a46c:	4698      	mov	r8, r3
 800a46e:	ebc1 0903 	rsb	r9, r1, r3
 800a472:	d045      	beq.n	800a500 <_FillRect+0xac>
 800a474:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 800a478:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a47a:	4285      	cmp	r5, r0
 800a47c:	dc6b      	bgt.n	800a556 <_FillRect+0x102>
 800a47e:	f8d4 c0cc 	ldr.w	ip, [r4, #204]	; 0xcc
 800a482:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800a484:	f1bc 0f00 	cmp.w	ip, #0
 800a488:	d101      	bne.n	800a48e <_FillRect+0x3a>
 800a48a:	46b4      	mov	ip, r6
 800a48c:	e007      	b.n	800a49e <_FillRect+0x4a>
 800a48e:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800a492:	4650      	mov	r0, sl
 800a494:	4631      	mov	r1, r6
 800a496:	462a      	mov	r2, r5
 800a498:	4643      	mov	r3, r8
 800a49a:	47e0      	blx	ip
 800a49c:	e011      	b.n	800a4c2 <_FillRect+0x6e>
 800a49e:	45c4      	cmp	ip, r8
 800a4a0:	dc0e      	bgt.n	800a4c0 <_FillRect+0x6c>
 800a4a2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800a4a6:	f8cd c00c 	str.w	ip, [sp, #12]
 800a4aa:	4661      	mov	r1, ip
 800a4ac:	4650      	mov	r0, sl
 800a4ae:	462a      	mov	r2, r5
 800a4b0:	4798      	blx	r3
 800a4b2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a4b6:	f827 0b02 	strh.w	r0, [r7], #2
 800a4ba:	f10c 0c01 	add.w	ip, ip, #1
 800a4be:	e7ee      	b.n	800a49e <_FillRect+0x4a>
 800a4c0:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800a4c2:	1ebb      	subs	r3, r7, #2
 800a4c4:	f109 0c01 	add.w	ip, r9, #1
 800a4c8:	445f      	add	r7, fp
 800a4ca:	42bb      	cmp	r3, r7
 800a4cc:	d005      	beq.n	800a4da <_FillRect+0x86>
 800a4ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a4d0:	8859      	ldrh	r1, [r3, #2]
 800a4d2:	404a      	eors	r2, r1
 800a4d4:	f823 2f02 	strh.w	r2, [r3, #2]!
 800a4d8:	e7f7      	b.n	800a4ca <_FillRect+0x76>
 800a4da:	9500      	str	r5, [sp, #0]
 800a4dc:	462a      	mov	r2, r5
 800a4de:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800a4e2:	f8cd c00c 	str.w	ip, [sp, #12]
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	4643      	mov	r3, r8
 800a4ec:	47b8      	blx	r7
 800a4ee:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a4f2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	4662      	mov	r2, ip
 800a4f8:	f7ff ff80 	bl	800a3fc <_WriteDataMP>
 800a4fc:	3501      	adds	r5, #1
 800a4fe:	e7bb      	b.n	800a478 <_FillRect+0x24>
 800a500:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a502:	9000      	str	r0, [sp, #0]
 800a504:	1a85      	subs	r5, r0, r2
 800a506:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800a50a:	4620      	mov	r0, r4
 800a50c:	47b0      	blx	r6
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 800a512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f109 0901 	add.w	r9, r9, #1
 800a51a:	fb05 9509 	mla	r5, r5, r9, r9
 800a51e:	f3c3 2807 	ubfx	r8, r3, #8, #8
 800a522:	fa5f f983 	uxtb.w	r9, r3
 800a526:	2301      	movs	r3, #1
 800a528:	b1ad      	cbz	r5, 800a556 <_FillRect+0x102>
 800a52a:	2df9      	cmp	r5, #249	; 0xf9
 800a52c:	bf34      	ite	cc
 800a52e:	462f      	movcc	r7, r5
 800a530:	27f9      	movcs	r7, #249	; 0xf9
 800a532:	0079      	lsls	r1, r7, #1
 800a534:	b143      	cbz	r3, 800a548 <_FillRect+0xf4>
 800a536:	4633      	mov	r3, r6
 800a538:	1872      	adds	r2, r6, r1
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d004      	beq.n	800a548 <_FillRect+0xf4>
 800a53e:	f883 8001 	strb.w	r8, [r3, #1]
 800a542:	f803 9f02 	strb.w	r9, [r3, #2]!
 800a546:	e7f8      	b.n	800a53a <_FillRect+0xe6>
 800a548:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a54c:	1c70      	adds	r0, r6, #1
 800a54e:	4790      	blx	r2
 800a550:	1bed      	subs	r5, r5, r7
 800a552:	2300      	movs	r3, #0
 800a554:	e7e8      	b.n	800a528 <_FillRect+0xd4>
 800a556:	b005      	add	sp, #20
 800a558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55c:	20000084 	.word	0x20000084

0800a560 <_DrawBitmap>:
 800a560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a564:	b08d      	sub	sp, #52	; 0x34
 800a566:	6885      	ldr	r5, [r0, #8]
 800a568:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800a56a:	9305      	str	r3, [sp, #20]
 800a56c:	1e7b      	subs	r3, r7, #1
 800a56e:	2b01      	cmp	r3, #1
 800a570:	9009      	str	r0, [sp, #36]	; 0x24
 800a572:	9108      	str	r1, [sp, #32]
 800a574:	920a      	str	r2, [sp, #40]	; 0x28
 800a576:	950b      	str	r5, [sp, #44]	; 0x2c
 800a578:	d903      	bls.n	800a582 <_DrawBitmap+0x22>
 800a57a:	2f04      	cmp	r7, #4
 800a57c:	d001      	beq.n	800a582 <_DrawBitmap+0x22>
 800a57e:	2f08      	cmp	r7, #8
 800a580:	d106      	bne.n	800a590 <_DrawBitmap+0x30>
 800a582:	4b91      	ldr	r3, [pc, #580]	; (800a7c8 <_DrawBitmap+0x268>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	7c1b      	ldrb	r3, [r3, #16]
 800a588:	f003 0303 	and.w	r3, r3, #3
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d010      	beq.n	800a5b2 <_DrawBitmap+0x52>
 800a590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a592:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800a594:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a596:	9908      	ldr	r1, [sp, #32]
 800a598:	9b05      	ldr	r3, [sp, #20]
 800a59a:	443a      	add	r2, r7
 800a59c:	4429      	add	r1, r5
 800a59e:	3a01      	subs	r2, #1
 800a5a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a5a2:	9200      	str	r2, [sp, #0]
 800a5a4:	440b      	add	r3, r1
 800a5a6:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 800a5aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	47a0      	blx	r4
 800a5b2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a5b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a5b8:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800a5ba:	ebc5 030b 	rsb	r3, r5, fp
 800a5be:	42bb      	cmp	r3, r7
 800a5c0:	f280 8253 	bge.w	800aa6a <_DrawBitmap+0x50a>
 800a5c4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800a5c6:	1e7b      	subs	r3, r7, #1
 800a5c8:	2b0f      	cmp	r3, #15
 800a5ca:	f200 8247 	bhi.w	800aa5c <_DrawBitmap+0x4fc>
 800a5ce:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a5d2:	0010      	.short	0x0010
 800a5d4:	024500bb 	.word	0x024500bb
 800a5d8:	02450144 	.word	0x02450144
 800a5dc:	02450245 	.word	0x02450245
 800a5e0:	024501db 	.word	0x024501db
 800a5e4:	02450245 	.word	0x02450245
 800a5e8:	02450245 	.word	0x02450245
 800a5ec:	02450245 	.word	0x02450245
 800a5f0:	0240      	.short	0x0240
 800a5f2:	4b75      	ldr	r3, [pc, #468]	; (800a7c8 <_DrawBitmap+0x268>)
 800a5f4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a5f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68ac      	ldr	r4, [r5, #8]
 800a5fc:	7c1b      	ldrb	r3, [r3, #16]
 800a5fe:	687d      	ldr	r5, [r7, #4]
 800a600:	683e      	ldr	r6, [r7, #0]
 800a602:	9507      	str	r5, [sp, #28]
 800a604:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a606:	9d08      	ldr	r5, [sp, #32]
 800a608:	f003 0303 	and.w	r3, r3, #3
 800a60c:	443d      	add	r5, r7
 800a60e:	2b02      	cmp	r3, #2
 800a610:	9503      	str	r5, [sp, #12]
 800a612:	d01c      	beq.n	800a64e <_DrawBitmap+0xee>
 800a614:	2b03      	cmp	r3, #3
 800a616:	d071      	beq.n	800a6fc <_DrawBitmap+0x19c>
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d06f      	beq.n	800a6fc <_DrawBitmap+0x19c>
 800a61c:	9f05      	ldr	r7, [sp, #20]
 800a61e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a620:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 800a624:	f898 2000 	ldrb.w	r2, [r8]
 800a628:	2380      	movs	r3, #128	; 0x80
 800a62a:	412b      	asrs	r3, r5
 800a62c:	421a      	tst	r2, r3
 800a62e:	bf16      	itet	ne
 800a630:	9807      	ldrne	r0, [sp, #28]
 800a632:	b2b1      	uxtheq	r1, r6
 800a634:	b281      	uxthne	r1, r0
 800a636:	3501      	adds	r5, #1
 800a638:	4620      	mov	r0, r4
 800a63a:	f7ff fed3 	bl	800a3e4 <_WriteU16_A1>
 800a63e:	2d08      	cmp	r5, #8
 800a640:	bf04      	itt	eq
 800a642:	f108 0801 	addeq.w	r8, r8, #1
 800a646:	2500      	moveq	r5, #0
 800a648:	3f01      	subs	r7, #1
 800a64a:	d1eb      	bne.n	800a624 <_DrawBitmap+0xc4>
 800a64c:	e206      	b.n	800aa5c <_DrawBitmap+0x4fc>
 800a64e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a650:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800a654:	9506      	str	r5, [sp, #24]
 800a656:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800a65a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a65e:	2500      	movs	r5, #0
 800a660:	4656      	mov	r6, sl
 800a662:	462b      	mov	r3, r5
 800a664:	9f06      	ldr	r7, [sp, #24]
 800a666:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800a66a:	783a      	ldrb	r2, [r7, #0]
 800a66c:	fa4c fc08 	asr.w	ip, ip, r8
 800a670:	ea12 0c0c 	ands.w	ip, r2, ip
 800a674:	d00b      	beq.n	800a68e <_DrawBitmap+0x12e>
 800a676:	b913      	cbnz	r3, 800a67e <_DrawBitmap+0x11e>
 800a678:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800a67c:	46b2      	mov	sl, r6
 800a67e:	9f07      	ldr	r7, [sp, #28]
 800a680:	f8a9 7000 	strh.w	r7, [r9]
 800a684:	3501      	adds	r5, #1
 800a686:	f109 0902 	add.w	r9, r9, #2
 800a68a:	2301      	movs	r3, #1
 800a68c:	e017      	b.n	800a6be <_DrawBitmap+0x15e>
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d114      	bne.n	800a6bc <_DrawBitmap+0x15c>
 800a692:	f8cd b000 	str.w	fp, [sp]
 800a696:	1e73      	subs	r3, r6, #1
 800a698:	f8cd c010 	str.w	ip, [sp, #16]
 800a69c:	4620      	mov	r0, r4
 800a69e:	4651      	mov	r1, sl
 800a6a0:	465a      	mov	r2, fp
 800a6a2:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800a6a6:	47b8      	blx	r7
 800a6a8:	462a      	mov	r2, r5
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a6ae:	f7ff fea5 	bl	800a3fc <_WriteDataMP>
 800a6b2:	f8dd c010 	ldr.w	ip, [sp, #16]
 800a6b6:	4665      	mov	r5, ip
 800a6b8:	4663      	mov	r3, ip
 800a6ba:	e000      	b.n	800a6be <_DrawBitmap+0x15e>
 800a6bc:	4663      	mov	r3, ip
 800a6be:	f108 0801 	add.w	r8, r8, #1
 800a6c2:	f1b8 0f08 	cmp.w	r8, #8
 800a6c6:	f106 0601 	add.w	r6, r6, #1
 800a6ca:	d104      	bne.n	800a6d6 <_DrawBitmap+0x176>
 800a6cc:	9f06      	ldr	r7, [sp, #24]
 800a6ce:	3701      	adds	r7, #1
 800a6d0:	9706      	str	r7, [sp, #24]
 800a6d2:	f04f 0800 	mov.w	r8, #0
 800a6d6:	9a05      	ldr	r2, [sp, #20]
 800a6d8:	9f03      	ldr	r7, [sp, #12]
 800a6da:	443a      	add	r2, r7
 800a6dc:	42b2      	cmp	r2, r6
 800a6de:	d1c1      	bne.n	800a664 <_DrawBitmap+0x104>
 800a6e0:	9f05      	ldr	r7, [sp, #20]
 800a6e2:	1e7b      	subs	r3, r7, #1
 800a6e4:	9f03      	ldr	r7, [sp, #12]
 800a6e6:	443b      	add	r3, r7
 800a6e8:	2d00      	cmp	r5, #0
 800a6ea:	f000 81b7 	beq.w	800aa5c <_DrawBitmap+0x4fc>
 800a6ee:	f8cd b000 	str.w	fp, [sp]
 800a6f2:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	4651      	mov	r1, sl
 800a6fa:	e13f      	b.n	800a97c <_DrawBitmap+0x41c>
 800a6fc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a700:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a702:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a704:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a708:	9f03      	ldr	r7, [sp, #12]
 800a70a:	782a      	ldrb	r2, [r5, #0]
 800a70c:	2380      	movs	r3, #128	; 0x80
 800a70e:	4133      	asrs	r3, r6
 800a710:	44b9      	add	r9, r7
 800a712:	421a      	tst	r2, r3
 800a714:	ebc8 0909 	rsb	r9, r8, r9
 800a718:	d00d      	beq.n	800a736 <_DrawBitmap+0x1d6>
 800a71a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800a71e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a720:	4649      	mov	r1, r9
 800a722:	465a      	mov	r2, fp
 800a724:	4798      	blx	r3
 800a726:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a728:	f8d4 70f8 	ldr.w	r7, [r4, #248]	; 0xf8
 800a72c:	4043      	eors	r3, r0
 800a72e:	4649      	mov	r1, r9
 800a730:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a732:	465a      	mov	r2, fp
 800a734:	47b8      	blx	r7
 800a736:	3601      	adds	r6, #1
 800a738:	2e08      	cmp	r6, #8
 800a73a:	bf04      	itt	eq
 800a73c:	3501      	addeq	r5, #1
 800a73e:	2600      	moveq	r6, #0
 800a740:	f1b8 0801 	subs.w	r8, r8, #1
 800a744:	d1de      	bne.n	800a704 <_DrawBitmap+0x1a4>
 800a746:	e189      	b.n	800aa5c <_DrawBitmap+0x4fc>
 800a748:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a74a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a74c:	68ac      	ldr	r4, [r5, #8]
 800a74e:	2f00      	cmp	r7, #0
 800a750:	f000 8184 	beq.w	800aa5c <_DrawBitmap+0x4fc>
 800a754:	4b1c      	ldr	r3, [pc, #112]	; (800a7c8 <_DrawBitmap+0x268>)
 800a756:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f895 a000 	ldrb.w	sl, [r5]
 800a75e:	7c1b      	ldrb	r3, [r3, #16]
 800a760:	f013 0303 	ands.w	r3, r3, #3
 800a764:	d011      	beq.n	800a78a <_DrawBitmap+0x22a>
 800a766:	2b02      	cmp	r3, #2
 800a768:	f040 8178 	bne.w	800aa5c <_DrawBitmap+0x4fc>
 800a76c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a76e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a772:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800a774:	9703      	str	r7, [sp, #12]
 800a776:	44a9      	add	r9, r5
 800a778:	46a8      	mov	r8, r5
 800a77a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a77c:	9507      	str	r5, [sp, #28]
 800a77e:	2500      	movs	r5, #0
 800a780:	f8cd 9018 	str.w	r9, [sp, #24]
 800a784:	464e      	mov	r6, r9
 800a786:	462b      	mov	r3, r5
 800a788:	e040      	b.n	800a80c <_DrawBitmap+0x2ac>
 800a78a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a78c:	9e05      	ldr	r6, [sp, #20]
 800a78e:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800a790:	f1c5 0303 	rsb	r3, r5, #3
 800a794:	005b      	lsls	r3, r3, #1
 800a796:	f1c3 0206 	rsb	r2, r3, #6
 800a79a:	21c0      	movs	r1, #192	; 0xc0
 800a79c:	fa41 f202 	asr.w	r2, r1, r2
 800a7a0:	ea02 020a 	and.w	r2, r2, sl
 800a7a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800a7b0:	3501      	adds	r5, #1
 800a7b2:	f7ff fe17 	bl	800a3e4 <_WriteU16_A1>
 800a7b6:	2d04      	cmp	r5, #4
 800a7b8:	d103      	bne.n	800a7c2 <_DrawBitmap+0x262>
 800a7ba:	f897 a001 	ldrb.w	sl, [r7, #1]
 800a7be:	2500      	movs	r5, #0
 800a7c0:	3701      	adds	r7, #1
 800a7c2:	3e01      	subs	r6, #1
 800a7c4:	d1e4      	bne.n	800a790 <_DrawBitmap+0x230>
 800a7c6:	e149      	b.n	800aa5c <_DrawBitmap+0x4fc>
 800a7c8:	20000084 	.word	0x20000084
 800a7cc:	b913      	cbnz	r3, 800a7d4 <_DrawBitmap+0x274>
 800a7ce:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800a7d0:	9703      	str	r7, [sp, #12]
 800a7d2:	9606      	str	r6, [sp, #24]
 800a7d4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a7d6:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800a7da:	9f03      	ldr	r7, [sp, #12]
 800a7dc:	803b      	strh	r3, [r7, #0]
 800a7de:	3702      	adds	r7, #2
 800a7e0:	3501      	adds	r5, #1
 800a7e2:	9703      	str	r7, [sp, #12]
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	f108 0801 	add.w	r8, r8, #1
 800a7ea:	f1b8 0f04 	cmp.w	r8, #4
 800a7ee:	f106 0601 	add.w	r6, r6, #1
 800a7f2:	d106      	bne.n	800a802 <_DrawBitmap+0x2a2>
 800a7f4:	9f07      	ldr	r7, [sp, #28]
 800a7f6:	f897 a001 	ldrb.w	sl, [r7, #1]
 800a7fa:	3701      	adds	r7, #1
 800a7fc:	9707      	str	r7, [sp, #28]
 800a7fe:	f04f 0800 	mov.w	r8, #0
 800a802:	9a05      	ldr	r2, [sp, #20]
 800a804:	444a      	add	r2, r9
 800a806:	42b2      	cmp	r2, r6
 800a808:	f000 80ad 	beq.w	800a966 <_DrawBitmap+0x406>
 800a80c:	f1c8 0203 	rsb	r2, r8, #3
 800a810:	0052      	lsls	r2, r2, #1
 800a812:	f1c2 0106 	rsb	r1, r2, #6
 800a816:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 800a81a:	fa4c fc01 	asr.w	ip, ip, r1
 800a81e:	ea0c 0c0a 	and.w	ip, ip, sl
 800a822:	fa3c fc02 	lsrs.w	ip, ip, r2
 800a826:	d1d1      	bne.n	800a7cc <_DrawBitmap+0x26c>
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d114      	bne.n	800a856 <_DrawBitmap+0x2f6>
 800a82c:	f8cd b000 	str.w	fp, [sp]
 800a830:	1e73      	subs	r3, r6, #1
 800a832:	f8cd c010 	str.w	ip, [sp, #16]
 800a836:	4620      	mov	r0, r4
 800a838:	9906      	ldr	r1, [sp, #24]
 800a83a:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800a83e:	465a      	mov	r2, fp
 800a840:	47b8      	blx	r7
 800a842:	462a      	mov	r2, r5
 800a844:	4620      	mov	r0, r4
 800a846:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a848:	f7ff fdd8 	bl	800a3fc <_WriteDataMP>
 800a84c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800a850:	4665      	mov	r5, ip
 800a852:	4663      	mov	r3, ip
 800a854:	e7c7      	b.n	800a7e6 <_DrawBitmap+0x286>
 800a856:	4663      	mov	r3, ip
 800a858:	e7c5      	b.n	800a7e6 <_DrawBitmap+0x286>
 800a85a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a85c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a85e:	68ac      	ldr	r4, [r5, #8]
 800a860:	2f00      	cmp	r7, #0
 800a862:	f000 80fb 	beq.w	800aa5c <_DrawBitmap+0x4fc>
 800a866:	4b82      	ldr	r3, [pc, #520]	; (800aa70 <_DrawBitmap+0x510>)
 800a868:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f895 a000 	ldrb.w	sl, [r5]
 800a870:	7c1b      	ldrb	r3, [r3, #16]
 800a872:	f013 0303 	ands.w	r3, r3, #3
 800a876:	d011      	beq.n	800a89c <_DrawBitmap+0x33c>
 800a878:	2b02      	cmp	r3, #2
 800a87a:	f040 80ef 	bne.w	800aa5c <_DrawBitmap+0x4fc>
 800a87e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a880:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a884:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800a886:	9703      	str	r7, [sp, #12]
 800a888:	44a9      	add	r9, r5
 800a88a:	46a8      	mov	r8, r5
 800a88c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a88e:	9507      	str	r5, [sp, #28]
 800a890:	2500      	movs	r5, #0
 800a892:	f8cd 9018 	str.w	r9, [sp, #24]
 800a896:	464e      	mov	r6, r9
 800a898:	462b      	mov	r3, r5
 800a89a:	e03d      	b.n	800a918 <_DrawBitmap+0x3b8>
 800a89c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a89e:	9e05      	ldr	r6, [sp, #20]
 800a8a0:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800a8a2:	f1c5 0301 	rsb	r3, r5, #1
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	f1c3 0204 	rsb	r2, r3, #4
 800a8ac:	21f0      	movs	r1, #240	; 0xf0
 800a8ae:	fa41 f202 	asr.w	r2, r1, r2
 800a8b2:	ea02 020a 	and.w	r2, r2, sl
 800a8b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800a8c2:	3501      	adds	r5, #1
 800a8c4:	f7ff fd8e 	bl	800a3e4 <_WriteU16_A1>
 800a8c8:	2d02      	cmp	r5, #2
 800a8ca:	d103      	bne.n	800a8d4 <_DrawBitmap+0x374>
 800a8cc:	f897 a001 	ldrb.w	sl, [r7, #1]
 800a8d0:	2500      	movs	r5, #0
 800a8d2:	3701      	adds	r7, #1
 800a8d4:	3e01      	subs	r6, #1
 800a8d6:	d1e4      	bne.n	800a8a2 <_DrawBitmap+0x342>
 800a8d8:	e0c0      	b.n	800aa5c <_DrawBitmap+0x4fc>
 800a8da:	b913      	cbnz	r3, 800a8e2 <_DrawBitmap+0x382>
 800a8dc:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800a8de:	9703      	str	r7, [sp, #12]
 800a8e0:	9606      	str	r6, [sp, #24]
 800a8e2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a8e4:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800a8e8:	9f03      	ldr	r7, [sp, #12]
 800a8ea:	803b      	strh	r3, [r7, #0]
 800a8ec:	3702      	adds	r7, #2
 800a8ee:	3501      	adds	r5, #1
 800a8f0:	9703      	str	r7, [sp, #12]
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	f108 0801 	add.w	r8, r8, #1
 800a8f8:	f1b8 0f02 	cmp.w	r8, #2
 800a8fc:	f106 0601 	add.w	r6, r6, #1
 800a900:	d106      	bne.n	800a910 <_DrawBitmap+0x3b0>
 800a902:	9f07      	ldr	r7, [sp, #28]
 800a904:	f897 a001 	ldrb.w	sl, [r7, #1]
 800a908:	3701      	adds	r7, #1
 800a90a:	9707      	str	r7, [sp, #28]
 800a90c:	f04f 0800 	mov.w	r8, #0
 800a910:	9a05      	ldr	r2, [sp, #20]
 800a912:	444a      	add	r2, r9
 800a914:	42b2      	cmp	r2, r6
 800a916:	d026      	beq.n	800a966 <_DrawBitmap+0x406>
 800a918:	f1c8 0201 	rsb	r2, r8, #1
 800a91c:	0092      	lsls	r2, r2, #2
 800a91e:	f1c2 0104 	rsb	r1, r2, #4
 800a922:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800a926:	fa4c fc01 	asr.w	ip, ip, r1
 800a92a:	ea0c 0c0a 	and.w	ip, ip, sl
 800a92e:	fa3c fc02 	lsrs.w	ip, ip, r2
 800a932:	d1d2      	bne.n	800a8da <_DrawBitmap+0x37a>
 800a934:	2b01      	cmp	r3, #1
 800a936:	d114      	bne.n	800a962 <_DrawBitmap+0x402>
 800a938:	f8cd b000 	str.w	fp, [sp]
 800a93c:	1e73      	subs	r3, r6, #1
 800a93e:	f8cd c010 	str.w	ip, [sp, #16]
 800a942:	4620      	mov	r0, r4
 800a944:	9906      	ldr	r1, [sp, #24]
 800a946:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800a94a:	465a      	mov	r2, fp
 800a94c:	47b8      	blx	r7
 800a94e:	462a      	mov	r2, r5
 800a950:	4620      	mov	r0, r4
 800a952:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a954:	f7ff fd52 	bl	800a3fc <_WriteDataMP>
 800a958:	f8dd c010 	ldr.w	ip, [sp, #16]
 800a95c:	4665      	mov	r5, ip
 800a95e:	4663      	mov	r3, ip
 800a960:	e7c8      	b.n	800a8f4 <_DrawBitmap+0x394>
 800a962:	4663      	mov	r3, ip
 800a964:	e7c6      	b.n	800a8f4 <_DrawBitmap+0x394>
 800a966:	9f05      	ldr	r7, [sp, #20]
 800a968:	1e7b      	subs	r3, r7, #1
 800a96a:	444b      	add	r3, r9
 800a96c:	2d00      	cmp	r5, #0
 800a96e:	d075      	beq.n	800aa5c <_DrawBitmap+0x4fc>
 800a970:	f8cd b000 	str.w	fp, [sp]
 800a974:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800a978:	9906      	ldr	r1, [sp, #24]
 800a97a:	4620      	mov	r0, r4
 800a97c:	465a      	mov	r2, fp
 800a97e:	47b0      	blx	r6
 800a980:	4620      	mov	r0, r4
 800a982:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a984:	462a      	mov	r2, r5
 800a986:	e067      	b.n	800aa58 <_DrawBitmap+0x4f8>
 800a988:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a98a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a98c:	68ac      	ldr	r4, [r5, #8]
 800a98e:	2f00      	cmp	r7, #0
 800a990:	d064      	beq.n	800aa5c <_DrawBitmap+0x4fc>
 800a992:	4b37      	ldr	r3, [pc, #220]	; (800aa70 <_DrawBitmap+0x510>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	7c1b      	ldrb	r3, [r3, #16]
 800a998:	f013 0303 	ands.w	r3, r3, #3
 800a99c:	d009      	beq.n	800a9b2 <_DrawBitmap+0x452>
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	d15c      	bne.n	800aa5c <_DrawBitmap+0x4fc>
 800a9a2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9a6:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800a9aa:	2600      	movs	r6, #0
 800a9ac:	464f      	mov	r7, r9
 800a9ae:	4633      	mov	r3, r6
 800a9b0:	e022      	b.n	800a9f8 <_DrawBitmap+0x498>
 800a9b2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a9b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9b6:	9f05      	ldr	r7, [sp, #20]
 800a9b8:	443b      	add	r3, r7
 800a9ba:	1b5b      	subs	r3, r3, r5
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	dd4d      	ble.n	800aa5c <_DrawBitmap+0x4fc>
 800a9c0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a9c4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f837 1023 	ldrh.w	r1, [r7, r3, lsl #2]
 800a9cc:	f7ff fd0a 	bl	800a3e4 <_WriteU16_A1>
 800a9d0:	e7f0      	b.n	800a9b4 <_DrawBitmap+0x454>
 800a9d2:	b913      	cbnz	r3, 800a9da <_DrawBitmap+0x47a>
 800a9d4:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800a9d8:	46b9      	mov	r9, r7
 800a9da:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a9dc:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 800a9e0:	f8a8 3000 	strh.w	r3, [r8]
 800a9e4:	3601      	adds	r6, #1
 800a9e6:	f108 0802 	add.w	r8, r8, #2
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	9a08      	ldr	r2, [sp, #32]
 800a9ee:	9d05      	ldr	r5, [sp, #20]
 800a9f0:	3701      	adds	r7, #1
 800a9f2:	442a      	add	r2, r5
 800a9f4:	42ba      	cmp	r2, r7
 800a9f6:	d01c      	beq.n	800aa32 <_DrawBitmap+0x4d2>
 800a9f8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a9fa:	9808      	ldr	r0, [sp, #32]
 800a9fc:	1a2a      	subs	r2, r5, r0
 800a9fe:	f812 a007 	ldrb.w	sl, [r2, r7]
 800aa02:	f1ba 0f00 	cmp.w	sl, #0
 800aa06:	d1e4      	bne.n	800a9d2 <_DrawBitmap+0x472>
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d110      	bne.n	800aa2e <_DrawBitmap+0x4ce>
 800aa0c:	f8cd b000 	str.w	fp, [sp]
 800aa10:	1e7b      	subs	r3, r7, #1
 800aa12:	4620      	mov	r0, r4
 800aa14:	4649      	mov	r1, r9
 800aa16:	465a      	mov	r2, fp
 800aa18:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800aa1c:	47a8      	blx	r5
 800aa1e:	4632      	mov	r2, r6
 800aa20:	4620      	mov	r0, r4
 800aa22:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800aa24:	f7ff fcea 	bl	800a3fc <_WriteDataMP>
 800aa28:	4656      	mov	r6, sl
 800aa2a:	4653      	mov	r3, sl
 800aa2c:	e7de      	b.n	800a9ec <_DrawBitmap+0x48c>
 800aa2e:	4653      	mov	r3, sl
 800aa30:	e7dc      	b.n	800a9ec <_DrawBitmap+0x48c>
 800aa32:	9f08      	ldr	r7, [sp, #32]
 800aa34:	1e6b      	subs	r3, r5, #1
 800aa36:	443b      	add	r3, r7
 800aa38:	b186      	cbz	r6, 800aa5c <_DrawBitmap+0x4fc>
 800aa3a:	f8cd b000 	str.w	fp, [sp]
 800aa3e:	4620      	mov	r0, r4
 800aa40:	4649      	mov	r1, r9
 800aa42:	465a      	mov	r2, fp
 800aa44:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800aa48:	47a8      	blx	r5
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800aa4e:	4632      	mov	r2, r6
 800aa50:	e002      	b.n	800aa58 <_DrawBitmap+0x4f8>
 800aa52:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aa54:	9919      	ldr	r1, [sp, #100]	; 0x64
 800aa56:	9a05      	ldr	r2, [sp, #20]
 800aa58:	f7ff fcd0 	bl	800a3fc <_WriteDataMP>
 800aa5c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800aa5e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800aa60:	443d      	add	r5, r7
 800aa62:	9519      	str	r5, [sp, #100]	; 0x64
 800aa64:	f10b 0b01 	add.w	fp, fp, #1
 800aa68:	e5a5      	b.n	800a5b6 <_DrawBitmap+0x56>
 800aa6a:	b00d      	add	sp, #52	; 0x34
 800aa6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa70:	20000084 	.word	0x20000084

0800aa74 <GUIDRV_FlexColor_SetMode16bppC0B8>:
 800aa74:	b510      	push	{r4, lr}
 800aa76:	4604      	mov	r4, r0
 800aa78:	f000 fa60 	bl	800af3c <GUIDRV_FlexColor__InitOnce>
 800aa7c:	68a4      	ldr	r4, [r4, #8]
 800aa7e:	4b10      	ldr	r3, [pc, #64]	; (800aac0 <GUIDRV_FlexColor_SetMode16bppC0B8+0x4c>)
 800aa80:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800aa84:	4b0f      	ldr	r3, [pc, #60]	; (800aac4 <GUIDRV_FlexColor_SetMode16bppC0B8+0x50>)
 800aa86:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800aa8a:	4b0f      	ldr	r3, [pc, #60]	; (800aac8 <GUIDRV_FlexColor_SetMode16bppC0B8+0x54>)
 800aa8c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800aa90:	4b0e      	ldr	r3, [pc, #56]	; (800aacc <GUIDRV_FlexColor_SetMode16bppC0B8+0x58>)
 800aa92:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 800aa96:	4b0e      	ldr	r3, [pc, #56]	; (800aad0 <GUIDRV_FlexColor_SetMode16bppC0B8+0x5c>)
 800aa98:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800aa9c:	4b0d      	ldr	r3, [pc, #52]	; (800aad4 <GUIDRV_FlexColor_SetMode16bppC0B8+0x60>)
 800aa9e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 800aaa2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800aaa6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800aab0:	2108      	movs	r1, #8
 800aab2:	4798      	blx	r3
 800aab4:	2310      	movs	r3, #16
 800aab6:	63a3      	str	r3, [r4, #56]	; 0x38
 800aab8:	4b07      	ldr	r3, [pc, #28]	; (800aad8 <GUIDRV_FlexColor_SetMode16bppC0B8+0x64>)
 800aaba:	6463      	str	r3, [r4, #68]	; 0x44
 800aabc:	bd10      	pop	{r4, pc}
 800aabe:	bf00      	nop
 800aac0:	0800a561 	.word	0x0800a561
 800aac4:	0800a455 	.word	0x0800a455
 800aac8:	0800ae8b 	.word	0x0800ae8b
 800aacc:	0800adfb 	.word	0x0800adfb
 800aad0:	0800a443 	.word	0x0800a443
 800aad4:	0800a44d 	.word	0x0800a44d
 800aad8:	08013da8 	.word	0x08013da8

0800aadc <_Log2PhysX_X0Y0S0>:
 800aadc:	4608      	mov	r0, r1
 800aade:	4770      	bx	lr

0800aae0 <_Log2PhysX_X1Y0S0>:
 800aae0:	6800      	ldr	r0, [r0, #0]
 800aae2:	1a40      	subs	r0, r0, r1
 800aae4:	3801      	subs	r0, #1
 800aae6:	4770      	bx	lr

0800aae8 <_Log2PhysX_X0Y1S0>:
 800aae8:	4608      	mov	r0, r1
 800aaea:	4770      	bx	lr

0800aaec <_Log2PhysX_X1Y1S0>:
 800aaec:	6800      	ldr	r0, [r0, #0]
 800aaee:	1a40      	subs	r0, r0, r1
 800aaf0:	3801      	subs	r0, #1
 800aaf2:	4770      	bx	lr

0800aaf4 <_Log2PhysX_X0Y0S1>:
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	4770      	bx	lr

0800aaf8 <_Log2PhysX_X1Y0S1>:
 800aaf8:	6840      	ldr	r0, [r0, #4]
 800aafa:	1a80      	subs	r0, r0, r2
 800aafc:	3801      	subs	r0, #1
 800aafe:	4770      	bx	lr

0800ab00 <_Log2PhysX_X0Y1S1>:
 800ab00:	4610      	mov	r0, r2
 800ab02:	4770      	bx	lr

0800ab04 <_Log2PhysX_X1Y1S1>:
 800ab04:	6840      	ldr	r0, [r0, #4]
 800ab06:	1a80      	subs	r0, r0, r2
 800ab08:	3801      	subs	r0, #1
 800ab0a:	4770      	bx	lr

0800ab0c <_Log2PhysY_X0Y0S0>:
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	4770      	bx	lr

0800ab10 <_Log2PhysY_X1Y0S0>:
 800ab10:	4610      	mov	r0, r2
 800ab12:	4770      	bx	lr

0800ab14 <_Log2PhysY_X0Y1S0>:
 800ab14:	6840      	ldr	r0, [r0, #4]
 800ab16:	1a80      	subs	r0, r0, r2
 800ab18:	3801      	subs	r0, #1
 800ab1a:	4770      	bx	lr

0800ab1c <_Log2PhysY_X1Y1S0>:
 800ab1c:	6840      	ldr	r0, [r0, #4]
 800ab1e:	1a80      	subs	r0, r0, r2
 800ab20:	3801      	subs	r0, #1
 800ab22:	4770      	bx	lr

0800ab24 <_Log2PhysY_X0Y0S1>:
 800ab24:	4608      	mov	r0, r1
 800ab26:	4770      	bx	lr

0800ab28 <_Log2PhysY_X1Y0S1>:
 800ab28:	4608      	mov	r0, r1
 800ab2a:	4770      	bx	lr

0800ab2c <_Log2PhysY_X0Y1S1>:
 800ab2c:	6800      	ldr	r0, [r0, #0]
 800ab2e:	1a40      	subs	r0, r0, r1
 800ab30:	3801      	subs	r0, #1
 800ab32:	4770      	bx	lr

0800ab34 <_Log2PhysY_X1Y1S1>:
 800ab34:	6800      	ldr	r0, [r0, #0]
 800ab36:	1a40      	subs	r0, r0, r1
 800ab38:	3801      	subs	r0, #1
 800ab3a:	4770      	bx	lr

0800ab3c <_SetPixelIndex>:
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	6884      	ldr	r4, [r0, #8]
 800ab40:	f8d4 40f8 	ldr.w	r4, [r4, #248]	; 0xf8
 800ab44:	47a0      	blx	r4
 800ab46:	bd10      	pop	{r4, pc}

0800ab48 <_GetPixelIndex>:
 800ab48:	b508      	push	{r3, lr}
 800ab4a:	6883      	ldr	r3, [r0, #8]
 800ab4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab50:	4798      	blx	r3
 800ab52:	bd08      	pop	{r3, pc}

0800ab54 <_XorPixel>:
 800ab54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab56:	4604      	mov	r4, r0
 800ab58:	460f      	mov	r7, r1
 800ab5a:	4616      	mov	r6, r2
 800ab5c:	6885      	ldr	r5, [r0, #8]
 800ab5e:	f7ff fff3 	bl	800ab48 <_GetPixelIndex>
 800ab62:	9001      	str	r0, [sp, #4]
 800ab64:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ab68:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	4632      	mov	r2, r6
 800ab70:	ea8e 0303 	eor.w	r3, lr, r3
 800ab74:	f7ff ffe2 	bl	800ab3c <_SetPixelIndex>
 800ab78:	b003      	add	sp, #12
 800ab7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab7c <_DrawHLine>:
 800ab7c:	b513      	push	{r0, r1, r4, lr}
 800ab7e:	6884      	ldr	r4, [r0, #8]
 800ab80:	9200      	str	r2, [sp, #0]
 800ab82:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800ab86:	47a0      	blx	r4
 800ab88:	b002      	add	sp, #8
 800ab8a:	bd10      	pop	{r4, pc}

0800ab8c <_DrawVLine>:
 800ab8c:	b513      	push	{r0, r1, r4, lr}
 800ab8e:	6884      	ldr	r4, [r0, #8]
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800ab96:	460b      	mov	r3, r1
 800ab98:	47a0      	blx	r4
 800ab9a:	b002      	add	sp, #8
 800ab9c:	bd10      	pop	{r4, pc}

0800ab9e <_FillRect>:
 800ab9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aba0:	9c06      	ldr	r4, [sp, #24]
 800aba2:	6885      	ldr	r5, [r0, #8]
 800aba4:	9400      	str	r4, [sp, #0]
 800aba6:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
 800abaa:	47a0      	blx	r4
 800abac:	b003      	add	sp, #12
 800abae:	bd30      	pop	{r4, r5, pc}

0800abb0 <_DrawBitmap>:
 800abb0:	b530      	push	{r4, r5, lr}
 800abb2:	b087      	sub	sp, #28
 800abb4:	6885      	ldr	r5, [r0, #8]
 800abb6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800abb8:	9400      	str	r4, [sp, #0]
 800abba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800abbc:	9401      	str	r4, [sp, #4]
 800abbe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800abc0:	9402      	str	r4, [sp, #8]
 800abc2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800abc4:	9403      	str	r4, [sp, #12]
 800abc6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800abc8:	9404      	str	r4, [sp, #16]
 800abca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800abcc:	9405      	str	r4, [sp, #20]
 800abce:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
 800abd2:	47a0      	blx	r4
 800abd4:	b007      	add	sp, #28
 800abd6:	bd30      	pop	{r4, r5, pc}

0800abd8 <_GetDevFunc_SetRect>:
 800abd8:	4770      	bx	lr
	...

0800abdc <_GetDevFunc_SetRectOutside>:
 800abdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abde:	9e07      	ldr	r6, [sp, #28]
 800abe0:	6884      	ldr	r4, [r0, #8]
 800abe2:	4d0c      	ldr	r5, [pc, #48]	; (800ac14 <_GetDevFunc_SetRectOutside+0x38>)
 800abe4:	b176      	cbz	r6, 800ac04 <_GetDevFunc_SetRectOutside+0x28>
 800abe6:	6828      	ldr	r0, [r5, #0]
 800abe8:	b988      	cbnz	r0, 800ac0e <_GetDevFunc_SetRectOutside+0x32>
 800abea:	9806      	ldr	r0, [sp, #24]
 800abec:	9000      	str	r0, [sp, #0]
 800abee:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800abf2:	4620      	mov	r0, r4
 800abf4:	47b0      	blx	r6
 800abf6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800abfa:	602b      	str	r3, [r5, #0]
 800abfc:	4b06      	ldr	r3, [pc, #24]	; (800ac18 <_GetDevFunc_SetRectOutside+0x3c>)
 800abfe:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800ac02:	e004      	b.n	800ac0e <_GetDevFunc_SetRectOutside+0x32>
 800ac04:	682b      	ldr	r3, [r5, #0]
 800ac06:	b113      	cbz	r3, 800ac0e <_GetDevFunc_SetRectOutside+0x32>
 800ac08:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800ac0c:	602e      	str	r6, [r5, #0]
 800ac0e:	b002      	add	sp, #8
 800ac10:	bd70      	pop	{r4, r5, r6, pc}
 800ac12:	bf00      	nop
 800ac14:	20005430 	.word	0x20005430
 800ac18:	0800abd9 	.word	0x0800abd9

0800ac1c <_ReadPixelCust_16bpp>:
 800ac1c:	b508      	push	{r3, lr}
 800ac1e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ac20:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 800ac24:	6990      	ldr	r0, [r2, #24]
 800ac26:	4798      	blx	r3
 800ac28:	bd08      	pop	{r3, pc}

0800ac2a <_ReadPixelCust_18bpp>:
 800ac2a:	b508      	push	{r3, lr}
 800ac2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ac2e:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800ac32:	6990      	ldr	r0, [r2, #24]
 800ac34:	4798      	blx	r3
 800ac36:	bd08      	pop	{r3, pc}

0800ac38 <_ReadRectCust_16bpp>:
 800ac38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac3c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ac3e:	6884      	ldr	r4, [r0, #8]
 800ac40:	9500      	str	r5, [sp, #0]
 800ac42:	4617      	mov	r7, r2
 800ac44:	4620      	mov	r0, r4
 800ac46:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800ac4a:	4699      	mov	r9, r3
 800ac4c:	4688      	mov	r8, r1
 800ac4e:	1bed      	subs	r5, r5, r7
 800ac50:	47b0      	blx	r6
 800ac52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ac54:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 800ac58:	6988      	ldr	r0, [r1, #24]
 800ac5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac5c:	ebc8 0809 	rsb	r8, r8, r9
 800ac60:	1c6a      	adds	r2, r5, #1
 800ac62:	fb08 2202 	mla	r2, r8, r2, r2
 800ac66:	4798      	blx	r3
 800ac68:	b003      	add	sp, #12
 800ac6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ac6e <_ReadRectCust_18bpp>:
 800ac6e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac72:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ac74:	6884      	ldr	r4, [r0, #8]
 800ac76:	9500      	str	r5, [sp, #0]
 800ac78:	4617      	mov	r7, r2
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800ac80:	4699      	mov	r9, r3
 800ac82:	4688      	mov	r8, r1
 800ac84:	1bed      	subs	r5, r5, r7
 800ac86:	47b0      	blx	r6
 800ac88:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ac8a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800ac8e:	6988      	ldr	r0, [r1, #24]
 800ac90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac92:	ebc8 0809 	rsb	r8, r8, r9
 800ac96:	1c6a      	adds	r2, r5, #1
 800ac98:	fb08 2202 	mla	r2, r8, r2, r2
 800ac9c:	4798      	blx	r3
 800ac9e:	b003      	add	sp, #12
 800aca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800aca4 <_GetDevFunc>:
 800aca4:	3901      	subs	r1, #1
 800aca6:	2917      	cmp	r1, #23
 800aca8:	d828      	bhi.n	800acfc <_GetDevFunc+0x58>
 800acaa:	e8df f001 	tbb	[pc, r1]
 800acae:	2714      	.short	0x2714
 800acb0:	27272727 	.word	0x27272727
 800acb4:	0e272727 	.word	0x0e272727
 800acb8:	0c191210 	.word	0x0c191210
 800acbc:	27272729 	.word	0x27272729
 800acc0:	23272727 	.word	0x23272727
 800acc4:	251e      	.short	0x251e
 800acc6:	480f      	ldr	r0, [pc, #60]	; (800ad04 <_GetDevFunc+0x60>)
 800acc8:	4770      	bx	lr
 800acca:	480f      	ldr	r0, [pc, #60]	; (800ad08 <_GetDevFunc+0x64>)
 800accc:	4770      	bx	lr
 800acce:	480f      	ldr	r0, [pc, #60]	; (800ad0c <_GetDevFunc+0x68>)
 800acd0:	4770      	bx	lr
 800acd2:	480f      	ldr	r0, [pc, #60]	; (800ad10 <_GetDevFunc+0x6c>)
 800acd4:	4770      	bx	lr
 800acd6:	6803      	ldr	r3, [r0, #0]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 800acde:	4770      	bx	lr
 800ace0:	6803      	ldr	r3, [r0, #0]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 800ace8:	4770      	bx	lr
 800acea:	6803      	ldr	r3, [r0, #0]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 800acf2:	4770      	bx	lr
 800acf4:	4807      	ldr	r0, [pc, #28]	; (800ad14 <_GetDevFunc+0x70>)
 800acf6:	4770      	bx	lr
 800acf8:	4807      	ldr	r0, [pc, #28]	; (800ad18 <_GetDevFunc+0x74>)
 800acfa:	4770      	bx	lr
 800acfc:	2000      	movs	r0, #0
 800acfe:	4770      	bx	lr
 800ad00:	4806      	ldr	r0, [pc, #24]	; (800ad1c <_GetDevFunc+0x78>)
 800ad02:	4770      	bx	lr
 800ad04:	0800b09d 	.word	0x0800b09d
 800ad08:	0800b073 	.word	0x0800b073
 800ad0c:	0800b05f 	.word	0x0800b05f
 800ad10:	0800b015 	.word	0x0800b015
 800ad14:	0800af79 	.word	0x0800af79
 800ad18:	0800abdd 	.word	0x0800abdd
 800ad1c:	0800b087 	.word	0x0800b087

0800ad20 <_GetDevProp>:
 800ad20:	3901      	subs	r1, #1
 800ad22:	6880      	ldr	r0, [r0, #8]
 800ad24:	290d      	cmp	r1, #13
 800ad26:	d823      	bhi.n	800ad70 <_GetDevProp+0x50>
 800ad28:	e8df f001 	tbb	[pc, r1]
 800ad2c:	0f0d0b09 	.word	0x0f0d0b09
 800ad30:	11222222 	.word	0x11222222
 800ad34:	13252507 	.word	0x13252507
 800ad38:	1d18      	.short	0x1d18
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	4770      	bx	lr
 800ad3e:	6800      	ldr	r0, [r0, #0]
 800ad40:	4770      	bx	lr
 800ad42:	6840      	ldr	r0, [r0, #4]
 800ad44:	4770      	bx	lr
 800ad46:	6880      	ldr	r0, [r0, #8]
 800ad48:	4770      	bx	lr
 800ad4a:	68c0      	ldr	r0, [r0, #12]
 800ad4c:	4770      	bx	lr
 800ad4e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800ad50:	4770      	bx	lr
 800ad52:	b188      	cbz	r0, 800ad78 <_GetDevProp+0x58>
 800ad54:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ad56:	f000 0001 	and.w	r0, r0, #1
 800ad5a:	4770      	bx	lr
 800ad5c:	b160      	cbz	r0, 800ad78 <_GetDevProp+0x58>
 800ad5e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ad60:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800ad64:	4770      	bx	lr
 800ad66:	b138      	cbz	r0, 800ad78 <_GetDevProp+0x58>
 800ad68:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ad6a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800ad6e:	4770      	bx	lr
 800ad70:	f04f 30ff 	mov.w	r0, #4294967295
 800ad74:	4770      	bx	lr
 800ad76:	2001      	movs	r0, #1
 800ad78:	4770      	bx	lr

0800ad7a <_GetDevData>:
 800ad7a:	6883      	ldr	r3, [r0, #8]
 800ad7c:	2901      	cmp	r1, #1
 800ad7e:	bf0c      	ite	eq
 800ad80:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 800ad82:	2000      	movne	r0, #0
 800ad84:	4770      	bx	lr

0800ad86 <_GetRect>:
 800ad86:	6883      	ldr	r3, [r0, #8]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	800a      	strh	r2, [r1, #0]
 800ad8c:	804a      	strh	r2, [r1, #2]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	3a01      	subs	r2, #1
 800ad94:	3b01      	subs	r3, #1
 800ad96:	808a      	strh	r2, [r1, #4]
 800ad98:	80cb      	strh	r3, [r1, #6]
 800ad9a:	4770      	bx	lr

0800ad9c <GUIDRV_FlexColor__SetLog2Phys>:
 800ad9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad9e:	4d10      	ldr	r5, [pc, #64]	; (800ade0 <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 800ada0:	462e      	mov	r6, r5
 800ada2:	4607      	mov	r7, r0
 800ada4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ada6:	b091      	sub	sp, #68	; 0x44
 800ada8:	466c      	mov	r4, sp
 800adaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800adac:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800adb0:	3520      	adds	r5, #32
 800adb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800adb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800adb8:	ac08      	add	r4, sp, #32
 800adba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800adbc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800adc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800adc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc6:	aa10      	add	r2, sp, #64	; 0x40
 800adc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800adcc:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800add0:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800add4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800add8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800addc:	b011      	add	sp, #68	; 0x44
 800adde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ade0:	08012a10 	.word	0x08012a10

0800ade4 <_SetOrg>:
 800ade4:	b507      	push	{r0, r1, r2, lr}
 800ade6:	6980      	ldr	r0, [r0, #24]
 800ade8:	e88d 0006 	stmia.w	sp, {r1, r2}
 800adec:	2103      	movs	r1, #3
 800adee:	466a      	mov	r2, sp
 800adf0:	f7f5 fdf2 	bl	80009d8 <LCD_X_DisplayDriver>
 800adf4:	b003      	add	sp, #12
 800adf6:	f85d fb04 	ldr.w	pc, [sp], #4

0800adfa <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 800adfa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adfe:	6884      	ldr	r4, [r0, #8]
 800ae00:	4698      	mov	r8, r3
 800ae02:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800ae04:	079b      	lsls	r3, r3, #30
 800ae06:	4689      	mov	r9, r1
 800ae08:	4617      	mov	r7, r2
 800ae0a:	d532      	bpl.n	800ae72 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x78>
 800ae0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800ae10:	4620      	mov	r0, r4
 800ae12:	4798      	blx	r3
 800ae14:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 800ae18:	4606      	mov	r6, r0
 800ae1a:	463a      	mov	r2, r7
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	4649      	mov	r1, r9
 800ae20:	47a8      	blx	r5
 800ae22:	6923      	ldr	r3, [r4, #16]
 800ae24:	69a2      	ldr	r2, [r4, #24]
 800ae26:	429e      	cmp	r6, r3
 800ae28:	bfac      	ite	ge
 800ae2a:	2300      	movge	r3, #0
 800ae2c:	2301      	movlt	r3, #1
 800ae2e:	4296      	cmp	r6, r2
 800ae30:	bfd4      	ite	le
 800ae32:	461a      	movle	r2, r3
 800ae34:	f043 0201 	orrgt.w	r2, r3, #1
 800ae38:	6963      	ldr	r3, [r4, #20]
 800ae3a:	4298      	cmp	r0, r3
 800ae3c:	bfac      	ite	ge
 800ae3e:	4613      	movge	r3, r2
 800ae40:	f042 0301 	orrlt.w	r3, r2, #1
 800ae44:	4605      	mov	r5, r0
 800ae46:	b913      	cbnz	r3, 800ae4e <GUIDRV_FlexColor__SetPixelIndexNoCache+0x54>
 800ae48:	69e3      	ldr	r3, [r4, #28]
 800ae4a:	4298      	cmp	r0, r3
 800ae4c:	dd0a      	ble.n	800ae64 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x6a>
 800ae4e:	6862      	ldr	r2, [r4, #4]
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	3a01      	subs	r2, #1
 800ae54:	9200      	str	r2, [sp, #0]
 800ae56:	2100      	movs	r1, #0
 800ae58:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	460a      	mov	r2, r1
 800ae60:	3b01      	subs	r3, #1
 800ae62:	47b8      	blx	r7
 800ae64:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 800ae68:	4620      	mov	r0, r4
 800ae6a:	4631      	mov	r1, r6
 800ae6c:	462a      	mov	r2, r5
 800ae6e:	47b8      	blx	r7
 800ae70:	e003      	b.n	800ae7a <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 800ae72:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800ae76:	4620      	mov	r0, r4
 800ae78:	47a8      	blx	r5
 800ae7a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800ae7e:	4620      	mov	r0, r4
 800ae80:	4641      	mov	r1, r8
 800ae82:	4798      	blx	r3
 800ae84:	b003      	add	sp, #12
 800ae86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ae8a <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 800ae8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae8c:	6884      	ldr	r4, [r0, #8]
 800ae8e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800ae90:	079b      	lsls	r3, r3, #30
 800ae92:	460f      	mov	r7, r1
 800ae94:	4616      	mov	r6, r2
 800ae96:	d545      	bpl.n	800af24 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x9a>
 800ae98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	4798      	blx	r3
 800aea0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800aea4:	4632      	mov	r2, r6
 800aea6:	4605      	mov	r5, r0
 800aea8:	4639      	mov	r1, r7
 800aeaa:	4620      	mov	r0, r4
 800aeac:	4798      	blx	r3
 800aeae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800aeb2:	4606      	mov	r6, r0
 800aeb4:	b11b      	cbz	r3, 800aebe <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	2101      	movs	r1, #1
 800aeba:	2200      	movs	r2, #0
 800aebc:	4798      	blx	r3
 800aebe:	6923      	ldr	r3, [r4, #16]
 800aec0:	69a2      	ldr	r2, [r4, #24]
 800aec2:	429d      	cmp	r5, r3
 800aec4:	bfac      	ite	ge
 800aec6:	2300      	movge	r3, #0
 800aec8:	2301      	movlt	r3, #1
 800aeca:	4295      	cmp	r5, r2
 800aecc:	bfd4      	ite	le
 800aece:	461a      	movle	r2, r3
 800aed0:	f043 0201 	orrgt.w	r2, r3, #1
 800aed4:	6963      	ldr	r3, [r4, #20]
 800aed6:	429e      	cmp	r6, r3
 800aed8:	bfac      	ite	ge
 800aeda:	4613      	movge	r3, r2
 800aedc:	f042 0301 	orrlt.w	r3, r2, #1
 800aee0:	b913      	cbnz	r3, 800aee8 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5e>
 800aee2:	69e3      	ldr	r3, [r4, #28]
 800aee4:	429e      	cmp	r6, r3
 800aee6:	dd0a      	ble.n	800aefe <GUIDRV_FlexColor__GetPixelIndexNoCache+0x74>
 800aee8:	6862      	ldr	r2, [r4, #4]
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	3a01      	subs	r2, #1
 800aeee:	9200      	str	r2, [sp, #0]
 800aef0:	2100      	movs	r1, #0
 800aef2:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800aef6:	4620      	mov	r0, r4
 800aef8:	460a      	mov	r2, r1
 800aefa:	3b01      	subs	r3, #1
 800aefc:	47b8      	blx	r7
 800aefe:	4629      	mov	r1, r5
 800af00:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800af04:	4620      	mov	r0, r4
 800af06:	4632      	mov	r2, r6
 800af08:	4798      	blx	r3
 800af0a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800af0e:	4620      	mov	r0, r4
 800af10:	4798      	blx	r3
 800af12:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800af16:	4605      	mov	r5, r0
 800af18:	b16b      	cbz	r3, 800af36 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800af1a:	4620      	mov	r0, r4
 800af1c:	2100      	movs	r1, #0
 800af1e:	2201      	movs	r2, #1
 800af20:	4798      	blx	r3
 800af22:	e008      	b.n	800af36 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800af24:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800af28:	4620      	mov	r0, r4
 800af2a:	4798      	blx	r3
 800af2c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800af30:	4620      	mov	r0, r4
 800af32:	4798      	blx	r3
 800af34:	4605      	mov	r5, r0
 800af36:	4628      	mov	r0, r5
 800af38:	b003      	add	sp, #12
 800af3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af3c <GUIDRV_FlexColor__InitOnce>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	6885      	ldr	r5, [r0, #8]
 800af40:	4604      	mov	r4, r0
 800af42:	b99d      	cbnz	r5, 800af6c <GUIDRV_FlexColor__InitOnce+0x30>
 800af44:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800af48:	f003 f9ce 	bl	800e2e8 <GUI_ALLOC_GetFixedBlock>
 800af4c:	4b08      	ldr	r3, [pc, #32]	; (800af70 <GUIDRV_FlexColor__InitOnce+0x34>)
 800af4e:	60a0      	str	r0, [r4, #8]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800af56:	4629      	mov	r1, r5
 800af58:	4798      	blx	r3
 800af5a:	68a3      	ldr	r3, [r4, #8]
 800af5c:	2202      	movs	r2, #2
 800af5e:	84da      	strh	r2, [r3, #38]	; 0x26
 800af60:	2201      	movs	r2, #1
 800af62:	621a      	str	r2, [r3, #32]
 800af64:	4a03      	ldr	r2, [pc, #12]	; (800af74 <GUIDRV_FlexColor__InitOnce+0x38>)
 800af66:	641c      	str	r4, [r3, #64]	; 0x40
 800af68:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800af6c:	bd38      	pop	{r3, r4, r5, pc}
 800af6e:	bf00      	nop
 800af70:	20000070 	.word	0x20000070
 800af74:	0800ad9d 	.word	0x0800ad9d

0800af78 <_SetDevFunc>:
 800af78:	b570      	push	{r4, r5, r6, lr}
 800af7a:	4606      	mov	r6, r0
 800af7c:	460d      	mov	r5, r1
 800af7e:	4614      	mov	r4, r2
 800af80:	f7ff ffdc 	bl	800af3c <GUIDRV_FlexColor__InitOnce>
 800af84:	68b3      	ldr	r3, [r6, #8]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d03b      	beq.n	800b002 <_SetDevFunc+0x8a>
 800af8a:	2d26      	cmp	r5, #38	; 0x26
 800af8c:	d002      	beq.n	800af94 <_SetDevFunc+0x1c>
 800af8e:	2d27      	cmp	r5, #39	; 0x27
 800af90:	d016      	beq.n	800afc0 <_SetDevFunc+0x48>
 800af92:	bd70      	pop	{r4, r5, r6, pc}
 800af94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af96:	2a10      	cmp	r2, #16
 800af98:	d002      	beq.n	800afa0 <_SetDevFunc+0x28>
 800af9a:	2a12      	cmp	r2, #18
 800af9c:	d008      	beq.n	800afb0 <_SetDevFunc+0x38>
 800af9e:	bd70      	pop	{r4, r5, r6, pc}
 800afa0:	4a18      	ldr	r2, [pc, #96]	; (800b004 <_SetDevFunc+0x8c>)
 800afa2:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 800afa6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800afaa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800afae:	bd70      	pop	{r4, r5, r6, pc}
 800afb0:	4a15      	ldr	r2, [pc, #84]	; (800b008 <_SetDevFunc+0x90>)
 800afb2:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800afb6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800afba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800afbe:	bd70      	pop	{r4, r5, r6, pc}
 800afc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afc2:	2a10      	cmp	r2, #16
 800afc4:	d002      	beq.n	800afcc <_SetDevFunc+0x54>
 800afc6:	2a12      	cmp	r2, #18
 800afc8:	d00e      	beq.n	800afe8 <_SetDevFunc+0x70>
 800afca:	bd70      	pop	{r4, r5, r6, pc}
 800afcc:	b13c      	cbz	r4, 800afde <_SetDevFunc+0x66>
 800afce:	4a0f      	ldr	r2, [pc, #60]	; (800b00c <_SetDevFunc+0x94>)
 800afd0:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 800afd4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800afd8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800afdc:	bd70      	pop	{r4, r5, r6, pc}
 800afde:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 800afe2:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 800afe6:	bd70      	pop	{r4, r5, r6, pc}
 800afe8:	b13c      	cbz	r4, 800affa <_SetDevFunc+0x82>
 800afea:	4a09      	ldr	r2, [pc, #36]	; (800b010 <_SetDevFunc+0x98>)
 800afec:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800aff0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800aff4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800aff8:	bd70      	pop	{r4, r5, r6, pc}
 800affa:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 800affe:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 800b002:	bd70      	pop	{r4, r5, r6, pc}
 800b004:	0800ac1d 	.word	0x0800ac1d
 800b008:	0800ac2b 	.word	0x0800ac2b
 800b00c:	0800ac39 	.word	0x0800ac39
 800b010:	0800ac6f 	.word	0x0800ac6f

0800b014 <_GetDevFunc_Init>:
 800b014:	b538      	push	{r3, r4, r5, lr}
 800b016:	4605      	mov	r5, r0
 800b018:	f7ff ff90 	bl	800af3c <GUIDRV_FlexColor__InitOnce>
 800b01c:	68ac      	ldr	r4, [r5, #8]
 800b01e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b022:	f003 f961 	bl	800e2e8 <GUI_ALLOC_GetFixedBlock>
 800b026:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b028:	66a0      	str	r0, [r4, #104]	; 0x68
 800b02a:	3307      	adds	r3, #7
 800b02c:	10d8      	asrs	r0, r3, #3
 800b02e:	6823      	ldr	r3, [r4, #0]
 800b030:	4358      	muls	r0, r3
 800b032:	f003 f959 	bl	800e2e8 <GUI_ALLOC_GetFixedBlock>
 800b036:	2101      	movs	r1, #1
 800b038:	2200      	movs	r2, #0
 800b03a:	66e0      	str	r0, [r4, #108]	; 0x6c
 800b03c:	69a8      	ldr	r0, [r5, #24]
 800b03e:	f7f5 fccb 	bl	80009d8 <LCD_X_DisplayDriver>
 800b042:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800b046:	4605      	mov	r5, r0
 800b048:	4620      	mov	r0, r4
 800b04a:	4798      	blx	r3
 800b04c:	4620      	mov	r0, r4
 800b04e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800b052:	4798      	blx	r3
 800b054:	2d00      	cmp	r5, #0
 800b056:	bfd4      	ite	le
 800b058:	2000      	movle	r0, #0
 800b05a:	2001      	movgt	r0, #1
 800b05c:	bd38      	pop	{r3, r4, r5, pc}

0800b05e <_GetDevFunc_SetSize>:
 800b05e:	b570      	push	{r4, r5, r6, lr}
 800b060:	4604      	mov	r4, r0
 800b062:	460d      	mov	r5, r1
 800b064:	4616      	mov	r6, r2
 800b066:	f7ff ff69 	bl	800af3c <GUIDRV_FlexColor__InitOnce>
 800b06a:	68a3      	ldr	r3, [r4, #8]
 800b06c:	e883 0060 	stmia.w	r3, {r5, r6}
 800b070:	bd70      	pop	{r4, r5, r6, pc}

0800b072 <_GetDevFunc_SetVSize>:
 800b072:	b570      	push	{r4, r5, r6, lr}
 800b074:	4604      	mov	r4, r0
 800b076:	460d      	mov	r5, r1
 800b078:	4616      	mov	r6, r2
 800b07a:	f7ff ff5f 	bl	800af3c <GUIDRV_FlexColor__InitOnce>
 800b07e:	68a3      	ldr	r3, [r4, #8]
 800b080:	609d      	str	r5, [r3, #8]
 800b082:	60de      	str	r6, [r3, #12]
 800b084:	bd70      	pop	{r4, r5, r6, pc}

0800b086 <_GetDevFunc_Off>:
 800b086:	b510      	push	{r4, lr}
 800b088:	4604      	mov	r4, r0
 800b08a:	f7ff ff57 	bl	800af3c <GUIDRV_FlexColor__InitOnce>
 800b08e:	69a0      	ldr	r0, [r4, #24]
 800b090:	2106      	movs	r1, #6
 800b092:	2200      	movs	r2, #0
 800b094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b098:	f7f5 bc9e 	b.w	80009d8 <LCD_X_DisplayDriver>

0800b09c <_GetDevFunc_On>:
 800b09c:	b510      	push	{r4, lr}
 800b09e:	4604      	mov	r4, r0
 800b0a0:	f7ff ff4c 	bl	800af3c <GUIDRV_FlexColor__InitOnce>
 800b0a4:	69a0      	ldr	r0, [r4, #24]
 800b0a6:	2105      	movs	r1, #5
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0ae:	f7f5 bc93 	b.w	80009d8 <LCD_X_DisplayDriver>

0800b0b2 <GUIDRV_FlexColor_Config>:
 800b0b2:	b538      	push	{r3, r4, r5, lr}
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	f7ff ff40 	bl	800af3c <GUIDRV_FlexColor__InitOnce>
 800b0bc:	68ab      	ldr	r3, [r5, #8]
 800b0be:	6822      	ldr	r2, [r4, #0]
 800b0c0:	62da      	str	r2, [r3, #44]	; 0x2c
 800b0c2:	6862      	ldr	r2, [r4, #4]
 800b0c4:	631a      	str	r2, [r3, #48]	; 0x30
 800b0c6:	68a2      	ldr	r2, [r4, #8]
 800b0c8:	635a      	str	r2, [r3, #52]	; 0x34
 800b0ca:	0752      	lsls	r2, r2, #29
 800b0cc:	d507      	bpl.n	800b0de <GUIDRV_FlexColor_Config+0x2c>
 800b0ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b0d2:	601a      	str	r2, [r3, #0]
 800b0d4:	6059      	str	r1, [r3, #4]
 800b0d6:	68da      	ldr	r2, [r3, #12]
 800b0d8:	6899      	ldr	r1, [r3, #8]
 800b0da:	60d9      	str	r1, [r3, #12]
 800b0dc:	609a      	str	r2, [r3, #8]
 800b0de:	89a2      	ldrh	r2, [r4, #12]
 800b0e0:	849a      	strh	r2, [r3, #36]	; 0x24
 800b0e2:	6922      	ldr	r2, [r4, #16]
 800b0e4:	b112      	cbz	r2, 800b0ec <GUIDRV_FlexColor_Config+0x3a>
 800b0e6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800b0ea:	621a      	str	r2, [r3, #32]
 800b0ec:	bd38      	pop	{r3, r4, r5, pc}

0800b0ee <GUIDRV_FlexColor_SetFunc>:
 800b0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f2:	4604      	mov	r4, r0
 800b0f4:	461f      	mov	r7, r3
 800b0f6:	4616      	mov	r6, r2
 800b0f8:	4688      	mov	r8, r1
 800b0fa:	f7ff ff1f 	bl	800af3c <GUIDRV_FlexColor__InitOnce>
 800b0fe:	68a5      	ldr	r5, [r4, #8]
 800b100:	4641      	mov	r1, r8
 800b102:	2268      	movs	r2, #104	; 0x68
 800b104:	f505 708a 	add.w	r0, r5, #276	; 0x114
 800b108:	f006 f9b8 	bl	801147c <memcpy>
 800b10c:	4620      	mov	r0, r4
 800b10e:	47b0      	blx	r6
 800b110:	4620      	mov	r0, r4
 800b112:	47b8      	blx	r7
 800b114:	6923      	ldr	r3, [r4, #16]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	4798      	blx	r3
 800b11a:	62a8      	str	r0, [r5, #40]	; 0x28
 800b11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b120 <LCD_UpdateColorIndices>:
 800b120:	b510      	push	{r4, lr}
 800b122:	4c07      	ldr	r4, [pc, #28]	; (800b140 <LCD_UpdateColorIndices+0x20>)
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b128:	f000 fc70 	bl	800ba0c <LCD_Color2Index>
 800b12c:	f000 fc8e 	bl	800ba4c <LCD_SetColorIndex>
 800b130:	6823      	ldr	r3, [r4, #0]
 800b132:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b134:	f000 fc6a 	bl	800ba0c <LCD_Color2Index>
 800b138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b13c:	f000 bca2 	b.w	800ba84 <LCD_SetBkColorIndex>
 800b140:	20000084 	.word	0x20000084

0800b144 <LCD_SetClipRectEx>:
 800b144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b146:	4c09      	ldr	r4, [pc, #36]	; (800b16c <LCD_SetClipRectEx+0x28>)
 800b148:	6823      	ldr	r3, [r4, #0]
 800b14a:	7c5a      	ldrb	r2, [r3, #17]
 800b14c:	4b08      	ldr	r3, [pc, #32]	; (800b170 <LCD_SetClipRectEx+0x2c>)
 800b14e:	4605      	mov	r5, r0
 800b150:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b154:	68c2      	ldr	r2, [r0, #12]
 800b156:	4669      	mov	r1, sp
 800b158:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b15a:	4790      	blx	r2
 800b15c:	6820      	ldr	r0, [r4, #0]
 800b15e:	4629      	mov	r1, r5
 800b160:	466a      	mov	r2, sp
 800b162:	3008      	adds	r0, #8
 800b164:	f000 fcec 	bl	800bb40 <GUI__IntersectRects>
 800b168:	b003      	add	sp, #12
 800b16a:	bd30      	pop	{r4, r5, pc}
 800b16c:	20000084 	.word	0x20000084
 800b170:	20005694 	.word	0x20005694

0800b174 <LCD_SetVSizeEx>:
 800b174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b176:	460d      	mov	r5, r1
 800b178:	4614      	mov	r4, r2
 800b17a:	f001 faab 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 800b17e:	9001      	str	r0, [sp, #4]
 800b180:	b908      	cbnz	r0, 800b186 <LCD_SetVSizeEx+0x12>
 800b182:	2001      	movs	r0, #1
 800b184:	e00c      	b.n	800b1a0 <LCD_SetVSizeEx+0x2c>
 800b186:	68c3      	ldr	r3, [r0, #12]
 800b188:	210a      	movs	r1, #10
 800b18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18c:	a801      	add	r0, sp, #4
 800b18e:	4798      	blx	r3
 800b190:	4603      	mov	r3, r0
 800b192:	2800      	cmp	r0, #0
 800b194:	d0f5      	beq.n	800b182 <LCD_SetVSizeEx+0xe>
 800b196:	9801      	ldr	r0, [sp, #4]
 800b198:	4629      	mov	r1, r5
 800b19a:	4622      	mov	r2, r4
 800b19c:	4798      	blx	r3
 800b19e:	2000      	movs	r0, #0
 800b1a0:	b003      	add	sp, #12
 800b1a2:	bd30      	pop	{r4, r5, pc}

0800b1a4 <LCD_SetSizeEx>:
 800b1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1a6:	460d      	mov	r5, r1
 800b1a8:	4614      	mov	r4, r2
 800b1aa:	f001 fa93 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 800b1ae:	9001      	str	r0, [sp, #4]
 800b1b0:	b908      	cbnz	r0, 800b1b6 <LCD_SetSizeEx+0x12>
 800b1b2:	2001      	movs	r0, #1
 800b1b4:	e00c      	b.n	800b1d0 <LCD_SetSizeEx+0x2c>
 800b1b6:	68c3      	ldr	r3, [r0, #12]
 800b1b8:	210b      	movs	r1, #11
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1bc:	a801      	add	r0, sp, #4
 800b1be:	4798      	blx	r3
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	d0f5      	beq.n	800b1b2 <LCD_SetSizeEx+0xe>
 800b1c6:	9801      	ldr	r0, [sp, #4]
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	4622      	mov	r2, r4
 800b1cc:	4798      	blx	r3
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	b003      	add	sp, #12
 800b1d2:	bd30      	pop	{r4, r5, pc}

0800b1d4 <LCD_SetLUTEntryEx>:
 800b1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1d6:	460d      	mov	r5, r1
 800b1d8:	4614      	mov	r4, r2
 800b1da:	f001 fa7b 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 800b1de:	9001      	str	r0, [sp, #4]
 800b1e0:	b908      	cbnz	r0, 800b1e6 <LCD_SetLUTEntryEx+0x12>
 800b1e2:	2001      	movs	r0, #1
 800b1e4:	e00c      	b.n	800b200 <LCD_SetLUTEntryEx+0x2c>
 800b1e6:	68c3      	ldr	r3, [r0, #12]
 800b1e8:	2110      	movs	r1, #16
 800b1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ec:	a801      	add	r0, sp, #4
 800b1ee:	4798      	blx	r3
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	d0f5      	beq.n	800b1e2 <LCD_SetLUTEntryEx+0xe>
 800b1f6:	9801      	ldr	r0, [sp, #4]
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	4622      	mov	r2, r4
 800b1fc:	4798      	blx	r3
 800b1fe:	2000      	movs	r0, #0
 800b200:	b003      	add	sp, #12
 800b202:	bd30      	pop	{r4, r5, pc}

0800b204 <_GetDevProp>:
 800b204:	2801      	cmp	r0, #1
 800b206:	b510      	push	{r4, lr}
 800b208:	460c      	mov	r4, r1
 800b20a:	dc08      	bgt.n	800b21e <_GetDevProp+0x1a>
 800b20c:	f001 fa62 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 800b210:	b120      	cbz	r0, 800b21c <_GetDevProp+0x18>
 800b212:	68c3      	ldr	r3, [r0, #12]
 800b214:	4621      	mov	r1, r4
 800b216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b218:	4798      	blx	r3
 800b21a:	bd10      	pop	{r4, pc}
 800b21c:	bd10      	pop	{r4, pc}
 800b21e:	2000      	movs	r0, #0
 800b220:	bd10      	pop	{r4, pc}

0800b222 <_GetMaxValue>:
 800b222:	b538      	push	{r3, r4, r5, lr}
 800b224:	4604      	mov	r4, r0
 800b226:	4621      	mov	r1, r4
 800b228:	2001      	movs	r0, #1
 800b22a:	f7ff ffeb 	bl	800b204 <_GetDevProp>
 800b22e:	4621      	mov	r1, r4
 800b230:	4605      	mov	r5, r0
 800b232:	2000      	movs	r0, #0
 800b234:	f7ff ffe6 	bl	800b204 <_GetDevProp>
 800b238:	42a8      	cmp	r0, r5
 800b23a:	bfb8      	it	lt
 800b23c:	4628      	movlt	r0, r5
 800b23e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b242:	bd38      	pop	{r3, r4, r5, pc}

0800b244 <LCD_GetXSizeEx>:
 800b244:	2101      	movs	r1, #1
 800b246:	f7ff bfdd 	b.w	800b204 <_GetDevProp>

0800b24a <LCD_GetYSizeEx>:
 800b24a:	2102      	movs	r1, #2
 800b24c:	f7ff bfda 	b.w	800b204 <_GetDevProp>

0800b250 <LCD_GetVXSizeEx>:
 800b250:	2103      	movs	r1, #3
 800b252:	f7ff bfd7 	b.w	800b204 <_GetDevProp>

0800b256 <LCD_GetVYSizeEx>:
 800b256:	2104      	movs	r1, #4
 800b258:	f7ff bfd4 	b.w	800b204 <_GetDevProp>

0800b25c <LCD_GetBitsPerPixelEx>:
 800b25c:	2108      	movs	r1, #8
 800b25e:	f7ff bfd1 	b.w	800b204 <_GetDevProp>

0800b262 <LCD_GetNumColorsEx>:
 800b262:	2109      	movs	r1, #9
 800b264:	f7ff bfce 	b.w	800b204 <_GetDevProp>

0800b268 <LCD_GetXSize>:
 800b268:	4b02      	ldr	r3, [pc, #8]	; (800b274 <LCD_GetXSize+0xc>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	7c58      	ldrb	r0, [r3, #17]
 800b26e:	f7ff bfe9 	b.w	800b244 <LCD_GetXSizeEx>
 800b272:	bf00      	nop
 800b274:	20000084 	.word	0x20000084

0800b278 <LCD_GetYSize>:
 800b278:	4b02      	ldr	r3, [pc, #8]	; (800b284 <LCD_GetYSize+0xc>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	7c58      	ldrb	r0, [r3, #17]
 800b27e:	f7ff bfe4 	b.w	800b24a <LCD_GetYSizeEx>
 800b282:	bf00      	nop
 800b284:	20000084 	.word	0x20000084

0800b288 <LCD_GetNumColors>:
 800b288:	4b02      	ldr	r3, [pc, #8]	; (800b294 <LCD_GetNumColors+0xc>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	7c58      	ldrb	r0, [r3, #17]
 800b28e:	f7ff bfe8 	b.w	800b262 <LCD_GetNumColorsEx>
 800b292:	bf00      	nop
 800b294:	20000084 	.word	0x20000084

0800b298 <GUI_GetBitsPerPixelEx>:
 800b298:	b508      	push	{r3, lr}
 800b29a:	4b04      	ldr	r3, [pc, #16]	; (800b2ac <GUI_GetBitsPerPixelEx+0x14>)
 800b29c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b2a0:	68c3      	ldr	r3, [r0, #12]
 800b2a2:	2108      	movs	r1, #8
 800b2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a6:	4798      	blx	r3
 800b2a8:	bd08      	pop	{r3, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20005694 	.word	0x20005694

0800b2b0 <LCD_GetPaletteEx>:
 800b2b0:	b508      	push	{r3, lr}
 800b2b2:	f001 fa0f 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 800b2b6:	b120      	cbz	r0, 800b2c2 <LCD_GetPaletteEx+0x12>
 800b2b8:	68c3      	ldr	r3, [r0, #12]
 800b2ba:	2102      	movs	r1, #2
 800b2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2be:	4798      	blx	r3
 800b2c0:	bd08      	pop	{r3, pc}
 800b2c2:	bd08      	pop	{r3, pc}

0800b2c4 <LCD_GetPalette>:
 800b2c4:	4b02      	ldr	r3, [pc, #8]	; (800b2d0 <LCD_GetPalette+0xc>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	7c58      	ldrb	r0, [r3, #17]
 800b2ca:	f7ff bff1 	b.w	800b2b0 <LCD_GetPaletteEx>
 800b2ce:	bf00      	nop
 800b2d0:	20000084 	.word	0x20000084

0800b2d4 <GUI_GetpfIndex2ColorEx>:
 800b2d4:	4b02      	ldr	r3, [pc, #8]	; (800b2e0 <GUI_GetpfIndex2ColorEx+0xc>)
 800b2d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	6858      	ldr	r0, [r3, #4]
 800b2de:	4770      	bx	lr
 800b2e0:	20005694 	.word	0x20005694

0800b2e4 <LCD_GetpfColor2IndexEx>:
 800b2e4:	b508      	push	{r3, lr}
 800b2e6:	f001 f9f5 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 800b2ea:	b108      	cbz	r0, 800b2f0 <LCD_GetpfColor2IndexEx+0xc>
 800b2ec:	6903      	ldr	r3, [r0, #16]
 800b2ee:	6818      	ldr	r0, [r3, #0]
 800b2f0:	bd08      	pop	{r3, pc}
	...

0800b2f4 <GUI_GetpfColor2IndexEx>:
 800b2f4:	4b02      	ldr	r3, [pc, #8]	; (800b300 <GUI_GetpfColor2IndexEx+0xc>)
 800b2f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	6818      	ldr	r0, [r3, #0]
 800b2fe:	4770      	bx	lr
 800b300:	20005694 	.word	0x20005694

0800b304 <LCD_GetXSizeMax>:
 800b304:	2001      	movs	r0, #1
 800b306:	f7ff bf8c 	b.w	800b222 <_GetMaxValue>

0800b30a <LCD_GetYSizeMax>:
 800b30a:	2002      	movs	r0, #2
 800b30c:	f7ff bf89 	b.w	800b222 <_GetMaxValue>

0800b310 <LCD_GetVXSizeMax>:
 800b310:	2003      	movs	r0, #3
 800b312:	f7ff bf86 	b.w	800b222 <_GetMaxValue>
	...

0800b318 <LCD_SetDisplaySize>:
 800b318:	4b02      	ldr	r3, [pc, #8]	; (800b324 <LCD_SetDisplaySize+0xc>)
 800b31a:	6018      	str	r0, [r3, #0]
 800b31c:	4b02      	ldr	r3, [pc, #8]	; (800b328 <LCD_SetDisplaySize+0x10>)
 800b31e:	6019      	str	r1, [r3, #0]
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	20005438 	.word	0x20005438
 800b328:	20005434 	.word	0x20005434

0800b32c <LCD_GetXSizeDisplay>:
 800b32c:	4b01      	ldr	r3, [pc, #4]	; (800b334 <LCD_GetXSizeDisplay+0x8>)
 800b32e:	6818      	ldr	r0, [r3, #0]
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	20005438 	.word	0x20005438

0800b338 <LCD_GetYSizeDisplay>:
 800b338:	4b01      	ldr	r3, [pc, #4]	; (800b340 <LCD_GetYSizeDisplay+0x8>)
 800b33a:	6818      	ldr	r0, [r3, #0]
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	20005434 	.word	0x20005434

0800b344 <LCD__GetBPP>:
 800b344:	2800      	cmp	r0, #0
 800b346:	d03b      	beq.n	800b3c0 <LCD__GetBPP+0x7c>
 800b348:	f030 0301 	bics.w	r3, r0, #1
 800b34c:	d029      	beq.n	800b3a2 <LCD__GetBPP+0x5e>
 800b34e:	f030 0303 	bics.w	r3, r0, #3
 800b352:	d028      	beq.n	800b3a6 <LCD__GetBPP+0x62>
 800b354:	f030 0307 	bics.w	r3, r0, #7
 800b358:	d027      	beq.n	800b3aa <LCD__GetBPP+0x66>
 800b35a:	f030 030f 	bics.w	r3, r0, #15
 800b35e:	d026      	beq.n	800b3ae <LCD__GetBPP+0x6a>
 800b360:	f030 031f 	bics.w	r3, r0, #31
 800b364:	d025      	beq.n	800b3b2 <LCD__GetBPP+0x6e>
 800b366:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800b36a:	d024      	beq.n	800b3b6 <LCD__GetBPP+0x72>
 800b36c:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800b370:	f023 0301 	bic.w	r3, r3, #1
 800b374:	b30b      	cbz	r3, 800b3ba <LCD__GetBPP+0x76>
 800b376:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800b37a:	f023 030f 	bic.w	r3, r3, #15
 800b37e:	b1e3      	cbz	r3, 800b3ba <LCD__GetBPP+0x76>
 800b380:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800b384:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b388:	b1bb      	cbz	r3, 800b3ba <LCD__GetBPP+0x76>
 800b38a:	0c03      	lsrs	r3, r0, #16
 800b38c:	041b      	lsls	r3, r3, #16
 800b38e:	b1a3      	cbz	r3, 800b3ba <LCD__GetBPP+0x76>
 800b390:	0c83      	lsrs	r3, r0, #18
 800b392:	049b      	lsls	r3, r3, #18
 800b394:	b19b      	cbz	r3, 800b3be <LCD__GetBPP+0x7a>
 800b396:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b39a:	bf0c      	ite	eq
 800b39c:	2018      	moveq	r0, #24
 800b39e:	2020      	movne	r0, #32
 800b3a0:	4770      	bx	lr
 800b3a2:	2001      	movs	r0, #1
 800b3a4:	4770      	bx	lr
 800b3a6:	2002      	movs	r0, #2
 800b3a8:	4770      	bx	lr
 800b3aa:	2003      	movs	r0, #3
 800b3ac:	4770      	bx	lr
 800b3ae:	2004      	movs	r0, #4
 800b3b0:	4770      	bx	lr
 800b3b2:	2005      	movs	r0, #5
 800b3b4:	4770      	bx	lr
 800b3b6:	2008      	movs	r0, #8
 800b3b8:	4770      	bx	lr
 800b3ba:	2010      	movs	r0, #16
 800b3bc:	4770      	bx	lr
 800b3be:	2012      	movs	r0, #18
 800b3c0:	4770      	bx	lr

0800b3c2 <LCD__GetBPPDevice>:
 800b3c2:	b508      	push	{r3, lr}
 800b3c4:	f7ff ffbe 	bl	800b344 <LCD__GetBPP>
 800b3c8:	2801      	cmp	r0, #1
 800b3ca:	d00f      	beq.n	800b3ec <LCD__GetBPPDevice+0x2a>
 800b3cc:	1e83      	subs	r3, r0, #2
 800b3ce:	2b06      	cmp	r3, #6
 800b3d0:	d909      	bls.n	800b3e6 <LCD__GetBPPDevice+0x24>
 800b3d2:	f1a0 0309 	sub.w	r3, r0, #9
 800b3d6:	2b07      	cmp	r3, #7
 800b3d8:	d907      	bls.n	800b3ea <LCD__GetBPPDevice+0x28>
 800b3da:	3811      	subs	r0, #17
 800b3dc:	2810      	cmp	r0, #16
 800b3de:	bf34      	ite	cc
 800b3e0:	2020      	movcc	r0, #32
 800b3e2:	2000      	movcs	r0, #0
 800b3e4:	bd08      	pop	{r3, pc}
 800b3e6:	2008      	movs	r0, #8
 800b3e8:	bd08      	pop	{r3, pc}
 800b3ea:	2010      	movs	r0, #16
 800b3ec:	bd08      	pop	{r3, pc}
	...

0800b3f0 <_SetDrawMode>:
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	4b08      	ldr	r3, [pc, #32]	; (800b414 <_SetDrawMode+0x24>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	7c1a      	ldrb	r2, [r3, #16]
 800b3f8:	ea80 0102 	eor.w	r1, r0, r2
 800b3fc:	0749      	lsls	r1, r1, #29
 800b3fe:	d505      	bpl.n	800b40c <_SetDrawMode+0x1c>
 800b400:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800b402:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b404:	6826      	ldr	r6, [r4, #0]
 800b406:	680d      	ldr	r5, [r1, #0]
 800b408:	6025      	str	r5, [r4, #0]
 800b40a:	600e      	str	r6, [r1, #0]
 800b40c:	7418      	strb	r0, [r3, #16]
 800b40e:	4610      	mov	r0, r2
 800b410:	bd70      	pop	{r4, r5, r6, pc}
 800b412:	bf00      	nop
 800b414:	20000084 	.word	0x20000084

0800b418 <LCD_SetDrawMode>:
 800b418:	b508      	push	{r3, lr}
 800b41a:	4b02      	ldr	r3, [pc, #8]	; (800b424 <LCD_SetDrawMode+0xc>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	4798      	blx	r3
 800b422:	bd08      	pop	{r3, pc}
 800b424:	2000006c 	.word	0x2000006c

0800b428 <LCD_DrawPixel>:
 800b428:	b538      	push	{r3, r4, r5, lr}
 800b42a:	4b14      	ldr	r3, [pc, #80]	; (800b47c <LCD_DrawPixel+0x54>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	460a      	mov	r2, r1
 800b430:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800b434:	428a      	cmp	r2, r1
 800b436:	4604      	mov	r4, r0
 800b438:	db1e      	blt.n	800b478 <LCD_DrawPixel+0x50>
 800b43a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800b43e:	428a      	cmp	r2, r1
 800b440:	dc1a      	bgt.n	800b478 <LCD_DrawPixel+0x50>
 800b442:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800b446:	4288      	cmp	r0, r1
 800b448:	db16      	blt.n	800b478 <LCD_DrawPixel+0x50>
 800b44a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800b44e:	4288      	cmp	r0, r1
 800b450:	dc12      	bgt.n	800b478 <LCD_DrawPixel+0x50>
 800b452:	7c19      	ldrb	r1, [r3, #16]
 800b454:	7c58      	ldrb	r0, [r3, #17]
 800b456:	f011 0f01 	tst.w	r1, #1
 800b45a:	4909      	ldr	r1, [pc, #36]	; (800b480 <LCD_DrawPixel+0x58>)
 800b45c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800b460:	d004      	beq.n	800b46c <LCD_DrawPixel+0x44>
 800b462:	68c3      	ldr	r3, [r0, #12]
 800b464:	4621      	mov	r1, r4
 800b466:	69db      	ldr	r3, [r3, #28]
 800b468:	4798      	blx	r3
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	68c1      	ldr	r1, [r0, #12]
 800b46e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b470:	698d      	ldr	r5, [r1, #24]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4621      	mov	r1, r4
 800b476:	47a8      	blx	r5
 800b478:	bd38      	pop	{r3, r4, r5, pc}
 800b47a:	bf00      	nop
 800b47c:	20000084 	.word	0x20000084
 800b480:	20005694 	.word	0x20005694

0800b484 <LCD_DrawHLine>:
 800b484:	b538      	push	{r3, r4, r5, lr}
 800b486:	4b10      	ldr	r3, [pc, #64]	; (800b4c8 <LCD_DrawHLine+0x44>)
 800b488:	681c      	ldr	r4, [r3, #0]
 800b48a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800b48e:	4299      	cmp	r1, r3
 800b490:	460d      	mov	r5, r1
 800b492:	db17      	blt.n	800b4c4 <LCD_DrawHLine+0x40>
 800b494:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800b498:	4299      	cmp	r1, r3
 800b49a:	dc13      	bgt.n	800b4c4 <LCD_DrawHLine+0x40>
 800b49c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800b4a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4a4:	4288      	cmp	r0, r1
 800b4a6:	bfa8      	it	ge
 800b4a8:	4601      	movge	r1, r0
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	bfb8      	it	lt
 800b4ae:	4613      	movlt	r3, r2
 800b4b0:	428b      	cmp	r3, r1
 800b4b2:	db07      	blt.n	800b4c4 <LCD_DrawHLine+0x40>
 800b4b4:	7c60      	ldrb	r0, [r4, #17]
 800b4b6:	4a05      	ldr	r2, [pc, #20]	; (800b4cc <LCD_DrawHLine+0x48>)
 800b4b8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800b4bc:	68c2      	ldr	r2, [r0, #12]
 800b4be:	6894      	ldr	r4, [r2, #8]
 800b4c0:	462a      	mov	r2, r5
 800b4c2:	47a0      	blx	r4
 800b4c4:	bd38      	pop	{r3, r4, r5, pc}
 800b4c6:	bf00      	nop
 800b4c8:	20000084 	.word	0x20000084
 800b4cc:	20005694 	.word	0x20005694

0800b4d0 <LCD_DrawVLine>:
 800b4d0:	b538      	push	{r3, r4, r5, lr}
 800b4d2:	4b10      	ldr	r3, [pc, #64]	; (800b514 <LCD_DrawVLine+0x44>)
 800b4d4:	681c      	ldr	r4, [r3, #0]
 800b4d6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800b4da:	4605      	mov	r5, r0
 800b4dc:	429d      	cmp	r5, r3
 800b4de:	4610      	mov	r0, r2
 800b4e0:	db17      	blt.n	800b512 <LCD_DrawVLine+0x42>
 800b4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e6:	429d      	cmp	r5, r3
 800b4e8:	dc13      	bgt.n	800b512 <LCD_DrawVLine+0x42>
 800b4ea:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800b4ee:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800b4f2:	4291      	cmp	r1, r2
 800b4f4:	bfa8      	it	ge
 800b4f6:	460a      	movge	r2, r1
 800b4f8:	4298      	cmp	r0, r3
 800b4fa:	bfb8      	it	lt
 800b4fc:	4603      	movlt	r3, r0
 800b4fe:	4293      	cmp	r3, r2
 800b500:	db07      	blt.n	800b512 <LCD_DrawVLine+0x42>
 800b502:	7c60      	ldrb	r0, [r4, #17]
 800b504:	4904      	ldr	r1, [pc, #16]	; (800b518 <LCD_DrawVLine+0x48>)
 800b506:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800b50a:	68c1      	ldr	r1, [r0, #12]
 800b50c:	68cc      	ldr	r4, [r1, #12]
 800b50e:	4629      	mov	r1, r5
 800b510:	47a0      	blx	r4
 800b512:	bd38      	pop	{r3, r4, r5, pc}
 800b514:	20000084 	.word	0x20000084
 800b518:	20005694 	.word	0x20005694

0800b51c <LCD_FillRect>:
 800b51c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b51e:	460e      	mov	r6, r1
 800b520:	4912      	ldr	r1, [pc, #72]	; (800b56c <LCD_FillRect+0x50>)
 800b522:	680c      	ldr	r4, [r1, #0]
 800b524:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800b528:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b52c:	4288      	cmp	r0, r1
 800b52e:	bfa8      	it	ge
 800b530:	4601      	movge	r1, r0
 800b532:	42aa      	cmp	r2, r5
 800b534:	bfb8      	it	lt
 800b536:	4615      	movlt	r5, r2
 800b538:	428d      	cmp	r5, r1
 800b53a:	db14      	blt.n	800b566 <LCD_FillRect+0x4a>
 800b53c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800b540:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800b544:	4296      	cmp	r6, r2
 800b546:	bfa8      	it	ge
 800b548:	4632      	movge	r2, r6
 800b54a:	4283      	cmp	r3, r0
 800b54c:	bfa8      	it	ge
 800b54e:	4603      	movge	r3, r0
 800b550:	4293      	cmp	r3, r2
 800b552:	db08      	blt.n	800b566 <LCD_FillRect+0x4a>
 800b554:	7c64      	ldrb	r4, [r4, #17]
 800b556:	4806      	ldr	r0, [pc, #24]	; (800b570 <LCD_FillRect+0x54>)
 800b558:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b55c:	68c4      	ldr	r4, [r0, #12]
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	6924      	ldr	r4, [r4, #16]
 800b562:	462b      	mov	r3, r5
 800b564:	47a0      	blx	r4
 800b566:	b002      	add	sp, #8
 800b568:	bd70      	pop	{r4, r5, r6, pc}
 800b56a:	bf00      	nop
 800b56c:	20000084 	.word	0x20000084
 800b570:	20005694 	.word	0x20005694

0800b574 <LCD__DrawBitmap_1bpp>:
 800b574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b578:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800b728 <LCD__DrawBitmap_1bpp+0x1b4>
 800b57c:	b08f      	sub	sp, #60	; 0x3c
 800b57e:	f8dc c000 	ldr.w	ip, [ip]
 800b582:	9009      	str	r0, [sp, #36]	; 0x24
 800b584:	460e      	mov	r6, r1
 800b586:	4615      	mov	r5, r2
 800b588:	469b      	mov	fp, r3
 800b58a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b58c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800b590:	f1bc 0f00 	cmp.w	ip, #0
 800b594:	d00d      	beq.n	800b5b2 <LCD__DrawBitmap_1bpp+0x3e>
 800b596:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800b598:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b59a:	9500      	str	r5, [sp, #0]
 800b59c:	9601      	str	r6, [sp, #4]
 800b59e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b5a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b5a2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b5a4:	9702      	str	r7, [sp, #8]
 800b5a6:	9503      	str	r5, [sp, #12]
 800b5a8:	9404      	str	r4, [sp, #16]
 800b5aa:	9605      	str	r6, [sp, #20]
 800b5ac:	f8dc 4000 	ldr.w	r4, [ip]
 800b5b0:	e053      	b.n	800b65a <LCD__DrawBitmap_1bpp+0xe6>
 800b5b2:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b5b4:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b5b6:	ea47 0300 	orr.w	r3, r7, r0
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d14f      	bne.n	800b65e <LCD__DrawBitmap_1bpp+0xea>
 800b5be:	4b58      	ldr	r3, [pc, #352]	; (800b720 <LCD__DrawBitmap_1bpp+0x1ac>)
 800b5c0:	6818      	ldr	r0, [r3, #0]
 800b5c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b5c6:	1a51      	subs	r1, r2, r1
 800b5c8:	2900      	cmp	r1, #0
 800b5ca:	dd08      	ble.n	800b5de <LCD__DrawBitmap_1bpp+0x6a>
 800b5cc:	ebc1 030b 	rsb	r3, r1, fp
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f340 80a2 	ble.w	800b71a <LCD__DrawBitmap_1bpp+0x1a6>
 800b5d6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b5d8:	fb07 4401 	mla	r4, r7, r1, r4
 800b5dc:	e001      	b.n	800b5e2 <LCD__DrawBitmap_1bpp+0x6e>
 800b5de:	465b      	mov	r3, fp
 800b5e0:	4632      	mov	r2, r6
 800b5e2:	445e      	add	r6, fp
 800b5e4:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800b5e8:	3e01      	subs	r6, #1
 800b5ea:	1a76      	subs	r6, r6, r1
 800b5ec:	2e00      	cmp	r6, #0
 800b5ee:	dd03      	ble.n	800b5f8 <LCD__DrawBitmap_1bpp+0x84>
 800b5f0:	1b9b      	subs	r3, r3, r6
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f340 8091 	ble.w	800b71a <LCD__DrawBitmap_1bpp+0x1a6>
 800b5f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5fa:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800b5fe:	4429      	add	r1, r5
 800b600:	3901      	subs	r1, #1
 800b602:	1b89      	subs	r1, r1, r6
 800b604:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b606:	2900      	cmp	r1, #0
 800b608:	bfc8      	it	gt
 800b60a:	ebc1 0505 	rsbgt	r5, r1, r5
 800b60e:	ebc8 0106 	rsb	r1, r8, r6
 800b612:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800b616:	42b1      	cmp	r1, r6
 800b618:	da0c      	bge.n	800b634 <LCD__DrawBitmap_1bpp+0xc0>
 800b61a:	ebc1 0c06 	rsb	ip, r1, r6
 800b61e:	eb08 070c 	add.w	r7, r8, ip
 800b622:	1b8e      	subs	r6, r1, r6
 800b624:	f02c 0c07 	bic.w	ip, ip, #7
 800b628:	4435      	add	r5, r6
 800b62a:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 800b62e:	4461      	add	r1, ip
 800b630:	f007 0807 	and.w	r8, r7, #7
 800b634:	2d00      	cmp	r5, #0
 800b636:	dd70      	ble.n	800b71a <LCD__DrawBitmap_1bpp+0x1a6>
 800b638:	7c46      	ldrb	r6, [r0, #17]
 800b63a:	483a      	ldr	r0, [pc, #232]	; (800b724 <LCD__DrawBitmap_1bpp+0x1b0>)
 800b63c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b63e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800b642:	68c6      	ldr	r6, [r0, #12]
 800b644:	9701      	str	r7, [sp, #4]
 800b646:	9403      	str	r4, [sp, #12]
 800b648:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b64a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	9702      	str	r7, [sp, #8]
 800b650:	f8cd 8010 	str.w	r8, [sp, #16]
 800b654:	9405      	str	r4, [sp, #20]
 800b656:	6874      	ldr	r4, [r6, #4]
 800b658:	462b      	mov	r3, r5
 800b65a:	47a0      	blx	r4
 800b65c:	e05d      	b.n	800b71a <LCD__DrawBitmap_1bpp+0x1a6>
 800b65e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b660:	f1c7 0708 	rsb	r7, r7, #8
 800b664:	970c      	str	r7, [sp, #48]	; 0x30
 800b666:	4667      	mov	r7, ip
 800b668:	45dc      	cmp	ip, fp
 800b66a:	da56      	bge.n	800b71a <LCD__DrawBitmap_1bpp+0x1a6>
 800b66c:	4b2c      	ldr	r3, [pc, #176]	; (800b720 <LCD__DrawBitmap_1bpp+0x1ac>)
 800b66e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4430      	add	r0, r6
 800b674:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800b678:	900a      	str	r0, [sp, #40]	; 0x28
 800b67a:	1e41      	subs	r1, r0, #1
 800b67c:	4291      	cmp	r1, r2
 800b67e:	910b      	str	r1, [sp, #44]	; 0x2c
 800b680:	db45      	blt.n	800b70e <LCD__DrawBitmap_1bpp+0x19a>
 800b682:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b686:	429e      	cmp	r6, r3
 800b688:	dc41      	bgt.n	800b70e <LCD__DrawBitmap_1bpp+0x19a>
 800b68a:	f04f 0800 	mov.w	r8, #0
 800b68e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b692:	9408      	str	r4, [sp, #32]
 800b694:	46c2      	mov	sl, r8
 800b696:	45aa      	cmp	sl, r5
 800b698:	da39      	bge.n	800b70e <LCD__DrawBitmap_1bpp+0x19a>
 800b69a:	f1b8 0f00 	cmp.w	r8, #0
 800b69e:	d105      	bne.n	800b6ac <LCD__DrawBitmap_1bpp+0x138>
 800b6a0:	9a08      	ldr	r2, [sp, #32]
 800b6a2:	7817      	ldrb	r7, [r2, #0]
 800b6a4:	3201      	adds	r2, #1
 800b6a6:	9208      	str	r2, [sp, #32]
 800b6a8:	f04f 0808 	mov.w	r8, #8
 800b6ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b6ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b6b0:	4a1b      	ldr	r2, [pc, #108]	; (800b720 <LCD__DrawBitmap_1bpp+0x1ac>)
 800b6b2:	fa47 f300 	asr.w	r3, r7, r0
 800b6b6:	ebc1 0808 	rsb	r8, r1, r8
 800b6ba:	408f      	lsls	r7, r1
 800b6bc:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800b6c0:	b2ff      	uxtb	r7, r7
 800b6c2:	d103      	bne.n	800b6cc <LCD__DrawBitmap_1bpp+0x158>
 800b6c4:	6810      	ldr	r0, [r2, #0]
 800b6c6:	7c00      	ldrb	r0, [r0, #16]
 800b6c8:	0780      	lsls	r0, r0, #30
 800b6ca:	d41b      	bmi.n	800b704 <LCD__DrawBitmap_1bpp+0x190>
 800b6cc:	6812      	ldr	r2, [r2, #0]
 800b6ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b6d0:	6810      	ldr	r0, [r2, #0]
 800b6d2:	900d      	str	r0, [sp, #52]	; 0x34
 800b6d4:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b6d6:	b110      	cbz	r0, 800b6de <LCD__DrawBitmap_1bpp+0x16a>
 800b6d8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800b6dc:	e000      	b.n	800b6e0 <LCD__DrawBitmap_1bpp+0x16c>
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b6e2:	6013      	str	r3, [r2, #0]
 800b6e4:	1e4a      	subs	r2, r1, #1
 800b6e6:	444a      	add	r2, r9
 800b6e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ea:	f8cd c01c 	str.w	ip, [sp, #28]
 800b6ee:	4648      	mov	r0, r9
 800b6f0:	4631      	mov	r1, r6
 800b6f2:	f7ff ff13 	bl	800b51c <LCD_FillRect>
 800b6f6:	4b0a      	ldr	r3, [pc, #40]	; (800b720 <LCD__DrawBitmap_1bpp+0x1ac>)
 800b6f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800b700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b702:	601a      	str	r2, [r3, #0]
 800b704:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b706:	f10a 0a01 	add.w	sl, sl, #1
 800b70a:	4499      	add	r9, r3
 800b70c:	e7c3      	b.n	800b696 <LCD__DrawBitmap_1bpp+0x122>
 800b70e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b710:	f10c 0c01 	add.w	ip, ip, #1
 800b714:	4434      	add	r4, r6
 800b716:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b718:	e7a6      	b.n	800b668 <LCD__DrawBitmap_1bpp+0xf4>
 800b71a:	b00f      	add	sp, #60	; 0x3c
 800b71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b720:	20000084 	.word	0x20000084
 800b724:	20005694 	.word	0x20005694
 800b728:	2000564c 	.word	0x2000564c

0800b72c <LCD_DrawBitmap>:
 800b72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b730:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800b940 <LCD_DrawBitmap+0x214>
 800b734:	b091      	sub	sp, #68	; 0x44
 800b736:	f8dc 9000 	ldr.w	r9, [ip]
 800b73a:	9207      	str	r2, [sp, #28]
 800b73c:	4605      	mov	r5, r0
 800b73e:	4688      	mov	r8, r1
 800b740:	469b      	mov	fp, r3
 800b742:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800b744:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b746:	f1b9 0f00 	cmp.w	r9, #0
 800b74a:	d00c      	beq.n	800b766 <LCD_DrawBitmap+0x3a>
 800b74c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b74e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b750:	9500      	str	r5, [sp, #0]
 800b752:	9701      	str	r7, [sp, #4]
 800b754:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b756:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b758:	9602      	str	r6, [sp, #8]
 800b75a:	9503      	str	r5, [sp, #12]
 800b75c:	9404      	str	r4, [sp, #16]
 800b75e:	9705      	str	r7, [sp, #20]
 800b760:	f8d9 4000 	ldr.w	r4, [r9]
 800b764:	e081      	b.n	800b86a <LCD_DrawBitmap+0x13e>
 800b766:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b768:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b76a:	ea47 0300 	orr.w	r3, r7, r0
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d17d      	bne.n	800b86e <LCD_DrawBitmap+0x142>
 800b772:	4b71      	ldr	r3, [pc, #452]	; (800b938 <LCD_DrawBitmap+0x20c>)
 800b774:	6818      	ldr	r0, [r3, #0]
 800b776:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b77a:	1a53      	subs	r3, r2, r1
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	dd08      	ble.n	800b792 <LCD_DrawBitmap+0x66>
 800b780:	ebc3 010b 	rsb	r1, r3, fp
 800b784:	2900      	cmp	r1, #0
 800b786:	f340 80d4 	ble.w	800b932 <LCD_DrawBitmap+0x206>
 800b78a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800b78c:	fb07 4403 	mla	r4, r7, r3, r4
 800b790:	e001      	b.n	800b796 <LCD_DrawBitmap+0x6a>
 800b792:	4659      	mov	r1, fp
 800b794:	4642      	mov	r2, r8
 800b796:	44d8      	add	r8, fp
 800b798:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800b79c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b7a0:	ebc3 0808 	rsb	r8, r3, r8
 800b7a4:	f1b8 0f00 	cmp.w	r8, #0
 800b7a8:	dd04      	ble.n	800b7b4 <LCD_DrawBitmap+0x88>
 800b7aa:	ebc8 0101 	rsb	r1, r8, r1
 800b7ae:	2900      	cmp	r1, #0
 800b7b0:	f340 80bf 	ble.w	800b932 <LCD_DrawBitmap+0x206>
 800b7b4:	9b07      	ldr	r3, [sp, #28]
 800b7b6:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800b7ba:	442b      	add	r3, r5
 800b7bc:	3b01      	subs	r3, #1
 800b7be:	ebcc 0303 	rsb	r3, ip, r3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	dd02      	ble.n	800b7cc <LCD_DrawBitmap+0xa0>
 800b7c6:	9f07      	ldr	r7, [sp, #28]
 800b7c8:	1aff      	subs	r7, r7, r3
 800b7ca:	9707      	str	r7, [sp, #28]
 800b7cc:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800b7d0:	4565      	cmp	r5, ip
 800b7d2:	da33      	bge.n	800b83c <LCD_DrawBitmap+0x110>
 800b7d4:	9f07      	ldr	r7, [sp, #28]
 800b7d6:	ebc5 030c 	rsb	r3, r5, ip
 800b7da:	1aff      	subs	r7, r7, r3
 800b7dc:	2e08      	cmp	r6, #8
 800b7de:	9707      	str	r7, [sp, #28]
 800b7e0:	d027      	beq.n	800b832 <LCD_DrawBitmap+0x106>
 800b7e2:	dc0d      	bgt.n	800b800 <LCD_DrawBitmap+0xd4>
 800b7e4:	2e02      	cmp	r6, #2
 800b7e6:	d014      	beq.n	800b812 <LCD_DrawBitmap+0xe6>
 800b7e8:	2e04      	cmp	r6, #4
 800b7ea:	d01a      	beq.n	800b822 <LCD_DrawBitmap+0xf6>
 800b7ec:	2e01      	cmp	r6, #1
 800b7ee:	d126      	bne.n	800b83e <LCD_DrawBitmap+0x112>
 800b7f0:	f023 0c07 	bic.w	ip, r3, #7
 800b7f4:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800b7f8:	4465      	add	r5, ip
 800b7fa:	f003 0307 	and.w	r3, r3, #7
 800b7fe:	e01e      	b.n	800b83e <LCD_DrawBitmap+0x112>
 800b800:	2e18      	cmp	r6, #24
 800b802:	d018      	beq.n	800b836 <LCD_DrawBitmap+0x10a>
 800b804:	2e20      	cmp	r6, #32
 800b806:	d016      	beq.n	800b836 <LCD_DrawBitmap+0x10a>
 800b808:	2e10      	cmp	r6, #16
 800b80a:	d118      	bne.n	800b83e <LCD_DrawBitmap+0x112>
 800b80c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800b810:	e013      	b.n	800b83a <LCD_DrawBitmap+0x10e>
 800b812:	f023 0c03 	bic.w	ip, r3, #3
 800b816:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800b81a:	4465      	add	r5, ip
 800b81c:	f003 0303 	and.w	r3, r3, #3
 800b820:	e00d      	b.n	800b83e <LCD_DrawBitmap+0x112>
 800b822:	f023 0c01 	bic.w	ip, r3, #1
 800b826:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800b82a:	4465      	add	r5, ip
 800b82c:	f003 0301 	and.w	r3, r3, #1
 800b830:	e005      	b.n	800b83e <LCD_DrawBitmap+0x112>
 800b832:	441c      	add	r4, r3
 800b834:	e001      	b.n	800b83a <LCD_DrawBitmap+0x10e>
 800b836:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b83a:	4665      	mov	r5, ip
 800b83c:	2300      	movs	r3, #0
 800b83e:	9f07      	ldr	r7, [sp, #28]
 800b840:	2f00      	cmp	r7, #0
 800b842:	dd76      	ble.n	800b932 <LCD_DrawBitmap+0x206>
 800b844:	f890 e011 	ldrb.w	lr, [r0, #17]
 800b848:	483c      	ldr	r0, [pc, #240]	; (800b93c <LCD_DrawBitmap+0x210>)
 800b84a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800b84c:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800b850:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800b854:	9403      	str	r4, [sp, #12]
 800b856:	e88d 0042 	stmia.w	sp, {r1, r6}
 800b85a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800b85c:	9304      	str	r3, [sp, #16]
 800b85e:	9702      	str	r7, [sp, #8]
 800b860:	9405      	str	r4, [sp, #20]
 800b862:	f8de 4004 	ldr.w	r4, [lr, #4]
 800b866:	9b07      	ldr	r3, [sp, #28]
 800b868:	4629      	mov	r1, r5
 800b86a:	47a0      	blx	r4
 800b86c:	e061      	b.n	800b932 <LCD_DrawBitmap+0x206>
 800b86e:	f1c6 0708 	rsb	r7, r6, #8
 800b872:	970e      	str	r7, [sp, #56]	; 0x38
 800b874:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800b878:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b87a:	455f      	cmp	r7, fp
 800b87c:	da59      	bge.n	800b932 <LCD_DrawBitmap+0x206>
 800b87e:	4b2e      	ldr	r3, [pc, #184]	; (800b938 <LCD_DrawBitmap+0x20c>)
 800b880:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4447      	add	r7, r8
 800b886:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800b88a:	970c      	str	r7, [sp, #48]	; 0x30
 800b88c:	3f01      	subs	r7, #1
 800b88e:	4297      	cmp	r7, r2
 800b890:	970d      	str	r7, [sp, #52]	; 0x34
 800b892:	db46      	blt.n	800b922 <LCD_DrawBitmap+0x1f6>
 800b894:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b898:	4598      	cmp	r8, r3
 800b89a:	dc42      	bgt.n	800b922 <LCD_DrawBitmap+0x1f6>
 800b89c:	f04f 0a00 	mov.w	sl, #0
 800b8a0:	940b      	str	r4, [sp, #44]	; 0x2c
 800b8a2:	46ac      	mov	ip, r5
 800b8a4:	4657      	mov	r7, sl
 800b8a6:	9807      	ldr	r0, [sp, #28]
 800b8a8:	4287      	cmp	r7, r0
 800b8aa:	da3a      	bge.n	800b922 <LCD_DrawBitmap+0x1f6>
 800b8ac:	f1ba 0f00 	cmp.w	sl, #0
 800b8b0:	d106      	bne.n	800b8c0 <LCD_DrawBitmap+0x194>
 800b8b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b8b4:	f890 9000 	ldrb.w	r9, [r0]
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	900b      	str	r0, [sp, #44]	; 0x2c
 800b8bc:	f04f 0a08 	mov.w	sl, #8
 800b8c0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b8c2:	4a1d      	ldr	r2, [pc, #116]	; (800b938 <LCD_DrawBitmap+0x20c>)
 800b8c4:	fa49 f301 	asr.w	r3, r9, r1
 800b8c8:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800b8cc:	fa09 f906 	lsl.w	r9, r9, r6
 800b8d0:	fa5f f989 	uxtb.w	r9, r9
 800b8d4:	ebc6 0a0a 	rsb	sl, r6, sl
 800b8d8:	d103      	bne.n	800b8e2 <LCD_DrawBitmap+0x1b6>
 800b8da:	6810      	ldr	r0, [r2, #0]
 800b8dc:	7c00      	ldrb	r0, [r0, #16]
 800b8de:	0780      	lsls	r0, r0, #30
 800b8e0:	d41b      	bmi.n	800b91a <LCD_DrawBitmap+0x1ee>
 800b8e2:	6812      	ldr	r2, [r2, #0]
 800b8e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b8e6:	6810      	ldr	r0, [r2, #0]
 800b8e8:	900f      	str	r0, [sp, #60]	; 0x3c
 800b8ea:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800b8ec:	b110      	cbz	r0, 800b8f4 <LCD_DrawBitmap+0x1c8>
 800b8ee:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800b8f2:	e000      	b.n	800b8f6 <LCD_DrawBitmap+0x1ca>
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b8f8:	6013      	str	r3, [r2, #0]
 800b8fa:	1e4a      	subs	r2, r1, #1
 800b8fc:	4462      	add	r2, ip
 800b8fe:	4660      	mov	r0, ip
 800b900:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b902:	f8cd c020 	str.w	ip, [sp, #32]
 800b906:	4641      	mov	r1, r8
 800b908:	f7ff fe08 	bl	800b51c <LCD_FillRect>
 800b90c:	4b0a      	ldr	r3, [pc, #40]	; (800b938 <LCD_DrawBitmap+0x20c>)
 800b90e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b918:	601a      	str	r2, [r3, #0]
 800b91a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b91c:	3701      	adds	r7, #1
 800b91e:	449c      	add	ip, r3
 800b920:	e7c1      	b.n	800b8a6 <LCD_DrawBitmap+0x17a>
 800b922:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b924:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800b928:	3701      	adds	r7, #1
 800b92a:	970a      	str	r7, [sp, #40]	; 0x28
 800b92c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800b92e:	443c      	add	r4, r7
 800b930:	e7a2      	b.n	800b878 <LCD_DrawBitmap+0x14c>
 800b932:	b011      	add	sp, #68	; 0x44
 800b934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b938:	20000084 	.word	0x20000084
 800b93c:	20005694 	.word	0x20005694
 800b940:	2000564c 	.word	0x2000564c

0800b944 <LCD_SetClipRectMax>:
 800b944:	b508      	push	{r3, lr}
 800b946:	4b05      	ldr	r3, [pc, #20]	; (800b95c <LCD_SetClipRectMax+0x18>)
 800b948:	6819      	ldr	r1, [r3, #0]
 800b94a:	4b05      	ldr	r3, [pc, #20]	; (800b960 <LCD_SetClipRectMax+0x1c>)
 800b94c:	7c4a      	ldrb	r2, [r1, #17]
 800b94e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b952:	68c3      	ldr	r3, [r0, #12]
 800b954:	3108      	adds	r1, #8
 800b956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b958:	4798      	blx	r3
 800b95a:	bd08      	pop	{r3, pc}
 800b95c:	20000084 	.word	0x20000084
 800b960:	20005694 	.word	0x20005694

0800b964 <emWin_LCD_Init>:
 800b964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b966:	f7ff ffed 	bl	800b944 <LCD_SetClipRectMax>
 800b96a:	f004 fe6f 	bl	801064c <LCD_InitColors>
 800b96e:	4604      	mov	r4, r0
 800b970:	2800      	cmp	r0, #0
 800b972:	d145      	bne.n	800ba00 <emWin_LCD_Init+0x9c>
 800b974:	4605      	mov	r5, r0
 800b976:	4628      	mov	r0, r5
 800b978:	f000 feac 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 800b97c:	9001      	str	r0, [sp, #4]
 800b97e:	b150      	cbz	r0, 800b996 <emWin_LCD_Init+0x32>
 800b980:	68c3      	ldr	r3, [r0, #12]
 800b982:	210c      	movs	r1, #12
 800b984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b986:	a801      	add	r0, sp, #4
 800b988:	4798      	blx	r3
 800b98a:	4603      	mov	r3, r0
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d035      	beq.n	800b9fc <emWin_LCD_Init+0x98>
 800b990:	9801      	ldr	r0, [sp, #4]
 800b992:	4798      	blx	r3
 800b994:	4304      	orrs	r4, r0
 800b996:	3501      	adds	r5, #1
 800b998:	2d02      	cmp	r5, #2
 800b99a:	d1ec      	bne.n	800b976 <emWin_LCD_Init+0x12>
 800b99c:	bb84      	cbnz	r4, 800ba00 <emWin_LCD_Init+0x9c>
 800b99e:	f004 fe71 	bl	8010684 <LCD_InitLUT>
 800b9a2:	4b19      	ldr	r3, [pc, #100]	; (800ba08 <emWin_LCD_Init+0xa4>)
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d101      	bne.n	800b9b2 <emWin_LCD_Init+0x4e>
 800b9ae:	2000      	movs	r0, #0
 800b9b0:	e027      	b.n	800ba02 <emWin_LCD_Init+0x9e>
 800b9b2:	2401      	movs	r4, #1
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f000 fe8d 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 800b9ba:	9001      	str	r0, [sp, #4]
 800b9bc:	b1d0      	cbz	r0, 800b9f4 <emWin_LCD_Init+0x90>
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f000 fcd2 	bl	800c368 <GUI_SelectLayer>
 800b9c4:	2004      	movs	r0, #4
 800b9c6:	f7ff fd27 	bl	800b418 <LCD_SetDrawMode>
 800b9ca:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	4601      	mov	r1, r0
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	f7ff fda2 	bl	800b51c <LCD_FillRect>
 800b9d8:	2000      	movs	r0, #0
 800b9da:	f7ff fd1d 	bl	800b418 <LCD_SetDrawMode>
 800b9de:	a802      	add	r0, sp, #8
 800b9e0:	210e      	movs	r1, #14
 800b9e2:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ea:	4798      	blx	r3
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	b108      	cbz	r0, 800b9f4 <emWin_LCD_Init+0x90>
 800b9f0:	9801      	ldr	r0, [sp, #4]
 800b9f2:	4798      	blx	r3
 800b9f4:	f114 34ff 	adds.w	r4, r4, #4294967295
 800b9f8:	d2dc      	bcs.n	800b9b4 <emWin_LCD_Init+0x50>
 800b9fa:	e7d8      	b.n	800b9ae <emWin_LCD_Init+0x4a>
 800b9fc:	2001      	movs	r0, #1
 800b9fe:	e000      	b.n	800ba02 <emWin_LCD_Init+0x9e>
 800ba00:	4620      	mov	r0, r4
 800ba02:	b003      	add	sp, #12
 800ba04:	bd30      	pop	{r4, r5, pc}
 800ba06:	bf00      	nop
 800ba08:	200054e0 	.word	0x200054e0

0800ba0c <LCD_Color2Index>:
 800ba0c:	b508      	push	{r3, lr}
 800ba0e:	4b05      	ldr	r3, [pc, #20]	; (800ba24 <LCD_Color2Index+0x18>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	7c5a      	ldrb	r2, [r3, #17]
 800ba14:	4b04      	ldr	r3, [pc, #16]	; (800ba28 <LCD_Color2Index+0x1c>)
 800ba16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4798      	blx	r3
 800ba20:	bd08      	pop	{r3, pc}
 800ba22:	bf00      	nop
 800ba24:	20000084 	.word	0x20000084
 800ba28:	20005694 	.word	0x20005694

0800ba2c <LCD_Index2Color>:
 800ba2c:	b508      	push	{r3, lr}
 800ba2e:	4b05      	ldr	r3, [pc, #20]	; (800ba44 <LCD_Index2Color+0x18>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	7c5a      	ldrb	r2, [r3, #17]
 800ba34:	4b04      	ldr	r3, [pc, #16]	; (800ba48 <LCD_Index2Color+0x1c>)
 800ba36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba3a:	691b      	ldr	r3, [r3, #16]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	4798      	blx	r3
 800ba40:	bd08      	pop	{r3, pc}
 800ba42:	bf00      	nop
 800ba44:	20000084 	.word	0x20000084
 800ba48:	20005694 	.word	0x20005694

0800ba4c <LCD_SetColorIndex>:
 800ba4c:	4b04      	ldr	r3, [pc, #16]	; (800ba60 <LCD_SetColorIndex+0x14>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	7c1a      	ldrb	r2, [r3, #16]
 800ba52:	0752      	lsls	r2, r2, #29
 800ba54:	bf4c      	ite	mi
 800ba56:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800ba58:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800ba5a:	6018      	str	r0, [r3, #0]
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	20000084 	.word	0x20000084

0800ba64 <_SetColor>:
 800ba64:	b508      	push	{r3, lr}
 800ba66:	4b06      	ldr	r3, [pc, #24]	; (800ba80 <_SetColor+0x1c>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ba6c:	4281      	cmp	r1, r0
 800ba6e:	d006      	beq.n	800ba7e <_SetColor+0x1a>
 800ba70:	6318      	str	r0, [r3, #48]	; 0x30
 800ba72:	f7ff ffcb 	bl	800ba0c <LCD_Color2Index>
 800ba76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ba7a:	f7ff bfe7 	b.w	800ba4c <LCD_SetColorIndex>
 800ba7e:	bd08      	pop	{r3, pc}
 800ba80:	20000084 	.word	0x20000084

0800ba84 <LCD_SetBkColorIndex>:
 800ba84:	4b04      	ldr	r3, [pc, #16]	; (800ba98 <LCD_SetBkColorIndex+0x14>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	7c1a      	ldrb	r2, [r3, #16]
 800ba8a:	0752      	lsls	r2, r2, #29
 800ba8c:	bf4c      	ite	mi
 800ba8e:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800ba90:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800ba92:	6018      	str	r0, [r3, #0]
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop
 800ba98:	20000084 	.word	0x20000084

0800ba9c <_SetBkColor>:
 800ba9c:	b508      	push	{r3, lr}
 800ba9e:	4b06      	ldr	r3, [pc, #24]	; (800bab8 <_SetBkColor+0x1c>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800baa4:	4281      	cmp	r1, r0
 800baa6:	d006      	beq.n	800bab6 <_SetBkColor+0x1a>
 800baa8:	6358      	str	r0, [r3, #52]	; 0x34
 800baaa:	f7ff ffaf 	bl	800ba0c <LCD_Color2Index>
 800baae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bab2:	f7ff bfe7 	b.w	800ba84 <LCD_SetBkColorIndex>
 800bab6:	bd08      	pop	{r3, pc}
 800bab8:	20000084 	.word	0x20000084

0800babc <LCD_SetBkColor>:
 800babc:	b508      	push	{r3, lr}
 800babe:	4b02      	ldr	r3, [pc, #8]	; (800bac8 <LCD_SetBkColor+0xc>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	4798      	blx	r3
 800bac6:	bd08      	pop	{r3, pc}
 800bac8:	2000006c 	.word	0x2000006c

0800bacc <LCD_SetColor>:
 800bacc:	b508      	push	{r3, lr}
 800bace:	4b02      	ldr	r3, [pc, #8]	; (800bad8 <LCD_SetColor+0xc>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4798      	blx	r3
 800bad6:	bd08      	pop	{r3, pc}
 800bad8:	2000006c 	.word	0x2000006c

0800badc <GUI__HandleEOLine>:
 800badc:	b513      	push	{r0, r1, r4, lr}
 800bade:	6802      	ldr	r2, [r0, #0]
 800bae0:	4604      	mov	r4, r0
 800bae2:	a802      	add	r0, sp, #8
 800bae4:	f840 2d04 	str.w	r2, [r0, #-4]!
 800bae8:	f000 fb62 	bl	800c1b0 <GUI_UC__GetCharCodeInc>
 800baec:	b2c0      	uxtb	r0, r0
 800baee:	b120      	cbz	r0, 800bafa <GUI__HandleEOLine+0x1e>
 800baf0:	280a      	cmp	r0, #10
 800baf2:	d104      	bne.n	800bafe <GUI__HandleEOLine+0x22>
 800baf4:	9b01      	ldr	r3, [sp, #4]
 800baf6:	6023      	str	r3, [r4, #0]
 800baf8:	e001      	b.n	800bafe <GUI__HandleEOLine+0x22>
 800bafa:	2001      	movs	r0, #1
 800bafc:	e000      	b.n	800bb00 <GUI__HandleEOLine+0x24>
 800bafe:	2000      	movs	r0, #0
 800bb00:	b002      	add	sp, #8
 800bb02:	bd10      	pop	{r4, pc}

0800bb04 <GUI__IntersectRect>:
 800bb04:	880b      	ldrh	r3, [r1, #0]
 800bb06:	b510      	push	{r4, lr}
 800bb08:	f9b0 4000 	ldrsh.w	r4, [r0]
 800bb0c:	b21a      	sxth	r2, r3
 800bb0e:	4294      	cmp	r4, r2
 800bb10:	bfb8      	it	lt
 800bb12:	8003      	strhlt	r3, [r0, #0]
 800bb14:	884b      	ldrh	r3, [r1, #2]
 800bb16:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800bb1a:	b21a      	sxth	r2, r3
 800bb1c:	4294      	cmp	r4, r2
 800bb1e:	bfb8      	it	lt
 800bb20:	8043      	strhlt	r3, [r0, #2]
 800bb22:	888b      	ldrh	r3, [r1, #4]
 800bb24:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800bb28:	b21a      	sxth	r2, r3
 800bb2a:	4294      	cmp	r4, r2
 800bb2c:	bfc8      	it	gt
 800bb2e:	8083      	strhgt	r3, [r0, #4]
 800bb30:	88cb      	ldrh	r3, [r1, #6]
 800bb32:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800bb36:	b21a      	sxth	r2, r3
 800bb38:	4291      	cmp	r1, r2
 800bb3a:	bfc8      	it	gt
 800bb3c:	80c3      	strhgt	r3, [r0, #6]
 800bb3e:	bd10      	pop	{r4, pc}

0800bb40 <GUI__IntersectRects>:
 800bb40:	b570      	push	{r4, r5, r6, lr}
 800bb42:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bb46:	f9b1 4000 	ldrsh.w	r4, [r1]
 800bb4a:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800bb4e:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800bb52:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800bb56:	429c      	cmp	r4, r3
 800bb58:	bfb8      	it	lt
 800bb5a:	461c      	movlt	r4, r3
 800bb5c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800bb60:	429d      	cmp	r5, r3
 800bb62:	bfa8      	it	ge
 800bb64:	462b      	movge	r3, r5
 800bb66:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800bb6a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800bb6e:	42ae      	cmp	r6, r5
 800bb70:	bfb8      	it	lt
 800bb72:	4635      	movlt	r5, r6
 800bb74:	b2a4      	uxth	r4, r4
 800bb76:	b2ad      	uxth	r5, r5
 800bb78:	4291      	cmp	r1, r2
 800bb7a:	bfb8      	it	lt
 800bb7c:	460a      	movlt	r2, r1
 800bb7e:	8004      	strh	r4, [r0, #0]
 800bb80:	8085      	strh	r5, [r0, #4]
 800bb82:	b224      	sxth	r4, r4
 800bb84:	b22d      	sxth	r5, r5
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	b292      	uxth	r2, r2
 800bb8a:	42a5      	cmp	r5, r4
 800bb8c:	8043      	strh	r3, [r0, #2]
 800bb8e:	80c2      	strh	r2, [r0, #6]
 800bb90:	db06      	blt.n	800bba0 <GUI__IntersectRects+0x60>
 800bb92:	b210      	sxth	r0, r2
 800bb94:	b21b      	sxth	r3, r3
 800bb96:	4298      	cmp	r0, r3
 800bb98:	bfb4      	ite	lt
 800bb9a:	2000      	movlt	r0, #0
 800bb9c:	2001      	movge	r0, #1
 800bb9e:	bd70      	pop	{r4, r5, r6, pc}
 800bba0:	2000      	movs	r0, #0
 800bba2:	bd70      	pop	{r4, r5, r6, pc}

0800bba4 <GUI__memset16>:
 800bba4:	b570      	push	{r4, r5, r6, lr}
 800bba6:	0784      	lsls	r4, r0, #30
 800bba8:	d502      	bpl.n	800bbb0 <GUI__memset16+0xc>
 800bbaa:	8001      	strh	r1, [r0, #0]
 800bbac:	3a01      	subs	r2, #1
 800bbae:	3002      	adds	r0, #2
 800bbb0:	0855      	lsrs	r5, r2, #1
 800bbb2:	462b      	mov	r3, r5
 800bbb4:	b305      	cbz	r5, 800bbf8 <GUI__memset16+0x54>
 800bbb6:	2d03      	cmp	r5, #3
 800bbb8:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 800bbbc:	dc02      	bgt.n	800bbc4 <GUI__memset16+0x20>
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	461d      	mov	r5, r3
 800bbc2:	e012      	b.n	800bbea <GUI__memset16+0x46>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	462e      	mov	r6, r5
 800bbc8:	3e04      	subs	r6, #4
 800bbca:	2e03      	cmp	r6, #3
 800bbcc:	601c      	str	r4, [r3, #0]
 800bbce:	605c      	str	r4, [r3, #4]
 800bbd0:	609c      	str	r4, [r3, #8]
 800bbd2:	60dc      	str	r4, [r3, #12]
 800bbd4:	f103 0310 	add.w	r3, r3, #16
 800bbd8:	dcf6      	bgt.n	800bbc8 <GUI__memset16+0x24>
 800bbda:	3d04      	subs	r5, #4
 800bbdc:	08ab      	lsrs	r3, r5, #2
 800bbde:	1c5e      	adds	r6, r3, #1
 800bbe0:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800bbe4:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 800bbe8:	e7e9      	b.n	800bbbe <GUI__memset16+0x1a>
 800bbea:	b11d      	cbz	r5, 800bbf4 <GUI__memset16+0x50>
 800bbec:	f846 4b04 	str.w	r4, [r6], #4
 800bbf0:	3d01      	subs	r5, #1
 800bbf2:	e7fa      	b.n	800bbea <GUI__memset16+0x46>
 800bbf4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800bbf8:	07d3      	lsls	r3, r2, #31
 800bbfa:	bf48      	it	mi
 800bbfc:	8001      	strhmi	r1, [r0, #0]
 800bbfe:	bd70      	pop	{r4, r5, r6, pc}

0800bc00 <GUI__Read16>:
 800bc00:	6803      	ldr	r3, [r0, #0]
 800bc02:	781a      	ldrb	r2, [r3, #0]
 800bc04:	7859      	ldrb	r1, [r3, #1]
 800bc06:	3302      	adds	r3, #2
 800bc08:	6003      	str	r3, [r0, #0]
 800bc0a:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
 800bc0e:	4770      	bx	lr

0800bc10 <GUI__Read32>:
 800bc10:	b510      	push	{r4, lr}
 800bc12:	6803      	ldr	r3, [r0, #0]
 800bc14:	789a      	ldrb	r2, [r3, #2]
 800bc16:	785c      	ldrb	r4, [r3, #1]
 800bc18:	7819      	ldrb	r1, [r3, #0]
 800bc1a:	0412      	lsls	r2, r2, #16
 800bc1c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800bc20:	430a      	orrs	r2, r1
 800bc22:	78d9      	ldrb	r1, [r3, #3]
 800bc24:	3304      	adds	r3, #4
 800bc26:	6003      	str	r3, [r0, #0]
 800bc28:	ea42 6001 	orr.w	r0, r2, r1, lsl #24
 800bc2c:	bd10      	pop	{r4, pc}

0800bc2e <GUI__ReduceRect>:
 800bc2e:	880b      	ldrh	r3, [r1, #0]
 800bc30:	b292      	uxth	r2, r2
 800bc32:	4413      	add	r3, r2
 800bc34:	8003      	strh	r3, [r0, #0]
 800bc36:	888b      	ldrh	r3, [r1, #4]
 800bc38:	1a9b      	subs	r3, r3, r2
 800bc3a:	8083      	strh	r3, [r0, #4]
 800bc3c:	884b      	ldrh	r3, [r1, #2]
 800bc3e:	4413      	add	r3, r2
 800bc40:	8043      	strh	r3, [r0, #2]
 800bc42:	88cb      	ldrh	r3, [r1, #6]
 800bc44:	1a9a      	subs	r2, r3, r2
 800bc46:	80c2      	strh	r2, [r0, #6]
 800bc48:	4770      	bx	lr

0800bc4a <GUI__sqrt32>:
 800bc4a:	b510      	push	{r4, lr}
 800bc4c:	2110      	movs	r1, #16
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bc54:	189c      	adds	r4, r3, r2
 800bc56:	4284      	cmp	r4, r0
 800bc58:	bf9c      	itt	ls
 800bc5a:	18a3      	addls	r3, r4, r2
 800bc5c:	ebc4 0000 	rsbls	r0, r4, r0
 800bc60:	3901      	subs	r1, #1
 800bc62:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800bc66:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800bc6a:	d1f3      	bne.n	800bc54 <GUI__sqrt32+0xa>
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	bd10      	pop	{r4, pc}

0800bc70 <GUI__strcmp>:
 800bc70:	b510      	push	{r4, lr}
 800bc72:	4b09      	ldr	r3, [pc, #36]	; (800bc98 <GUI__strcmp+0x28>)
 800bc74:	2800      	cmp	r0, #0
 800bc76:	bf08      	it	eq
 800bc78:	4618      	moveq	r0, r3
 800bc7a:	2900      	cmp	r1, #0
 800bc7c:	bf08      	it	eq
 800bc7e:	4619      	moveq	r1, r3
 800bc80:	2300      	movs	r3, #0
 800bc82:	5cc4      	ldrb	r4, [r0, r3]
 800bc84:	5cca      	ldrb	r2, [r1, r3]
 800bc86:	42a2      	cmp	r2, r4
 800bc88:	d104      	bne.n	800bc94 <GUI__strcmp+0x24>
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	2a00      	cmp	r2, #0
 800bc8e:	d1f8      	bne.n	800bc82 <GUI__strcmp+0x12>
 800bc90:	4610      	mov	r0, r2
 800bc92:	bd10      	pop	{r4, pc}
 800bc94:	2001      	movs	r0, #1
 800bc96:	bd10      	pop	{r4, pc}
 800bc98:	08014937 	.word	0x08014937

0800bc9c <GUI__strcmp_hp>:
 800bc9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc9e:	460d      	mov	r5, r1
 800bca0:	b160      	cbz	r0, 800bcbc <GUI__strcmp_hp+0x20>
 800bca2:	f002 fa51 	bl	800e148 <GUI_ALLOC_LockH>
 800bca6:	ac02      	add	r4, sp, #8
 800bca8:	4629      	mov	r1, r5
 800bcaa:	f844 0d04 	str.w	r0, [r4, #-4]!
 800bcae:	f7ff ffdf 	bl	800bc70 <GUI__strcmp>
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f002 fa55 	bl	800e164 <GUI_ALLOC_UnlockH>
 800bcba:	e000      	b.n	800bcbe <GUI__strcmp_hp+0x22>
 800bcbc:	2501      	movs	r5, #1
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	b003      	add	sp, #12
 800bcc2:	bd30      	pop	{r4, r5, pc}

0800bcc4 <GUI__strlen>:
 800bcc4:	f04f 33ff 	mov.w	r3, #4294967295
 800bcc8:	b118      	cbz	r0, 800bcd2 <GUI__strlen+0xe>
 800bcca:	3301      	adds	r3, #1
 800bccc:	5cc2      	ldrb	r2, [r0, r3]
 800bcce:	2a00      	cmp	r2, #0
 800bcd0:	d1fb      	bne.n	800bcca <GUI__strlen+0x6>
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	4770      	bx	lr
	...

0800bcd8 <GUI__SetText>:
 800bcd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcda:	6807      	ldr	r7, [r0, #0]
 800bcdc:	4605      	mov	r5, r0
 800bcde:	4638      	mov	r0, r7
 800bce0:	460e      	mov	r6, r1
 800bce2:	f7ff ffdb 	bl	800bc9c <GUI__strcmp_hp>
 800bce6:	b908      	cbnz	r0, 800bcec <GUI__SetText+0x14>
 800bce8:	2000      	movs	r0, #0
 800bcea:	e02f      	b.n	800bd4c <GUI__SetText+0x74>
 800bcec:	4630      	mov	r0, r6
 800bcee:	f7ff ffe9 	bl	800bcc4 <GUI__strlen>
 800bcf2:	1c44      	adds	r4, r0, #1
 800bcf4:	4638      	mov	r0, r7
 800bcf6:	f002 fa55 	bl	800e1a4 <GUI_ALLOC_GetSize>
 800bcfa:	4284      	cmp	r4, r0
 800bcfc:	d110      	bne.n	800bd20 <GUI__SetText+0x48>
 800bcfe:	2c00      	cmp	r4, #0
 800bd00:	d0f2      	beq.n	800bce8 <GUI__SetText+0x10>
 800bd02:	4638      	mov	r0, r7
 800bd04:	f002 fa20 	bl	800e148 <GUI_ALLOC_LockH>
 800bd08:	ad02      	add	r5, sp, #8
 800bd0a:	4b11      	ldr	r3, [pc, #68]	; (800bd50 <GUI__SetText+0x78>)
 800bd0c:	f845 0d04 	str.w	r0, [r5, #-4]!
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4631      	mov	r1, r6
 800bd14:	4622      	mov	r2, r4
 800bd16:	4798      	blx	r3
 800bd18:	4628      	mov	r0, r5
 800bd1a:	f002 fa23 	bl	800e164 <GUI_ALLOC_UnlockH>
 800bd1e:	e014      	b.n	800bd4a <GUI__SetText+0x72>
 800bd20:	4620      	mov	r0, r4
 800bd22:	f002 fbdd 	bl	800e4e0 <GUI_ALLOC_AllocNoInit>
 800bd26:	4607      	mov	r7, r0
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d0dd      	beq.n	800bce8 <GUI__SetText+0x10>
 800bd2c:	f002 fa0c 	bl	800e148 <GUI_ALLOC_LockH>
 800bd30:	ac02      	add	r4, sp, #8
 800bd32:	4631      	mov	r1, r6
 800bd34:	f844 0d04 	str.w	r0, [r4, #-4]!
 800bd38:	f005 fbfd 	bl	8011536 <strcpy>
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f002 fa11 	bl	800e164 <GUI_ALLOC_UnlockH>
 800bd42:	4628      	mov	r0, r5
 800bd44:	f002 fbd0 	bl	800e4e8 <GUI_ALLOC_FreePtr>
 800bd48:	602f      	str	r7, [r5, #0]
 800bd4a:	2001      	movs	r0, #1
 800bd4c:	b003      	add	sp, #12
 800bd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd50:	20000074 	.word	0x20000074

0800bd54 <GUI__ManageCacheEx>:
 800bd54:	2801      	cmp	r0, #1
 800bd56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd58:	4604      	mov	r4, r0
 800bd5a:	460d      	mov	r5, r1
 800bd5c:	dc65      	bgt.n	800be2a <GUI__ManageCacheEx+0xd6>
 800bd5e:	4b34      	ldr	r3, [pc, #208]	; (800be30 <GUI__ManageCacheEx+0xdc>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	b103      	cbz	r3, 800bd66 <GUI__ManageCacheEx+0x12>
 800bd64:	4798      	blx	r3
 800bd66:	2d01      	cmp	r5, #1
 800bd68:	d004      	beq.n	800bd74 <GUI__ManageCacheEx+0x20>
 800bd6a:	2d02      	cmp	r5, #2
 800bd6c:	d021      	beq.n	800bdb2 <GUI__ManageCacheEx+0x5e>
 800bd6e:	2d00      	cmp	r5, #0
 800bd70:	d15b      	bne.n	800be2a <GUI__ManageCacheEx+0xd6>
 800bd72:	e035      	b.n	800bde0 <GUI__ManageCacheEx+0x8c>
 800bd74:	4e2f      	ldr	r6, [pc, #188]	; (800be34 <GUI__ManageCacheEx+0xe0>)
 800bd76:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 800bd7a:	b9b7      	cbnz	r7, 800bdaa <GUI__ManageCacheEx+0x56>
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f000 fca9 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 800bd82:	9001      	str	r0, [sp, #4]
 800bd84:	2800      	cmp	r0, #0
 800bd86:	d050      	beq.n	800be2a <GUI__ManageCacheEx+0xd6>
 800bd88:	68c3      	ldr	r3, [r0, #12]
 800bd8a:	210d      	movs	r1, #13
 800bd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8e:	a801      	add	r0, sp, #4
 800bd90:	4798      	blx	r3
 800bd92:	4603      	mov	r3, r0
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d048      	beq.n	800be2a <GUI__ManageCacheEx+0xd6>
 800bd98:	9801      	ldr	r0, [sp, #4]
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	4798      	blx	r3
 800bd9e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800bda2:	3301      	adds	r3, #1
 800bda4:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800bda8:	e018      	b.n	800bddc <GUI__ManageCacheEx+0x88>
 800bdaa:	3701      	adds	r7, #1
 800bdac:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800bdb0:	e03b      	b.n	800be2a <GUI__ManageCacheEx+0xd6>
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	f000 fc8e 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 800bdb8:	9001      	str	r0, [sp, #4]
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d035      	beq.n	800be2a <GUI__ManageCacheEx+0xd6>
 800bdbe:	68c3      	ldr	r3, [r0, #12]
 800bdc0:	210d      	movs	r1, #13
 800bdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc4:	a801      	add	r0, sp, #4
 800bdc6:	4798      	blx	r3
 800bdc8:	4604      	mov	r4, r0
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	d02d      	beq.n	800be2a <GUI__ManageCacheEx+0xd6>
 800bdce:	4b1a      	ldr	r3, [pc, #104]	; (800be38 <GUI__ManageCacheEx+0xe4>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	b103      	cbz	r3, 800bdd6 <GUI__ManageCacheEx+0x82>
 800bdd4:	4798      	blx	r3
 800bdd6:	9801      	ldr	r0, [sp, #4]
 800bdd8:	2102      	movs	r1, #2
 800bdda:	47a0      	blx	r4
 800bddc:	2000      	movs	r0, #0
 800bdde:	e025      	b.n	800be2c <GUI__ManageCacheEx+0xd8>
 800bde0:	4d14      	ldr	r5, [pc, #80]	; (800be34 <GUI__ManageCacheEx+0xe0>)
 800bde2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d001      	beq.n	800bdee <GUI__ManageCacheEx+0x9a>
 800bdea:	2001      	movs	r0, #1
 800bdec:	e015      	b.n	800be1a <GUI__ManageCacheEx+0xc6>
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f000 fc70 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 800bdf4:	9001      	str	r0, [sp, #4]
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d0f7      	beq.n	800bdea <GUI__ManageCacheEx+0x96>
 800bdfa:	68c3      	ldr	r3, [r0, #12]
 800bdfc:	210d      	movs	r1, #13
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be00:	a801      	add	r0, sp, #4
 800be02:	4798      	blx	r3
 800be04:	4606      	mov	r6, r0
 800be06:	2800      	cmp	r0, #0
 800be08:	d0ef      	beq.n	800bdea <GUI__ManageCacheEx+0x96>
 800be0a:	4b0b      	ldr	r3, [pc, #44]	; (800be38 <GUI__ManageCacheEx+0xe4>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	b103      	cbz	r3, 800be12 <GUI__ManageCacheEx+0xbe>
 800be10:	4798      	blx	r3
 800be12:	9801      	ldr	r0, [sp, #4]
 800be14:	2100      	movs	r1, #0
 800be16:	47b0      	blx	r6
 800be18:	2000      	movs	r0, #0
 800be1a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	bf18      	it	ne
 800be22:	3b01      	subne	r3, #1
 800be24:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800be28:	e000      	b.n	800be2c <GUI__ManageCacheEx+0xd8>
 800be2a:	2001      	movs	r0, #1
 800be2c:	b003      	add	sp, #12
 800be2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be30:	20005448 	.word	0x20005448
 800be34:	20005440 	.word	0x20005440
 800be38:	2000543c 	.word	0x2000543c

0800be3c <GUI__ManageCache>:
 800be3c:	4b02      	ldr	r3, [pc, #8]	; (800be48 <GUI__ManageCache+0xc>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4601      	mov	r1, r0
 800be42:	7c58      	ldrb	r0, [r3, #17]
 800be44:	f7ff bf86 	b.w	800bd54 <GUI__ManageCacheEx>
 800be48:	20000084 	.word	0x20000084

0800be4c <GUI__MixColors>:
 800be4c:	f081 417f 	eor.w	r1, r1, #4278190080	; 0xff000000
 800be50:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800be54:	0e0b      	lsrs	r3, r1, #24
 800be56:	ea4f 6310 	mov.w	r3, r0, lsr #24
 800be5a:	b530      	push	{r4, r5, lr}
 800be5c:	fb02 f303 	mul.w	r3, r2, r3
 800be60:	f04f 04ff 	mov.w	r4, #255	; 0xff
 800be64:	fbb3 f3f4 	udiv	r3, r3, r4
 800be68:	bf08      	it	eq
 800be6a:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 800be6e:	1ae2      	subs	r2, r4, r3
 800be70:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800be74:	f001 25ff 	and.w	r5, r1, #4278255360	; 0xff00ff00
 800be78:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800be7c:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 800be80:	0a2d      	lsrs	r5, r5, #8
 800be82:	435c      	muls	r4, r3
 800be84:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800be88:	4343      	muls	r3, r0
 800be8a:	fb02 4405 	mla	r4, r2, r5, r4
 800be8e:	fb02 3201 	mla	r2, r2, r1, r3
 800be92:	0a12      	lsrs	r2, r2, #8
 800be94:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 800be98:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800be9c:	ea44 0002 	orr.w	r0, r4, r2
 800bea0:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800bea4:	bd30      	pop	{r4, r5, pc}
	...

0800bea8 <_OnExit>:
 800bea8:	b570      	push	{r4, r5, r6, lr}
 800beaa:	4c0a      	ldr	r4, [pc, #40]	; (800bed4 <_OnExit+0x2c>)
 800beac:	4d0a      	ldr	r5, [pc, #40]	; (800bed8 <_OnExit+0x30>)
 800beae:	6820      	ldr	r0, [r4, #0]
 800beb0:	4e0a      	ldr	r6, [pc, #40]	; (800bedc <_OnExit+0x34>)
 800beb2:	f002 f935 	bl	800e120 <GUI_ALLOC_FreeFixedBlock>
 800beb6:	6828      	ldr	r0, [r5, #0]
 800beb8:	f002 f932 	bl	800e120 <GUI_ALLOC_FreeFixedBlock>
 800bebc:	6830      	ldr	r0, [r6, #0]
 800bebe:	f002 f92f 	bl	800e120 <GUI_ALLOC_FreeFixedBlock>
 800bec2:	4a07      	ldr	r2, [pc, #28]	; (800bee0 <_OnExit+0x38>)
 800bec4:	2300      	movs	r3, #0
 800bec6:	6013      	str	r3, [r2, #0]
 800bec8:	4a06      	ldr	r2, [pc, #24]	; (800bee4 <_OnExit+0x3c>)
 800beca:	6033      	str	r3, [r6, #0]
 800becc:	602b      	str	r3, [r5, #0]
 800bece:	6023      	str	r3, [r4, #0]
 800bed0:	6013      	str	r3, [r2, #0]
 800bed2:	bd70      	pop	{r4, r5, r6, pc}
 800bed4:	20005450 	.word	0x20005450
 800bed8:	2000544c 	.word	0x2000544c
 800bedc:	20005454 	.word	0x20005454
 800bee0:	20005458 	.word	0x20005458
 800bee4:	20005468 	.word	0x20005468

0800bee8 <GUI__GetAlphaBuffer>:
 800bee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beec:	461c      	mov	r4, r3
 800beee:	4b28      	ldr	r3, [pc, #160]	; (800bf90 <GUI__GetAlphaBuffer+0xa8>)
 800bef0:	4617      	mov	r7, r2
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	4606      	mov	r6, r0
 800bef6:	4688      	mov	r8, r1
 800bef8:	b932      	cbnz	r2, 800bf08 <GUI__GetAlphaBuffer+0x20>
 800befa:	2201      	movs	r2, #1
 800befc:	4825      	ldr	r0, [pc, #148]	; (800bf94 <GUI__GetAlphaBuffer+0xac>)
 800befe:	601a      	str	r2, [r3, #0]
 800bf00:	4b25      	ldr	r3, [pc, #148]	; (800bf98 <GUI__GetAlphaBuffer+0xb0>)
 800bf02:	6003      	str	r3, [r0, #0]
 800bf04:	f000 fd40 	bl	800c988 <GUI__RegisterExit>
 800bf08:	4d24      	ldr	r5, [pc, #144]	; (800bf9c <GUI__GetAlphaBuffer+0xb4>)
 800bf0a:	682b      	ldr	r3, [r5, #0]
 800bf0c:	b933      	cbnz	r3, 800bf1c <GUI__GetAlphaBuffer+0x34>
 800bf0e:	4b24      	ldr	r3, [pc, #144]	; (800bfa0 <GUI__GetAlphaBuffer+0xb8>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	602b      	str	r3, [r5, #0]
 800bf14:	b913      	cbnz	r3, 800bf1c <GUI__GetAlphaBuffer+0x34>
 800bf16:	f7ff f9fb 	bl	800b310 <LCD_GetVXSizeMax>
 800bf1a:	6028      	str	r0, [r5, #0]
 800bf1c:	b10c      	cbz	r4, 800bf22 <GUI__GetAlphaBuffer+0x3a>
 800bf1e:	682b      	ldr	r3, [r5, #0]
 800bf20:	6023      	str	r3, [r4, #0]
 800bf22:	b196      	cbz	r6, 800bf4a <GUI__GetAlphaBuffer+0x62>
 800bf24:	4b1f      	ldr	r3, [pc, #124]	; (800bfa4 <GUI__GetAlphaBuffer+0xbc>)
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	4699      	mov	r9, r3
 800bf2a:	2400      	movs	r4, #0
 800bf2c:	b94a      	cbnz	r2, 800bf42 <GUI__GetAlphaBuffer+0x5a>
 800bf2e:	6828      	ldr	r0, [r5, #0]
 800bf30:	0080      	lsls	r0, r0, #2
 800bf32:	f002 f9d9 	bl	800e2e8 <GUI_ALLOC_GetFixedBlock>
 800bf36:	f1d0 0401 	rsbs	r4, r0, #1
 800bf3a:	f8c9 0000 	str.w	r0, [r9]
 800bf3e:	bf38      	it	cc
 800bf40:	2400      	movcc	r4, #0
 800bf42:	f8d9 3000 	ldr.w	r3, [r9]
 800bf46:	6033      	str	r3, [r6, #0]
 800bf48:	e000      	b.n	800bf4c <GUI__GetAlphaBuffer+0x64>
 800bf4a:	4634      	mov	r4, r6
 800bf4c:	f1b8 0f00 	cmp.w	r8, #0
 800bf50:	d00d      	beq.n	800bf6e <GUI__GetAlphaBuffer+0x86>
 800bf52:	4e15      	ldr	r6, [pc, #84]	; (800bfa8 <GUI__GetAlphaBuffer+0xc0>)
 800bf54:	6833      	ldr	r3, [r6, #0]
 800bf56:	b93b      	cbnz	r3, 800bf68 <GUI__GetAlphaBuffer+0x80>
 800bf58:	6828      	ldr	r0, [r5, #0]
 800bf5a:	0080      	lsls	r0, r0, #2
 800bf5c:	f002 f9c4 	bl	800e2e8 <GUI_ALLOC_GetFixedBlock>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	6030      	str	r0, [r6, #0]
 800bf64:	bf08      	it	eq
 800bf66:	2401      	moveq	r4, #1
 800bf68:	6833      	ldr	r3, [r6, #0]
 800bf6a:	f8c8 3000 	str.w	r3, [r8]
 800bf6e:	b167      	cbz	r7, 800bf8a <GUI__GetAlphaBuffer+0xa2>
 800bf70:	4e0e      	ldr	r6, [pc, #56]	; (800bfac <GUI__GetAlphaBuffer+0xc4>)
 800bf72:	6833      	ldr	r3, [r6, #0]
 800bf74:	b93b      	cbnz	r3, 800bf86 <GUI__GetAlphaBuffer+0x9e>
 800bf76:	6828      	ldr	r0, [r5, #0]
 800bf78:	0080      	lsls	r0, r0, #2
 800bf7a:	f002 f9b5 	bl	800e2e8 <GUI_ALLOC_GetFixedBlock>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	6030      	str	r0, [r6, #0]
 800bf82:	bf08      	it	eq
 800bf84:	2401      	moveq	r4, #1
 800bf86:	6833      	ldr	r3, [r6, #0]
 800bf88:	603b      	str	r3, [r7, #0]
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf90:	20005468 	.word	0x20005468
 800bf94:	2000545c 	.word	0x2000545c
 800bf98:	0800bea9 	.word	0x0800bea9
 800bf9c:	20005458 	.word	0x20005458
 800bfa0:	2000569c 	.word	0x2000569c
 800bfa4:	20005450 	.word	0x20005450
 800bfa8:	2000544c 	.word	0x2000544c
 800bfac:	20005454 	.word	0x20005454

0800bfb0 <GUI__DoAlphaBlending>:
 800bfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb4:	b093      	sub	sp, #76	; 0x4c
 800bfb6:	2400      	movs	r4, #0
 800bfb8:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800bfba:	900b      	str	r0, [sp, #44]	; 0x2c
 800bfbc:	910c      	str	r1, [sp, #48]	; 0x30
 800bfbe:	4690      	mov	r8, r2
 800bfc0:	461f      	mov	r7, r3
 800bfc2:	6034      	str	r4, [r6, #0]
 800bfc4:	a80f      	add	r0, sp, #60	; 0x3c
 800bfc6:	a910      	add	r1, sp, #64	; 0x40
 800bfc8:	4622      	mov	r2, r4
 800bfca:	ab11      	add	r3, sp, #68	; 0x44
 800bfcc:	f7ff ff8c 	bl	800bee8 <GUI__GetAlphaBuffer>
 800bfd0:	4605      	mov	r5, r0
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	f040 80c5 	bne.w	800c162 <GUI__DoAlphaBlending+0x1b2>
 800bfd8:	4c64      	ldr	r4, [pc, #400]	; (800c16c <GUI__DoAlphaBlending+0x1bc>)
 800bfda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bfdc:	6823      	ldr	r3, [r4, #0]
 800bfde:	7c58      	ldrb	r0, [r3, #17]
 800bfe0:	4b63      	ldr	r3, [pc, #396]	; (800c170 <GUI__DoAlphaBlending+0x1c0>)
 800bfe2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800bfe6:	9307      	str	r3, [sp, #28]
 800bfe8:	4297      	cmp	r7, r2
 800bfea:	bfa8      	it	ge
 800bfec:	4617      	movge	r7, r2
 800bfee:	691a      	ldr	r2, [r3, #16]
 800bff0:	920d      	str	r2, [sp, #52]	; 0x34
 800bff2:	970a      	str	r7, [sp, #40]	; 0x28
 800bff4:	f7ff f950 	bl	800b298 <GUI_GetBitsPerPixelEx>
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	9008      	str	r0, [sp, #32]
 800bffc:	7c58      	ldrb	r0, [r3, #17]
 800bffe:	f7ff f969 	bl	800b2d4 <GUI_GetpfIndex2ColorEx>
 800c002:	4b5c      	ldr	r3, [pc, #368]	; (800c174 <GUI__DoAlphaBlending+0x1c4>)
 800c004:	9004      	str	r0, [sp, #16]
 800c006:	4298      	cmp	r0, r3
 800c008:	d005      	beq.n	800c016 <GUI__DoAlphaBlending+0x66>
 800c00a:	4b5b      	ldr	r3, [pc, #364]	; (800c178 <GUI__DoAlphaBlending+0x1c8>)
 800c00c:	1ac3      	subs	r3, r0, r3
 800c00e:	bf18      	it	ne
 800c010:	2301      	movne	r3, #1
 800c012:	9306      	str	r3, [sp, #24]
 800c014:	e000      	b.n	800c018 <GUI__DoAlphaBlending+0x68>
 800c016:	9506      	str	r5, [sp, #24]
 800c018:	2500      	movs	r5, #0
 800c01a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c01c:	46ab      	mov	fp, r5
 800c01e:	4643      	mov	r3, r8
 800c020:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c022:	f853 0b04 	ldr.w	r0, [r3], #4
 800c026:	9305      	str	r3, [sp, #20]
 800c028:	4790      	blx	r2
 800c02a:	0e03      	lsrs	r3, r0, #24
 800c02c:	4681      	mov	r9, r0
 800c02e:	9309      	str	r3, [sp, #36]	; 0x24
 800c030:	f000 8087 	beq.w	800c142 <GUI__DoAlphaBlending+0x192>
 800c034:	f1bb 0f00 	cmp.w	fp, #0
 800c038:	d13f      	bne.n	800c0ba <GUI__DoAlphaBlending+0x10a>
 800c03a:	4b4c      	ldr	r3, [pc, #304]	; (800c16c <GUI__DoAlphaBlending+0x1bc>)
 800c03c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c042:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c046:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800c04a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c04c:	442f      	add	r7, r5
 800c04e:	42bb      	cmp	r3, r7
 800c050:	bfc8      	it	gt
 800c052:	ebc7 0b03 	rsbgt	fp, r7, r3
 800c056:	eb0b 0a05 	add.w	sl, fp, r5
 800c05a:	bfc8      	it	gt
 800c05c:	461f      	movgt	r7, r3
 800c05e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c060:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800c064:	4453      	add	r3, sl
 800c066:	4494      	add	ip, r2
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	9b07      	ldr	r3, [sp, #28]
 800c06c:	9301      	str	r3, [sp, #4]
 800c06e:	f10c 32ff 	add.w	r2, ip, #4294967295
 800c072:	4638      	mov	r0, r7
 800c074:	460b      	mov	r3, r1
 800c076:	f8cd c00c 	str.w	ip, [sp, #12]
 800c07a:	f004 fa99 	bl	80105b0 <GUI_ReadRectEx>
 800c07e:	9a08      	ldr	r2, [sp, #32]
 800c080:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c082:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c086:	2a17      	cmp	r2, #23
 800c088:	dc06      	bgt.n	800c098 <GUI__DoAlphaBlending+0xe8>
 800c08a:	4450      	add	r0, sl
 800c08c:	ebcb 0104 	rsb	r1, fp, r4
 800c090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c092:	f004 fbf1 	bl	8010878 <GUI__ExpandPixelIndicesEx>
 800c096:	e001      	b.n	800c09c <GUI__DoAlphaBlending+0xec>
 800c098:	9b06      	ldr	r3, [sp, #24]
 800c09a:	b913      	cbnz	r3, 800c0a2 <GUI__DoAlphaBlending+0xf2>
 800c09c:	f04f 0b01 	mov.w	fp, #1
 800c0a0:	e00b      	b.n	800c0ba <GUI__DoAlphaBlending+0x10a>
 800c0a2:	ebc7 070c 	rsb	r7, r7, ip
 800c0a6:	4482      	add	sl, r0
 800c0a8:	f8da 0000 	ldr.w	r0, [sl]
 800c0ac:	9a04      	ldr	r2, [sp, #16]
 800c0ae:	4790      	blx	r2
 800c0b0:	3f01      	subs	r7, #1
 800c0b2:	f84a 0b04 	str.w	r0, [sl], #4
 800c0b6:	d1f7      	bne.n	800c0a8 <GUI__DoAlphaBlending+0xf8>
 800c0b8:	e7f0      	b.n	800c09c <GUI__DoAlphaBlending+0xec>
 800c0ba:	4b30      	ldr	r3, [pc, #192]	; (800c17c <GUI__DoAlphaBlending+0x1cc>)
 800c0bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c0be:	f8d3 c000 	ldr.w	ip, [r3]
 800c0c2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800c0c4:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800c0c8:	f1bc 0f00 	cmp.w	ip, #0
 800c0cc:	d024      	beq.n	800c118 <GUI__DoAlphaBlending+0x168>
 800c0ce:	eb07 020a 	add.w	r2, r7, sl
 800c0d2:	4451      	add	r1, sl
 800c0d4:	9210      	str	r2, [sp, #64]	; 0x40
 800c0d6:	4623      	mov	r3, r4
 800c0d8:	910f      	str	r1, [sp, #60]	; 0x3c
 800c0da:	4640      	mov	r0, r8
 800c0dc:	47e0      	blx	ip
 800c0de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c0e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	f858 1003 	ldr.w	r1, [r8, r3]
 800c0e8:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 800c0ec:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800c0f0:	58e8      	ldr	r0, [r5, r3]
 800c0f2:	d101      	bne.n	800c0f8 <GUI__DoAlphaBlending+0x148>
 800c0f4:	50d0      	str	r0, [r2, r3]
 800c0f6:	e005      	b.n	800c104 <GUI__DoAlphaBlending+0x154>
 800c0f8:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 800c0fc:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800c100:	bf08      	it	eq
 800c102:	50d1      	streq	r1, [r2, r3]
 800c104:	3c01      	subs	r4, #1
 800c106:	f103 0304 	add.w	r3, r3, #4
 800c10a:	d1eb      	bne.n	800c0e4 <GUI__DoAlphaBlending+0x134>
 800c10c:	6833      	ldr	r3, [r6, #0]
 800c10e:	9710      	str	r7, [sp, #64]	; 0x40
 800c110:	f043 0301 	orr.w	r3, r3, #1
 800c114:	6033      	str	r3, [r6, #0]
 800c116:	e022      	b.n	800c15e <GUI__DoAlphaBlending+0x1ae>
 800c118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c11a:	2bff      	cmp	r3, #255	; 0xff
 800c11c:	d104      	bne.n	800c128 <GUI__DoAlphaBlending+0x178>
 800c11e:	f851 300a 	ldr.w	r3, [r1, sl]
 800c122:	f847 300a 	str.w	r3, [r7, sl]
 800c126:	e013      	b.n	800c150 <GUI__DoAlphaBlending+0x1a0>
 800c128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c12a:	f851 100a 	ldr.w	r1, [r1, sl]
 800c12e:	43da      	mvns	r2, r3
 800c130:	4b13      	ldr	r3, [pc, #76]	; (800c180 <GUI__DoAlphaBlending+0x1d0>)
 800c132:	f029 407f 	bic.w	r0, r9, #4278190080	; 0xff000000
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	b2d2      	uxtb	r2, r2
 800c13a:	4798      	blx	r3
 800c13c:	f847 000a 	str.w	r0, [r7, sl]
 800c140:	e002      	b.n	800c148 <GUI__DoAlphaBlending+0x198>
 800c142:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c144:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800c148:	6833      	ldr	r3, [r6, #0]
 800c14a:	f043 0301 	orr.w	r3, r3, #1
 800c14e:	6033      	str	r3, [r6, #0]
 800c150:	3c01      	subs	r4, #1
 800c152:	f105 0501 	add.w	r5, r5, #1
 800c156:	d002      	beq.n	800c15e <GUI__DoAlphaBlending+0x1ae>
 800c158:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c15c:	e75f      	b.n	800c01e <GUI__DoAlphaBlending+0x6e>
 800c15e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c160:	e000      	b.n	800c164 <GUI__DoAlphaBlending+0x1b4>
 800c162:	4620      	mov	r0, r4
 800c164:	b013      	add	sp, #76	; 0x4c
 800c166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16a:	bf00      	nop
 800c16c:	20000084 	.word	0x20000084
 800c170:	20005694 	.word	0x20005694
 800c174:	0800e54f 	.word	0x0800e54f
 800c178:	0800e54d 	.word	0x0800e54d
 800c17c:	20005464 	.word	0x20005464
 800c180:	20000078 	.word	0x20000078

0800c184 <GUI__AllocAlphaBuffer>:
 800c184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c186:	b108      	cbz	r0, 800c18c <GUI__AllocAlphaBuffer+0x8>
 800c188:	aa03      	add	r2, sp, #12
 800c18a:	e000      	b.n	800c18e <GUI__AllocAlphaBuffer+0xa>
 800c18c:	4602      	mov	r2, r0
 800c18e:	a801      	add	r0, sp, #4
 800c190:	a902      	add	r1, sp, #8
 800c192:	2300      	movs	r3, #0
 800c194:	f7ff fea8 	bl	800bee8 <GUI__GetAlphaBuffer>
 800c198:	b005      	add	sp, #20
 800c19a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c1a0 <GUI_SignalEvent>:
 800c1a0:	b508      	push	{r3, lr}
 800c1a2:	4b02      	ldr	r3, [pc, #8]	; (800c1ac <GUI_SignalEvent+0xc>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	b103      	cbz	r3, 800c1aa <GUI_SignalEvent+0xa>
 800c1a8:	4798      	blx	r3
 800c1aa:	bd08      	pop	{r3, pc}
 800c1ac:	2000546c 	.word	0x2000546c

0800c1b0 <GUI_UC__GetCharCodeInc>:
 800c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b2:	4e08      	ldr	r6, [pc, #32]	; (800c1d4 <GUI_UC__GetCharCodeInc+0x24>)
 800c1b4:	6804      	ldr	r4, [r0, #0]
 800c1b6:	6833      	ldr	r3, [r6, #0]
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4620      	mov	r0, r4
 800c1be:	4798      	blx	r3
 800c1c0:	6833      	ldr	r3, [r6, #0]
 800c1c2:	4607      	mov	r7, r0
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	4798      	blx	r3
 800c1ca:	4420      	add	r0, r4
 800c1cc:	6028      	str	r0, [r5, #0]
 800c1ce:	4638      	mov	r0, r7
 800c1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	2000568c 	.word	0x2000568c

0800c1d8 <GUI_UC__NumChars2NumBytes>:
 800c1d8:	b570      	push	{r4, r5, r6, lr}
 800c1da:	4604      	mov	r4, r0
 800c1dc:	460e      	mov	r6, r1
 800c1de:	2500      	movs	r5, #0
 800c1e0:	b146      	cbz	r6, 800c1f4 <GUI_UC__NumChars2NumBytes+0x1c>
 800c1e2:	4b05      	ldr	r3, [pc, #20]	; (800c1f8 <GUI_UC__NumChars2NumBytes+0x20>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	4798      	blx	r3
 800c1ec:	3e01      	subs	r6, #1
 800c1ee:	4404      	add	r4, r0
 800c1f0:	4405      	add	r5, r0
 800c1f2:	e7f5      	b.n	800c1e0 <GUI_UC__NumChars2NumBytes+0x8>
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	bd70      	pop	{r4, r5, r6, pc}
 800c1f8:	2000568c 	.word	0x2000568c

0800c1fc <_Unlink>:
 800c1fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1fe:	4605      	mov	r5, r0
 800c200:	b1f0      	cbz	r0, 800c240 <_Unlink+0x44>
 800c202:	f001 ffa1 	bl	800e148 <GUI_ALLOC_LockH>
 800c206:	4b0f      	ldr	r3, [pc, #60]	; (800c244 <_Unlink+0x48>)
 800c208:	9000      	str	r0, [sp, #0]
 800c20a:	681c      	ldr	r4, [r3, #0]
 800c20c:	42ac      	cmp	r4, r5
 800c20e:	d104      	bne.n	800c21a <_Unlink+0x1e>
 800c210:	6842      	ldr	r2, [r0, #4]
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	e011      	b.n	800c23a <_Unlink+0x3e>
 800c216:	f001 ffa5 	bl	800e164 <GUI_ALLOC_UnlockH>
 800c21a:	b174      	cbz	r4, 800c23a <_Unlink+0x3e>
 800c21c:	4620      	mov	r0, r4
 800c21e:	f001 ff93 	bl	800e148 <GUI_ALLOC_LockH>
 800c222:	4603      	mov	r3, r0
 800c224:	a802      	add	r0, sp, #8
 800c226:	685c      	ldr	r4, [r3, #4]
 800c228:	f840 3d04 	str.w	r3, [r0, #-4]!
 800c22c:	42ac      	cmp	r4, r5
 800c22e:	d1f2      	bne.n	800c216 <_Unlink+0x1a>
 800c230:	9a00      	ldr	r2, [sp, #0]
 800c232:	6852      	ldr	r2, [r2, #4]
 800c234:	605a      	str	r2, [r3, #4]
 800c236:	f001 ff95 	bl	800e164 <GUI_ALLOC_UnlockH>
 800c23a:	4668      	mov	r0, sp
 800c23c:	f001 ff92 	bl	800e164 <GUI_ALLOC_UnlockH>
 800c240:	b003      	add	sp, #12
 800c242:	bd30      	pop	{r4, r5, pc}
 800c244:	20005474 	.word	0x20005474

0800c248 <GUI_TIMER__GetFirstTimer>:
 800c248:	2300      	movs	r3, #0
 800c24a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c24c:	6003      	str	r3, [r0, #0]
 800c24e:	4b09      	ldr	r3, [pc, #36]	; (800c274 <GUI_TIMER__GetFirstTimer+0x2c>)
 800c250:	681c      	ldr	r4, [r3, #0]
 800c252:	4605      	mov	r5, r0
 800c254:	b154      	cbz	r4, 800c26c <GUI_TIMER__GetFirstTimer+0x24>
 800c256:	4620      	mov	r0, r4
 800c258:	f001 ff76 	bl	800e148 <GUI_ALLOC_LockH>
 800c25c:	ab02      	add	r3, sp, #8
 800c25e:	6902      	ldr	r2, [r0, #16]
 800c260:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c264:	602a      	str	r2, [r5, #0]
 800c266:	4618      	mov	r0, r3
 800c268:	f001 ff7c 	bl	800e164 <GUI_ALLOC_UnlockH>
 800c26c:	4620      	mov	r0, r4
 800c26e:	b003      	add	sp, #12
 800c270:	bd30      	pop	{r4, r5, pc}
 800c272:	bf00      	nop
 800c274:	20005470 	.word	0x20005470

0800c278 <GUI_TIMER__GetNextTimerLin>:
 800c278:	2300      	movs	r3, #0
 800c27a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c27c:	600b      	str	r3, [r1, #0]
 800c27e:	460e      	mov	r6, r1
 800c280:	4604      	mov	r4, r0
 800c282:	b190      	cbz	r0, 800c2aa <GUI_TIMER__GetNextTimerLin+0x32>
 800c284:	f001 ff60 	bl	800e148 <GUI_ALLOC_LockH>
 800c288:	ad02      	add	r5, sp, #8
 800c28a:	6884      	ldr	r4, [r0, #8]
 800c28c:	f845 0d04 	str.w	r0, [r5, #-4]!
 800c290:	b144      	cbz	r4, 800c2a4 <GUI_TIMER__GetNextTimerLin+0x2c>
 800c292:	4628      	mov	r0, r5
 800c294:	f001 ff66 	bl	800e164 <GUI_ALLOC_UnlockH>
 800c298:	4620      	mov	r0, r4
 800c29a:	f001 ff55 	bl	800e148 <GUI_ALLOC_LockH>
 800c29e:	6903      	ldr	r3, [r0, #16]
 800c2a0:	9001      	str	r0, [sp, #4]
 800c2a2:	6033      	str	r3, [r6, #0]
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	f001 ff5d 	bl	800e164 <GUI_ALLOC_UnlockH>
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	b002      	add	sp, #8
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}

0800c2b0 <GUI_TIMER_Delete>:
 800c2b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	b360      	cbz	r0, 800c310 <GUI_TIMER_Delete+0x60>
 800c2b6:	4e17      	ldr	r6, [pc, #92]	; (800c314 <GUI_TIMER_Delete+0x64>)
 800c2b8:	6835      	ldr	r5, [r6, #0]
 800c2ba:	4285      	cmp	r5, r0
 800c2bc:	d10b      	bne.n	800c2d6 <GUI_TIMER_Delete+0x26>
 800c2be:	f001 ff43 	bl	800e148 <GUI_ALLOC_LockH>
 800c2c2:	ab02      	add	r3, sp, #8
 800c2c4:	6882      	ldr	r2, [r0, #8]
 800c2c6:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c2ca:	6032      	str	r2, [r6, #0]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	e017      	b.n	800c300 <GUI_TIMER_Delete+0x50>
 800c2d0:	4668      	mov	r0, sp
 800c2d2:	f001 ff47 	bl	800e164 <GUI_ALLOC_UnlockH>
 800c2d6:	b1ad      	cbz	r5, 800c304 <GUI_TIMER_Delete+0x54>
 800c2d8:	4628      	mov	r0, r5
 800c2da:	f001 ff35 	bl	800e148 <GUI_ALLOC_LockH>
 800c2de:	6885      	ldr	r5, [r0, #8]
 800c2e0:	ae02      	add	r6, sp, #8
 800c2e2:	42a5      	cmp	r5, r4
 800c2e4:	f846 0d08 	str.w	r0, [r6, #-8]!
 800c2e8:	d1f2      	bne.n	800c2d0 <GUI_TIMER_Delete+0x20>
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f001 ff2c 	bl	800e148 <GUI_ALLOC_LockH>
 800c2f0:	9b00      	ldr	r3, [sp, #0]
 800c2f2:	6882      	ldr	r2, [r0, #8]
 800c2f4:	9001      	str	r0, [sp, #4]
 800c2f6:	609a      	str	r2, [r3, #8]
 800c2f8:	a801      	add	r0, sp, #4
 800c2fa:	f001 ff33 	bl	800e164 <GUI_ALLOC_UnlockH>
 800c2fe:	4668      	mov	r0, sp
 800c300:	f001 ff30 	bl	800e164 <GUI_ALLOC_UnlockH>
 800c304:	4620      	mov	r0, r4
 800c306:	f7ff ff79 	bl	800c1fc <_Unlink>
 800c30a:	4620      	mov	r0, r4
 800c30c:	f001 ff56 	bl	800e1bc <GUI_ALLOC_Free>
 800c310:	b002      	add	sp, #8
 800c312:	bd70      	pop	{r4, r5, r6, pc}
 800c314:	20005470 	.word	0x20005470

0800c318 <GUI_TIMER_GetFlag>:
 800c318:	b513      	push	{r0, r1, r4, lr}
 800c31a:	460c      	mov	r4, r1
 800c31c:	b168      	cbz	r0, 800c33a <GUI_TIMER_GetFlag+0x22>
 800c31e:	f001 ff13 	bl	800e148 <GUI_ALLOC_LockH>
 800c322:	ab02      	add	r3, sp, #8
 800c324:	8982      	ldrh	r2, [r0, #12]
 800c326:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c32a:	4214      	tst	r4, r2
 800c32c:	4618      	mov	r0, r3
 800c32e:	bf0c      	ite	eq
 800c330:	2400      	moveq	r4, #0
 800c332:	2401      	movne	r4, #1
 800c334:	f001 ff16 	bl	800e164 <GUI_ALLOC_UnlockH>
 800c338:	e000      	b.n	800c33c <GUI_TIMER_GetFlag+0x24>
 800c33a:	2401      	movs	r4, #1
 800c33c:	4620      	mov	r0, r4
 800c33e:	b002      	add	sp, #8
 800c340:	bd10      	pop	{r4, pc}
	...

0800c344 <GUI__AlphaPreserveTrans>:
 800c344:	b510      	push	{r4, lr}
 800c346:	4b07      	ldr	r3, [pc, #28]	; (800c364 <GUI__AlphaPreserveTrans+0x20>)
 800c348:	781c      	ldrb	r4, [r3, #0]
 800c34a:	b120      	cbz	r0, 800c356 <GUI__AlphaPreserveTrans+0x12>
 800c34c:	2201      	movs	r2, #1
 800c34e:	701a      	strb	r2, [r3, #0]
 800c350:	f04f 30ff 	mov.w	r0, #4294967295
 800c354:	e002      	b.n	800c35c <GUI__AlphaPreserveTrans+0x18>
 800c356:	7018      	strb	r0, [r3, #0]
 800c358:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c35c:	f004 f9d0 	bl	8010700 <LCD_AA_SetAndMask>
 800c360:	4620      	mov	r0, r4
 800c362:	bd10      	pop	{r4, pc}
 800c364:	2000567c 	.word	0x2000567c

0800c368 <GUI_SelectLayer>:
 800c368:	b570      	push	{r4, r5, r6, lr}
 800c36a:	4d08      	ldr	r5, [pc, #32]	; (800c38c <GUI_SelectLayer+0x24>)
 800c36c:	682b      	ldr	r3, [r5, #0]
 800c36e:	2801      	cmp	r0, #1
 800c370:	4604      	mov	r4, r0
 800c372:	7c5e      	ldrb	r6, [r3, #17]
 800c374:	d808      	bhi.n	800c388 <GUI_SelectLayer+0x20>
 800c376:	f000 f9ad 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 800c37a:	b128      	cbz	r0, 800c388 <GUI_SelectLayer+0x20>
 800c37c:	682b      	ldr	r3, [r5, #0]
 800c37e:	745c      	strb	r4, [r3, #17]
 800c380:	f000 fc82 	bl	800cc88 <GUI_SelectLCD>
 800c384:	4b02      	ldr	r3, [pc, #8]	; (800c390 <GUI_SelectLayer+0x28>)
 800c386:	601c      	str	r4, [r3, #0]
 800c388:	4630      	mov	r0, r6
 800c38a:	bd70      	pop	{r4, r5, r6, pc}
 800c38c:	20000084 	.word	0x20000084
 800c390:	2000560c 	.word	0x2000560c

0800c394 <GUI_StoreKey>:
 800c394:	4b02      	ldr	r3, [pc, #8]	; (800c3a0 <GUI_StoreKey+0xc>)
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	b902      	cbnz	r2, 800c39c <GUI_StoreKey+0x8>
 800c39a:	6018      	str	r0, [r3, #0]
 800c39c:	f7ff bf00 	b.w	800c1a0 <GUI_SignalEvent>
 800c3a0:	20005478 	.word	0x20005478

0800c3a4 <GUI_PollKeyMsg>:
 800c3a4:	4a0a      	ldr	r2, [pc, #40]	; (800c3d0 <GUI_PollKeyMsg+0x2c>)
 800c3a6:	490b      	ldr	r1, [pc, #44]	; (800c3d4 <GUI_PollKeyMsg+0x30>)
 800c3a8:	6813      	ldr	r3, [r2, #0]
 800c3aa:	6809      	ldr	r1, [r1, #0]
 800c3ac:	428b      	cmp	r3, r1
 800c3ae:	b510      	push	{r4, lr}
 800c3b0:	d00b      	beq.n	800c3ca <GUI_PollKeyMsg+0x26>
 800c3b2:	4c09      	ldr	r4, [pc, #36]	; (800c3d8 <GUI_PollKeyMsg+0x34>)
 800c3b4:	42a3      	cmp	r3, r4
 800c3b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c3ba:	bf14      	ite	ne
 800c3bc:	3308      	addne	r3, #8
 800c3be:	3b50      	subeq	r3, #80	; 0x50
 800c3c0:	6013      	str	r3, [r2, #0]
 800c3c2:	f7fb fa1d 	bl	8007800 <WM_OnKey>
 800c3c6:	2001      	movs	r0, #1
 800c3c8:	bd10      	pop	{r4, pc}
 800c3ca:	2000      	movs	r0, #0
 800c3cc:	bd10      	pop	{r4, pc}
 800c3ce:	bf00      	nop
 800c3d0:	20000080 	.word	0x20000080
 800c3d4:	2000007c 	.word	0x2000007c
 800c3d8:	200054cc 	.word	0x200054cc

0800c3dc <GUI__DispStringInRect>:
 800c3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e0:	b087      	sub	sp, #28
 800c3e2:	460c      	mov	r4, r1
 800c3e4:	9001      	str	r0, [sp, #4]
 800c3e6:	4691      	mov	r9, r2
 800c3e8:	461d      	mov	r5, r3
 800c3ea:	f000 ff3f 	bl	800d26c <GUI_GetFontDistY>
 800c3ee:	9f01      	ldr	r7, [sp, #4]
 800c3f0:	4680      	mov	r8, r0
 800c3f2:	b124      	cbz	r4, 800c3fe <GUI__DispStringInRect+0x22>
 800c3f4:	6820      	ldr	r0, [r4, #0]
 800c3f6:	6861      	ldr	r1, [r4, #4]
 800c3f8:	ab04      	add	r3, sp, #16
 800c3fa:	c303      	stmia	r3!, {r0, r1}
 800c3fc:	e002      	b.n	800c404 <GUI__DispStringInRect+0x28>
 800c3fe:	a804      	add	r0, sp, #16
 800c400:	f000 fb76 	bl	800caf0 <GUI_GetClientRect>
 800c404:	f019 0a0c 	ands.w	sl, r9, #12
 800c408:	d002      	beq.n	800c410 <GUI__DispStringInRect+0x34>
 800c40a:	462c      	mov	r4, r5
 800c40c:	2600      	movs	r6, #0
 800c40e:	e016      	b.n	800c43e <GUI__DispStringInRect+0x62>
 800c410:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 800c414:	e032      	b.n	800c47c <GUI__DispStringInRect+0xa0>
 800c416:	4621      	mov	r1, r4
 800c418:	9801      	ldr	r0, [sp, #4]
 800c41a:	f000 fe75 	bl	800d108 <GUI__GetLineNumChars>
 800c41e:	f8dd b004 	ldr.w	fp, [sp, #4]
 800c422:	4601      	mov	r1, r0
 800c424:	1a24      	subs	r4, r4, r0
 800c426:	4658      	mov	r0, fp
 800c428:	f7ff fed6 	bl	800c1d8 <GUI_UC__NumChars2NumBytes>
 800c42c:	eb0b 0300 	add.w	r3, fp, r0
 800c430:	a806      	add	r0, sp, #24
 800c432:	3601      	adds	r6, #1
 800c434:	f840 3d14 	str.w	r3, [r0, #-20]!
 800c438:	f7ff fb50 	bl	800badc <GUI__HandleEOLine>
 800c43c:	b908      	cbnz	r0, 800c442 <GUI__DispStringInRect+0x66>
 800c43e:	2c00      	cmp	r4, #0
 800c440:	d1e9      	bne.n	800c416 <GUI__DispStringInRect+0x3a>
 800c442:	f1ba 0f08 	cmp.w	sl, #8
 800c446:	d005      	beq.n	800c454 <GUI__DispStringInRect+0x78>
 800c448:	f1ba 0f0c 	cmp.w	sl, #12
 800c44c:	d008      	beq.n	800c460 <GUI__DispStringInRect+0x84>
 800c44e:	f1ba 0f04 	cmp.w	sl, #4
 800c452:	d112      	bne.n	800c47a <GUI__DispStringInRect+0x9e>
 800c454:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800c458:	fb08 4416 	mls	r4, r8, r6, r4
 800c45c:	3401      	adds	r4, #1
 800c45e:	e00d      	b.n	800c47c <GUI__DispStringInRect+0xa0>
 800c460:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800c464:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800c468:	1ae4      	subs	r4, r4, r3
 800c46a:	3401      	adds	r4, #1
 800c46c:	fb08 4416 	mls	r4, r8, r6, r4
 800c470:	2202      	movs	r2, #2
 800c472:	fb94 f4f2 	sdiv	r4, r4, r2
 800c476:	441c      	add	r4, r3
 800c478:	e000      	b.n	800c47c <GUI__DispStringInRect+0xa0>
 800c47a:	2400      	movs	r4, #0
 800c47c:	9701      	str	r7, [sp, #4]
 800c47e:	2600      	movs	r6, #0
 800c480:	2d00      	cmp	r5, #0
 800c482:	d04b      	beq.n	800c51c <GUI__DispStringInRect+0x140>
 800c484:	4629      	mov	r1, r5
 800c486:	9801      	ldr	r0, [sp, #4]
 800c488:	f000 fe3e 	bl	800d108 <GUI__GetLineNumChars>
 800c48c:	4607      	mov	r7, r0
 800c48e:	1a2d      	subs	r5, r5, r0
 800c490:	4639      	mov	r1, r7
 800c492:	9801      	ldr	r0, [sp, #4]
 800c494:	f000 fe66 	bl	800d164 <GUI__GetLineDistX>
 800c498:	f009 0303 	and.w	r3, r9, #3
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d00f      	beq.n	800c4c0 <GUI__DispStringInRect+0xe4>
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d003      	beq.n	800c4ac <GUI__DispStringInRect+0xd0>
 800c4a4:	b983      	cbnz	r3, 800c4c8 <GUI__DispStringInRect+0xec>
 800c4a6:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 800c4aa:	e00d      	b.n	800c4c8 <GUI__DispStringInRect+0xec>
 800c4ac:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800c4b0:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800c4b4:	1ab6      	subs	r6, r6, r2
 800c4b6:	1a36      	subs	r6, r6, r0
 800c4b8:	fb96 f6f3 	sdiv	r6, r6, r3
 800c4bc:	4416      	add	r6, r2
 800c4be:	e003      	b.n	800c4c8 <GUI__DispStringInRect+0xec>
 800c4c0:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800c4c4:	1a36      	subs	r6, r6, r0
 800c4c6:	3601      	adds	r6, #1
 800c4c8:	4b16      	ldr	r3, [pc, #88]	; (800c524 <GUI__DispStringInRect+0x148>)
 800c4ca:	6819      	ldr	r1, [r3, #0]
 800c4cc:	3801      	subs	r0, #1
 800c4ce:	b2a3      	uxth	r3, r4
 800c4d0:	b2b2      	uxth	r2, r6
 800c4d2:	848b      	strh	r3, [r1, #36]	; 0x24
 800c4d4:	4430      	add	r0, r6
 800c4d6:	f8ad 300a 	strh.w	r3, [sp, #10]
 800c4da:	f108 33ff 	add.w	r3, r8, #4294967295
 800c4de:	4423      	add	r3, r4
 800c4e0:	844a      	strh	r2, [r1, #34]	; 0x22
 800c4e2:	f8ad 2008 	strh.w	r2, [sp, #8]
 800c4e6:	4639      	mov	r1, r7
 800c4e8:	aa02      	add	r2, sp, #8
 800c4ea:	f8ad 000c 	strh.w	r0, [sp, #12]
 800c4ee:	9801      	ldr	r0, [sp, #4]
 800c4f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c4f4:	f000 fe66 	bl	800d1c4 <GUI__DispLine>
 800c4f8:	f8dd a004 	ldr.w	sl, [sp, #4]
 800c4fc:	4639      	mov	r1, r7
 800c4fe:	4650      	mov	r0, sl
 800c500:	f7ff fe6a 	bl	800c1d8 <GUI_UC__NumChars2NumBytes>
 800c504:	af06      	add	r7, sp, #24
 800c506:	4450      	add	r0, sl
 800c508:	f847 0d14 	str.w	r0, [r7, #-20]!
 800c50c:	f000 feae 	bl	800d26c <GUI_GetFontDistY>
 800c510:	4404      	add	r4, r0
 800c512:	4638      	mov	r0, r7
 800c514:	f7ff fae2 	bl	800badc <GUI__HandleEOLine>
 800c518:	2800      	cmp	r0, #0
 800c51a:	d0b1      	beq.n	800c480 <GUI__DispStringInRect+0xa4>
 800c51c:	b007      	add	sp, #28
 800c51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c522:	bf00      	nop
 800c524:	20000084 	.word	0x20000084

0800c528 <GUI_DispStringInRectMax>:
 800c528:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c52c:	460c      	mov	r4, r1
 800c52e:	4690      	mov	r8, r2
 800c530:	461f      	mov	r7, r3
 800c532:	4606      	mov	r6, r0
 800c534:	b1c0      	cbz	r0, 800c568 <GUI_DispStringInRectMax+0x40>
 800c536:	b169      	cbz	r1, 800c554 <GUI_DispStringInRectMax+0x2c>
 800c538:	4608      	mov	r0, r1
 800c53a:	f7fb fa83 	bl	8007a44 <WM_SetUserClipRect>
 800c53e:	4605      	mov	r5, r0
 800c540:	b148      	cbz	r0, 800c556 <GUI_DispStringInRectMax+0x2e>
 800c542:	4668      	mov	r0, sp
 800c544:	4621      	mov	r1, r4
 800c546:	462a      	mov	r2, r5
 800c548:	f7ff fafa 	bl	800bb40 <GUI__IntersectRects>
 800c54c:	4668      	mov	r0, sp
 800c54e:	f7fb fa79 	bl	8007a44 <WM_SetUserClipRect>
 800c552:	e000      	b.n	800c556 <GUI_DispStringInRectMax+0x2e>
 800c554:	460d      	mov	r5, r1
 800c556:	4630      	mov	r0, r6
 800c558:	4621      	mov	r1, r4
 800c55a:	4642      	mov	r2, r8
 800c55c:	463b      	mov	r3, r7
 800c55e:	f7ff ff3d 	bl	800c3dc <GUI__DispStringInRect>
 800c562:	4628      	mov	r0, r5
 800c564:	f7fb fa6e 	bl	8007a44 <WM_SetUserClipRect>
 800c568:	b002      	add	sp, #8
 800c56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c56e <GUI_DispStringInRect>:
 800c56e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800c572:	f7ff bfd9 	b.w	800c528 <GUI_DispStringInRectMax>

0800c576 <GUI_WrapGetNumLines>:
 800c576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c578:	4605      	mov	r5, r0
 800c57a:	460e      	mov	r6, r1
 800c57c:	4617      	mov	r7, r2
 800c57e:	2400      	movs	r4, #0
 800c580:	4628      	mov	r0, r5
 800c582:	4631      	mov	r1, r6
 800c584:	463a      	mov	r2, r7
 800c586:	f004 f96d 	bl	8010864 <GUI__WrapGetNumBytesToNextLine>
 800c58a:	b110      	cbz	r0, 800c592 <GUI_WrapGetNumLines+0x1c>
 800c58c:	4405      	add	r5, r0
 800c58e:	3401      	adds	r4, #1
 800c590:	e7f6      	b.n	800c580 <GUI_WrapGetNumLines+0xa>
 800c592:	4620      	mov	r0, r4
 800c594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c596 <GUI_DispStringInRectWrap>:
 800c596:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c59a:	b089      	sub	sp, #36	; 0x24
 800c59c:	460c      	mov	r4, r1
 800c59e:	9202      	str	r2, [sp, #8]
 800c5a0:	9303      	str	r3, [sp, #12]
 800c5a2:	4605      	mov	r5, r0
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	f000 8092 	beq.w	800c6ce <GUI_DispStringInRectWrap+0x138>
 800c5aa:	f8b1 a000 	ldrh.w	sl, [r1]
 800c5ae:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 800c5b2:	884e      	ldrh	r6, [r1, #2]
 800c5b4:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 800c5b8:	fa0f f289 	sxth.w	r2, r9
 800c5bc:	fa0f f38a 	sxth.w	r3, sl
 800c5c0:	1ad3      	subs	r3, r2, r3
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	9301      	str	r3, [sp, #4]
 800c5c6:	f000 fe51 	bl	800d26c <GUI_GetFontDistY>
 800c5ca:	9902      	ldr	r1, [sp, #8]
 800c5cc:	f011 070c 	ands.w	r7, r1, #12
 800c5d0:	4680      	mov	r8, r0
 800c5d2:	d01b      	beq.n	800c60c <GUI_DispStringInRectWrap+0x76>
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	9901      	ldr	r1, [sp, #4]
 800c5d8:	9a03      	ldr	r2, [sp, #12]
 800c5da:	f7ff ffcc 	bl	800c576 <GUI_WrapGetNumLines>
 800c5de:	2f08      	cmp	r7, #8
 800c5e0:	d003      	beq.n	800c5ea <GUI_DispStringInRectWrap+0x54>
 800c5e2:	2f0c      	cmp	r7, #12
 800c5e4:	d006      	beq.n	800c5f4 <GUI_DispStringInRectWrap+0x5e>
 800c5e6:	2f04      	cmp	r7, #4
 800c5e8:	d110      	bne.n	800c60c <GUI_DispStringInRectWrap+0x76>
 800c5ea:	f10b 0601 	add.w	r6, fp, #1
 800c5ee:	fb00 6618 	mls	r6, r0, r8, r6
 800c5f2:	e00a      	b.n	800c60a <GUI_DispStringInRectWrap+0x74>
 800c5f4:	b232      	sxth	r2, r6
 800c5f6:	fa0f f38b 	sxth.w	r3, fp
 800c5fa:	1a9b      	subs	r3, r3, r2
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	fb08 3010 	mls	r0, r8, r0, r3
 800c602:	2302      	movs	r3, #2
 800c604:	fb90 f0f3 	sdiv	r0, r0, r3
 800c608:	4406      	add	r6, r0
 800c60a:	b2b6      	uxth	r6, r6
 800c60c:	4620      	mov	r0, r4
 800c60e:	f7fb fa19 	bl	8007a44 <WM_SetUserClipRect>
 800c612:	4607      	mov	r7, r0
 800c614:	b178      	cbz	r0, 800c636 <GUI_DispStringInRectWrap+0xa0>
 800c616:	a804      	add	r0, sp, #16
 800c618:	4621      	mov	r1, r4
 800c61a:	463a      	mov	r2, r7
 800c61c:	f8ad a010 	strh.w	sl, [sp, #16]
 800c620:	f8ad 6012 	strh.w	r6, [sp, #18]
 800c624:	f8ad 9014 	strh.w	r9, [sp, #20]
 800c628:	f8ad b016 	strh.w	fp, [sp, #22]
 800c62c:	f7ff fa88 	bl	800bb40 <GUI__IntersectRects>
 800c630:	a804      	add	r0, sp, #16
 800c632:	f7fb fa07 	bl	8007a44 <WM_SetUserClipRect>
 800c636:	9901      	ldr	r1, [sp, #4]
 800c638:	9a03      	ldr	r2, [sp, #12]
 800c63a:	4628      	mov	r0, r5
 800c63c:	f004 f8e0 	bl	8010800 <GUI__WrapGetNumCharsDisp>
 800c640:	eb06 0b08 	add.w	fp, r6, r8
 800c644:	4602      	mov	r2, r0
 800c646:	fa1f fb8b 	uxth.w	fp, fp
 800c64a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c64e:	4611      	mov	r1, r2
 800c650:	4628      	mov	r0, r5
 800c652:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c656:	9200      	str	r2, [sp, #0]
 800c658:	f8ad a018 	strh.w	sl, [sp, #24]
 800c65c:	f8ad 601a 	strh.w	r6, [sp, #26]
 800c660:	f8ad 901c 	strh.w	r9, [sp, #28]
 800c664:	f000 fd7e 	bl	800d164 <GUI__GetLineDistX>
 800c668:	9902      	ldr	r1, [sp, #8]
 800c66a:	9a00      	ldr	r2, [sp, #0]
 800c66c:	f001 0303 	and.w	r3, r1, #3
 800c670:	2b01      	cmp	r3, #1
 800c672:	d014      	beq.n	800c69e <GUI_DispStringInRectWrap+0x108>
 800c674:	2b02      	cmp	r3, #2
 800c676:	d004      	beq.n	800c682 <GUI_DispStringInRectWrap+0xec>
 800c678:	b9b3      	cbnz	r3, 800c6a8 <GUI_DispStringInRectWrap+0x112>
 800c67a:	8823      	ldrh	r3, [r4, #0]
 800c67c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c680:	e012      	b.n	800c6a8 <GUI_DispStringInRectWrap+0x112>
 800c682:	8821      	ldrh	r1, [r4, #0]
 800c684:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 800c688:	b20e      	sxth	r6, r1
 800c68a:	ebc6 060e 	rsb	r6, r6, lr
 800c68e:	1a30      	subs	r0, r6, r0
 800c690:	3001      	adds	r0, #1
 800c692:	fb90 f3f3 	sdiv	r3, r0, r3
 800c696:	4419      	add	r1, r3
 800c698:	f8ad 1018 	strh.w	r1, [sp, #24]
 800c69c:	e004      	b.n	800c6a8 <GUI_DispStringInRectWrap+0x112>
 800c69e:	88a3      	ldrh	r3, [r4, #4]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	1a18      	subs	r0, r3, r0
 800c6a4:	f8ad 0018 	strh.w	r0, [sp, #24]
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	aa06      	add	r2, sp, #24
 800c6ae:	f000 fd89 	bl	800d1c4 <GUI__DispLine>
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	9901      	ldr	r1, [sp, #4]
 800c6b6:	9a03      	ldr	r2, [sp, #12]
 800c6b8:	f004 f8d4 	bl	8010864 <GUI__WrapGetNumBytesToNextLine>
 800c6bc:	4405      	add	r5, r0
 800c6be:	fa1f f68b 	uxth.w	r6, fp
 800c6c2:	782b      	ldrb	r3, [r5, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1b6      	bne.n	800c636 <GUI_DispStringInRectWrap+0xa0>
 800c6c8:	4638      	mov	r0, r7
 800c6ca:	f7fb f9bb 	bl	8007a44 <WM_SetUserClipRect>
 800c6ce:	b009      	add	sp, #36	; 0x24
 800c6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c6d4 <GUI_DEVICE__GetpDriver>:
 800c6d4:	2801      	cmp	r0, #1
 800c6d6:	dc09      	bgt.n	800c6ec <GUI_DEVICE__GetpDriver+0x18>
 800c6d8:	4b05      	ldr	r3, [pc, #20]	; (800c6f0 <GUI_DEVICE__GetpDriver+0x1c>)
 800c6da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c6de:	b120      	cbz	r0, 800c6ea <GUI_DEVICE__GetpDriver+0x16>
 800c6e0:	68c3      	ldr	r3, [r0, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	b11b      	cbz	r3, 800c6ee <GUI_DEVICE__GetpDriver+0x1a>
 800c6e6:	6800      	ldr	r0, [r0, #0]
 800c6e8:	e7f9      	b.n	800c6de <GUI_DEVICE__GetpDriver+0xa>
 800c6ea:	4770      	bx	lr
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	4770      	bx	lr
 800c6f0:	20005694 	.word	0x20005694

0800c6f4 <GUI_DEVICE_Delete>:
 800c6f4:	f001 bd14 	b.w	800e120 <GUI_ALLOC_FreeFixedBlock>

0800c6f8 <GUI_DEVICE_Create>:
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fc:	4606      	mov	r6, r0
 800c6fe:	460d      	mov	r5, r1
 800c700:	4617      	mov	r7, r2
 800c702:	461c      	mov	r4, r3
 800c704:	dd01      	ble.n	800c70a <GUI_DEVICE_Create+0x12>
 800c706:	2000      	movs	r0, #0
 800c708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c70a:	201c      	movs	r0, #28
 800c70c:	f001 fdec 	bl	800e2e8 <GUI_ALLOC_GetFixedBlock>
 800c710:	2800      	cmp	r0, #0
 800c712:	d0f8      	beq.n	800c706 <GUI_DEVICE_Create+0xe>
 800c714:	b10d      	cbz	r5, 800c71a <GUI_DEVICE_Create+0x22>
 800c716:	6105      	str	r5, [r0, #16]
 800c718:	e009      	b.n	800c72e <GUI_DEVICE_Create+0x36>
 800c71a:	4b09      	ldr	r3, [pc, #36]	; (800c740 <GUI_DEVICE_Create+0x48>)
 800c71c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800c720:	b129      	cbz	r1, 800c72e <GUI_DEVICE_Create+0x36>
 800c722:	680b      	ldr	r3, [r1, #0]
 800c724:	b10b      	cbz	r3, 800c72a <GUI_DEVICE_Create+0x32>
 800c726:	4619      	mov	r1, r3
 800c728:	e7fb      	b.n	800c722 <GUI_DEVICE_Create+0x2a>
 800c72a:	690b      	ldr	r3, [r1, #16]
 800c72c:	6103      	str	r3, [r0, #16]
 800c72e:	2300      	movs	r3, #0
 800c730:	6083      	str	r3, [r0, #8]
 800c732:	6184      	str	r4, [r0, #24]
 800c734:	8287      	strh	r7, [r0, #20]
 800c736:	60c6      	str	r6, [r0, #12]
 800c738:	6003      	str	r3, [r0, #0]
 800c73a:	6043      	str	r3, [r0, #4]
 800c73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c73e:	bf00      	nop
 800c740:	20005694 	.word	0x20005694

0800c744 <GUI_DEVICE_Unlink>:
 800c744:	6981      	ldr	r1, [r0, #24]
 800c746:	4a0b      	ldr	r2, [pc, #44]	; (800c774 <GUI_DEVICE_Unlink+0x30>)
 800c748:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c74c:	4283      	cmp	r3, r0
 800c74e:	d105      	bne.n	800c75c <GUI_DEVICE_Unlink+0x18>
 800c750:	6803      	ldr	r3, [r0, #0]
 800c752:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c756:	b10b      	cbz	r3, 800c75c <GUI_DEVICE_Unlink+0x18>
 800c758:	2200      	movs	r2, #0
 800c75a:	605a      	str	r2, [r3, #4]
 800c75c:	6843      	ldr	r3, [r0, #4]
 800c75e:	b10b      	cbz	r3, 800c764 <GUI_DEVICE_Unlink+0x20>
 800c760:	6802      	ldr	r2, [r0, #0]
 800c762:	601a      	str	r2, [r3, #0]
 800c764:	6802      	ldr	r2, [r0, #0]
 800c766:	b102      	cbz	r2, 800c76a <GUI_DEVICE_Unlink+0x26>
 800c768:	6053      	str	r3, [r2, #4]
 800c76a:	2300      	movs	r3, #0
 800c76c:	6003      	str	r3, [r0, #0]
 800c76e:	6043      	str	r3, [r0, #4]
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	20005694 	.word	0x20005694

0800c778 <GUI_DEVICE_Link>:
 800c778:	b570      	push	{r4, r5, r6, lr}
 800c77a:	b908      	cbnz	r0, 800c780 <GUI_DEVICE_Link+0x8>
 800c77c:	2001      	movs	r0, #1
 800c77e:	bd70      	pop	{r4, r5, r6, pc}
 800c780:	6982      	ldr	r2, [r0, #24]
 800c782:	2a01      	cmp	r2, #1
 800c784:	dcfa      	bgt.n	800c77c <GUI_DEVICE_Link+0x4>
 800c786:	4b1b      	ldr	r3, [pc, #108]	; (800c7f4 <GUI_DEVICE_Link+0x7c>)
 800c788:	7819      	ldrb	r1, [r3, #0]
 800c78a:	428a      	cmp	r2, r1
 800c78c:	bfa4      	itt	ge
 800c78e:	1c51      	addge	r1, r2, #1
 800c790:	7019      	strbge	r1, [r3, #0]
 800c792:	4919      	ldr	r1, [pc, #100]	; (800c7f8 <GUI_DEVICE_Link+0x80>)
 800c794:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800c798:	460d      	mov	r5, r1
 800c79a:	b913      	cbnz	r3, 800c7a2 <GUI_DEVICE_Link+0x2a>
 800c79c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800c7a0:	e01a      	b.n	800c7d8 <GUI_DEVICE_Link+0x60>
 800c7a2:	6859      	ldr	r1, [r3, #4]
 800c7a4:	b109      	cbz	r1, 800c7aa <GUI_DEVICE_Link+0x32>
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	e7fb      	b.n	800c7a2 <GUI_DEVICE_Link+0x2a>
 800c7aa:	68c1      	ldr	r1, [r0, #12]
 800c7ac:	680e      	ldr	r6, [r1, #0]
 800c7ae:	68d9      	ldr	r1, [r3, #12]
 800c7b0:	680c      	ldr	r4, [r1, #0]
 800c7b2:	42b4      	cmp	r4, r6
 800c7b4:	dd03      	ble.n	800c7be <GUI_DEVICE_Link+0x46>
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1f8      	bne.n	800c7ae <GUI_DEVICE_Link+0x36>
 800c7bc:	e7de      	b.n	800c77c <GUI_DEVICE_Link+0x4>
 800c7be:	d102      	bne.n	800c7c6 <GUI_DEVICE_Link+0x4e>
 800c7c0:	8a81      	ldrh	r1, [r0, #20]
 800c7c2:	2901      	cmp	r1, #1
 800c7c4:	d00f      	beq.n	800c7e6 <GUI_DEVICE_Link+0x6e>
 800c7c6:	6859      	ldr	r1, [r3, #4]
 800c7c8:	b189      	cbz	r1, 800c7ee <GUI_DEVICE_Link+0x76>
 800c7ca:	6008      	str	r0, [r1, #0]
 800c7cc:	6041      	str	r1, [r0, #4]
 800c7ce:	6058      	str	r0, [r3, #4]
 800c7d0:	4298      	cmp	r0, r3
 800c7d2:	bf08      	it	eq
 800c7d4:	2300      	moveq	r3, #0
 800c7d6:	6003      	str	r3, [r0, #0]
 800c7d8:	2000      	movs	r0, #0
 800c7da:	bd70      	pop	{r4, r5, r6, pc}
 800c7dc:	68cb      	ldr	r3, [r1, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	42a3      	cmp	r3, r4
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	dbef      	blt.n	800c7c6 <GUI_DEVICE_Link+0x4e>
 800c7e6:	6819      	ldr	r1, [r3, #0]
 800c7e8:	2900      	cmp	r1, #0
 800c7ea:	d1f7      	bne.n	800c7dc <GUI_DEVICE_Link+0x64>
 800c7ec:	e7eb      	b.n	800c7c6 <GUI_DEVICE_Link+0x4e>
 800c7ee:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 800c7f2:	e7ec      	b.n	800c7ce <GUI_DEVICE_Link+0x56>
 800c7f4:	20005642 	.word	0x20005642
 800c7f8:	20005694 	.word	0x20005694

0800c7fc <GUI_DEVICE_CreateAndLink>:
 800c7fc:	b538      	push	{r3, r4, r5, lr}
 800c7fe:	461d      	mov	r5, r3
 800c800:	f7ff ff7a 	bl	800c6f8 <GUI_DEVICE_Create>
 800c804:	4604      	mov	r4, r0
 800c806:	b148      	cbz	r0, 800c81c <GUI_DEVICE_CreateAndLink+0x20>
 800c808:	f7ff ffb6 	bl	800c778 <GUI_DEVICE_Link>
 800c80c:	68e3      	ldr	r3, [r4, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	b923      	cbnz	r3, 800c81c <GUI_DEVICE_CreateAndLink+0x20>
 800c812:	4b03      	ldr	r3, [pc, #12]	; (800c820 <GUI_DEVICE_CreateAndLink+0x24>)
 800c814:	3516      	adds	r5, #22
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800c81c:	4620      	mov	r0, r4
 800c81e:	bd38      	pop	{r3, r4, r5, pc}
 800c820:	20000084 	.word	0x20000084

0800c824 <_OnExit>:
 800c824:	b570      	push	{r4, r5, r6, lr}
 800c826:	4b0b      	ldr	r3, [pc, #44]	; (800c854 <_OnExit+0x30>)
 800c828:	4e0b      	ldr	r6, [pc, #44]	; (800c858 <_OnExit+0x34>)
 800c82a:	4d0c      	ldr	r5, [pc, #48]	; (800c85c <_OnExit+0x38>)
 800c82c:	2400      	movs	r4, #0
 800c82e:	601c      	str	r4, [r3, #0]
 800c830:	4621      	mov	r1, r4
 800c832:	6833      	ldr	r3, [r6, #0]
 800c834:	2270      	movs	r2, #112	; 0x70
 800c836:	4628      	mov	r0, r5
 800c838:	4798      	blx	r3
 800c83a:	6833      	ldr	r3, [r6, #0]
 800c83c:	4808      	ldr	r0, [pc, #32]	; (800c860 <_OnExit+0x3c>)
 800c83e:	4621      	mov	r1, r4
 800c840:	2208      	movs	r2, #8
 800c842:	4798      	blx	r3
 800c844:	4b07      	ldr	r3, [pc, #28]	; (800c864 <_OnExit+0x40>)
 800c846:	601d      	str	r5, [r3, #0]
 800c848:	4b07      	ldr	r3, [pc, #28]	; (800c868 <_OnExit+0x44>)
 800c84a:	701c      	strb	r4, [r3, #0]
 800c84c:	4b07      	ldr	r3, [pc, #28]	; (800c86c <_OnExit+0x48>)
 800c84e:	601c      	str	r4, [r3, #0]
 800c850:	bd70      	pop	{r4, r5, r6, pc}
 800c852:	bf00      	nop
 800c854:	20005554 	.word	0x20005554
 800c858:	20000070 	.word	0x20000070
 800c85c:	200054e4 	.word	0x200054e4
 800c860:	20005694 	.word	0x20005694
 800c864:	20000084 	.word	0x20000084
 800c868:	2000567c 	.word	0x2000567c
 800c86c:	20005654 	.word	0x20005654

0800c870 <_InitContext>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4d19      	ldr	r5, [pc, #100]	; (800c8d8 <_InitContext+0x68>)
 800c874:	682b      	ldr	r3, [r5, #0]
 800c876:	1d1a      	adds	r2, r3, #4
 800c878:	63da      	str	r2, [r3, #60]	; 0x3c
 800c87a:	f103 0208 	add.w	r2, r3, #8
 800c87e:	639b      	str	r3, [r3, #56]	; 0x38
 800c880:	641b      	str	r3, [r3, #64]	; 0x40
 800c882:	6142      	str	r2, [r0, #20]
 800c884:	7c5a      	ldrb	r2, [r3, #17]
 800c886:	4b15      	ldr	r3, [pc, #84]	; (800c8dc <_InitContext+0x6c>)
 800c888:	4604      	mov	r4, r0
 800c88a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c88e:	68c3      	ldr	r3, [r0, #12]
 800c890:	f104 0108 	add.w	r1, r4, #8
 800c894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c896:	4798      	blx	r3
 800c898:	4b11      	ldr	r3, [pc, #68]	; (800c8e0 <_InitContext+0x70>)
 800c89a:	6663      	str	r3, [r4, #100]	; 0x64
 800c89c:	4b11      	ldr	r3, [pc, #68]	; (800c8e4 <_InitContext+0x74>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	61e3      	str	r3, [r4, #28]
 800c8a2:	682b      	ldr	r3, [r5, #0]
 800c8a4:	3308      	adds	r3, #8
 800c8a6:	6163      	str	r3, [r4, #20]
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	7623      	strb	r3, [r4, #24]
 800c8ac:	f7fa fe98 	bl	80075e0 <WM_GetDesktopWindow>
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800c8b6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800c8ba:	6323      	str	r3, [r4, #48]	; 0x30
 800c8bc:	6363      	str	r3, [r4, #52]	; 0x34
 800c8be:	4b0a      	ldr	r3, [pc, #40]	; (800c8e8 <_InitContext+0x78>)
 800c8c0:	64a0      	str	r0, [r4, #72]	; 0x48
 800c8c2:	6818      	ldr	r0, [r3, #0]
 800c8c4:	f7ff f8fa 	bl	800babc <LCD_SetBkColor>
 800c8c8:	4b08      	ldr	r3, [pc, #32]	; (800c8ec <_InitContext+0x7c>)
 800c8ca:	6818      	ldr	r0, [r3, #0]
 800c8cc:	f7ff f8fe 	bl	800bacc <LCD_SetColor>
 800c8d0:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <_InitContext+0x80>)
 800c8d2:	4a08      	ldr	r2, [pc, #32]	; (800c8f4 <_InitContext+0x84>)
 800c8d4:	601a      	str	r2, [r3, #0]
 800c8d6:	bd38      	pop	{r3, r4, r5, pc}
 800c8d8:	20000084 	.word	0x20000084
 800c8dc:	20005694 	.word	0x20005694
 800c8e0:	08013d18 	.word	0x08013d18
 800c8e4:	20000088 	.word	0x20000088
 800c8e8:	200054e0 	.word	0x200054e0
 800c8ec:	2000008c 	.word	0x2000008c
 800c8f0:	2000568c 	.word	0x2000568c
 800c8f4:	08014840 	.word	0x08014840

0800c8f8 <GUI_SetDefaultFont>:
 800c8f8:	4b01      	ldr	r3, [pc, #4]	; (800c900 <GUI_SetDefaultFont+0x8>)
 800c8fa:	6018      	str	r0, [r3, #0]
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop
 800c900:	20000088 	.word	0x20000088

0800c904 <GUI_ClearRect>:
 800c904:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c908:	4607      	mov	r7, r0
 800c90a:	2004      	movs	r0, #4
 800c90c:	469a      	mov	sl, r3
 800c90e:	460e      	mov	r6, r1
 800c910:	4691      	mov	r9, r2
 800c912:	f7fe fd81 	bl	800b418 <LCD_SetDrawMode>
 800c916:	4b13      	ldr	r3, [pc, #76]	; (800c964 <GUI_ClearRect+0x60>)
 800c918:	681c      	ldr	r4, [r3, #0]
 800c91a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800c91c:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800c91e:	442f      	add	r7, r5
 800c920:	4426      	add	r6, r4
 800c922:	4680      	mov	r8, r0
 800c924:	444d      	add	r5, r9
 800c926:	4454      	add	r4, sl
 800c928:	4668      	mov	r0, sp
 800c92a:	f8ad 7000 	strh.w	r7, [sp]
 800c92e:	f8ad 5004 	strh.w	r5, [sp, #4]
 800c932:	f8ad 6002 	strh.w	r6, [sp, #2]
 800c936:	f8ad 4006 	strh.w	r4, [sp, #6]
 800c93a:	f7fc f899 	bl	8008a70 <WM__InitIVRSearch>
 800c93e:	b928      	cbnz	r0, 800c94c <GUI_ClearRect+0x48>
 800c940:	4640      	mov	r0, r8
 800c942:	f7fe fd69 	bl	800b418 <LCD_SetDrawMode>
 800c946:	b002      	add	sp, #8
 800c948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c94c:	4638      	mov	r0, r7
 800c94e:	4631      	mov	r1, r6
 800c950:	462a      	mov	r2, r5
 800c952:	4623      	mov	r3, r4
 800c954:	f7fe fde2 	bl	800b51c <LCD_FillRect>
 800c958:	f7fb ffc8 	bl	80088ec <WM__GetNextIVR>
 800c95c:	2800      	cmp	r0, #0
 800c95e:	d1f5      	bne.n	800c94c <GUI_ClearRect+0x48>
 800c960:	e7ee      	b.n	800c940 <GUI_ClearRect+0x3c>
 800c962:	bf00      	nop
 800c964:	20000084 	.word	0x20000084

0800c968 <GUI_Clear>:
 800c968:	b510      	push	{r4, lr}
 800c96a:	2000      	movs	r0, #0
 800c96c:	4601      	mov	r1, r0
 800c96e:	f000 f949 	bl	800cc04 <GUI_GotoXY>
 800c972:	4804      	ldr	r0, [pc, #16]	; (800c984 <GUI_Clear+0x1c>)
 800c974:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800c978:	4601      	mov	r1, r0
 800c97a:	4613      	mov	r3, r2
 800c97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c980:	f7ff bfc0 	b.w	800c904 <GUI_ClearRect>
 800c984:	ffffc001 	.word	0xffffc001

0800c988 <GUI__RegisterExit>:
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	4b05      	ldr	r3, [pc, #20]	; (800c9a8 <GUI__RegisterExit+0x20>)
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	605a      	str	r2, [r3, #4]
 800c998:	4b03      	ldr	r3, [pc, #12]	; (800c9a8 <GUI__RegisterExit+0x20>)
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	601a      	str	r2, [r3, #0]
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr
 800c9a8:	200054d4 	.word	0x200054d4

0800c9ac <GUI__Config>:
 800c9ac:	b508      	push	{r3, lr}
 800c9ae:	4b08      	ldr	r3, [pc, #32]	; (800c9d0 <GUI__Config+0x24>)
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	b962      	cbnz	r2, 800c9ce <GUI__Config+0x22>
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	601a      	str	r2, [r3, #0]
 800c9b8:	f7f3 fde4 	bl	8000584 <GUI_X_Config>
 800c9bc:	f7f3 ffba 	bl	8000934 <LCD_X_Config>
 800c9c0:	4804      	ldr	r0, [pc, #16]	; (800c9d4 <GUI__Config+0x28>)
 800c9c2:	4b05      	ldr	r3, [pc, #20]	; (800c9d8 <GUI__Config+0x2c>)
 800c9c4:	6003      	str	r3, [r0, #0]
 800c9c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c9ca:	f7ff bfdd 	b.w	800c988 <GUI__RegisterExit>
 800c9ce:	bd08      	pop	{r3, pc}
 800c9d0:	20005554 	.word	0x20005554
 800c9d4:	200054d8 	.word	0x200054d8
 800c9d8:	0800c825 	.word	0x0800c825

0800c9dc <GUI_Init>:
 800c9dc:	b590      	push	{r4, r7, lr}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	4b26      	ldr	r3, [pc, #152]	; (800ca7c <GUI_Init+0xa0>)
 800c9e4:	4a25      	ldr	r2, [pc, #148]	; (800ca7c <GUI_Init+0xa0>)
 800c9e6:	6812      	ldr	r2, [r2, #0]
 800c9e8:	f022 0201 	bic.w	r2, r2, #1
 800c9ec:	601a      	str	r2, [r3, #0]
 800c9ee:	4b24      	ldr	r3, [pc, #144]	; (800ca80 <GUI_Init+0xa4>)
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	601a      	str	r2, [r3, #0]
 800c9f4:	bf00      	nop
 800c9f6:	4b22      	ldr	r3, [pc, #136]	; (800ca80 <GUI_Init+0xa4>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1fb      	bne.n	800c9f6 <GUI_Init+0x1a>
 800c9fe:	4b21      	ldr	r3, [pc, #132]	; (800ca84 <GUI_Init+0xa8>)
 800ca00:	4a21      	ldr	r2, [pc, #132]	; (800ca88 <GUI_Init+0xac>)
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	4b1f      	ldr	r3, [pc, #124]	; (800ca84 <GUI_Init+0xa8>)
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	4b20      	ldr	r3, [pc, #128]	; (800ca8c <GUI_Init+0xb0>)
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d000      	beq.n	800ca10 <GUI_Init+0x34>
 800ca0e:	e7fe      	b.n	800ca0e <GUI_Init+0x32>
 800ca10:	f7ff ffcc 	bl	800c9ac <GUI__Config>
 800ca14:	4b1e      	ldr	r3, [pc, #120]	; (800ca90 <GUI_Init+0xb4>)
 800ca16:	222e      	movs	r2, #46	; 0x2e
 800ca18:	701a      	strb	r2, [r3, #0]
 800ca1a:	f7f3 fdc3 	bl	80005a4 <GUI_X_Init>
 800ca1e:	481d      	ldr	r0, [pc, #116]	; (800ca94 <GUI_Init+0xb8>)
 800ca20:	f7ff ff26 	bl	800c870 <_InitContext>
 800ca24:	f7fe ff9e 	bl	800b964 <emWin_LCD_Init>
 800ca28:	6078      	str	r0, [r7, #4]
 800ca2a:	f7fe fc7f 	bl	800b32c <LCD_GetXSizeDisplay>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d004      	beq.n	800ca3e <GUI_Init+0x62>
 800ca34:	f7fe fc80 	bl	800b338 <LCD_GetYSizeDisplay>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d109      	bne.n	800ca52 <GUI_Init+0x76>
 800ca3e:	f7fe fc61 	bl	800b304 <LCD_GetXSizeMax>
 800ca42:	4604      	mov	r4, r0
 800ca44:	f7fe fc61 	bl	800b30a <LCD_GetYSizeMax>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	f7fe fc63 	bl	800b318 <LCD_SetDisplaySize>
 800ca52:	2000      	movs	r0, #0
 800ca54:	2100      	movs	r1, #0
 800ca56:	f000 f939 	bl	800cccc <GUI_SetOrg>
 800ca5a:	f7fc fa15 	bl	8008e88 <WM_Init>
 800ca5e:	4b0e      	ldr	r3, [pc, #56]	; (800ca98 <GUI_Init+0xbc>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d002      	beq.n	800ca6c <GUI_Init+0x90>
 800ca66:	4b0c      	ldr	r3, [pc, #48]	; (800ca98 <GUI_Init+0xbc>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4798      	blx	r3
 800ca6c:	4b0b      	ldr	r3, [pc, #44]	; (800ca9c <GUI_Init+0xc0>)
 800ca6e:	2201      	movs	r2, #1
 800ca70:	701a      	strb	r2, [r3, #0]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4618      	mov	r0, r3
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd90      	pop	{r4, r7, pc}
 800ca7c:	e0002000 	.word	0xe0002000
 800ca80:	40023008 	.word	0x40023008
 800ca84:	40023000 	.word	0x40023000
 800ca88:	f407a5c2 	.word	0xf407a5c2
 800ca8c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ca90:	20005648 	.word	0x20005648
 800ca94:	200054e4 	.word	0x200054e4
 800ca98:	2000566c 	.word	0x2000566c
 800ca9c:	20005674 	.word	0x20005674

0800caa0 <GUI_CalcColorDist>:
 800caa0:	b2cb      	uxtb	r3, r1
 800caa2:	b2c2      	uxtb	r2, r0
 800caa4:	1ad2      	subs	r2, r2, r3
 800caa6:	b292      	uxth	r2, r2
 800caa8:	b293      	uxth	r3, r2
 800caaa:	b530      	push	{r4, r5, lr}
 800caac:	041c      	lsls	r4, r3, #16
 800caae:	bf48      	it	mi
 800cab0:	4253      	negmi	r3, r2
 800cab2:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800cab6:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800caba:	ebc5 0202 	rsb	r2, r5, r2
 800cabe:	bf48      	it	mi
 800cac0:	b29b      	uxthmi	r3, r3
 800cac2:	b292      	uxth	r2, r2
 800cac4:	0c09      	lsrs	r1, r1, #16
 800cac6:	fb13 f403 	smulbb	r4, r3, r3
 800caca:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800cace:	b293      	uxth	r3, r2
 800cad0:	041d      	lsls	r5, r3, #16
 800cad2:	b289      	uxth	r1, r1
 800cad4:	b288      	uxth	r0, r1
 800cad6:	bf44      	itt	mi
 800cad8:	4253      	negmi	r3, r2
 800cada:	b29b      	uxthmi	r3, r3
 800cadc:	0402      	lsls	r2, r0, #16
 800cade:	bf48      	it	mi
 800cae0:	4248      	negmi	r0, r1
 800cae2:	fb13 4303 	smlabb	r3, r3, r3, r4
 800cae6:	bf48      	it	mi
 800cae8:	b280      	uxthmi	r0, r0
 800caea:	fb00 3000 	mla	r0, r0, r0, r3
 800caee:	bd30      	pop	{r4, r5, pc}

0800caf0 <GUI_GetClientRect>:
 800caf0:	b108      	cbz	r0, 800caf6 <GUI_GetClientRect+0x6>
 800caf2:	f7fa bd59 	b.w	80075a8 <WM_GetClientRect>
 800caf6:	4770      	bx	lr

0800caf8 <GUI_GetBkColor>:
 800caf8:	b508      	push	{r3, lr}
 800cafa:	f003 fd89 	bl	8010610 <LCD_GetBkColorIndex>
 800cafe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cb02:	f7fe bf93 	b.w	800ba2c <LCD_Index2Color>

0800cb06 <GUI_GetColor>:
 800cb06:	b508      	push	{r3, lr}
 800cb08:	f003 fd8a 	bl	8010620 <LCD_GetColorIndex>
 800cb0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cb10:	f7fe bf8c 	b.w	800ba2c <LCD_Index2Color>

0800cb14 <GUI_GetOrg>:
 800cb14:	4b04      	ldr	r3, [pc, #16]	; (800cb28 <GUI_GetOrg+0x14>)
 800cb16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb1a:	6003      	str	r3, [r0, #0]
 800cb1c:	4b03      	ldr	r3, [pc, #12]	; (800cb2c <GUI_GetOrg+0x18>)
 800cb1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb22:	600b      	str	r3, [r1, #0]
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	20005668 	.word	0x20005668
 800cb2c:	20005658 	.word	0x20005658

0800cb30 <GUI_GetYSizeOfFont>:
 800cb30:	7e02      	ldrb	r2, [r0, #24]
 800cb32:	7ec0      	ldrb	r0, [r0, #27]
 800cb34:	4350      	muls	r0, r2
 800cb36:	4770      	bx	lr

0800cb38 <GUI_MergeRect>:
 800cb38:	b510      	push	{r4, lr}
 800cb3a:	b338      	cbz	r0, 800cb8c <GUI_MergeRect+0x54>
 800cb3c:	b309      	cbz	r1, 800cb82 <GUI_MergeRect+0x4a>
 800cb3e:	b30a      	cbz	r2, 800cb84 <GUI_MergeRect+0x4c>
 800cb40:	f9b1 4000 	ldrsh.w	r4, [r1]
 800cb44:	f9b2 3000 	ldrsh.w	r3, [r2]
 800cb48:	429c      	cmp	r4, r3
 800cb4a:	bfb8      	it	lt
 800cb4c:	4623      	movlt	r3, r4
 800cb4e:	8003      	strh	r3, [r0, #0]
 800cb50:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800cb54:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800cb58:	429c      	cmp	r4, r3
 800cb5a:	bfb8      	it	lt
 800cb5c:	4623      	movlt	r3, r4
 800cb5e:	8043      	strh	r3, [r0, #2]
 800cb60:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800cb64:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800cb68:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800cb6c:	429c      	cmp	r4, r3
 800cb6e:	bfa8      	it	ge
 800cb70:	4623      	movge	r3, r4
 800cb72:	8083      	strh	r3, [r0, #4]
 800cb74:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800cb78:	4299      	cmp	r1, r3
 800cb7a:	bfa8      	it	ge
 800cb7c:	460b      	movge	r3, r1
 800cb7e:	80c3      	strh	r3, [r0, #6]
 800cb80:	bd10      	pop	{r4, pc}
 800cb82:	4611      	mov	r1, r2
 800cb84:	680b      	ldr	r3, [r1, #0]
 800cb86:	6003      	str	r3, [r0, #0]
 800cb88:	684b      	ldr	r3, [r1, #4]
 800cb8a:	6043      	str	r3, [r0, #4]
 800cb8c:	bd10      	pop	{r4, pc}

0800cb8e <GUI_MoveRect>:
 800cb8e:	b168      	cbz	r0, 800cbac <GUI_MoveRect+0x1e>
 800cb90:	8803      	ldrh	r3, [r0, #0]
 800cb92:	b289      	uxth	r1, r1
 800cb94:	440b      	add	r3, r1
 800cb96:	8003      	strh	r3, [r0, #0]
 800cb98:	8883      	ldrh	r3, [r0, #4]
 800cb9a:	4419      	add	r1, r3
 800cb9c:	8843      	ldrh	r3, [r0, #2]
 800cb9e:	8081      	strh	r1, [r0, #4]
 800cba0:	b292      	uxth	r2, r2
 800cba2:	4413      	add	r3, r2
 800cba4:	8043      	strh	r3, [r0, #2]
 800cba6:	88c3      	ldrh	r3, [r0, #6]
 800cba8:	441a      	add	r2, r3
 800cbaa:	80c2      	strh	r2, [r0, #6]
 800cbac:	4770      	bx	lr
	...

0800cbb0 <GUI_Exec1>:
 800cbb0:	4b0c      	ldr	r3, [pc, #48]	; (800cbe4 <GUI_Exec1+0x34>)
 800cbb2:	b510      	push	{r4, lr}
 800cbb4:	681c      	ldr	r4, [r3, #0]
 800cbb6:	b11c      	cbz	r4, 800cbc0 <GUI_Exec1+0x10>
 800cbb8:	47a0      	blx	r4
 800cbba:	1c04      	adds	r4, r0, #0
 800cbbc:	bf18      	it	ne
 800cbbe:	2401      	movne	r4, #1
 800cbc0:	f7fc f8bc 	bl	8008d3c <WM_Exec>
 800cbc4:	4b08      	ldr	r3, [pc, #32]	; (800cbe8 <GUI_Exec1+0x38>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	bf18      	it	ne
 800cbcc:	2401      	movne	r4, #1
 800cbce:	b11b      	cbz	r3, 800cbd8 <GUI_Exec1+0x28>
 800cbd0:	4798      	blx	r3
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	bf18      	it	ne
 800cbd6:	2401      	movne	r4, #1
 800cbd8:	4b04      	ldr	r3, [pc, #16]	; (800cbec <GUI_Exec1+0x3c>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	b103      	cbz	r3, 800cbe0 <GUI_Exec1+0x30>
 800cbde:	4798      	blx	r3
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	bd10      	pop	{r4, pc}
 800cbe4:	20005664 	.word	0x20005664
 800cbe8:	20005690 	.word	0x20005690
 800cbec:	20005688 	.word	0x20005688

0800cbf0 <GUI_Exec>:
 800cbf0:	b510      	push	{r4, lr}
 800cbf2:	2400      	movs	r4, #0
 800cbf4:	f7ff ffdc 	bl	800cbb0 <GUI_Exec1>
 800cbf8:	b108      	cbz	r0, 800cbfe <GUI_Exec+0xe>
 800cbfa:	2401      	movs	r4, #1
 800cbfc:	e7fa      	b.n	800cbf4 <GUI_Exec+0x4>
 800cbfe:	4620      	mov	r0, r4
 800cc00:	bd10      	pop	{r4, pc}
	...

0800cc04 <GUI_GotoXY>:
 800cc04:	4b02      	ldr	r3, [pc, #8]	; (800cc10 <GUI_GotoXY+0xc>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	8458      	strh	r0, [r3, #34]	; 0x22
 800cc0a:	8499      	strh	r1, [r3, #36]	; 0x24
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	4770      	bx	lr
 800cc10:	20000084 	.word	0x20000084

0800cc14 <GUI_SetPenSize>:
 800cc14:	4b02      	ldr	r3, [pc, #8]	; (800cc20 <GUI_SetPenSize+0xc>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	7e1a      	ldrb	r2, [r3, #24]
 800cc1a:	7618      	strb	r0, [r3, #24]
 800cc1c:	4610      	mov	r0, r2
 800cc1e:	4770      	bx	lr
 800cc20:	20000084 	.word	0x20000084

0800cc24 <GUI_RectsIntersect>:
 800cc24:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800cc28:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	dc14      	bgt.n	800cc5a <GUI_RectsIntersect+0x36>
 800cc30:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800cc34:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	dc0e      	bgt.n	800cc5a <GUI_RectsIntersect+0x36>
 800cc3c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800cc40:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	dc08      	bgt.n	800cc5a <GUI_RectsIntersect+0x36>
 800cc48:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cc4c:	f9b1 2000 	ldrsh.w	r2, [r1]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	bfcc      	ite	gt
 800cc54:	2000      	movgt	r0, #0
 800cc56:	2001      	movle	r0, #1
 800cc58:	4770      	bx	lr
 800cc5a:	2000      	movs	r0, #0
 800cc5c:	4770      	bx	lr
	...

0800cc60 <GUI_SaveContext_W>:
 800cc60:	b508      	push	{r3, lr}
 800cc62:	4b03      	ldr	r3, [pc, #12]	; (800cc70 <GUI_SaveContext_W+0x10>)
 800cc64:	2270      	movs	r2, #112	; 0x70
 800cc66:	6819      	ldr	r1, [r3, #0]
 800cc68:	f004 fc08 	bl	801147c <memcpy>
 800cc6c:	bd08      	pop	{r3, pc}
 800cc6e:	bf00      	nop
 800cc70:	20000084 	.word	0x20000084

0800cc74 <GUI_RestoreContext>:
 800cc74:	b508      	push	{r3, lr}
 800cc76:	4b03      	ldr	r3, [pc, #12]	; (800cc84 <GUI_RestoreContext+0x10>)
 800cc78:	4601      	mov	r1, r0
 800cc7a:	2270      	movs	r2, #112	; 0x70
 800cc7c:	6818      	ldr	r0, [r3, #0]
 800cc7e:	f004 fbfd 	bl	801147c <memcpy>
 800cc82:	bd08      	pop	{r3, pc}
 800cc84:	20000084 	.word	0x20000084

0800cc88 <GUI_SelectLCD>:
 800cc88:	b508      	push	{r3, lr}
 800cc8a:	f003 fb7d 	bl	8010388 <LCD_SelectLCD>
 800cc8e:	f7fe fa47 	bl	800b120 <LCD_UpdateColorIndices>
 800cc92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cc96:	f7fc b88d 	b.w	8008db4 <WM_Activate>

0800cc9a <GUI_SetBkColor>:
 800cc9a:	f7fe bf0f 	b.w	800babc <LCD_SetBkColor>

0800cc9e <GUI_SetColor>:
 800cc9e:	f7fe bf15 	b.w	800bacc <LCD_SetColor>

0800cca2 <GUI_SetDrawMode>:
 800cca2:	f7fe bbb9 	b.w	800b418 <LCD_SetDrawMode>
	...

0800cca8 <GUI_SetFont>:
 800cca8:	4b03      	ldr	r3, [pc, #12]	; (800ccb8 <GUI_SetFont+0x10>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	69d9      	ldr	r1, [r3, #28]
 800ccae:	b100      	cbz	r0, 800ccb2 <GUI_SetFont+0xa>
 800ccb0:	61d8      	str	r0, [r3, #28]
 800ccb2:	4608      	mov	r0, r1
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	20000084 	.word	0x20000084

0800ccbc <GUI_SetLineStyle>:
 800ccbc:	4b02      	ldr	r3, [pc, #8]	; (800ccc8 <GUI_SetLineStyle+0xc>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	7e9a      	ldrb	r2, [r3, #26]
 800ccc2:	7698      	strb	r0, [r3, #26]
 800ccc4:	4610      	mov	r0, r2
 800ccc6:	4770      	bx	lr
 800ccc8:	20000084 	.word	0x20000084

0800cccc <GUI_SetOrg>:
 800cccc:	460a      	mov	r2, r1
 800ccce:	4908      	ldr	r1, [pc, #32]	; (800ccf0 <GUI_SetOrg+0x24>)
 800ccd0:	b510      	push	{r4, lr}
 800ccd2:	8008      	strh	r0, [r1, #0]
 800ccd4:	4907      	ldr	r1, [pc, #28]	; (800ccf4 <GUI_SetOrg+0x28>)
 800ccd6:	800a      	strh	r2, [r1, #0]
 800ccd8:	4907      	ldr	r1, [pc, #28]	; (800ccf8 <GUI_SetOrg+0x2c>)
 800ccda:	6809      	ldr	r1, [r1, #0]
 800ccdc:	4603      	mov	r3, r0
 800ccde:	7c48      	ldrb	r0, [r1, #17]
 800cce0:	4906      	ldr	r1, [pc, #24]	; (800ccfc <GUI_SetOrg+0x30>)
 800cce2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800cce6:	68c1      	ldr	r1, [r0, #12]
 800cce8:	6a0c      	ldr	r4, [r1, #32]
 800ccea:	4619      	mov	r1, r3
 800ccec:	47a0      	blx	r4
 800ccee:	bd10      	pop	{r4, pc}
 800ccf0:	20005668 	.word	0x20005668
 800ccf4:	20005658 	.word	0x20005658
 800ccf8:	20000084 	.word	0x20000084
 800ccfc:	20005694 	.word	0x20005694

0800cd00 <GUI_SetTextAlign>:
 800cd00:	4b03      	ldr	r3, [pc, #12]	; (800cd10 <GUI_SetTextAlign+0x10>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800cd08:	8598      	strh	r0, [r3, #44]	; 0x2c
 800cd0a:	4610      	mov	r0, r2
 800cd0c:	4770      	bx	lr
 800cd0e:	bf00      	nop
 800cd10:	20000084 	.word	0x20000084

0800cd14 <GUI_SetTextMode>:
 800cd14:	4b03      	ldr	r3, [pc, #12]	; (800cd24 <GUI_SetTextMode+0x10>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800cd1c:	8558      	strh	r0, [r3, #42]	; 0x2a
 800cd1e:	4610      	mov	r0, r2
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	20000084 	.word	0x20000084

0800cd28 <GL_SetDefault>:
 800cd28:	b508      	push	{r3, lr}
 800cd2a:	4b0e      	ldr	r3, [pc, #56]	; (800cd64 <GL_SetDefault+0x3c>)
 800cd2c:	6818      	ldr	r0, [r3, #0]
 800cd2e:	f7fe fec5 	bl	800babc <LCD_SetBkColor>
 800cd32:	4b0d      	ldr	r3, [pc, #52]	; (800cd68 <GL_SetDefault+0x40>)
 800cd34:	6818      	ldr	r0, [r3, #0]
 800cd36:	f7fe fec9 	bl	800bacc <LCD_SetColor>
 800cd3a:	2001      	movs	r0, #1
 800cd3c:	f7ff ff6a 	bl	800cc14 <GUI_SetPenSize>
 800cd40:	2000      	movs	r0, #0
 800cd42:	f7ff ffdd 	bl	800cd00 <GUI_SetTextAlign>
 800cd46:	2000      	movs	r0, #0
 800cd48:	f7ff ffe4 	bl	800cd14 <GUI_SetTextMode>
 800cd4c:	2000      	movs	r0, #0
 800cd4e:	f7ff ffa8 	bl	800cca2 <GUI_SetDrawMode>
 800cd52:	4b06      	ldr	r3, [pc, #24]	; (800cd6c <GL_SetDefault+0x44>)
 800cd54:	6818      	ldr	r0, [r3, #0]
 800cd56:	f7ff ffa7 	bl	800cca8 <GUI_SetFont>
 800cd5a:	2000      	movs	r0, #0
 800cd5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cd60:	f7ff bfac 	b.w	800ccbc <GUI_SetLineStyle>
 800cd64:	200054e0 	.word	0x200054e0
 800cd68:	2000008c 	.word	0x2000008c
 800cd6c:	20000088 	.word	0x20000088

0800cd70 <GUIPROP__FindChar>:
 800cd70:	b138      	cbz	r0, 800cd82 <GUIPROP__FindChar+0x12>
 800cd72:	8803      	ldrh	r3, [r0, #0]
 800cd74:	428b      	cmp	r3, r1
 800cd76:	d802      	bhi.n	800cd7e <GUIPROP__FindChar+0xe>
 800cd78:	8843      	ldrh	r3, [r0, #2]
 800cd7a:	428b      	cmp	r3, r1
 800cd7c:	d201      	bcs.n	800cd82 <GUIPROP__FindChar+0x12>
 800cd7e:	6880      	ldr	r0, [r0, #8]
 800cd80:	e7f6      	b.n	800cd70 <GUIPROP__FindChar>
 800cd82:	4770      	bx	lr

0800cd84 <GUIPROP_DispChar>:
 800cd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd88:	4c38      	ldr	r4, [pc, #224]	; (800ce6c <GUIPROP_DispChar+0xe8>)
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 800cd90:	69db      	ldr	r3, [r3, #28]
 800cd92:	4605      	mov	r5, r0
 800cd94:	b089      	sub	sp, #36	; 0x24
 800cd96:	69d8      	ldr	r0, [r3, #28]
 800cd98:	4629      	mov	r1, r5
 800cd9a:	f7ff ffe9 	bl	800cd70 <GUIPROP__FindChar>
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	d061      	beq.n	800ce66 <GUIPROP_DispChar+0xe2>
 800cda2:	f8b0 8000 	ldrh.w	r8, [r0]
 800cda6:	6847      	ldr	r7, [r0, #4]
 800cda8:	ebc8 0805 	rsb	r8, r8, r5
 800cdac:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 800cdb0:	4648      	mov	r0, r9
 800cdb2:	f896 b002 	ldrb.w	fp, [r6, #2]
 800cdb6:	f7fe fb2f 	bl	800b418 <LCD_SetDrawMode>
 800cdba:	6825      	ldr	r5, [r4, #0]
 800cdbc:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 800cdc0:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 800cdc4:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 800cdc8:	f89e c01a 	ldrb.w	ip, [lr, #26]
 800cdcc:	f89e 3018 	ldrb.w	r3, [lr, #24]
 800cdd0:	9306      	str	r3, [sp, #24]
 800cdd2:	4682      	mov	sl, r0
 800cdd4:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 800cdd8:	f8cd c000 	str.w	ip, [sp]
 800cddc:	f89e e01b 	ldrb.w	lr, [lr, #27]
 800cde0:	f8cd e004 	str.w	lr, [sp, #4]
 800cde4:	f04f 0e01 	mov.w	lr, #1
 800cde8:	f8cd b00c 	str.w	fp, [sp, #12]
 800cdec:	f8cd e008 	str.w	lr, [sp, #8]
 800cdf0:	6873      	ldr	r3, [r6, #4]
 800cdf2:	9304      	str	r3, [sp, #16]
 800cdf4:	6bad      	ldr	r5, [r5, #56]	; 0x38
 800cdf6:	9b06      	ldr	r3, [sp, #24]
 800cdf8:	9505      	str	r5, [sp, #20]
 800cdfa:	f7fe fc97 	bl	800b72c <LCD_DrawBitmap>
 800cdfe:	6823      	ldr	r3, [r4, #0]
 800ce00:	69da      	ldr	r2, [r3, #28]
 800ce02:	f892 b019 	ldrb.w	fp, [r2, #25]
 800ce06:	7e11      	ldrb	r1, [r2, #24]
 800ce08:	458b      	cmp	fp, r1
 800ce0a:	d920      	bls.n	800ce4e <GUIPROP_DispChar+0xca>
 800ce0c:	f1b9 0f02 	cmp.w	r9, #2
 800ce10:	7ed5      	ldrb	r5, [r2, #27]
 800ce12:	d01c      	beq.n	800ce4e <GUIPROP_DispChar+0xca>
 800ce14:	9107      	str	r1, [sp, #28]
 800ce16:	f7ff fe76 	bl	800cb06 <GUI_GetColor>
 800ce1a:	4681      	mov	r9, r0
 800ce1c:	f7ff fe6c 	bl	800caf8 <GUI_GetBkColor>
 800ce20:	f7ff ff3d 	bl	800cc9e <GUI_SetColor>
 800ce24:	6824      	ldr	r4, [r4, #0]
 800ce26:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 800ce2a:	69e2      	ldr	r2, [r4, #28]
 800ce2c:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800ce30:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800ce34:	7ed2      	ldrb	r2, [r2, #27]
 800ce36:	9907      	ldr	r1, [sp, #28]
 800ce38:	fb07 0202 	mla	r2, r7, r2, r0
 800ce3c:	fb01 3105 	mla	r1, r1, r5, r3
 800ce40:	fb0b 3305 	mla	r3, fp, r5, r3
 800ce44:	f7fe fb6a 	bl	800b51c <LCD_FillRect>
 800ce48:	4648      	mov	r0, r9
 800ce4a:	f7ff ff28 	bl	800cc9e <GUI_SetColor>
 800ce4e:	4650      	mov	r0, sl
 800ce50:	f7fe fae2 	bl	800b418 <LCD_SetDrawMode>
 800ce54:	4b05      	ldr	r3, [pc, #20]	; (800ce6c <GUIPROP_DispChar+0xe8>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	69da      	ldr	r2, [r3, #28]
 800ce5a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800ce5c:	7e90      	ldrb	r0, [r2, #26]
 800ce5e:	7872      	ldrb	r2, [r6, #1]
 800ce60:	fb00 1202 	mla	r2, r0, r2, r1
 800ce64:	845a      	strh	r2, [r3, #34]	; 0x22
 800ce66:	b009      	add	sp, #36	; 0x24
 800ce68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce6c:	20000084 	.word	0x20000084

0800ce70 <GUIPROP_GetCharDistX>:
 800ce70:	4b0d      	ldr	r3, [pc, #52]	; (800cea8 <GUIPROP_GetCharDistX+0x38>)
 800ce72:	b570      	push	{r4, r5, r6, lr}
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	69dd      	ldr	r5, [r3, #28]
 800ce78:	4606      	mov	r6, r0
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	69e8      	ldr	r0, [r5, #28]
 800ce7e:	4631      	mov	r1, r6
 800ce80:	f7ff ff76 	bl	800cd70 <GUIPROP__FindChar>
 800ce84:	b170      	cbz	r0, 800cea4 <GUIPROP_GetCharDistX+0x34>
 800ce86:	8803      	ldrh	r3, [r0, #0]
 800ce88:	6842      	ldr	r2, [r0, #4]
 800ce8a:	1af6      	subs	r6, r6, r3
 800ce8c:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 800ce90:	7858      	ldrb	r0, [r3, #1]
 800ce92:	7eab      	ldrb	r3, [r5, #26]
 800ce94:	fb10 f003 	smulbb	r0, r0, r3
 800ce98:	b124      	cbz	r4, 800cea4 <GUIPROP_GetCharDistX+0x34>
 800ce9a:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 800ce9e:	fb12 f303 	smulbb	r3, r2, r3
 800cea2:	6023      	str	r3, [r4, #0]
 800cea4:	bd70      	pop	{r4, r5, r6, pc}
 800cea6:	bf00      	nop
 800cea8:	20000084 	.word	0x20000084

0800ceac <GUIPROP_GetFontInfo>:
 800ceac:	2301      	movs	r3, #1
 800ceae:	800b      	strh	r3, [r1, #0]
 800ceb0:	4770      	bx	lr

0800ceb2 <GUIPROP_IsInFont>:
 800ceb2:	b508      	push	{r3, lr}
 800ceb4:	69c0      	ldr	r0, [r0, #28]
 800ceb6:	f7ff ff5b 	bl	800cd70 <GUIPROP__FindChar>
 800ceba:	3000      	adds	r0, #0
 800cebc:	bf18      	it	ne
 800cebe:	2001      	movne	r0, #1
 800cec0:	bd08      	pop	{r3, pc}
	...

0800cec4 <GUIMONO_DispChar>:
 800cec4:	4b52      	ldr	r3, [pc, #328]	; (800d010 <GUIMONO_DispChar+0x14c>)
 800cec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	69d9      	ldr	r1, [r3, #28]
 800cece:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 800ced0:	69cc      	ldr	r4, [r1, #28]
 800ced2:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 800ced4:	89a2      	ldrh	r2, [r4, #12]
 800ced6:	4290      	cmp	r0, r2
 800ced8:	b08b      	sub	sp, #44	; 0x2c
 800ceda:	d308      	bcc.n	800ceee <GUIMONO_DispChar+0x2a>
 800cedc:	89e6      	ldrh	r6, [r4, #14]
 800cede:	4286      	cmp	r6, r0
 800cee0:	d305      	bcc.n	800ceee <GUIMONO_DispChar+0x2a>
 800cee2:	f8d4 9000 	ldr.w	r9, [r4]
 800cee6:	1a82      	subs	r2, r0, r2
 800cee8:	f04f 3bff 	mov.w	fp, #4294967295
 800ceec:	e015      	b.n	800cf1a <GUIMONO_DispChar+0x56>
 800ceee:	68a2      	ldr	r2, [r4, #8]
 800cef0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cef4:	2a00      	cmp	r2, #0
 800cef6:	f000 8081 	beq.w	800cffc <GUIMONO_DispChar+0x138>
 800cefa:	8816      	ldrh	r6, [r2, #0]
 800cefc:	42b0      	cmp	r0, r6
 800cefe:	d37d      	bcc.n	800cffc <GUIMONO_DispChar+0x138>
 800cf00:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800cf04:	4584      	cmp	ip, r0
 800cf06:	d379      	bcc.n	800cffc <GUIMONO_DispChar+0x138>
 800cf08:	6852      	ldr	r2, [r2, #4]
 800cf0a:	1b80      	subs	r0, r0, r6
 800cf0c:	b280      	uxth	r0, r0
 800cf0e:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800cf12:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 800cf16:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 800cf1a:	1c50      	adds	r0, r2, #1
 800cf1c:	d06e      	beq.n	800cffc <GUIMONO_DispChar+0x138>
 800cf1e:	f891 8018 	ldrb.w	r8, [r1, #24]
 800cf22:	7ca1      	ldrb	r1, [r4, #18]
 800cf24:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 800cf28:	7c26      	ldrb	r6, [r4, #16]
 800cf2a:	9206      	str	r2, [sp, #24]
 800cf2c:	fb18 f101 	smulbb	r1, r8, r1
 800cf30:	9107      	str	r1, [sp, #28]
 800cf32:	fa0f f18a 	sxth.w	r1, sl
 800cf36:	4608      	mov	r0, r1
 800cf38:	9108      	str	r1, [sp, #32]
 800cf3a:	f7fe fa6d 	bl	800b418 <LCD_SetDrawMode>
 800cf3e:	4934      	ldr	r1, [pc, #208]	; (800d010 <GUIMONO_DispChar+0x14c>)
 800cf40:	9009      	str	r0, [sp, #36]	; 0x24
 800cf42:	680b      	ldr	r3, [r1, #0]
 800cf44:	9a06      	ldr	r2, [sp, #24]
 800cf46:	69d9      	ldr	r1, [r3, #28]
 800cf48:	7e88      	ldrb	r0, [r1, #26]
 800cf4a:	9000      	str	r0, [sp, #0]
 800cf4c:	7ec9      	ldrb	r1, [r1, #27]
 800cf4e:	9101      	str	r1, [sp, #4]
 800cf50:	2101      	movs	r1, #1
 800cf52:	9102      	str	r1, [sp, #8]
 800cf54:	7ca1      	ldrb	r1, [r4, #18]
 800cf56:	9103      	str	r1, [sp, #12]
 800cf58:	9907      	ldr	r1, [sp, #28]
 800cf5a:	fb01 9202 	mla	r2, r1, r2, r9
 800cf5e:	9204      	str	r2, [sp, #16]
 800cf60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf62:	9305      	str	r3, [sp, #20]
 800cf64:	b23f      	sxth	r7, r7
 800cf66:	b22d      	sxth	r5, r5
 800cf68:	4638      	mov	r0, r7
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	4632      	mov	r2, r6
 800cf6e:	4643      	mov	r3, r8
 800cf70:	f7fe fbdc 	bl	800b72c <LCD_DrawBitmap>
 800cf74:	f1bb 3fff 	cmp.w	fp, #4294967295
 800cf78:	d01b      	beq.n	800cfb2 <GUIMONO_DispChar+0xee>
 800cf7a:	f04a 0002 	orr.w	r0, sl, #2
 800cf7e:	b200      	sxth	r0, r0
 800cf80:	f7fe fa4a 	bl	800b418 <LCD_SetDrawMode>
 800cf84:	4a22      	ldr	r2, [pc, #136]	; (800d010 <GUIMONO_DispChar+0x14c>)
 800cf86:	6813      	ldr	r3, [r2, #0]
 800cf88:	69da      	ldr	r2, [r3, #28]
 800cf8a:	7e91      	ldrb	r1, [r2, #26]
 800cf8c:	9100      	str	r1, [sp, #0]
 800cf8e:	7ed2      	ldrb	r2, [r2, #27]
 800cf90:	9201      	str	r2, [sp, #4]
 800cf92:	2101      	movs	r1, #1
 800cf94:	9102      	str	r1, [sp, #8]
 800cf96:	9907      	ldr	r1, [sp, #28]
 800cf98:	7ca2      	ldrb	r2, [r4, #18]
 800cf9a:	9203      	str	r2, [sp, #12]
 800cf9c:	fb01 920b 	mla	r2, r1, fp, r9
 800cfa0:	9204      	str	r2, [sp, #16]
 800cfa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa4:	9305      	str	r3, [sp, #20]
 800cfa6:	4638      	mov	r0, r7
 800cfa8:	4629      	mov	r1, r5
 800cfaa:	4632      	mov	r2, r6
 800cfac:	4643      	mov	r3, r8
 800cfae:	f7fe fbbd 	bl	800b72c <LCD_DrawBitmap>
 800cfb2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800d010 <GUIMONO_DispChar+0x14c>
 800cfb6:	f8d8 3000 	ldr.w	r3, [r8]
 800cfba:	69db      	ldr	r3, [r3, #28]
 800cfbc:	7e5a      	ldrb	r2, [r3, #25]
 800cfbe:	7e1b      	ldrb	r3, [r3, #24]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d917      	bls.n	800cff4 <GUIMONO_DispChar+0x130>
 800cfc4:	9a08      	ldr	r2, [sp, #32]
 800cfc6:	2a02      	cmp	r2, #2
 800cfc8:	d014      	beq.n	800cff4 <GUIMONO_DispChar+0x130>
 800cfca:	f08a 0004 	eor.w	r0, sl, #4
 800cfce:	b200      	sxth	r0, r0
 800cfd0:	f7fe fa22 	bl	800b418 <LCD_SetDrawMode>
 800cfd4:	f8d8 3000 	ldr.w	r3, [r8]
 800cfd8:	69db      	ldr	r3, [r3, #28]
 800cfda:	f893 e018 	ldrb.w	lr, [r3, #24]
 800cfde:	7ed9      	ldrb	r1, [r3, #27]
 800cfe0:	7e9a      	ldrb	r2, [r3, #26]
 800cfe2:	7e5b      	ldrb	r3, [r3, #25]
 800cfe4:	4638      	mov	r0, r7
 800cfe6:	fb0e 5101 	mla	r1, lr, r1, r5
 800cfea:	fb06 7202 	mla	r2, r6, r2, r7
 800cfee:	442b      	add	r3, r5
 800cff0:	f7fe fa94 	bl	800b51c <LCD_FillRect>
 800cff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cff6:	b2d8      	uxtb	r0, r3
 800cff8:	f7fe fa0e 	bl	800b418 <LCD_SetDrawMode>
 800cffc:	4b04      	ldr	r3, [pc, #16]	; (800d010 <GUIMONO_DispChar+0x14c>)
 800cffe:	7c61      	ldrb	r1, [r4, #17]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800d004:	440a      	add	r2, r1
 800d006:	845a      	strh	r2, [r3, #34]	; 0x22
 800d008:	b00b      	add	sp, #44	; 0x2c
 800d00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00e:	bf00      	nop
 800d010:	20000084 	.word	0x20000084

0800d014 <GUIMONO_GetCharDistX>:
 800d014:	4b04      	ldr	r3, [pc, #16]	; (800d028 <GUIMONO_GetCharDistX+0x14>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	69db      	ldr	r3, [r3, #28]
 800d01a:	69db      	ldr	r3, [r3, #28]
 800d01c:	b109      	cbz	r1, 800d022 <GUIMONO_GetCharDistX+0xe>
 800d01e:	7c1a      	ldrb	r2, [r3, #16]
 800d020:	600a      	str	r2, [r1, #0]
 800d022:	7c58      	ldrb	r0, [r3, #17]
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	20000084 	.word	0x20000084

0800d02c <GUIMONO_GetFontInfo>:
 800d02c:	2302      	movs	r3, #2
 800d02e:	800b      	strh	r3, [r1, #0]
 800d030:	4770      	bx	lr

0800d032 <GUIMONO_IsInFont>:
 800d032:	69c3      	ldr	r3, [r0, #28]
 800d034:	899a      	ldrh	r2, [r3, #12]
 800d036:	428a      	cmp	r2, r1
 800d038:	d802      	bhi.n	800d040 <GUIMONO_IsInFont+0xe>
 800d03a:	89da      	ldrh	r2, [r3, #14]
 800d03c:	428a      	cmp	r2, r1
 800d03e:	d20f      	bcs.n	800d060 <GUIMONO_IsInFont+0x2e>
 800d040:	6898      	ldr	r0, [r3, #8]
 800d042:	b180      	cbz	r0, 800d066 <GUIMONO_IsInFont+0x34>
 800d044:	8803      	ldrh	r3, [r0, #0]
 800d046:	4299      	cmp	r1, r3
 800d048:	d30c      	bcc.n	800d064 <GUIMONO_IsInFont+0x32>
 800d04a:	8842      	ldrh	r2, [r0, #2]
 800d04c:	428a      	cmp	r2, r1
 800d04e:	d309      	bcc.n	800d064 <GUIMONO_IsInFont+0x32>
 800d050:	1ac9      	subs	r1, r1, r3
 800d052:	6842      	ldr	r2, [r0, #4]
 800d054:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 800d058:	43c0      	mvns	r0, r0
 800d05a:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800d05e:	4770      	bx	lr
 800d060:	2001      	movs	r0, #1
 800d062:	4770      	bx	lr
 800d064:	2000      	movs	r0, #0
 800d066:	4770      	bx	lr

0800d068 <_Log2VisBuffered>:
 800d068:	4770      	bx	lr
	...

0800d06c <_DispLine>:
 800d06c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d06e:	4615      	mov	r5, r2
 800d070:	ab02      	add	r3, sp, #8
 800d072:	4a21      	ldr	r2, [pc, #132]	; (800d0f8 <_DispLine+0x8c>)
 800d074:	f843 1d08 	str.w	r1, [r3, #-8]!
 800d078:	9001      	str	r0, [sp, #4]
 800d07a:	6812      	ldr	r2, [r2, #0]
 800d07c:	4c1f      	ldr	r4, [pc, #124]	; (800d0fc <_DispLine+0x90>)
 800d07e:	4669      	mov	r1, sp
 800d080:	4790      	blx	r2
 800d082:	6823      	ldr	r3, [r4, #0]
 800d084:	9001      	str	r0, [sp, #4]
 800d086:	6958      	ldr	r0, [r3, #20]
 800d088:	b938      	cbnz	r0, 800d09a <_DispLine+0x2e>
 800d08a:	2001      	movs	r0, #1
 800d08c:	f7fe fed6 	bl	800be3c <GUI__ManageCache>
 800d090:	6822      	ldr	r2, [r4, #0]
 800d092:	69d3      	ldr	r3, [r2, #28]
 800d094:	695b      	ldr	r3, [r3, #20]
 800d096:	b933      	cbnz	r3, 800d0a6 <_DispLine+0x3a>
 800d098:	e023      	b.n	800d0e2 <_DispLine+0x76>
 800d09a:	4629      	mov	r1, r5
 800d09c:	f7ff fdc2 	bl	800cc24 <GUI_RectsIntersect>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	d1f2      	bne.n	800d08a <_DispLine+0x1e>
 800d0a4:	e025      	b.n	800d0f2 <_DispLine+0x86>
 800d0a6:	4c16      	ldr	r4, [pc, #88]	; (800d100 <_DispLine+0x94>)
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	6821      	ldr	r1, [r4, #0]
 800d0ac:	b141      	cbz	r1, 800d0c0 <_DispLine+0x54>
 800d0ae:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 800d0b2:	9801      	ldr	r0, [sp, #4]
 800d0b4:	9900      	ldr	r1, [sp, #0]
 800d0b6:	4798      	blx	r3
 800d0b8:	6823      	ldr	r3, [r4, #0]
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	4798      	blx	r3
 800d0be:	e015      	b.n	800d0ec <_DispLine+0x80>
 800d0c0:	9801      	ldr	r0, [sp, #4]
 800d0c2:	9900      	ldr	r1, [sp, #0]
 800d0c4:	4798      	blx	r3
 800d0c6:	e011      	b.n	800d0ec <_DispLine+0x80>
 800d0c8:	a801      	add	r0, sp, #4
 800d0ca:	f7ff f871 	bl	800c1b0 <GUI_UC__GetCharCodeInc>
 800d0ce:	6823      	ldr	r3, [r4, #0]
 800d0d0:	69db      	ldr	r3, [r3, #28]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	4798      	blx	r3
 800d0d8:	4b0a      	ldr	r3, [pc, #40]	; (800d104 <_DispLine+0x98>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	b10b      	cbz	r3, 800d0e2 <_DispLine+0x76>
 800d0de:	4628      	mov	r0, r5
 800d0e0:	4798      	blx	r3
 800d0e2:	9b00      	ldr	r3, [sp, #0]
 800d0e4:	3b01      	subs	r3, #1
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	daed      	bge.n	800d0c8 <_DispLine+0x5c>
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	f7fe fea5 	bl	800be3c <GUI__ManageCache>
 800d0f2:	b003      	add	sp, #12
 800d0f4:	bd30      	pop	{r4, r5, pc}
 800d0f6:	bf00      	nop
 800d0f8:	20000090 	.word	0x20000090
 800d0fc:	20000084 	.word	0x20000084
 800d100:	20005660 	.word	0x20005660
 800d104:	20005670 	.word	0x20005670

0800d108 <GUI__GetLineNumChars>:
 800d108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d10a:	460d      	mov	r5, r1
 800d10c:	9001      	str	r0, [sp, #4]
 800d10e:	4604      	mov	r4, r0
 800d110:	b198      	cbz	r0, 800d13a <GUI__GetLineNumChars+0x32>
 800d112:	4b0b      	ldr	r3, [pc, #44]	; (800d140 <GUI__GetLineNumChars+0x38>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	69db      	ldr	r3, [r3, #28]
 800d118:	695b      	ldr	r3, [r3, #20]
 800d11a:	b10b      	cbz	r3, 800d120 <GUI__GetLineNumChars+0x18>
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	b90b      	cbnz	r3, 800d124 <GUI__GetLineNumChars+0x1c>
 800d120:	2400      	movs	r4, #0
 800d122:	e008      	b.n	800d136 <GUI__GetLineNumChars+0x2e>
 800d124:	4798      	blx	r3
 800d126:	e009      	b.n	800d13c <GUI__GetLineNumChars+0x34>
 800d128:	a801      	add	r0, sp, #4
 800d12a:	f7ff f841 	bl	800c1b0 <GUI_UC__GetCharCodeInc>
 800d12e:	b120      	cbz	r0, 800d13a <GUI__GetLineNumChars+0x32>
 800d130:	280a      	cmp	r0, #10
 800d132:	d002      	beq.n	800d13a <GUI__GetLineNumChars+0x32>
 800d134:	3401      	adds	r4, #1
 800d136:	42ac      	cmp	r4, r5
 800d138:	dbf6      	blt.n	800d128 <GUI__GetLineNumChars+0x20>
 800d13a:	4620      	mov	r0, r4
 800d13c:	b003      	add	sp, #12
 800d13e:	bd30      	pop	{r4, r5, pc}
 800d140:	20000084 	.word	0x20000084

0800d144 <GUI__GetOverlap>:
 800d144:	b513      	push	{r0, r1, r4, lr}
 800d146:	a902      	add	r1, sp, #8
 800d148:	2400      	movs	r4, #0
 800d14a:	f841 4d04 	str.w	r4, [r1, #-4]!
 800d14e:	f000 f89f 	bl	800d290 <GUI_GetCharDistXEx>
 800d152:	9b01      	ldr	r3, [sp, #4]
 800d154:	4283      	cmp	r3, r0
 800d156:	bfcc      	ite	gt
 800d158:	ebc0 0003 	rsbgt	r0, r0, r3
 800d15c:	4620      	movle	r0, r4
 800d15e:	b002      	add	sp, #8
 800d160:	bd10      	pop	{r4, pc}
	...

0800d164 <GUI__GetLineDistX>:
 800d164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d166:	4a15      	ldr	r2, [pc, #84]	; (800d1bc <GUI__GetLineDistX+0x58>)
 800d168:	9001      	str	r0, [sp, #4]
 800d16a:	ab02      	add	r3, sp, #8
 800d16c:	6812      	ldr	r2, [r2, #0]
 800d16e:	f843 1d08 	str.w	r1, [r3, #-8]!
 800d172:	4669      	mov	r1, sp
 800d174:	4790      	blx	r2
 800d176:	9001      	str	r0, [sp, #4]
 800d178:	b1f0      	cbz	r0, 800d1b8 <GUI__GetLineDistX+0x54>
 800d17a:	4b11      	ldr	r3, [pc, #68]	; (800d1c0 <GUI__GetLineDistX+0x5c>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	69db      	ldr	r3, [r3, #28]
 800d180:	695b      	ldr	r3, [r3, #20]
 800d182:	b10b      	cbz	r3, 800d188 <GUI__GetLineDistX+0x24>
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	b913      	cbnz	r3, 800d18e <GUI__GetLineDistX+0x2a>
 800d188:	2500      	movs	r5, #0
 800d18a:	462c      	mov	r4, r5
 800d18c:	e002      	b.n	800d194 <GUI__GetLineDistX+0x30>
 800d18e:	9900      	ldr	r1, [sp, #0]
 800d190:	4798      	blx	r3
 800d192:	e011      	b.n	800d1b8 <GUI__GetLineDistX+0x54>
 800d194:	9b00      	ldr	r3, [sp, #0]
 800d196:	3b01      	subs	r3, #1
 800d198:	2b00      	cmp	r3, #0
 800d19a:	9300      	str	r3, [sp, #0]
 800d19c:	db07      	blt.n	800d1ae <GUI__GetLineDistX+0x4a>
 800d19e:	a801      	add	r0, sp, #4
 800d1a0:	f7ff f806 	bl	800c1b0 <GUI_UC__GetCharCodeInc>
 800d1a4:	4605      	mov	r5, r0
 800d1a6:	f000 f869 	bl	800d27c <GUI_GetCharDistX>
 800d1aa:	4404      	add	r4, r0
 800d1ac:	e7f2      	b.n	800d194 <GUI__GetLineDistX+0x30>
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	f7ff ffc8 	bl	800d144 <GUI__GetOverlap>
 800d1b4:	4420      	add	r0, r4
 800d1b6:	e7ff      	b.n	800d1b8 <GUI__GetLineDistX+0x54>
 800d1b8:	b003      	add	sp, #12
 800d1ba:	bd30      	pop	{r4, r5, pc}
 800d1bc:	20000090 	.word	0x20000090
 800d1c0:	20000084 	.word	0x20000084

0800d1c4 <GUI__DispLine>:
 800d1c4:	4b27      	ldr	r3, [pc, #156]	; (800d264 <GUI__DispLine+0xa0>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1ca:	4605      	mov	r5, r0
 800d1cc:	460c      	mov	r4, r1
 800d1ce:	b163      	cbz	r3, 800d1ea <GUI__DispLine+0x26>
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	f7fb fc4d 	bl	8008a70 <WM__InitIVRSearch>
 800d1d6:	2800      	cmp	r0, #0
 800d1d8:	d041      	beq.n	800d25e <GUI__DispLine+0x9a>
 800d1da:	4628      	mov	r0, r5
 800d1dc:	4621      	mov	r1, r4
 800d1de:	466a      	mov	r2, sp
 800d1e0:	f7ff ff44 	bl	800d06c <_DispLine>
 800d1e4:	f7fb fb82 	bl	80088ec <WM__GetNextIVR>
 800d1e8:	e7f5      	b.n	800d1d6 <GUI__DispLine+0x12>
 800d1ea:	6810      	ldr	r0, [r2, #0]
 800d1ec:	6851      	ldr	r1, [r2, #4]
 800d1ee:	4e1e      	ldr	r6, [pc, #120]	; (800d268 <GUI__DispLine+0xa4>)
 800d1f0:	466b      	mov	r3, sp
 800d1f2:	c303      	stmia	r3!, {r0, r1}
 800d1f4:	6833      	ldr	r3, [r6, #0]
 800d1f6:	f8bd 1000 	ldrh.w	r1, [sp]
 800d1fa:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800d1fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d202:	4411      	add	r1, r2
 800d204:	f8ad 1000 	strh.w	r1, [sp]
 800d208:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800d20c:	4419      	add	r1, r3
 800d20e:	f8ad 1002 	strh.w	r1, [sp, #2]
 800d212:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800d216:	440a      	add	r2, r1
 800d218:	f8ad 2004 	strh.w	r2, [sp, #4]
 800d21c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d220:	4668      	mov	r0, sp
 800d222:	4413      	add	r3, r2
 800d224:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d228:	f7fb fc22 	bl	8008a70 <WM__InitIVRSearch>
 800d22c:	6833      	ldr	r3, [r6, #0]
 800d22e:	b940      	cbnz	r0, 800d242 <GUI__DispLine+0x7e>
 800d230:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800d232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d234:	1a8a      	subs	r2, r1, r2
 800d236:	845a      	strh	r2, [r3, #34]	; 0x22
 800d238:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800d23a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d23c:	1a8a      	subs	r2, r1, r2
 800d23e:	849a      	strh	r2, [r3, #36]	; 0x24
 800d240:	e00d      	b.n	800d25e <GUI__DispLine+0x9a>
 800d242:	f8bd 2000 	ldrh.w	r2, [sp]
 800d246:	845a      	strh	r2, [r3, #34]	; 0x22
 800d248:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d24c:	849a      	strh	r2, [r3, #36]	; 0x24
 800d24e:	4628      	mov	r0, r5
 800d250:	4621      	mov	r1, r4
 800d252:	466a      	mov	r2, sp
 800d254:	f7ff ff0a 	bl	800d06c <_DispLine>
 800d258:	f7fb fb48 	bl	80088ec <WM__GetNextIVR>
 800d25c:	e7e6      	b.n	800d22c <GUI__DispLine+0x68>
 800d25e:	b002      	add	sp, #8
 800d260:	bd70      	pop	{r4, r5, r6, pc}
 800d262:	bf00      	nop
 800d264:	2000564c 	.word	0x2000564c
 800d268:	20000084 	.word	0x20000084

0800d26c <GUI_GetFontDistY>:
 800d26c:	4b02      	ldr	r3, [pc, #8]	; (800d278 <GUI_GetFontDistY+0xc>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	69db      	ldr	r3, [r3, #28]
 800d272:	7e58      	ldrb	r0, [r3, #25]
 800d274:	4770      	bx	lr
 800d276:	bf00      	nop
 800d278:	20000084 	.word	0x20000084

0800d27c <GUI_GetCharDistX>:
 800d27c:	b508      	push	{r3, lr}
 800d27e:	4b03      	ldr	r3, [pc, #12]	; (800d28c <GUI_GetCharDistX+0x10>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	69db      	ldr	r3, [r3, #28]
 800d284:	2100      	movs	r1, #0
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	4798      	blx	r3
 800d28a:	bd08      	pop	{r3, pc}
 800d28c:	20000084 	.word	0x20000084

0800d290 <GUI_GetCharDistXEx>:
 800d290:	b508      	push	{r3, lr}
 800d292:	4b03      	ldr	r3, [pc, #12]	; (800d2a0 <GUI_GetCharDistXEx+0x10>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	69db      	ldr	r3, [r3, #28]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	4798      	blx	r3
 800d29c:	bd08      	pop	{r3, pc}
 800d29e:	bf00      	nop
 800d2a0:	20000084 	.word	0x20000084

0800d2a4 <_GetClipParam>:
 800d2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2a6:	4f33      	ldr	r7, [pc, #204]	; (800d374 <_GetClipParam+0xd0>)
 800d2a8:	9c07      	ldr	r4, [sp, #28]
 800d2aa:	683f      	ldr	r7, [r7, #0]
 800d2ac:	9e05      	ldr	r6, [sp, #20]
 800d2ae:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 800d2b2:	9d06      	ldr	r5, [sp, #24]
 800d2b4:	ebc0 0c0c 	rsb	ip, r0, ip
 800d2b8:	f1bc 0f00 	cmp.w	ip, #0
 800d2bc:	bfc8      	it	gt
 800d2be:	f8c4 c00c 	strgt.w	ip, [r4, #12]
 800d2c2:	f9b7 c00a 	ldrsh.w	ip, [r7, #10]
 800d2c6:	ebc1 0c0c 	rsb	ip, r1, ip
 800d2ca:	f1bc 0f00 	cmp.w	ip, #0
 800d2ce:	bfc8      	it	gt
 800d2d0:	f8c4 c010 	strgt.w	ip, [r4, #16]
 800d2d4:	4410      	add	r0, r2
 800d2d6:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 800d2da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d2de:	3801      	subs	r0, #1
 800d2e0:	4419      	add	r1, r3
 800d2e2:	ebcc 0000 	rsb	r0, ip, r0
 800d2e6:	3901      	subs	r1, #1
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	ebc2 0101 	rsb	r1, r2, r1
 800d2ee:	bfc8      	it	gt
 800d2f0:	60a0      	strgt	r0, [r4, #8]
 800d2f2:	2900      	cmp	r1, #0
 800d2f4:	bfc8      	it	gt
 800d2f6:	6161      	strgt	r1, [r4, #20]
 800d2f8:	2e08      	cmp	r6, #8
 800d2fa:	d024      	beq.n	800d346 <_GetClipParam+0xa2>
 800d2fc:	dc04      	bgt.n	800d308 <_GetClipParam+0x64>
 800d2fe:	2e01      	cmp	r6, #1
 800d300:	d00f      	beq.n	800d322 <_GetClipParam+0x7e>
 800d302:	2e04      	cmp	r6, #4
 800d304:	d016      	beq.n	800d334 <_GetClipParam+0x90>
 800d306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d308:	2e18      	cmp	r6, #24
 800d30a:	d021      	beq.n	800d350 <_GetClipParam+0xac>
 800d30c:	2e20      	cmp	r6, #32
 800d30e:	d028      	beq.n	800d362 <_GetClipParam+0xbe>
 800d310:	2e10      	cmp	r6, #16
 800d312:	d12e      	bne.n	800d372 <_GetClipParam+0xce>
 800d314:	68e3      	ldr	r3, [r4, #12]
 800d316:	68a2      	ldr	r2, [r4, #8]
 800d318:	005b      	lsls	r3, r3, #1
 800d31a:	6023      	str	r3, [r4, #0]
 800d31c:	eba5 0542 	sub.w	r5, r5, r2, lsl #1
 800d320:	e025      	b.n	800d36e <_GetClipParam+0xca>
 800d322:	68e3      	ldr	r3, [r4, #12]
 800d324:	10db      	asrs	r3, r3, #3
 800d326:	00da      	lsls	r2, r3, #3
 800d328:	60e2      	str	r2, [r4, #12]
 800d32a:	68a2      	ldr	r2, [r4, #8]
 800d32c:	6023      	str	r3, [r4, #0]
 800d32e:	eba5 05e2 	sub.w	r5, r5, r2, asr #3
 800d332:	e01c      	b.n	800d36e <_GetClipParam+0xca>
 800d334:	68e3      	ldr	r3, [r4, #12]
 800d336:	105b      	asrs	r3, r3, #1
 800d338:	005a      	lsls	r2, r3, #1
 800d33a:	60e2      	str	r2, [r4, #12]
 800d33c:	68a2      	ldr	r2, [r4, #8]
 800d33e:	6023      	str	r3, [r4, #0]
 800d340:	eba5 0562 	sub.w	r5, r5, r2, asr #1
 800d344:	e013      	b.n	800d36e <_GetClipParam+0xca>
 800d346:	68a2      	ldr	r2, [r4, #8]
 800d348:	68e3      	ldr	r3, [r4, #12]
 800d34a:	6023      	str	r3, [r4, #0]
 800d34c:	1aad      	subs	r5, r5, r2
 800d34e:	e00e      	b.n	800d36e <_GetClipParam+0xca>
 800d350:	68e3      	ldr	r3, [r4, #12]
 800d352:	68a2      	ldr	r2, [r4, #8]
 800d354:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d358:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 800d35c:	6023      	str	r3, [r4, #0]
 800d35e:	4415      	add	r5, r2
 800d360:	e005      	b.n	800d36e <_GetClipParam+0xca>
 800d362:	68e3      	ldr	r3, [r4, #12]
 800d364:	68a2      	ldr	r2, [r4, #8]
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	6023      	str	r3, [r4, #0]
 800d36a:	eba5 0582 	sub.w	r5, r5, r2, lsl #2
 800d36e:	1aeb      	subs	r3, r5, r3
 800d370:	6063      	str	r3, [r4, #4]
 800d372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d374:	20000084 	.word	0x20000084

0800d378 <_GetBitfieldsPara>:
 800d378:	2300      	movs	r3, #0
 800d37a:	600b      	str	r3, [r1, #0]
 800d37c:	07c3      	lsls	r3, r0, #31
 800d37e:	d403      	bmi.n	800d388 <_GetBitfieldsPara+0x10>
 800d380:	680b      	ldr	r3, [r1, #0]
 800d382:	0840      	lsrs	r0, r0, #1
 800d384:	3301      	adds	r3, #1
 800d386:	e7f8      	b.n	800d37a <_GetBitfieldsPara+0x2>
 800d388:	2300      	movs	r3, #0
 800d38a:	6013      	str	r3, [r2, #0]
 800d38c:	07c3      	lsls	r3, r0, #31
 800d38e:	d503      	bpl.n	800d398 <_GetBitfieldsPara+0x20>
 800d390:	6813      	ldr	r3, [r2, #0]
 800d392:	0840      	lsrs	r0, r0, #1
 800d394:	3301      	adds	r3, #1
 800d396:	e7f8      	b.n	800d38a <_GetBitfieldsPara+0x12>
 800d398:	4770      	bx	lr

0800d39a <_DrawLine_RGB>:
 800d39a:	6983      	ldr	r3, [r0, #24]
 800d39c:	b513      	push	{r0, r1, r4, lr}
 800d39e:	4604      	mov	r4, r0
 800d3a0:	b1c3      	cbz	r3, 800d3d4 <_DrawLine_RGB+0x3a>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	6063      	str	r3, [r4, #4]
 800d3a6:	6863      	ldr	r3, [r4, #4]
 800d3a8:	68e2      	ldr	r2, [r4, #12]
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	da2b      	bge.n	800d406 <_DrawLine_RGB+0x6c>
 800d3ae:	6921      	ldr	r1, [r4, #16]
 800d3b0:	6822      	ldr	r2, [r4, #0]
 800d3b2:	a802      	add	r0, sp, #8
 800d3b4:	fb01 2303 	mla	r3, r1, r3, r2
 800d3b8:	f840 3d04 	str.w	r3, [r0, #-4]!
 800d3bc:	f7fe fc28 	bl	800bc10 <GUI__Read32>
 800d3c0:	69a3      	ldr	r3, [r4, #24]
 800d3c2:	4798      	blx	r3
 800d3c4:	6963      	ldr	r3, [r4, #20]
 800d3c6:	4798      	blx	r3
 800d3c8:	69e3      	ldr	r3, [r4, #28]
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	4798      	blx	r3
 800d3ce:	6863      	ldr	r3, [r4, #4]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	e7e7      	b.n	800d3a4 <_DrawLine_RGB+0xa>
 800d3d4:	6063      	str	r3, [r4, #4]
 800d3d6:	6863      	ldr	r3, [r4, #4]
 800d3d8:	68e2      	ldr	r2, [r4, #12]
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	da13      	bge.n	800d406 <_DrawLine_RGB+0x6c>
 800d3de:	6922      	ldr	r2, [r4, #16]
 800d3e0:	6821      	ldr	r1, [r4, #0]
 800d3e2:	435a      	muls	r2, r3
 800d3e4:	188b      	adds	r3, r1, r2
 800d3e6:	9301      	str	r3, [sp, #4]
 800d3e8:	7858      	ldrb	r0, [r3, #1]
 800d3ea:	5c8a      	ldrb	r2, [r1, r2]
 800d3ec:	0200      	lsls	r0, r0, #8
 800d3ee:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800d3f2:	789a      	ldrb	r2, [r3, #2]
 800d3f4:	6963      	ldr	r3, [r4, #20]
 800d3f6:	4310      	orrs	r0, r2
 800d3f8:	4798      	blx	r3
 800d3fa:	69e3      	ldr	r3, [r4, #28]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	4798      	blx	r3
 800d400:	6863      	ldr	r3, [r4, #4]
 800d402:	3301      	adds	r3, #1
 800d404:	e7e6      	b.n	800d3d4 <_DrawLine_RGB+0x3a>
 800d406:	68a3      	ldr	r3, [r4, #8]
 800d408:	b113      	cbz	r3, 800d410 <_DrawLine_RGB+0x76>
 800d40a:	69e3      	ldr	r3, [r4, #28]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	4798      	blx	r3
 800d410:	b002      	add	sp, #8
 800d412:	bd10      	pop	{r4, pc}

0800d414 <_NextPixel_FlushBuffer>:
 800d414:	b530      	push	{r4, r5, lr}
 800d416:	4c10      	ldr	r4, [pc, #64]	; (800d458 <_NextPixel_FlushBuffer+0x44>)
 800d418:	6a22      	ldr	r2, [r4, #32]
 800d41a:	b089      	sub	sp, #36	; 0x24
 800d41c:	2101      	movs	r1, #1
 800d41e:	428a      	cmp	r2, r1
 800d420:	f04f 0300 	mov.w	r3, #0
 800d424:	9306      	str	r3, [sp, #24]
 800d426:	9202      	str	r2, [sp, #8]
 800d428:	bf08      	it	eq
 800d42a:	ab06      	addeq	r3, sp, #24
 800d42c:	6962      	ldr	r2, [r4, #20]
 800d42e:	9305      	str	r3, [sp, #20]
 800d430:	2500      	movs	r5, #0
 800d432:	9100      	str	r1, [sp, #0]
 800d434:	9101      	str	r1, [sp, #4]
 800d436:	9503      	str	r5, [sp, #12]
 800d438:	9204      	str	r2, [sp, #16]
 800d43a:	1d20      	adds	r0, r4, #4
 800d43c:	9107      	str	r1, [sp, #28]
 800d43e:	2301      	movs	r3, #1
 800d440:	c807      	ldmia	r0, {r0, r1, r2}
 800d442:	f7fe f973 	bl	800b72c <LCD_DrawBitmap>
 800d446:	6862      	ldr	r2, [r4, #4]
 800d448:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d44a:	62a5      	str	r5, [r4, #40]	; 0x28
 800d44c:	4413      	add	r3, r2
 800d44e:	6063      	str	r3, [r4, #4]
 800d450:	6963      	ldr	r3, [r4, #20]
 800d452:	61a3      	str	r3, [r4, #24]
 800d454:	b009      	add	sp, #36	; 0x24
 800d456:	bd30      	pop	{r4, r5, pc}
 800d458:	20005558 	.word	0x20005558

0800d45c <_NextPixel_NextLine>:
 800d45c:	b510      	push	{r4, lr}
 800d45e:	4c06      	ldr	r4, [pc, #24]	; (800d478 <_NextPixel_NextLine+0x1c>)
 800d460:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d462:	b10b      	cbz	r3, 800d468 <_NextPixel_NextLine+0xc>
 800d464:	f7ff ffd6 	bl	800d414 <_NextPixel_FlushBuffer>
 800d468:	6823      	ldr	r3, [r4, #0]
 800d46a:	6063      	str	r3, [r4, #4]
 800d46c:	68a3      	ldr	r3, [r4, #8]
 800d46e:	3b01      	subs	r3, #1
 800d470:	60a3      	str	r3, [r4, #8]
 800d472:	2300      	movs	r3, #0
 800d474:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d476:	bd10      	pop	{r4, pc}
 800d478:	20005558 	.word	0x20005558

0800d47c <_NextPixel_SetPixel>:
 800d47c:	4b33      	ldr	r3, [pc, #204]	; (800d54c <_NextPixel_SetPixel+0xd0>)
 800d47e:	69da      	ldr	r2, [r3, #28]
 800d480:	2a02      	cmp	r2, #2
 800d482:	b570      	push	{r4, r5, r6, lr}
 800d484:	d04e      	beq.n	800d524 <_NextPixel_SetPixel+0xa8>
 800d486:	2a04      	cmp	r2, #4
 800d488:	d050      	beq.n	800d52c <_NextPixel_SetPixel+0xb0>
 800d48a:	2a01      	cmp	r2, #1
 800d48c:	d152      	bne.n	800d534 <_NextPixel_SetPixel+0xb8>
 800d48e:	6a19      	ldr	r1, [r3, #32]
 800d490:	699a      	ldr	r2, [r3, #24]
 800d492:	3901      	subs	r1, #1
 800d494:	2907      	cmp	r1, #7
 800d496:	d84d      	bhi.n	800d534 <_NextPixel_SetPixel+0xb8>
 800d498:	e8df f001 	tbb	[pc, r1]
 800d49c:	264c1504 	.word	0x264c1504
 800d4a0:	404c4c4c 	.word	0x404c4c4c
 800d4a4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d4a6:	7816      	ldrb	r6, [r2, #0]
 800d4a8:	4928      	ldr	r1, [pc, #160]	; (800d54c <_NextPixel_SetPixel+0xd0>)
 800d4aa:	f1c4 0407 	rsb	r4, r4, #7
 800d4ae:	2501      	movs	r5, #1
 800d4b0:	40a5      	lsls	r5, r4
 800d4b2:	ea26 0505 	bic.w	r5, r6, r5
 800d4b6:	fa00 f404 	lsl.w	r4, r0, r4
 800d4ba:	ea45 0004 	orr.w	r0, r5, r4
 800d4be:	7010      	strb	r0, [r2, #0]
 800d4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4c2:	3201      	adds	r2, #1
 800d4c4:	e020      	b.n	800d508 <_NextPixel_SetPixel+0x8c>
 800d4c6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d4c8:	7816      	ldrb	r6, [r2, #0]
 800d4ca:	4920      	ldr	r1, [pc, #128]	; (800d54c <_NextPixel_SetPixel+0xd0>)
 800d4cc:	f1c4 0406 	rsb	r4, r4, #6
 800d4d0:	2503      	movs	r5, #3
 800d4d2:	40a5      	lsls	r5, r4
 800d4d4:	ea26 0505 	bic.w	r5, r6, r5
 800d4d8:	fa00 f404 	lsl.w	r4, r0, r4
 800d4dc:	ea45 0004 	orr.w	r0, r5, r4
 800d4e0:	7010      	strb	r0, [r2, #0]
 800d4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4e4:	3202      	adds	r2, #2
 800d4e6:	e00f      	b.n	800d508 <_NextPixel_SetPixel+0x8c>
 800d4e8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d4ea:	7816      	ldrb	r6, [r2, #0]
 800d4ec:	4917      	ldr	r1, [pc, #92]	; (800d54c <_NextPixel_SetPixel+0xd0>)
 800d4ee:	f1c4 0404 	rsb	r4, r4, #4
 800d4f2:	250f      	movs	r5, #15
 800d4f4:	40a5      	lsls	r5, r4
 800d4f6:	ea26 0505 	bic.w	r5, r6, r5
 800d4fa:	fa00 f404 	lsl.w	r4, r0, r4
 800d4fe:	ea45 0004 	orr.w	r0, r5, r4
 800d502:	7010      	strb	r0, [r2, #0]
 800d504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d506:	3204      	adds	r2, #4
 800d508:	2a08      	cmp	r2, #8
 800d50a:	d001      	beq.n	800d510 <_NextPixel_SetPixel+0x94>
 800d50c:	62ca      	str	r2, [r1, #44]	; 0x2c
 800d50e:	e011      	b.n	800d534 <_NextPixel_SetPixel+0xb8>
 800d510:	2200      	movs	r2, #0
 800d512:	62ca      	str	r2, [r1, #44]	; 0x2c
 800d514:	698a      	ldr	r2, [r1, #24]
 800d516:	3201      	adds	r2, #1
 800d518:	618a      	str	r2, [r1, #24]
 800d51a:	e00b      	b.n	800d534 <_NextPixel_SetPixel+0xb8>
 800d51c:	7010      	strb	r0, [r2, #0]
 800d51e:	699a      	ldr	r2, [r3, #24]
 800d520:	3201      	adds	r2, #1
 800d522:	e006      	b.n	800d532 <_NextPixel_SetPixel+0xb6>
 800d524:	699a      	ldr	r2, [r3, #24]
 800d526:	f822 0b02 	strh.w	r0, [r2], #2
 800d52a:	e002      	b.n	800d532 <_NextPixel_SetPixel+0xb6>
 800d52c:	699a      	ldr	r2, [r3, #24]
 800d52e:	f842 0b04 	str.w	r0, [r2], #4
 800d532:	619a      	str	r2, [r3, #24]
 800d534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d536:	3201      	adds	r2, #1
 800d538:	629a      	str	r2, [r3, #40]	; 0x28
 800d53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d103      	bne.n	800d548 <_NextPixel_SetPixel+0xcc>
 800d540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d544:	f7ff bf66 	b.w	800d414 <_NextPixel_FlushBuffer>
 800d548:	bd70      	pop	{r4, r5, r6, pc}
 800d54a:	bf00      	nop
 800d54c:	20005558 	.word	0x20005558

0800d550 <_NextPixel_End>:
 800d550:	4b07      	ldr	r3, [pc, #28]	; (800d570 <_NextPixel_End+0x20>)
 800d552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d554:	b510      	push	{r4, lr}
 800d556:	461c      	mov	r4, r3
 800d558:	b10a      	cbz	r2, 800d55e <_NextPixel_End+0xe>
 800d55a:	f7ff ff5b 	bl	800d414 <_NextPixel_FlushBuffer>
 800d55e:	4805      	ldr	r0, [pc, #20]	; (800d574 <_NextPixel_End+0x24>)
 800d560:	f000 fe00 	bl	800e164 <GUI_ALLOC_UnlockH>
 800d564:	6920      	ldr	r0, [r4, #16]
 800d566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d56a:	f000 be27 	b.w	800e1bc <GUI_ALLOC_Free>
 800d56e:	bf00      	nop
 800d570:	20005558 	.word	0x20005558
 800d574:	2000556c 	.word	0x2000556c

0800d578 <_NextPixel_Start>:
 800d578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d57c:	469a      	mov	sl, r3
 800d57e:	4b1f      	ldr	r3, [pc, #124]	; (800d5fc <_NextPixel_Start+0x84>)
 800d580:	4c1f      	ldr	r4, [pc, #124]	; (800d600 <_NextPixel_Start+0x88>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	1a12      	subs	r2, r2, r0
 800d586:	3201      	adds	r2, #1
 800d588:	4606      	mov	r6, r0
 800d58a:	7c58      	ldrb	r0, [r3, #17]
 800d58c:	60e2      	str	r2, [r4, #12]
 800d58e:	f7fd fe83 	bl	800b298 <GUI_GetBitsPerPixelEx>
 800d592:	2817      	cmp	r0, #23
 800d594:	bfc8      	it	gt
 800d596:	2020      	movgt	r0, #32
 800d598:	2808      	cmp	r0, #8
 800d59a:	6220      	str	r0, [r4, #32]
 800d59c:	dd04      	ble.n	800d5a8 <_NextPixel_Start+0x30>
 800d59e:	2810      	cmp	r0, #16
 800d5a0:	bfcc      	ite	gt
 800d5a2:	2504      	movgt	r5, #4
 800d5a4:	2502      	movle	r5, #2
 800d5a6:	e000      	b.n	800d5aa <_NextPixel_Start+0x32>
 800d5a8:	2501      	movs	r5, #1
 800d5aa:	68e3      	ldr	r3, [r4, #12]
 800d5ac:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800d600 <_NextPixel_Start+0x88>
 800d5b0:	fb03 f805 	mul.w	r8, r3, r5
 800d5b4:	f000 feea 	bl	800e38c <GUI_ALLOC_GetMaxSize>
 800d5b8:	4540      	cmp	r0, r8
 800d5ba:	bf3a      	itte	cc
 800d5bc:	fbb0 f0f5 	udivcc	r0, r0, r5
 800d5c0:	4368      	mulcc	r0, r5
 800d5c2:	4640      	movcs	r0, r8
 800d5c4:	fb90 f0f5 	sdiv	r0, r0, r5
 800d5c8:	6260      	str	r0, [r4, #36]	; 0x24
 800d5ca:	2700      	movs	r7, #0
 800d5cc:	4640      	mov	r0, r8
 800d5ce:	62a7      	str	r7, [r4, #40]	; 0x28
 800d5d0:	6066      	str	r6, [r4, #4]
 800d5d2:	6026      	str	r6, [r4, #0]
 800d5d4:	f8c4 a008 	str.w	sl, [r4, #8]
 800d5d8:	61e5      	str	r5, [r4, #28]
 800d5da:	62e7      	str	r7, [r4, #44]	; 0x2c
 800d5dc:	f000 ff80 	bl	800e4e0 <GUI_ALLOC_AllocNoInit>
 800d5e0:	6120      	str	r0, [r4, #16]
 800d5e2:	b140      	cbz	r0, 800d5f6 <_NextPixel_Start+0x7e>
 800d5e4:	f000 fdb0 	bl	800e148 <GUI_ALLOC_LockH>
 800d5e8:	f8c9 0014 	str.w	r0, [r9, #20]
 800d5ec:	f8c9 0018 	str.w	r0, [r9, #24]
 800d5f0:	4638      	mov	r0, r7
 800d5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5f6:	2001      	movs	r0, #1
 800d5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5fc:	20000084 	.word	0x20000084
 800d600:	20005558 	.word	0x20005558

0800d604 <_GetEarlyOut.isra.0>:
 800d604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d608:	6807      	ldr	r7, [r0, #0]
 800d60a:	680e      	ldr	r6, [r1, #0]
 800d60c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800d610:	9c08      	ldr	r4, [sp, #32]
 800d612:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800d616:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d618:	eb07 0906 	add.w	r9, r7, r6
 800d61c:	681f      	ldr	r7, [r3, #0]
 800d61e:	f8c0 9000 	str.w	r9, [r0]
 800d622:	2f00      	cmp	r7, #0
 800d624:	dd04      	ble.n	800d630 <_GetEarlyOut.isra.0+0x2c>
 800d626:	3f01      	subs	r7, #1
 800d628:	6027      	str	r7, [r4, #0]
 800d62a:	f04f 37ff 	mov.w	r7, #4294967295
 800d62e:	e005      	b.n	800d63c <_GetEarlyOut.isra.0+0x38>
 800d630:	d004      	beq.n	800d63c <_GetEarlyOut.isra.0+0x38>
 800d632:	427f      	negs	r7, r7
 800d634:	2600      	movs	r6, #0
 800d636:	601f      	str	r7, [r3, #0]
 800d638:	6026      	str	r6, [r4, #0]
 800d63a:	2701      	movs	r7, #1
 800d63c:	f8c8 7000 	str.w	r7, [r8]
 800d640:	2f00      	cmp	r7, #0
 800d642:	d032      	beq.n	800d6aa <_GetEarlyOut.isra.0+0xa6>
 800d644:	690f      	ldr	r7, [r1, #16]
 800d646:	694e      	ldr	r6, [r1, #20]
 800d648:	443e      	add	r6, r7
 800d64a:	681f      	ldr	r7, [r3, #0]
 800d64c:	1bbe      	subs	r6, r7, r6
 800d64e:	2e00      	cmp	r6, #0
 800d650:	601e      	str	r6, [r3, #0]
 800d652:	dd2a      	ble.n	800d6aa <_GetEarlyOut.isra.0+0xa6>
 800d654:	f8d8 3000 	ldr.w	r3, [r8]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	da08      	bge.n	800d66e <_GetEarlyOut.isra.0+0x6a>
 800d65c:	694b      	ldr	r3, [r1, #20]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	dd0e      	ble.n	800d680 <_GetEarlyOut.isra.0+0x7c>
 800d662:	fb03 9605 	mla	r6, r3, r5, r9
 800d666:	6006      	str	r6, [r0, #0]
 800d668:	6820      	ldr	r0, [r4, #0]
 800d66a:	1ac3      	subs	r3, r0, r3
 800d66c:	e007      	b.n	800d67e <_GetEarlyOut.isra.0+0x7a>
 800d66e:	690b      	ldr	r3, [r1, #16]
 800d670:	2b00      	cmp	r3, #0
 800d672:	dd05      	ble.n	800d680 <_GetEarlyOut.isra.0+0x7c>
 800d674:	fb03 9605 	mla	r6, r3, r5, r9
 800d678:	6006      	str	r6, [r0, #0]
 800d67a:	6820      	ldr	r0, [r4, #0]
 800d67c:	4403      	add	r3, r0
 800d67e:	6023      	str	r3, [r4, #0]
 800d680:	6888      	ldr	r0, [r1, #8]
 800d682:	68cb      	ldr	r3, [r1, #12]
 800d684:	4403      	add	r3, r0
 800d686:	6810      	ldr	r0, [r2, #0]
 800d688:	1ac3      	subs	r3, r0, r3
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	6013      	str	r3, [r2, #0]
 800d68e:	dd0c      	ble.n	800d6aa <_GetEarlyOut.isra.0+0xa6>
 800d690:	f8dc 2000 	ldr.w	r2, [ip]
 800d694:	68cb      	ldr	r3, [r1, #12]
 800d696:	4413      	add	r3, r2
 800d698:	f8cc 3000 	str.w	r3, [ip]
 800d69c:	684b      	ldr	r3, [r1, #4]
 800d69e:	1aed      	subs	r5, r5, r3
 800d6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	601d      	str	r5, [r3, #0]
 800d6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6aa:	2001      	movs	r0, #1
 800d6ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d6b0 <GUI_BMP__ReadData>:
 800d6b0:	b570      	push	{r4, r5, r6, lr}
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	460d      	mov	r5, r1
 800d6b6:	b10b      	cbz	r3, 800d6bc <GUI_BMP__ReadData+0xc>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	6043      	str	r3, [r0, #4]
 800d6bc:	4611      	mov	r1, r2
 800d6be:	6826      	ldr	r6, [r4, #0]
 800d6c0:	68a0      	ldr	r0, [r4, #8]
 800d6c2:	6863      	ldr	r3, [r4, #4]
 800d6c4:	462a      	mov	r2, r5
 800d6c6:	47b0      	blx	r6
 800d6c8:	42a8      	cmp	r0, r5
 800d6ca:	d104      	bne.n	800d6d6 <GUI_BMP__ReadData+0x26>
 800d6cc:	6863      	ldr	r3, [r4, #4]
 800d6ce:	441d      	add	r5, r3
 800d6d0:	6065      	str	r5, [r4, #4]
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	bd70      	pop	{r4, r5, r6, pc}
 800d6d6:	2001      	movs	r0, #1
 800d6d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d6dc <GUI_BMP__ReadPalette>:
 800d6dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6de:	4606      	mov	r6, r0
 800d6e0:	460d      	mov	r5, r1
 800d6e2:	2400      	movs	r4, #0
 800d6e4:	42ac      	cmp	r4, r5
 800d6e6:	da17      	bge.n	800d718 <GUI_BMP__ReadPalette+0x3c>
 800d6e8:	2104      	movs	r1, #4
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	eb0d 0201 	add.w	r2, sp, r1
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	f7ff ffdd 	bl	800d6b0 <GUI_BMP__ReadData>
 800d6f6:	b988      	cbnz	r0, 800d71c <GUI_BMP__ReadPalette+0x40>
 800d6f8:	9b01      	ldr	r3, [sp, #4]
 800d6fa:	4a0a      	ldr	r2, [pc, #40]	; (800d724 <GUI_BMP__ReadPalette+0x48>)
 800d6fc:	7858      	ldrb	r0, [r3, #1]
 800d6fe:	6817      	ldr	r7, [r2, #0]
 800d700:	781a      	ldrb	r2, [r3, #0]
 800d702:	789b      	ldrb	r3, [r3, #2]
 800d704:	0200      	lsls	r0, r0, #8
 800d706:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800d70a:	4318      	orrs	r0, r3
 800d70c:	f7fe f97e 	bl	800ba0c <LCD_Color2Index>
 800d710:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 800d714:	3401      	adds	r4, #1
 800d716:	e7e5      	b.n	800d6e4 <GUI_BMP__ReadPalette+0x8>
 800d718:	2000      	movs	r0, #0
 800d71a:	e000      	b.n	800d71e <GUI_BMP__ReadPalette+0x42>
 800d71c:	2001      	movs	r0, #1
 800d71e:	b003      	add	sp, #12
 800d720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d722:	bf00      	nop
 800d724:	20005794 	.word	0x20005794

0800d728 <_ManageBitfields.part.2>:
 800d728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d72a:	2300      	movs	r3, #0
 800d72c:	2110      	movs	r1, #16
 800d72e:	aa01      	add	r2, sp, #4
 800d730:	f7ff ffbe 	bl	800d6b0 <GUI_BMP__ReadData>
 800d734:	4605      	mov	r5, r0
 800d736:	bb10      	cbnz	r0, 800d77e <_ManageBitfields.part.2+0x56>
 800d738:	a801      	add	r0, sp, #4
 800d73a:	f7fe fa69 	bl	800bc10 <GUI__Read32>
 800d73e:	4c12      	ldr	r4, [pc, #72]	; (800d788 <_ManageBitfields.part.2+0x60>)
 800d740:	6020      	str	r0, [r4, #0]
 800d742:	a801      	add	r0, sp, #4
 800d744:	f7fe fa64 	bl	800bc10 <GUI__Read32>
 800d748:	6060      	str	r0, [r4, #4]
 800d74a:	a801      	add	r0, sp, #4
 800d74c:	f7fe fa60 	bl	800bc10 <GUI__Read32>
 800d750:	4621      	mov	r1, r4
 800d752:	60a0      	str	r0, [r4, #8]
 800d754:	f104 0218 	add.w	r2, r4, #24
 800d758:	f851 0b0c 	ldr.w	r0, [r1], #12
 800d75c:	f7ff fe0c 	bl	800d378 <_GetBitfieldsPara>
 800d760:	6860      	ldr	r0, [r4, #4]
 800d762:	f104 0110 	add.w	r1, r4, #16
 800d766:	f104 021c 	add.w	r2, r4, #28
 800d76a:	f7ff fe05 	bl	800d378 <_GetBitfieldsPara>
 800d76e:	68a0      	ldr	r0, [r4, #8]
 800d770:	f104 0114 	add.w	r1, r4, #20
 800d774:	f104 0220 	add.w	r2, r4, #32
 800d778:	f7ff fdfe 	bl	800d378 <_GetBitfieldsPara>
 800d77c:	e000      	b.n	800d780 <_ManageBitfields.part.2+0x58>
 800d77e:	2501      	movs	r5, #1
 800d780:	4628      	mov	r0, r5
 800d782:	b003      	add	sp, #12
 800d784:	bd30      	pop	{r4, r5, pc}
 800d786:	bf00      	nop
 800d788:	20005588 	.word	0x20005588

0800d78c <_Index2ColorBitfields>:
 800d78c:	4b15      	ldr	r3, [pc, #84]	; (800d7e4 <_Index2ColorBitfields+0x58>)
 800d78e:	685a      	ldr	r2, [r3, #4]
 800d790:	6919      	ldr	r1, [r3, #16]
 800d792:	4002      	ands	r2, r0
 800d794:	40ca      	lsrs	r2, r1
 800d796:	69d9      	ldr	r1, [r3, #28]
 800d798:	b530      	push	{r4, r5, lr}
 800d79a:	ebc2 2502 	rsb	r5, r2, r2, lsl #8
 800d79e:	2201      	movs	r2, #1
 800d7a0:	fa02 f101 	lsl.w	r1, r2, r1
 800d7a4:	3901      	subs	r1, #1
 800d7a6:	fbb5 f5f1 	udiv	r5, r5, r1
 800d7aa:	6899      	ldr	r1, [r3, #8]
 800d7ac:	695c      	ldr	r4, [r3, #20]
 800d7ae:	4001      	ands	r1, r0
 800d7b0:	40e1      	lsrs	r1, r4
 800d7b2:	6a1c      	ldr	r4, [r3, #32]
 800d7b4:	fa02 f404 	lsl.w	r4, r2, r4
 800d7b8:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 800d7bc:	3c01      	subs	r4, #1
 800d7be:	fbb1 f4f4 	udiv	r4, r1, r4
 800d7c2:	0424      	lsls	r4, r4, #16
 800d7c4:	6819      	ldr	r1, [r3, #0]
 800d7c6:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
 800d7ca:	68dc      	ldr	r4, [r3, #12]
 800d7cc:	699b      	ldr	r3, [r3, #24]
 800d7ce:	4001      	ands	r1, r0
 800d7d0:	40e1      	lsrs	r1, r4
 800d7d2:	409a      	lsls	r2, r3
 800d7d4:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 800d7d8:	3a01      	subs	r2, #1
 800d7da:	fbb1 f0f2 	udiv	r0, r1, r2
 800d7de:	4328      	orrs	r0, r5
 800d7e0:	bd30      	pop	{r4, r5, pc}
 800d7e2:	bf00      	nop
 800d7e4:	20005588 	.word	0x20005588

0800d7e8 <_DrawBitmap_RGB>:
 800d7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ec:	b09d      	sub	sp, #116	; 0x74
 800d7ee:	af0a      	add	r7, sp, #40	; 0x28
 800d7f0:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 800d7f4:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800d7f8:	9107      	str	r1, [sp, #28]
 800d7fa:	4606      	mov	r6, r0
 800d7fc:	468a      	mov	sl, r1
 800d7fe:	4614      	mov	r4, r2
 800d800:	2100      	movs	r1, #0
 800d802:	2218      	movs	r2, #24
 800d804:	4638      	mov	r0, r7
 800d806:	469b      	mov	fp, r3
 800d808:	9306      	str	r3, [sp, #24]
 800d80a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800d80c:	f003 fe5e 	bl	80114cc <memset>
 800d810:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800d814:	e88d 0208 	stmia.w	sp, {r3, r9}
 800d818:	4650      	mov	r0, sl
 800d81a:	4621      	mov	r1, r4
 800d81c:	465a      	mov	r2, fp
 800d81e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d820:	9702      	str	r7, [sp, #8]
 800d822:	f7ff fd3f 	bl	800d2a4 <_GetClipParam>
 800d826:	ab07      	add	r3, sp, #28
 800d828:	9300      	str	r3, [sp, #0]
 800d82a:	ab12      	add	r3, sp, #72	; 0x48
 800d82c:	9301      	str	r3, [sp, #4]
 800d82e:	ab08      	add	r3, sp, #32
 800d830:	9302      	str	r3, [sp, #8]
 800d832:	ab09      	add	r3, sp, #36	; 0x24
 800d834:	9303      	str	r3, [sp, #12]
 800d836:	f8cd 9010 	str.w	r9, [sp, #16]
 800d83a:	1d30      	adds	r0, r6, #4
 800d83c:	4639      	mov	r1, r7
 800d83e:	aa06      	add	r2, sp, #24
 800d840:	ab26      	add	r3, sp, #152	; 0x98
 800d842:	f7ff fedf 	bl	800d604 <_GetEarlyOut.isra.0>
 800d846:	b108      	cbz	r0, 800d84c <_DrawBitmap_RGB+0x64>
 800d848:	2400      	movs	r4, #0
 800d84a:	e04e      	b.n	800d8ea <_DrawBitmap_RGB+0x102>
 800d84c:	4b29      	ldr	r3, [pc, #164]	; (800d8f4 <_DrawBitmap_RGB+0x10c>)
 800d84e:	4f2a      	ldr	r7, [pc, #168]	; (800d8f8 <_DrawBitmap_RGB+0x110>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	7c58      	ldrb	r0, [r3, #17]
 800d854:	f7fd fd4e 	bl	800b2f4 <GUI_GetpfColor2IndexEx>
 800d858:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d85a:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 800d8fc <_DrawBitmap_RGB+0x114>
 800d85e:	9015      	str	r0, [sp, #84]	; 0x54
 800d860:	42bd      	cmp	r5, r7
 800d862:	9316      	str	r3, [sp, #88]	; 0x58
 800d864:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 800d868:	9807      	ldr	r0, [sp, #28]
 800d86a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d86c:	9a06      	ldr	r2, [sp, #24]
 800d86e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d870:	d109      	bne.n	800d886 <_DrawBitmap_RGB+0x9e>
 800d872:	4421      	add	r1, r4
 800d874:	4402      	add	r2, r0
 800d876:	440b      	add	r3, r1
 800d878:	f8de 4000 	ldr.w	r4, [lr]
 800d87c:	3a01      	subs	r2, #1
 800d87e:	3b01      	subs	r3, #1
 800d880:	47a0      	blx	r4
 800d882:	b148      	cbz	r0, 800d898 <_DrawBitmap_RGB+0xb0>
 800d884:	e01b      	b.n	800d8be <_DrawBitmap_RGB+0xd6>
 800d886:	440c      	add	r4, r1
 800d888:	9419      	str	r4, [sp, #100]	; 0x64
 800d88a:	4402      	add	r2, r0
 800d88c:	441c      	add	r4, r3
 800d88e:	3a01      	subs	r2, #1
 800d890:	3c01      	subs	r4, #1
 800d892:	9018      	str	r0, [sp, #96]	; 0x60
 800d894:	921a      	str	r2, [sp, #104]	; 0x68
 800d896:	941b      	str	r4, [sp, #108]	; 0x6c
 800d898:	9b06      	ldr	r3, [sp, #24]
 800d89a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d89c:	2300      	movs	r3, #0
 800d89e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d8a2:	9311      	str	r3, [sp, #68]	; 0x44
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8a8:	aa10      	add	r2, sp, #64	; 0x40
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	f7ff ff00 	bl	800d6b0 <GUI_BMP__ReadData>
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	b130      	cbz	r0, 800d8c2 <_DrawBitmap_RGB+0xda>
 800d8b4:	42bd      	cmp	r5, r7
 800d8b6:	d102      	bne.n	800d8be <_DrawBitmap_RGB+0xd6>
 800d8b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	4798      	blx	r3
 800d8be:	2401      	movs	r4, #1
 800d8c0:	e013      	b.n	800d8ea <_DrawBitmap_RGB+0x102>
 800d8c2:	a810      	add	r0, sp, #64	; 0x40
 800d8c4:	47a8      	blx	r5
 800d8c6:	6872      	ldr	r2, [r6, #4]
 800d8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ca:	4413      	add	r3, r2
 800d8cc:	6073      	str	r3, [r6, #4]
 800d8ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d8d0:	9b08      	ldr	r3, [sp, #32]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	9312      	str	r3, [sp, #72]	; 0x48
 800d8d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	9326      	str	r3, [sp, #152]	; 0x98
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d1e1      	bne.n	800d8a4 <_DrawBitmap_RGB+0xbc>
 800d8e0:	42bd      	cmp	r5, r7
 800d8e2:	d1b1      	bne.n	800d848 <_DrawBitmap_RGB+0x60>
 800d8e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d8e6:	68db      	ldr	r3, [r3, #12]
 800d8e8:	4798      	blx	r3
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	b01d      	add	sp, #116	; 0x74
 800d8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f2:	bf00      	nop
 800d8f4:	20000084 	.word	0x20000084
 800d8f8:	0800d39b 	.word	0x0800d39b
 800d8fc:	20000098 	.word	0x20000098

0800d900 <_DrawBitmap_16bpp>:
 800d900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d904:	461f      	mov	r7, r3
 800d906:	b093      	sub	sp, #76	; 0x4c
 800d908:	ea4f 1807 	mov.w	r8, r7, lsl #4
 800d90c:	ac0c      	add	r4, sp, #48	; 0x30
 800d90e:	f108 081f 	add.w	r8, r8, #31
 800d912:	4605      	mov	r5, r0
 800d914:	4689      	mov	r9, r1
 800d916:	9107      	str	r1, [sp, #28]
 800d918:	4616      	mov	r6, r2
 800d91a:	2100      	movs	r1, #0
 800d91c:	2218      	movs	r2, #24
 800d91e:	4620      	mov	r0, r4
 800d920:	ea4f 1868 	mov.w	r8, r8, asr #5
 800d924:	9306      	str	r3, [sp, #24]
 800d926:	f003 fdd1 	bl	80114cc <memset>
 800d92a:	463a      	mov	r2, r7
 800d92c:	2310      	movs	r3, #16
 800d92e:	ea4f 0788 	mov.w	r7, r8, lsl #2
 800d932:	e88d 0088 	stmia.w	sp, {r3, r7}
 800d936:	4648      	mov	r0, r9
 800d938:	4631      	mov	r1, r6
 800d93a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d93c:	9402      	str	r4, [sp, #8]
 800d93e:	f7ff fcb1 	bl	800d2a4 <_GetClipParam>
 800d942:	ab07      	add	r3, sp, #28
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	ab09      	add	r3, sp, #36	; 0x24
 800d948:	9301      	str	r3, [sp, #4]
 800d94a:	ab0a      	add	r3, sp, #40	; 0x28
 800d94c:	9302      	str	r3, [sp, #8]
 800d94e:	ab0b      	add	r3, sp, #44	; 0x2c
 800d950:	9303      	str	r3, [sp, #12]
 800d952:	9704      	str	r7, [sp, #16]
 800d954:	1d28      	adds	r0, r5, #4
 800d956:	4621      	mov	r1, r4
 800d958:	aa06      	add	r2, sp, #24
 800d95a:	ab1a      	add	r3, sp, #104	; 0x68
 800d95c:	f7ff fe52 	bl	800d604 <_GetEarlyOut.isra.0>
 800d960:	2800      	cmp	r0, #0
 800d962:	d142      	bne.n	800d9ea <_DrawBitmap_16bpp+0xea>
 800d964:	4b23      	ldr	r3, [pc, #140]	; (800d9f4 <_DrawBitmap_16bpp+0xf4>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	7c58      	ldrb	r0, [r3, #17]
 800d96a:	f7fd fcbb 	bl	800b2e4 <LCD_GetpfColor2IndexEx>
 800d96e:	4607      	mov	r7, r0
 800d970:	b908      	cbnz	r0, 800d976 <_DrawBitmap_16bpp+0x76>
 800d972:	2401      	movs	r4, #1
 800d974:	e03a      	b.n	800d9ec <_DrawBitmap_16bpp+0xec>
 800d976:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d978:	9807      	ldr	r0, [sp, #28]
 800d97a:	9a06      	ldr	r2, [sp, #24]
 800d97c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d97e:	4431      	add	r1, r6
 800d980:	4e1d      	ldr	r6, [pc, #116]	; (800d9f8 <_DrawBitmap_16bpp+0xf8>)
 800d982:	4402      	add	r2, r0
 800d984:	440b      	add	r3, r1
 800d986:	6834      	ldr	r4, [r6, #0]
 800d988:	3a01      	subs	r2, #1
 800d98a:	3b01      	subs	r3, #1
 800d98c:	47a0      	blx	r4
 800d98e:	2800      	cmp	r0, #0
 800d990:	d1ef      	bne.n	800d972 <_DrawBitmap_16bpp+0x72>
 800d992:	4628      	mov	r0, r5
 800d994:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d996:	aa08      	add	r2, sp, #32
 800d998:	2300      	movs	r3, #0
 800d99a:	f7ff fe89 	bl	800d6b0 <GUI_BMP__ReadData>
 800d99e:	4604      	mov	r4, r0
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	d1e6      	bne.n	800d972 <_DrawBitmap_16bpp+0x72>
 800d9a4:	4680      	mov	r8, r0
 800d9a6:	9b06      	ldr	r3, [sp, #24]
 800d9a8:	4598      	cmp	r8, r3
 800d9aa:	da0a      	bge.n	800d9c2 <_DrawBitmap_16bpp+0xc2>
 800d9ac:	a808      	add	r0, sp, #32
 800d9ae:	f7fe f927 	bl	800bc00 <GUI__Read16>
 800d9b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d9b4:	4798      	blx	r3
 800d9b6:	47b8      	blx	r7
 800d9b8:	6873      	ldr	r3, [r6, #4]
 800d9ba:	4798      	blx	r3
 800d9bc:	f108 0801 	add.w	r8, r8, #1
 800d9c0:	e7f1      	b.n	800d9a6 <_DrawBitmap_16bpp+0xa6>
 800d9c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9c4:	b10b      	cbz	r3, 800d9ca <_DrawBitmap_16bpp+0xca>
 800d9c6:	68b3      	ldr	r3, [r6, #8]
 800d9c8:	4798      	blx	r3
 800d9ca:	686a      	ldr	r2, [r5, #4]
 800d9cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9ce:	4413      	add	r3, r2
 800d9d0:	606b      	str	r3, [r5, #4]
 800d9d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9d6:	4413      	add	r3, r2
 800d9d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d9da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	931a      	str	r3, [sp, #104]	; 0x68
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d1d6      	bne.n	800d992 <_DrawBitmap_16bpp+0x92>
 800d9e4:	68f3      	ldr	r3, [r6, #12]
 800d9e6:	4798      	blx	r3
 800d9e8:	e000      	b.n	800d9ec <_DrawBitmap_16bpp+0xec>
 800d9ea:	2400      	movs	r4, #0
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	b013      	add	sp, #76	; 0x4c
 800d9f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9f4:	20000084 	.word	0x20000084
 800d9f8:	20000098 	.word	0x20000098

0800d9fc <GUI_BMP__Init>:
 800d9fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da00:	468b      	mov	fp, r1
 800da02:	4692      	mov	sl, r2
 800da04:	4698      	mov	r8, r3
 800da06:	2136      	movs	r1, #54	; 0x36
 800da08:	aa01      	add	r2, sp, #4
 800da0a:	2301      	movs	r3, #1
 800da0c:	4605      	mov	r5, r0
 800da0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800da10:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800da12:	f7ff fe4d 	bl	800d6b0 <GUI_BMP__ReadData>
 800da16:	2800      	cmp	r0, #0
 800da18:	d15e      	bne.n	800dad8 <GUI_BMP__Init+0xdc>
 800da1a:	a801      	add	r0, sp, #4
 800da1c:	f7fe f8f0 	bl	800bc00 <GUI__Read16>
 800da20:	9b01      	ldr	r3, [sp, #4]
 800da22:	4681      	mov	r9, r0
 800da24:	330c      	adds	r3, #12
 800da26:	a801      	add	r0, sp, #4
 800da28:	9301      	str	r3, [sp, #4]
 800da2a:	f7fe f8f1 	bl	800bc10 <GUI__Read32>
 800da2e:	4607      	mov	r7, r0
 800da30:	a801      	add	r0, sp, #4
 800da32:	f7fe f8ed 	bl	800bc10 <GUI__Read32>
 800da36:	f8cb 0000 	str.w	r0, [fp]
 800da3a:	a801      	add	r0, sp, #4
 800da3c:	f7fe f8e8 	bl	800bc10 <GUI__Read32>
 800da40:	9b01      	ldr	r3, [sp, #4]
 800da42:	f8ca 0000 	str.w	r0, [sl]
 800da46:	3302      	adds	r3, #2
 800da48:	a801      	add	r0, sp, #4
 800da4a:	9301      	str	r3, [sp, #4]
 800da4c:	f7fe f8d8 	bl	800bc00 <GUI__Read16>
 800da50:	f8a8 0000 	strh.w	r0, [r8]
 800da54:	a801      	add	r0, sp, #4
 800da56:	f7fe f8db 	bl	800bc10 <GUI__Read32>
 800da5a:	9b01      	ldr	r3, [sp, #4]
 800da5c:	6030      	str	r0, [r6, #0]
 800da5e:	330c      	adds	r3, #12
 800da60:	a801      	add	r0, sp, #4
 800da62:	9301      	str	r3, [sp, #4]
 800da64:	f7fe f8d4 	bl	800bc10 <GUI__Read32>
 800da68:	f8b8 3000 	ldrh.w	r3, [r8]
 800da6c:	2b08      	cmp	r3, #8
 800da6e:	d00f      	beq.n	800da90 <GUI_BMP__Init+0x94>
 800da70:	d805      	bhi.n	800da7e <GUI_BMP__Init+0x82>
 800da72:	2b01      	cmp	r3, #1
 800da74:	d00a      	beq.n	800da8c <GUI_BMP__Init+0x90>
 800da76:	2b04      	cmp	r3, #4
 800da78:	d12e      	bne.n	800dad8 <GUI_BMP__Init+0xdc>
 800da7a:	2310      	movs	r3, #16
 800da7c:	e00c      	b.n	800da98 <GUI_BMP__Init+0x9c>
 800da7e:	2b18      	cmp	r3, #24
 800da80:	d009      	beq.n	800da96 <GUI_BMP__Init+0x9a>
 800da82:	2b20      	cmp	r3, #32
 800da84:	d007      	beq.n	800da96 <GUI_BMP__Init+0x9a>
 800da86:	2b10      	cmp	r3, #16
 800da88:	d126      	bne.n	800dad8 <GUI_BMP__Init+0xdc>
 800da8a:	e004      	b.n	800da96 <GUI_BMP__Init+0x9a>
 800da8c:	2302      	movs	r3, #2
 800da8e:	e003      	b.n	800da98 <GUI_BMP__Init+0x9c>
 800da90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da94:	e000      	b.n	800da98 <GUI_BMP__Init+0x9c>
 800da96:	2300      	movs	r3, #0
 800da98:	6023      	str	r3, [r4, #0]
 800da9a:	6823      	ldr	r3, [r4, #0]
 800da9c:	b10b      	cbz	r3, 800daa2 <GUI_BMP__Init+0xa6>
 800da9e:	b100      	cbz	r0, 800daa2 <GUI_BMP__Init+0xa6>
 800daa0:	6020      	str	r0, [r4, #0]
 800daa2:	6833      	ldr	r3, [r6, #0]
 800daa4:	2b03      	cmp	r3, #3
 800daa6:	d105      	bne.n	800dab4 <GUI_BMP__Init+0xb8>
 800daa8:	4628      	mov	r0, r5
 800daaa:	f7ff fe3d 	bl	800d728 <_ManageBitfields.part.2>
 800daae:	686b      	ldr	r3, [r5, #4]
 800dab0:	3b38      	subs	r3, #56	; 0x38
 800dab2:	e001      	b.n	800dab8 <GUI_BMP__Init+0xbc>
 800dab4:	686b      	ldr	r3, [r5, #4]
 800dab6:	3b28      	subs	r3, #40	; 0x28
 800dab8:	441f      	add	r7, r3
 800daba:	6823      	ldr	r3, [r4, #0]
 800dabc:	606f      	str	r7, [r5, #4]
 800dabe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dac2:	dc09      	bgt.n	800dad8 <GUI_BMP__Init+0xdc>
 800dac4:	f644 5342 	movw	r3, #19778	; 0x4d42
 800dac8:	4599      	cmp	r9, r3
 800daca:	d105      	bne.n	800dad8 <GUI_BMP__Init+0xdc>
 800dacc:	6830      	ldr	r0, [r6, #0]
 800dace:	2803      	cmp	r0, #3
 800dad0:	bf94      	ite	ls
 800dad2:	2000      	movls	r0, #0
 800dad4:	2001      	movhi	r0, #1
 800dad6:	e000      	b.n	800dada <GUI_BMP__Init+0xde>
 800dad8:	2001      	movs	r0, #1
 800dada:	b003      	add	sp, #12
 800dadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dae0 <GUI_BMP_DrawEx>:
 800dae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae4:	b0a5      	sub	sp, #148	; 0x94
 800dae6:	461d      	mov	r5, r3
 800dae8:	ab10      	add	r3, sp, #64	; 0x40
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	ab11      	add	r3, sp, #68	; 0x44
 800daee:	901b      	str	r0, [sp, #108]	; 0x6c
 800daf0:	911d      	str	r1, [sp, #116]	; 0x74
 800daf2:	9301      	str	r3, [sp, #4]
 800daf4:	4617      	mov	r7, r2
 800daf6:	a81b      	add	r0, sp, #108	; 0x6c
 800daf8:	a90e      	add	r1, sp, #56	; 0x38
 800dafa:	aa0f      	add	r2, sp, #60	; 0x3c
 800dafc:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800db00:	f7ff ff7c 	bl	800d9fc <GUI_BMP__Init>
 800db04:	4604      	mov	r4, r0
 800db06:	2800      	cmp	r0, #0
 800db08:	f040 8229 	bne.w	800df5e <GUI_BMP_DrawEx+0x47e>
 800db0c:	4b9e      	ldr	r3, [pc, #632]	; (800dd88 <GUI_BMP_DrawEx+0x2a8>)
 800db0e:	6819      	ldr	r1, [r3, #0]
 800db10:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800db12:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800db14:	eb05 0803 	add.w	r8, r5, r3
 800db18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db1a:	f8ad 8066 	strh.w	r8, [sp, #102]	; 0x66
 800db1e:	4407      	add	r7, r0
 800db20:	3b01      	subs	r3, #1
 800db22:	443b      	add	r3, r7
 800db24:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 800db28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db2a:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
 800db2e:	3b01      	subs	r3, #1
 800db30:	4443      	add	r3, r8
 800db32:	a819      	add	r0, sp, #100	; 0x64
 800db34:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 800db38:	f7fa ff9a 	bl	8008a70 <WM__InitIVRSearch>
 800db3c:	2800      	cmp	r0, #0
 800db3e:	f000 8215 	beq.w	800df6c <GUI_BMP_DrawEx+0x48c>
 800db42:	9408      	str	r4, [sp, #32]
 800db44:	46a1      	mov	r9, r4
 800db46:	9a08      	ldr	r2, [sp, #32]
 800db48:	b15a      	cbz	r2, 800db62 <GUI_BMP_DrawEx+0x82>
 800db4a:	ab10      	add	r3, sp, #64	; 0x40
 800db4c:	9300      	str	r3, [sp, #0]
 800db4e:	ab11      	add	r3, sp, #68	; 0x44
 800db50:	9301      	str	r3, [sp, #4]
 800db52:	a81b      	add	r0, sp, #108	; 0x6c
 800db54:	a90e      	add	r1, sp, #56	; 0x38
 800db56:	aa0f      	add	r2, sp, #60	; 0x3c
 800db58:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800db5c:	f7ff ff4e 	bl	800d9fc <GUI_BMP__Init>
 800db60:	4681      	mov	r9, r0
 800db62:	f1b9 0f00 	cmp.w	r9, #0
 800db66:	f040 81f0 	bne.w	800df4a <GUI_BMP_DrawEx+0x46a>
 800db6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db6c:	9307      	str	r3, [sp, #28]
 800db6e:	2b03      	cmp	r3, #3
 800db70:	f200 81eb 	bhi.w	800df4a <GUI_BMP_DrawEx+0x46a>
 800db74:	e8df f013 	tbh	[pc, r3, lsl #1]
 800db78:	00a40004 	.word	0x00a40004
 800db7c:	01cd00a4 	.word	0x01cd00a4
 800db80:	f8bd 4036 	ldrh.w	r4, [sp, #54]	; 0x36
 800db84:	2c08      	cmp	r4, #8
 800db86:	d012      	beq.n	800dbae <GUI_BMP_DrawEx+0xce>
 800db88:	d805      	bhi.n	800db96 <GUI_BMP_DrawEx+0xb6>
 800db8a:	2c01      	cmp	r4, #1
 800db8c:	d00f      	beq.n	800dbae <GUI_BMP_DrawEx+0xce>
 800db8e:	2c04      	cmp	r4, #4
 800db90:	f040 81d9 	bne.w	800df46 <GUI_BMP_DrawEx+0x466>
 800db94:	e00b      	b.n	800dbae <GUI_BMP_DrawEx+0xce>
 800db96:	2c18      	cmp	r4, #24
 800db98:	d071      	beq.n	800dc7e <GUI_BMP_DrawEx+0x19e>
 800db9a:	2c20      	cmp	r4, #32
 800db9c:	f000 8084 	beq.w	800dca8 <GUI_BMP_DrawEx+0x1c8>
 800dba0:	2c10      	cmp	r4, #16
 800dba2:	f040 81d0 	bne.w	800df46 <GUI_BMP_DrawEx+0x466>
 800dba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dba8:	9300      	str	r3, [sp, #0]
 800dbaa:	4b78      	ldr	r3, [pc, #480]	; (800dd8c <GUI_BMP_DrawEx+0x2ac>)
 800dbac:	e1c3      	b.n	800df36 <GUI_BMP_DrawEx+0x456>
 800dbae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbb0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800dbb2:	9313      	str	r3, [sp, #76]	; 0x4c
 800dbb4:	ae1e      	add	r6, sp, #120	; 0x78
 800dbb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbb8:	9712      	str	r7, [sp, #72]	; 0x48
 800dbba:	2100      	movs	r1, #0
 800dbbc:	4630      	mov	r0, r6
 800dbbe:	2218      	movs	r2, #24
 800dbc0:	9314      	str	r3, [sp, #80]	; 0x50
 800dbc2:	f003 fc83 	bl	80114cc <memset>
 800dbc6:	a81b      	add	r0, sp, #108	; 0x6c
 800dbc8:	4629      	mov	r1, r5
 800dbca:	f7ff fd87 	bl	800d6dc <GUI_BMP__ReadPalette>
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	f040 81b9 	bne.w	800df46 <GUI_BMP_DrawEx+0x466>
 800dbd4:	2c04      	cmp	r4, #4
 800dbd6:	d005      	beq.n	800dbe4 <GUI_BMP_DrawEx+0x104>
 800dbd8:	2c08      	cmp	r4, #8
 800dbda:	d009      	beq.n	800dbf0 <GUI_BMP_DrawEx+0x110>
 800dbdc:	2c01      	cmp	r4, #1
 800dbde:	d10c      	bne.n	800dbfa <GUI_BMP_DrawEx+0x11a>
 800dbe0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800dbe2:	e001      	b.n	800dbe8 <GUI_BMP_DrawEx+0x108>
 800dbe4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800dbe6:	00ad      	lsls	r5, r5, #2
 800dbe8:	351f      	adds	r5, #31
 800dbea:	116d      	asrs	r5, r5, #5
 800dbec:	00ad      	lsls	r5, r5, #2
 800dbee:	e005      	b.n	800dbfc <GUI_BMP_DrawEx+0x11c>
 800dbf0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800dbf2:	3503      	adds	r5, #3
 800dbf4:	f025 0503 	bic.w	r5, r5, #3
 800dbf8:	e000      	b.n	800dbfc <GUI_BMP_DrawEx+0x11c>
 800dbfa:	4605      	mov	r5, r0
 800dbfc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dbfe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dc00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc02:	4641      	mov	r1, r8
 800dc04:	e88d 0070 	stmia.w	sp, {r4, r5, r6}
 800dc08:	f7ff fb4c 	bl	800d2a4 <_GetClipParam>
 800dc0c:	ab12      	add	r3, sp, #72	; 0x48
 800dc0e:	9300      	str	r3, [sp, #0]
 800dc10:	ab16      	add	r3, sp, #88	; 0x58
 800dc12:	9301      	str	r3, [sp, #4]
 800dc14:	ab17      	add	r3, sp, #92	; 0x5c
 800dc16:	9302      	str	r3, [sp, #8]
 800dc18:	ab18      	add	r3, sp, #96	; 0x60
 800dc1a:	9303      	str	r3, [sp, #12]
 800dc1c:	9504      	str	r5, [sp, #16]
 800dc1e:	a81c      	add	r0, sp, #112	; 0x70
 800dc20:	4631      	mov	r1, r6
 800dc22:	aa13      	add	r2, sp, #76	; 0x4c
 800dc24:	ab14      	add	r3, sp, #80	; 0x50
 800dc26:	f7ff fced 	bl	800d604 <_GetEarlyOut.isra.0>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	f040 818d 	bne.w	800df4a <GUI_BMP_DrawEx+0x46a>
 800dc30:	a81b      	add	r0, sp, #108	; 0x6c
 800dc32:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800dc34:	aa15      	add	r2, sp, #84	; 0x54
 800dc36:	2300      	movs	r3, #0
 800dc38:	f7ff fd3a 	bl	800d6b0 <GUI_BMP__ReadData>
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	f040 8182 	bne.w	800df46 <GUI_BMP_DrawEx+0x466>
 800dc42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dc44:	9204      	str	r2, [sp, #16]
 800dc46:	2301      	movs	r3, #1
 800dc48:	4a51      	ldr	r2, [pc, #324]	; (800dd90 <GUI_BMP_DrawEx+0x2b0>)
 800dc4a:	9300      	str	r3, [sp, #0]
 800dc4c:	9301      	str	r3, [sp, #4]
 800dc4e:	9303      	str	r3, [sp, #12]
 800dc50:	9402      	str	r4, [sp, #8]
 800dc52:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dc54:	6812      	ldr	r2, [r2, #0]
 800dc56:	9205      	str	r2, [sp, #20]
 800dc58:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dc5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dc5c:	4441      	add	r1, r8
 800dc5e:	f7fd fd65 	bl	800b72c <LCD_DrawBitmap>
 800dc62:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800dc64:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dc66:	4413      	add	r3, r2
 800dc68:	931c      	str	r3, [sp, #112]	; 0x70
 800dc6a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dc6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc6e:	4413      	add	r3, r2
 800dc70:	9316      	str	r3, [sp, #88]	; 0x58
 800dc72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc74:	3b01      	subs	r3, #1
 800dc76:	9314      	str	r3, [sp, #80]	; 0x50
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1d9      	bne.n	800dc30 <GUI_BMP_DrawEx+0x150>
 800dc7c:	e165      	b.n	800df4a <GUI_BMP_DrawEx+0x46a>
 800dc7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dc82:	9200      	str	r2, [sp, #0]
 800dc84:	435c      	muls	r4, r3
 800dc86:	341f      	adds	r4, #31
 800dc88:	1164      	asrs	r4, r4, #5
 800dc8a:	2203      	movs	r2, #3
 800dc8c:	00a4      	lsls	r4, r4, #2
 800dc8e:	9202      	str	r2, [sp, #8]
 800dc90:	9401      	str	r4, [sp, #4]
 800dc92:	2200      	movs	r2, #0
 800dc94:	9203      	str	r2, [sp, #12]
 800dc96:	4a3f      	ldr	r2, [pc, #252]	; (800dd94 <GUI_BMP_DrawEx+0x2b4>)
 800dc98:	9204      	str	r2, [sp, #16]
 800dc9a:	a81b      	add	r0, sp, #108	; 0x6c
 800dc9c:	4639      	mov	r1, r7
 800dc9e:	4642      	mov	r2, r8
 800dca0:	f7ff fda2 	bl	800d7e8 <_DrawBitmap_RGB>
 800dca4:	4681      	mov	r9, r0
 800dca6:	e150      	b.n	800df4a <GUI_BMP_DrawEx+0x46a>
 800dca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dcac:	9200      	str	r2, [sp, #0]
 800dcae:	009a      	lsls	r2, r3, #2
 800dcb0:	9201      	str	r2, [sp, #4]
 800dcb2:	2204      	movs	r2, #4
 800dcb4:	9202      	str	r2, [sp, #8]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	9203      	str	r2, [sp, #12]
 800dcba:	4a37      	ldr	r2, [pc, #220]	; (800dd98 <GUI_BMP_DrawEx+0x2b8>)
 800dcbc:	6812      	ldr	r2, [r2, #0]
 800dcbe:	e7eb      	b.n	800dc98 <GUI_BMP_DrawEx+0x1b8>
 800dcc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcc2:	9309      	str	r3, [sp, #36]	; 0x24
 800dcc4:	4b30      	ldr	r3, [pc, #192]	; (800dd88 <GUI_BMP_DrawEx+0x2a8>)
 800dcc6:	9910      	ldr	r1, [sp, #64]	; 0x40
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcce:	a81b      	add	r0, sp, #108	; 0x6c
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcd4:	f7ff fd02 	bl	800d6dc <GUI_BMP__ReadPalette>
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	f040 8134 	bne.w	800df46 <GUI_BMP_DrawEx+0x466>
 800dcde:	4445      	add	r5, r8
 800dce0:	3d01      	subs	r5, #1
 800dce2:	463c      	mov	r4, r7
 800dce4:	a81b      	add	r0, sp, #108	; 0x6c
 800dce6:	2102      	movs	r1, #2
 800dce8:	aa1e      	add	r2, sp, #120	; 0x78
 800dcea:	2300      	movs	r3, #0
 800dcec:	f7ff fce0 	bl	800d6b0 <GUI_BMP__ReadData>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	f040 8128 	bne.w	800df46 <GUI_BMP_DrawEx+0x466>
 800dcf6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dcf8:	1c5a      	adds	r2, r3, #1
 800dcfa:	921e      	str	r2, [sp, #120]	; 0x78
 800dcfc:	f893 b000 	ldrb.w	fp, [r3]
 800dd00:	785e      	ldrb	r6, [r3, #1]
 800dd02:	f1bb 0f00 	cmp.w	fp, #0
 800dd06:	f040 80c6 	bne.w	800de96 <GUI_BMP_DrawEx+0x3b6>
 800dd0a:	2e01      	cmp	r6, #1
 800dd0c:	d019      	beq.n	800dd42 <GUI_BMP_DrawEx+0x262>
 800dd0e:	d302      	bcc.n	800dd16 <GUI_BMP_DrawEx+0x236>
 800dd10:	2e02      	cmp	r6, #2
 800dd12:	d043      	beq.n	800dd9c <GUI_BMP_DrawEx+0x2bc>
 800dd14:	e062      	b.n	800dddc <GUI_BMP_DrawEx+0x2fc>
 800dd16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd18:	443a      	add	r2, r7
 800dd1a:	3a01      	subs	r2, #1
 800dd1c:	4294      	cmp	r4, r2
 800dd1e:	da0a      	bge.n	800dd36 <GUI_BMP_DrawEx+0x256>
 800dd20:	4b1b      	ldr	r3, [pc, #108]	; (800dd90 <GUI_BMP_DrawEx+0x2b0>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	6819      	ldr	r1, [r3, #0]
 800dd26:	4b18      	ldr	r3, [pc, #96]	; (800dd88 <GUI_BMP_DrawEx+0x2a8>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	6019      	str	r1, [r3, #0]
 800dd30:	4629      	mov	r1, r5
 800dd32:	f7fd fba7 	bl	800b484 <LCD_DrawHLine>
 800dd36:	3d01      	subs	r5, #1
 800dd38:	4545      	cmp	r5, r8
 800dd3a:	f2c0 8104 	blt.w	800df46 <GUI_BMP_DrawEx+0x466>
 800dd3e:	46ba      	mov	sl, r7
 800dd40:	e0e5      	b.n	800df0e <GUI_BMP_DrawEx+0x42e>
 800dd42:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800dd46:	4e10      	ldr	r6, [pc, #64]	; (800dd88 <GUI_BMP_DrawEx+0x2a8>)
 800dd48:	44ba      	add	sl, r7
 800dd4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd4e:	4554      	cmp	r4, sl
 800dd50:	da0a      	bge.n	800dd68 <GUI_BMP_DrawEx+0x288>
 800dd52:	4b0f      	ldr	r3, [pc, #60]	; (800dd90 <GUI_BMP_DrawEx+0x2b0>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	6833      	ldr	r3, [r6, #0]
 800dd5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	601a      	str	r2, [r3, #0]
 800dd60:	4629      	mov	r1, r5
 800dd62:	4652      	mov	r2, sl
 800dd64:	f7fd fb8e 	bl	800b484 <LCD_DrawHLine>
 800dd68:	4545      	cmp	r5, r8
 800dd6a:	f340 80fa 	ble.w	800df62 <GUI_BMP_DrawEx+0x482>
 800dd6e:	4b08      	ldr	r3, [pc, #32]	; (800dd90 <GUI_BMP_DrawEx+0x2b0>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	6833      	ldr	r3, [r6, #0]
 800dd76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd78:	4638      	mov	r0, r7
 800dd7a:	601a      	str	r2, [r3, #0]
 800dd7c:	4641      	mov	r1, r8
 800dd7e:	4652      	mov	r2, sl
 800dd80:	1e6b      	subs	r3, r5, #1
 800dd82:	f7fd fbcb 	bl	800b51c <LCD_FillRect>
 800dd86:	e0ec      	b.n	800df62 <GUI_BMP_DrawEx+0x482>
 800dd88:	20000084 	.word	0x20000084
 800dd8c:	0800e529 	.word	0x0800e529
 800dd90:	20005794 	.word	0x20005794
 800dd94:	0800d39b 	.word	0x0800d39b
 800dd98:	20000094 	.word	0x20000094
 800dd9c:	a81b      	add	r0, sp, #108	; 0x6c
 800dd9e:	4631      	mov	r1, r6
 800dda0:	aa1e      	add	r2, sp, #120	; 0x78
 800dda2:	465b      	mov	r3, fp
 800dda4:	f7ff fc84 	bl	800d6b0 <GUI_BMP__ReadData>
 800dda8:	2800      	cmp	r0, #0
 800ddaa:	f040 80cc 	bne.w	800df46 <GUI_BMP_DrawEx+0x466>
 800ddae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ddb0:	1c5a      	adds	r2, r3, #1
 800ddb2:	921e      	str	r2, [sp, #120]	; 0x78
 800ddb4:	f893 a000 	ldrb.w	sl, [r3]
 800ddb8:	785e      	ldrb	r6, [r3, #1]
 800ddba:	4b6e      	ldr	r3, [pc, #440]	; (800df74 <GUI_BMP_DrawEx+0x494>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	4b6d      	ldr	r3, [pc, #436]	; (800df78 <GUI_BMP_DrawEx+0x498>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddc6:	1bae      	subs	r6, r5, r6
 800ddc8:	44a2      	add	sl, r4
 800ddca:	601a      	str	r2, [r3, #0]
 800ddcc:	4620      	mov	r0, r4
 800ddce:	462b      	mov	r3, r5
 800ddd0:	4631      	mov	r1, r6
 800ddd2:	4652      	mov	r2, sl
 800ddd4:	f7fd fba2 	bl	800b51c <LCD_FillRect>
 800ddd8:	4635      	mov	r5, r6
 800ddda:	e098      	b.n	800df0e <GUI_BMP_DrawEx+0x42e>
 800dddc:	9a07      	ldr	r2, [sp, #28]
 800ddde:	2a02      	cmp	r2, #2
 800dde0:	d12a      	bne.n	800de38 <GUI_BMP_DrawEx+0x358>
 800dde2:	1c73      	adds	r3, r6, #1
 800dde4:	ea4f 0a63 	mov.w	sl, r3, asr #1
 800dde8:	930a      	str	r3, [sp, #40]	; 0x28
 800ddea:	a81b      	add	r0, sp, #108	; 0x6c
 800ddec:	4651      	mov	r1, sl
 800ddee:	aa1e      	add	r2, sp, #120	; 0x78
 800ddf0:	465b      	mov	r3, fp
 800ddf2:	f7ff fc5d 	bl	800d6b0 <GUI_BMP__ReadData>
 800ddf6:	4684      	mov	ip, r0
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	f040 80a4 	bne.w	800df46 <GUI_BMP_DrawEx+0x466>
 800ddfe:	2304      	movs	r3, #4
 800de00:	9302      	str	r3, [sp, #8]
 800de02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800de04:	9304      	str	r3, [sp, #16]
 800de06:	f04f 0b01 	mov.w	fp, #1
 800de0a:	4b5a      	ldr	r3, [pc, #360]	; (800df74 <GUI_BMP_DrawEx+0x494>)
 800de0c:	f8cd a00c 	str.w	sl, [sp, #12]
 800de10:	f8cd b000 	str.w	fp, [sp]
 800de14:	f8cd b004 	str.w	fp, [sp, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	9305      	str	r3, [sp, #20]
 800de1c:	4632      	mov	r2, r6
 800de1e:	4620      	mov	r0, r4
 800de20:	4629      	mov	r1, r5
 800de22:	465b      	mov	r3, fp
 800de24:	f8cd c018 	str.w	ip, [sp, #24]
 800de28:	f7fd fc80 	bl	800b72c <LCD_DrawBitmap>
 800de2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de2e:	eb04 0a06 	add.w	sl, r4, r6
 800de32:	f012 0f02 	tst.w	r2, #2
 800de36:	e022      	b.n	800de7e <GUI_BMP_DrawEx+0x39e>
 800de38:	a81b      	add	r0, sp, #108	; 0x6c
 800de3a:	4631      	mov	r1, r6
 800de3c:	aa1e      	add	r2, sp, #120	; 0x78
 800de3e:	465b      	mov	r3, fp
 800de40:	f7ff fc36 	bl	800d6b0 <GUI_BMP__ReadData>
 800de44:	4684      	mov	ip, r0
 800de46:	2800      	cmp	r0, #0
 800de48:	d17d      	bne.n	800df46 <GUI_BMP_DrawEx+0x466>
 800de4a:	2308      	movs	r3, #8
 800de4c:	9302      	str	r3, [sp, #8]
 800de4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800de50:	9304      	str	r3, [sp, #16]
 800de52:	f04f 0b01 	mov.w	fp, #1
 800de56:	4b47      	ldr	r3, [pc, #284]	; (800df74 <GUI_BMP_DrawEx+0x494>)
 800de58:	f8cd b000 	str.w	fp, [sp]
 800de5c:	f8cd b004 	str.w	fp, [sp, #4]
 800de60:	9603      	str	r6, [sp, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	9305      	str	r3, [sp, #20]
 800de66:	4620      	mov	r0, r4
 800de68:	4629      	mov	r1, r5
 800de6a:	4632      	mov	r2, r6
 800de6c:	465b      	mov	r3, fp
 800de6e:	f8cd c018 	str.w	ip, [sp, #24]
 800de72:	eb04 0a06 	add.w	sl, r4, r6
 800de76:	f7fd fc59 	bl	800b72c <LCD_DrawBitmap>
 800de7a:	f016 0f01 	tst.w	r6, #1
 800de7e:	f8dd c018 	ldr.w	ip, [sp, #24]
 800de82:	d044      	beq.n	800df0e <GUI_BMP_DrawEx+0x42e>
 800de84:	a81b      	add	r0, sp, #108	; 0x6c
 800de86:	4659      	mov	r1, fp
 800de88:	aa1e      	add	r2, sp, #120	; 0x78
 800de8a:	4663      	mov	r3, ip
 800de8c:	f7ff fc10 	bl	800d6b0 <GUI_BMP__ReadData>
 800de90:	2800      	cmp	r0, #0
 800de92:	d03c      	beq.n	800df0e <GUI_BMP_DrawEx+0x42e>
 800de94:	e057      	b.n	800df46 <GUI_BMP_DrawEx+0x466>
 800de96:	9b07      	ldr	r3, [sp, #28]
 800de98:	2b02      	cmp	r3, #2
 800de9a:	d128      	bne.n	800deee <GUI_BMP_DrawEx+0x40e>
 800de9c:	f006 030f 	and.w	r3, r6, #15
 800dea0:	0936      	lsrs	r6, r6, #4
 800dea2:	42b3      	cmp	r3, r6
 800dea4:	b21b      	sxth	r3, r3
 800dea6:	d003      	beq.n	800deb0 <GUI_BMP_DrawEx+0x3d0>
 800dea8:	00b6      	lsls	r6, r6, #2
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	4682      	mov	sl, r0
 800deae:	e004      	b.n	800deba <GUI_BMP_DrawEx+0x3da>
 800deb0:	4a30      	ldr	r2, [pc, #192]	; (800df74 <GUI_BMP_DrawEx+0x494>)
 800deb2:	6812      	ldr	r2, [r2, #0]
 800deb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800deb8:	e01d      	b.n	800def6 <GUI_BMP_DrawEx+0x416>
 800deba:	45da      	cmp	sl, fp
 800debc:	eb0a 0004 	add.w	r0, sl, r4
 800dec0:	da12      	bge.n	800dee8 <GUI_BMP_DrawEx+0x408>
 800dec2:	4a2d      	ldr	r2, [pc, #180]	; (800df78 <GUI_BMP_DrawEx+0x498>)
 800dec4:	492b      	ldr	r1, [pc, #172]	; (800df74 <GUI_BMP_DrawEx+0x494>)
 800dec6:	6812      	ldr	r2, [r2, #0]
 800dec8:	6809      	ldr	r1, [r1, #0]
 800deca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800decc:	f01a 0f01 	tst.w	sl, #1
 800ded0:	bf14      	ite	ne
 800ded2:	58c9      	ldrne	r1, [r1, r3]
 800ded4:	5989      	ldreq	r1, [r1, r6]
 800ded6:	6011      	str	r1, [r2, #0]
 800ded8:	4629      	mov	r1, r5
 800deda:	9306      	str	r3, [sp, #24]
 800dedc:	f10a 0a01 	add.w	sl, sl, #1
 800dee0:	f7fd faa2 	bl	800b428 <LCD_DrawPixel>
 800dee4:	9b06      	ldr	r3, [sp, #24]
 800dee6:	e7e8      	b.n	800deba <GUI_BMP_DrawEx+0x3da>
 800dee8:	eb04 0a0b 	add.w	sl, r4, fp
 800deec:	e00f      	b.n	800df0e <GUI_BMP_DrawEx+0x42e>
 800deee:	4b21      	ldr	r3, [pc, #132]	; (800df74 <GUI_BMP_DrawEx+0x494>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 800def6:	4b20      	ldr	r3, [pc, #128]	; (800df78 <GUI_BMP_DrawEx+0x498>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800defc:	eb04 0a0b 	add.w	sl, r4, fp
 800df00:	601a      	str	r2, [r3, #0]
 800df02:	4620      	mov	r0, r4
 800df04:	4629      	mov	r1, r5
 800df06:	f10a 32ff 	add.w	r2, sl, #4294967295
 800df0a:	f7fd fabb 	bl	800b484 <LCD_DrawHLine>
 800df0e:	4654      	mov	r4, sl
 800df10:	e6e8      	b.n	800dce4 <GUI_BMP_DrawEx+0x204>
 800df12:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800df16:	2b10      	cmp	r3, #16
 800df18:	d00a      	beq.n	800df30 <GUI_BMP_DrawEx+0x450>
 800df1a:	2b20      	cmp	r3, #32
 800df1c:	d113      	bne.n	800df46 <GUI_BMP_DrawEx+0x466>
 800df1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df22:	9200      	str	r2, [sp, #0]
 800df24:	009a      	lsls	r2, r3, #2
 800df26:	9201      	str	r2, [sp, #4]
 800df28:	2204      	movs	r2, #4
 800df2a:	9202      	str	r2, [sp, #8]
 800df2c:	4a13      	ldr	r2, [pc, #76]	; (800df7c <GUI_BMP_DrawEx+0x49c>)
 800df2e:	e6b1      	b.n	800dc94 <GUI_BMP_DrawEx+0x1b4>
 800df30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	4b11      	ldr	r3, [pc, #68]	; (800df7c <GUI_BMP_DrawEx+0x49c>)
 800df36:	9301      	str	r3, [sp, #4]
 800df38:	a81b      	add	r0, sp, #108	; 0x6c
 800df3a:	4639      	mov	r1, r7
 800df3c:	4642      	mov	r2, r8
 800df3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df40:	f7ff fcde 	bl	800d900 <_DrawBitmap_16bpp>
 800df44:	e6ae      	b.n	800dca4 <GUI_BMP_DrawEx+0x1c4>
 800df46:	f04f 0901 	mov.w	r9, #1
 800df4a:	f7fa fccf 	bl	80088ec <WM__GetNextIVR>
 800df4e:	9a08      	ldr	r2, [sp, #32]
 800df50:	3201      	adds	r2, #1
 800df52:	9208      	str	r2, [sp, #32]
 800df54:	2800      	cmp	r0, #0
 800df56:	f47f adf6 	bne.w	800db46 <GUI_BMP_DrawEx+0x66>
 800df5a:	4648      	mov	r0, r9
 800df5c:	e006      	b.n	800df6c <GUI_BMP_DrawEx+0x48c>
 800df5e:	2001      	movs	r0, #1
 800df60:	e004      	b.n	800df6c <GUI_BMP_DrawEx+0x48c>
 800df62:	6833      	ldr	r3, [r6, #0]
 800df64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df68:	601a      	str	r2, [r3, #0]
 800df6a:	e7ee      	b.n	800df4a <GUI_BMP_DrawEx+0x46a>
 800df6c:	b025      	add	sp, #148	; 0x94
 800df6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df72:	bf00      	nop
 800df74:	20005794 	.word	0x20005794
 800df78:	20000084 	.word	0x20000084
 800df7c:	0800d78d 	.word	0x0800d78d

0800df80 <_PushFreeBlock>:
 800df80:	4b07      	ldr	r3, [pc, #28]	; (800dfa0 <_PushFreeBlock+0x20>)
 800df82:	685a      	ldr	r2, [r3, #4]
 800df84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800df86:	3201      	adds	r2, #1
 800df88:	b510      	push	{r4, lr}
 800df8a:	605a      	str	r2, [r3, #4]
 800df8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df8e:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 800df92:	6061      	str	r1, [r4, #4]
 800df94:	2100      	movs	r1, #0
 800df96:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800df9a:	6258      	str	r0, [r3, #36]	; 0x24
 800df9c:	bd10      	pop	{r4, pc}
 800df9e:	bf00      	nop
 800dfa0:	200056a4 	.word	0x200056a4

0800dfa4 <_RemoveFreeBlock>:
 800dfa4:	b510      	push	{r4, lr}
 800dfa6:	6842      	ldr	r2, [r0, #4]
 800dfa8:	230f      	movs	r3, #15
 800dfaa:	490d      	ldr	r1, [pc, #52]	; (800dfe0 <_RemoveFreeBlock+0x3c>)
 800dfac:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 800dfb0:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800dfb2:	42a2      	cmp	r2, r4
 800dfb4:	d203      	bcs.n	800dfbe <_RemoveFreeBlock+0x1a>
 800dfb6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800dfba:	d2f6      	bcs.n	800dfaa <_RemoveFreeBlock+0x6>
 800dfbc:	bd10      	pop	{r4, pc}
 800dfbe:	2b0f      	cmp	r3, #15
 800dfc0:	d80c      	bhi.n	800dfdc <_RemoveFreeBlock+0x38>
 800dfc2:	680c      	ldr	r4, [r1, #0]
 800dfc4:	1aa2      	subs	r2, r4, r2
 800dfc6:	600a      	str	r2, [r1, #0]
 800dfc8:	6882      	ldr	r2, [r0, #8]
 800dfca:	68c0      	ldr	r0, [r0, #12]
 800dfcc:	b102      	cbz	r2, 800dfd0 <_RemoveFreeBlock+0x2c>
 800dfce:	6050      	str	r0, [r2, #4]
 800dfd0:	b108      	cbz	r0, 800dfd6 <_RemoveFreeBlock+0x32>
 800dfd2:	6002      	str	r2, [r0, #0]
 800dfd4:	bd10      	pop	{r4, pc}
 800dfd6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800dfda:	645a      	str	r2, [r3, #68]	; 0x44
 800dfdc:	bd10      	pop	{r4, pc}
 800dfde:	bf00      	nop
 800dfe0:	200056a4 	.word	0x200056a4

0800dfe4 <_AddFreeMemory>:
 800dfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe6:	4e26      	ldr	r6, [pc, #152]	; (800e080 <_AddFreeMemory+0x9c>)
 800dfe8:	68f3      	ldr	r3, [r6, #12]
 800dfea:	1e5a      	subs	r2, r3, #1
 800dfec:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800dfee:	4605      	mov	r5, r0
 800dff0:	4413      	add	r3, r2
 800dff2:	1808      	adds	r0, r1, r0
 800dff4:	4298      	cmp	r0, r3
 800dff6:	460c      	mov	r4, r1
 800dff8:	d805      	bhi.n	800e006 <_AddFreeMemory+0x22>
 800dffa:	594b      	ldr	r3, [r1, r5]
 800dffc:	b91b      	cbnz	r3, 800e006 <_AddFreeMemory+0x22>
 800dffe:	6843      	ldr	r3, [r0, #4]
 800e000:	441d      	add	r5, r3
 800e002:	f7ff ffcf 	bl	800dfa4 <_RemoveFreeBlock>
 800e006:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800e008:	429c      	cmp	r4, r3
 800e00a:	d90a      	bls.n	800e022 <_AddFreeMemory+0x3e>
 800e00c:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800e010:	1be7      	subs	r7, r4, r7
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	b92b      	cbnz	r3, 800e022 <_AddFreeMemory+0x3e>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4638      	mov	r0, r7
 800e01a:	441d      	add	r5, r3
 800e01c:	f7ff ffc2 	bl	800dfa4 <_RemoveFreeBlock>
 800e020:	463c      	mov	r4, r7
 800e022:	230f      	movs	r3, #15
 800e024:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800e028:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e02a:	4295      	cmp	r5, r2
 800e02c:	d203      	bcs.n	800e036 <_AddFreeMemory+0x52>
 800e02e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800e032:	d2f7      	bcs.n	800e024 <_AddFreeMemory+0x40>
 800e034:	e022      	b.n	800e07c <_AddFreeMemory+0x98>
 800e036:	2b0f      	cmp	r3, #15
 800e038:	d820      	bhi.n	800e07c <_AddFreeMemory+0x98>
 800e03a:	3308      	adds	r3, #8
 800e03c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800e040:	1961      	adds	r1, r4, r5
 800e042:	6852      	ldr	r2, [r2, #4]
 800e044:	60a2      	str	r2, [r4, #8]
 800e046:	2000      	movs	r0, #0
 800e048:	e884 0021 	stmia.w	r4, {r0, r5}
 800e04c:	6124      	str	r4, [r4, #16]
 800e04e:	f841 5c04 	str.w	r5, [r1, #-4]
 800e052:	f104 0108 	add.w	r1, r4, #8
 800e056:	b102      	cbz	r2, 800e05a <_AddFreeMemory+0x76>
 800e058:	6051      	str	r1, [r2, #4]
 800e05a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800e05e:	60e0      	str	r0, [r4, #12]
 800e060:	6059      	str	r1, [r3, #4]
 800e062:	6833      	ldr	r3, [r6, #0]
 800e064:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 800e068:	4a05      	ldr	r2, [pc, #20]	; (800e080 <_AddFreeMemory+0x9c>)
 800e06a:	442b      	add	r3, r5
 800e06c:	6033      	str	r3, [r6, #0]
 800e06e:	b929      	cbnz	r1, 800e07c <_AddFreeMemory+0x98>
 800e070:	68d1      	ldr	r1, [r2, #12]
 800e072:	1acb      	subs	r3, r1, r3
 800e074:	6891      	ldr	r1, [r2, #8]
 800e076:	4299      	cmp	r1, r3
 800e078:	bf38      	it	cc
 800e07a:	6093      	strcc	r3, [r2, #8]
 800e07c:	4628      	mov	r0, r5
 800e07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e080:	200056a4 	.word	0x200056a4

0800e084 <_RemoveHoles>:
 800e084:	4b25      	ldr	r3, [pc, #148]	; (800e11c <_RemoveHoles+0x98>)
 800e086:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e08a:	68da      	ldr	r2, [r3, #12]
 800e08c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800e08e:	3a01      	subs	r2, #1
 800e090:	4682      	mov	sl, r0
 800e092:	eb02 0904 	add.w	r9, r2, r4
 800e096:	469b      	mov	fp, r3
 800e098:	e894 0028 	ldmia.w	r4, {r3, r5}
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d133      	bne.n	800e108 <_RemoveHoles+0x84>
 800e0a0:	eb04 0805 	add.w	r8, r4, r5
 800e0a4:	45c8      	cmp	r8, r9
 800e0a6:	d22f      	bcs.n	800e108 <_RemoveHoles+0x84>
 800e0a8:	f854 c005 	ldr.w	ip, [r4, r5]
 800e0ac:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800e0b0:	f1bc 0f00 	cmp.w	ip, #0
 800e0b4:	d028      	beq.n	800e108 <_RemoveHoles+0x84>
 800e0b6:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800e0ba:	4f18      	ldr	r7, [pc, #96]	; (800e11c <_RemoveHoles+0x98>)
 800e0bc:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d121      	bne.n	800e108 <_RemoveHoles+0x84>
 800e0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	e88d 1008 	stmia.w	sp, {r3, ip}
 800e0cc:	f7ff ff6a 	bl	800dfa4 <_RemoveFreeBlock>
 800e0d0:	f8d8 1000 	ldr.w	r1, [r8]
 800e0d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0d6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e0da:	4620      	mov	r0, r4
 800e0dc:	6054      	str	r4, [r2, #4]
 800e0de:	4641      	mov	r1, r8
 800e0e0:	4632      	mov	r2, r6
 800e0e2:	f003 f9d9 	bl	8011498 <memmove>
 800e0e6:	e89d 1008 	ldmia.w	sp, {r3, ip}
 800e0ea:	459c      	cmp	ip, r3
 800e0ec:	d102      	bne.n	800e0f4 <_RemoveHoles+0x70>
 800e0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0f0:	1b5b      	subs	r3, r3, r5
 800e0f2:	637b      	str	r3, [r7, #52]	; 0x34
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	19a1      	adds	r1, r4, r6
 800e0f8:	f7ff ff74 	bl	800dfe4 <_AddFreeMemory>
 800e0fc:	f1ba 0f00 	cmp.w	sl, #0
 800e100:	d001      	beq.n	800e106 <_RemoveHoles+0x82>
 800e102:	4582      	cmp	sl, r0
 800e104:	d905      	bls.n	800e112 <_RemoveHoles+0x8e>
 800e106:	4635      	mov	r5, r6
 800e108:	442c      	add	r4, r5
 800e10a:	454c      	cmp	r4, r9
 800e10c:	d3c4      	bcc.n	800e098 <_RemoveHoles+0x14>
 800e10e:	2001      	movs	r0, #1
 800e110:	e000      	b.n	800e114 <_RemoveHoles+0x90>
 800e112:	2000      	movs	r0, #0
 800e114:	b003      	add	sp, #12
 800e116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e11a:	bf00      	nop
 800e11c:	200056a4 	.word	0x200056a4

0800e120 <GUI_ALLOC_FreeFixedBlock>:
 800e120:	b128      	cbz	r0, 800e12e <GUI_ALLOC_FreeFixedBlock+0xe>
 800e122:	4a03      	ldr	r2, [pc, #12]	; (800e130 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800e124:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800e126:	6003      	str	r3, [r0, #0]
 800e128:	b103      	cbz	r3, 800e12c <GUI_ALLOC_FreeFixedBlock+0xc>
 800e12a:	6058      	str	r0, [r3, #4]
 800e12c:	63d0      	str	r0, [r2, #60]	; 0x3c
 800e12e:	4770      	bx	lr
 800e130:	200056a4 	.word	0x200056a4

0800e134 <GUI_ALLOC_h2p>:
 800e134:	4b03      	ldr	r3, [pc, #12]	; (800e144 <GUI_ALLOC_h2p+0x10>)
 800e136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e138:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800e13c:	6840      	ldr	r0, [r0, #4]
 800e13e:	3008      	adds	r0, #8
 800e140:	4770      	bx	lr
 800e142:	bf00      	nop
 800e144:	200056a4 	.word	0x200056a4

0800e148 <GUI_ALLOC_LockH>:
 800e148:	4b05      	ldr	r3, [pc, #20]	; (800e160 <GUI_ALLOC_LockH+0x18>)
 800e14a:	69d9      	ldr	r1, [r3, #28]
 800e14c:	3101      	adds	r1, #1
 800e14e:	61d9      	str	r1, [r3, #28]
 800e150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e152:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 800e156:	3101      	adds	r1, #1
 800e158:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 800e15c:	f7ff bfea 	b.w	800e134 <GUI_ALLOC_h2p>
 800e160:	200056a4 	.word	0x200056a4

0800e164 <GUI_ALLOC_UnlockH>:
 800e164:	b530      	push	{r4, r5, lr}
 800e166:	6802      	ldr	r2, [r0, #0]
 800e168:	4b09      	ldr	r3, [pc, #36]	; (800e190 <GUI_ALLOC_UnlockH+0x2c>)
 800e16a:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800e16e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e170:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 800e174:	2c01      	cmp	r4, #1
 800e176:	d903      	bls.n	800e180 <GUI_ALLOC_UnlockH+0x1c>
 800e178:	69dd      	ldr	r5, [r3, #28]
 800e17a:	b10d      	cbz	r5, 800e180 <GUI_ALLOC_UnlockH+0x1c>
 800e17c:	3d01      	subs	r5, #1
 800e17e:	61dd      	str	r5, [r3, #28]
 800e180:	3c01      	subs	r4, #1
 800e182:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 800e186:	2300      	movs	r3, #0
 800e188:	6003      	str	r3, [r0, #0]
 800e18a:	4618      	mov	r0, r3
 800e18c:	bd30      	pop	{r4, r5, pc}
 800e18e:	bf00      	nop
 800e190:	200056a4 	.word	0x200056a4

0800e194 <GUI_ALLOC_AssignMemory>:
 800e194:	4b02      	ldr	r3, [pc, #8]	; (800e1a0 <GUI_ALLOC_AssignMemory+0xc>)
 800e196:	f021 0103 	bic.w	r1, r1, #3
 800e19a:	6018      	str	r0, [r3, #0]
 800e19c:	6059      	str	r1, [r3, #4]
 800e19e:	4770      	bx	lr
 800e1a0:	200055ac 	.word	0x200055ac

0800e1a4 <GUI_ALLOC_GetSize>:
 800e1a4:	b130      	cbz	r0, 800e1b4 <GUI_ALLOC_GetSize+0x10>
 800e1a6:	4b04      	ldr	r3, [pc, #16]	; (800e1b8 <GUI_ALLOC_GetSize+0x14>)
 800e1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1aa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800e1ae:	6843      	ldr	r3, [r0, #4]
 800e1b0:	6858      	ldr	r0, [r3, #4]
 800e1b2:	380c      	subs	r0, #12
 800e1b4:	4770      	bx	lr
 800e1b6:	bf00      	nop
 800e1b8:	200056a4 	.word	0x200056a4

0800e1bc <GUI_ALLOC_Free>:
 800e1bc:	b510      	push	{r4, lr}
 800e1be:	4604      	mov	r4, r0
 800e1c0:	b160      	cbz	r0, 800e1dc <GUI_ALLOC_Free+0x20>
 800e1c2:	4b07      	ldr	r3, [pc, #28]	; (800e1e0 <GUI_ALLOC_Free+0x24>)
 800e1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1c6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800e1ca:	6859      	ldr	r1, [r3, #4]
 800e1cc:	6848      	ldr	r0, [r1, #4]
 800e1ce:	f7ff ff09 	bl	800dfe4 <_AddFreeMemory>
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1d8:	f7ff bed2 	b.w	800df80 <_PushFreeBlock>
 800e1dc:	bd10      	pop	{r4, pc}
 800e1de:	bf00      	nop
 800e1e0:	200056a4 	.word	0x200056a4

0800e1e4 <_EnlargeBlocks>:
 800e1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e8:	4c23      	ldr	r4, [pc, #140]	; (800e278 <_EnlargeBlocks+0x94>)
 800e1ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e1ec:	b93b      	cbnz	r3, 800e1fe <_EnlargeBlocks+0x1a>
 800e1ee:	4b23      	ldr	r3, [pc, #140]	; (800e27c <_EnlargeBlocks+0x98>)
 800e1f0:	689d      	ldr	r5, [r3, #8]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	3508      	adds	r5, #8
 800e1f6:	fbb3 f5f5 	udiv	r5, r3, r5
 800e1fa:	3502      	adds	r5, #2
 800e1fc:	e003      	b.n	800e206 <_EnlargeBlocks+0x22>
 800e1fe:	6923      	ldr	r3, [r4, #16]
 800e200:	1d1d      	adds	r5, r3, #4
 800e202:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800e206:	00e8      	lsls	r0, r5, #3
 800e208:	f000 f8f4 	bl	800e3f4 <_Alloc>
 800e20c:	4680      	mov	r8, r0
 800e20e:	b368      	cbz	r0, 800e26c <_EnlargeBlocks+0x88>
 800e210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e212:	6922      	ldr	r2, [r4, #16]
 800e214:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e216:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800e21a:	00d2      	lsls	r2, r2, #3
 800e21c:	685e      	ldr	r6, [r3, #4]
 800e21e:	4b18      	ldr	r3, [pc, #96]	; (800e280 <_EnlargeBlocks+0x9c>)
 800e220:	3608      	adds	r6, #8
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4630      	mov	r0, r6
 800e226:	4798      	blx	r3
 800e228:	6922      	ldr	r2, [r4, #16]
 800e22a:	6366      	str	r6, [r4, #52]	; 0x34
 800e22c:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 800e230:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800e234:	3104      	adds	r1, #4
 800e236:	4613      	mov	r3, r2
 800e238:	1e68      	subs	r0, r5, #1
 800e23a:	4283      	cmp	r3, r0
 800e23c:	f101 0108 	add.w	r1, r1, #8
 800e240:	d203      	bcs.n	800e24a <_EnlargeBlocks+0x66>
 800e242:	3301      	adds	r3, #1
 800e244:	f841 3c08 	str.w	r3, [r1, #-8]
 800e248:	e7f6      	b.n	800e238 <_EnlargeBlocks+0x54>
 800e24a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800e24e:	2600      	movs	r6, #0
 800e250:	605e      	str	r6, [r3, #4]
 800e252:	6863      	ldr	r3, [r4, #4]
 800e254:	6262      	str	r2, [r4, #36]	; 0x24
 800e256:	1a9b      	subs	r3, r3, r2
 800e258:	442b      	add	r3, r5
 800e25a:	6063      	str	r3, [r4, #4]
 800e25c:	6125      	str	r5, [r4, #16]
 800e25e:	4638      	mov	r0, r7
 800e260:	b13f      	cbz	r7, 800e272 <_EnlargeBlocks+0x8e>
 800e262:	f7ff ffab 	bl	800e1bc <GUI_ALLOC_Free>
 800e266:	4630      	mov	r0, r6
 800e268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e26c:	2001      	movs	r0, #1
 800e26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e276:	bf00      	nop
 800e278:	200056a4 	.word	0x200056a4
 800e27c:	200055ac 	.word	0x200055ac
 800e280:	20000074 	.word	0x20000074

0800e284 <_InitOnce>:
 800e284:	b538      	push	{r3, r4, r5, lr}
 800e286:	4916      	ldr	r1, [pc, #88]	; (800e2e0 <_InitOnce+0x5c>)
 800e288:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800e28c:	bb3b      	cbnz	r3, 800e2de <_InitOnce+0x5a>
 800e28e:	4a15      	ldr	r2, [pc, #84]	; (800e2e4 <_InitOnce+0x60>)
 800e290:	2301      	movs	r3, #1
 800e292:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
 800e296:	6893      	ldr	r3, [r2, #8]
 800e298:	b913      	cbnz	r3, 800e2a0 <_InitOnce+0x1c>
 800e29a:	6853      	ldr	r3, [r2, #4]
 800e29c:	089b      	lsrs	r3, r3, #2
 800e29e:	6093      	str	r3, [r2, #8]
 800e2a0:	235a      	movs	r3, #90	; 0x5a
 800e2a2:	620b      	str	r3, [r1, #32]
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	2510      	movs	r5, #16
 800e2a8:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 800e2ac:	409d      	lsls	r5, r3
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	2b10      	cmp	r3, #16
 800e2b2:	4c0b      	ldr	r4, [pc, #44]	; (800e2e0 <_InitOnce+0x5c>)
 800e2b4:	6405      	str	r5, [r0, #64]	; 0x40
 800e2b6:	d1f6      	bne.n	800e2a6 <_InitOnce+0x22>
 800e2b8:	6850      	ldr	r0, [r2, #4]
 800e2ba:	6811      	ldr	r1, [r2, #0]
 800e2bc:	63a1      	str	r1, [r4, #56]	; 0x38
 800e2be:	2302      	movs	r3, #2
 800e2c0:	6123      	str	r3, [r4, #16]
 800e2c2:	f1a0 0314 	sub.w	r3, r0, #20
 800e2c6:	440b      	add	r3, r1
 800e2c8:	2501      	movs	r5, #1
 800e2ca:	6363      	str	r3, [r4, #52]	; 0x34
 800e2cc:	60e0      	str	r0, [r4, #12]
 800e2ce:	605d      	str	r5, [r3, #4]
 800e2d0:	6265      	str	r5, [r4, #36]	; 0x24
 800e2d2:	6065      	str	r5, [r4, #4]
 800e2d4:	f7ff fe86 	bl	800dfe4 <_AddFreeMemory>
 800e2d8:	f7ff ff84 	bl	800e1e4 <_EnlargeBlocks>
 800e2dc:	6325      	str	r5, [r4, #48]	; 0x30
 800e2de:	bd38      	pop	{r3, r4, r5, pc}
 800e2e0:	200056a4 	.word	0x200056a4
 800e2e4:	200055ac 	.word	0x200055ac

0800e2e8 <GUI_ALLOC_GetFixedBlock>:
 800e2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ec:	4605      	mov	r5, r0
 800e2ee:	4e26      	ldr	r6, [pc, #152]	; (800e388 <GUI_ALLOC_GetFixedBlock+0xa0>)
 800e2f0:	3503      	adds	r5, #3
 800e2f2:	f7ff ffc7 	bl	800e284 <_InitOnce>
 800e2f6:	f025 0503 	bic.w	r5, r5, #3
 800e2fa:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800e2fc:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800e2fe:	3504      	adds	r5, #4
 800e300:	429d      	cmp	r5, r3
 800e302:	bf38      	it	cc
 800e304:	461d      	movcc	r5, r3
 800e306:	4614      	mov	r4, r2
 800e308:	b12c      	cbz	r4, 800e316 <GUI_ALLOC_GetFixedBlock+0x2e>
 800e30a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e30e:	42ab      	cmp	r3, r5
 800e310:	d02c      	beq.n	800e36c <GUI_ALLOC_GetFixedBlock+0x84>
 800e312:	6824      	ldr	r4, [r4, #0]
 800e314:	e7f8      	b.n	800e308 <GUI_ALLOC_GetFixedBlock+0x20>
 800e316:	68f3      	ldr	r3, [r6, #12]
 800e318:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800e31a:	eb02 0803 	add.w	r8, r2, r3
 800e31e:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800e322:	ebc7 0708 	rsb	r7, r7, r8
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	b133      	cbz	r3, 800e338 <GUI_ALLOC_GetFixedBlock+0x50>
 800e32a:	4620      	mov	r0, r4
 800e32c:	f7ff feaa 	bl	800e084 <_RemoveHoles>
 800e330:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800e334:	ebc7 0708 	rsb	r7, r7, r8
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	bb13      	cbnz	r3, 800e382 <GUI_ALLOC_GetFixedBlock+0x9a>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	42ab      	cmp	r3, r5
 800e340:	db1f      	blt.n	800e382 <GUI_ALLOC_GetFixedBlock+0x9a>
 800e342:	4638      	mov	r0, r7
 800e344:	1d1c      	adds	r4, r3, #4
 800e346:	f7ff fe2d 	bl	800dfa4 <_RemoveFreeBlock>
 800e34a:	68f3      	ldr	r3, [r6, #12]
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	1b5b      	subs	r3, r3, r5
 800e350:	60f3      	str	r3, [r6, #12]
 800e352:	6973      	ldr	r3, [r6, #20]
 800e354:	1b64      	subs	r4, r4, r5
 800e356:	442b      	add	r3, r5
 800e358:	1b40      	subs	r0, r0, r5
 800e35a:	443c      	add	r4, r7
 800e35c:	6173      	str	r3, [r6, #20]
 800e35e:	d002      	beq.n	800e366 <GUI_ALLOC_GetFixedBlock+0x7e>
 800e360:	4639      	mov	r1, r7
 800e362:	f7ff fe3f 	bl	800dfe4 <_AddFreeMemory>
 800e366:	f844 5c04 	str.w	r5, [r4, #-4]
 800e36a:	e00a      	b.n	800e382 <GUI_ALLOC_GetFixedBlock+0x9a>
 800e36c:	6823      	ldr	r3, [r4, #0]
 800e36e:	b10b      	cbz	r3, 800e374 <GUI_ALLOC_GetFixedBlock+0x8c>
 800e370:	6861      	ldr	r1, [r4, #4]
 800e372:	6059      	str	r1, [r3, #4]
 800e374:	6861      	ldr	r1, [r4, #4]
 800e376:	b101      	cbz	r1, 800e37a <GUI_ALLOC_GetFixedBlock+0x92>
 800e378:	600b      	str	r3, [r1, #0]
 800e37a:	42a2      	cmp	r2, r4
 800e37c:	d101      	bne.n	800e382 <GUI_ALLOC_GetFixedBlock+0x9a>
 800e37e:	6823      	ldr	r3, [r4, #0]
 800e380:	63f3      	str	r3, [r6, #60]	; 0x3c
 800e382:	4620      	mov	r0, r4
 800e384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e388:	200056a4 	.word	0x200056a4

0800e38c <GUI_ALLOC_GetMaxSize>:
 800e38c:	b508      	push	{r3, lr}
 800e38e:	f7ff ff79 	bl	800e284 <_InitOnce>
 800e392:	2200      	movs	r2, #0
 800e394:	4b0b      	ldr	r3, [pc, #44]	; (800e3c4 <GUI_ALLOC_GetMaxSize+0x38>)
 800e396:	4413      	add	r3, r2
 800e398:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e39c:	b113      	cbz	r3, 800e3a4 <GUI_ALLOC_GetMaxSize+0x18>
 800e39e:	689b      	ldr	r3, [r3, #8]
 800e3a0:	2000      	movs	r0, #0
 800e3a2:	e00b      	b.n	800e3bc <GUI_ALLOC_GetMaxSize+0x30>
 800e3a4:	3a08      	subs	r2, #8
 800e3a6:	f112 0f80 	cmn.w	r2, #128	; 0x80
 800e3aa:	d1f3      	bne.n	800e394 <GUI_ALLOC_GetMaxSize+0x8>
 800e3ac:	e7f8      	b.n	800e3a0 <GUI_ALLOC_GetMaxSize+0x14>
 800e3ae:	685a      	ldr	r2, [r3, #4]
 800e3b0:	689b      	ldr	r3, [r3, #8]
 800e3b2:	4290      	cmp	r0, r2
 800e3b4:	bf38      	it	cc
 800e3b6:	4610      	movcc	r0, r2
 800e3b8:	b113      	cbz	r3, 800e3c0 <GUI_ALLOC_GetMaxSize+0x34>
 800e3ba:	689b      	ldr	r3, [r3, #8]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d1f6      	bne.n	800e3ae <GUI_ALLOC_GetMaxSize+0x22>
 800e3c0:	380c      	subs	r0, #12
 800e3c2:	bd08      	pop	{r3, pc}
 800e3c4:	200056a4 	.word	0x200056a4

0800e3c8 <GUI_ALLOC_RequestSize>:
 800e3c8:	b508      	push	{r3, lr}
 800e3ca:	f7ff ffdf 	bl	800e38c <GUI_ALLOC_GetMaxSize>
 800e3ce:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800e3d2:	f04f 0364 	mov.w	r3, #100	; 0x64
 800e3d6:	4a06      	ldr	r2, [pc, #24]	; (800e3f0 <GUI_ALLOC_RequestSize+0x28>)
 800e3d8:	d904      	bls.n	800e3e4 <GUI_ALLOC_RequestSize+0x1c>
 800e3da:	fb90 f0f3 	sdiv	r0, r0, r3
 800e3de:	6a13      	ldr	r3, [r2, #32]
 800e3e0:	4358      	muls	r0, r3
 800e3e2:	bd08      	pop	{r3, pc}
 800e3e4:	6a12      	ldr	r2, [r2, #32]
 800e3e6:	4350      	muls	r0, r2
 800e3e8:	fbb0 f0f3 	udiv	r0, r0, r3
 800e3ec:	bd08      	pop	{r3, pc}
 800e3ee:	bf00      	nop
 800e3f0:	200056a4 	.word	0x200056a4

0800e3f4 <_Alloc>:
 800e3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3f8:	4d38      	ldr	r5, [pc, #224]	; (800e4dc <_Alloc+0xe8>)
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	f7ff ff42 	bl	800e284 <_InitOnce>
 800e400:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800e402:	682b      	ldr	r3, [r5, #0]
 800e404:	42bc      	cmp	r4, r7
 800e406:	bf24      	itt	cs
 800e408:	1ce7      	addcs	r7, r4, #3
 800e40a:	f027 0703 	biccs.w	r7, r7, #3
 800e40e:	370c      	adds	r7, #12
 800e410:	429f      	cmp	r7, r3
 800e412:	4c32      	ldr	r4, [pc, #200]	; (800e4dc <_Alloc+0xe8>)
 800e414:	d83e      	bhi.n	800e494 <_Alloc+0xa0>
 800e416:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e418:	6862      	ldr	r2, [r4, #4]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d90f      	bls.n	800e43e <_Alloc+0x4a>
 800e41e:	686b      	ldr	r3, [r5, #4]
 800e420:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800e422:	3b01      	subs	r3, #1
 800e424:	606b      	str	r3, [r5, #4]
 800e426:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e428:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800e42c:	eb03 0209 	add.w	r2, r3, r9
 800e430:	6852      	ldr	r2, [r2, #4]
 800e432:	626a      	str	r2, [r5, #36]	; 0x24
 800e434:	2201      	movs	r2, #1
 800e436:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 800e43a:	b956      	cbnz	r6, 800e452 <_Alloc+0x5e>
 800e43c:	e02a      	b.n	800e494 <_Alloc+0xa0>
 800e43e:	3b01      	subs	r3, #1
 800e440:	6323      	str	r3, [r4, #48]	; 0x30
 800e442:	f7ff fecf 	bl	800e1e4 <_EnlargeBlocks>
 800e446:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e448:	3301      	adds	r3, #1
 800e44a:	6323      	str	r3, [r4, #48]	; 0x30
 800e44c:	2800      	cmp	r0, #0
 800e44e:	d0e6      	beq.n	800e41e <_Alloc+0x2a>
 800e450:	e020      	b.n	800e494 <_Alloc+0xa0>
 800e452:	230f      	movs	r3, #15
 800e454:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800e458:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e45a:	4297      	cmp	r7, r2
 800e45c:	d20c      	bcs.n	800e478 <_Alloc+0x84>
 800e45e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800e462:	d2f7      	bcs.n	800e454 <_Alloc+0x60>
 800e464:	e008      	b.n	800e478 <_Alloc+0x84>
 800e466:	6894      	ldr	r4, [r2, #8]
 800e468:	b12c      	cbz	r4, 800e476 <_Alloc+0x82>
 800e46a:	6862      	ldr	r2, [r4, #4]
 800e46c:	4297      	cmp	r7, r2
 800e46e:	d914      	bls.n	800e49a <_Alloc+0xa6>
 800e470:	68a2      	ldr	r2, [r4, #8]
 800e472:	2a00      	cmp	r2, #0
 800e474:	d1f7      	bne.n	800e466 <_Alloc+0x72>
 800e476:	3301      	adds	r3, #1
 800e478:	2b0f      	cmp	r3, #15
 800e47a:	d803      	bhi.n	800e484 <_Alloc+0x90>
 800e47c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800e480:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e482:	e7f6      	b.n	800e472 <_Alloc+0x7e>
 800e484:	4638      	mov	r0, r7
 800e486:	f7ff fdfd 	bl	800e084 <_RemoveHoles>
 800e48a:	2800      	cmp	r0, #0
 800e48c:	d0e1      	beq.n	800e452 <_Alloc+0x5e>
 800e48e:	4630      	mov	r0, r6
 800e490:	f7ff fd76 	bl	800df80 <_PushFreeBlock>
 800e494:	2000      	movs	r0, #0
 800e496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e49a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e49e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800e4a0:	ebc7 0208 	rsb	r2, r7, r8
 800e4a4:	330c      	adds	r3, #12
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	bf38      	it	cc
 800e4ac:	4647      	movcc	r7, r8
 800e4ae:	f7ff fd79 	bl	800dfa4 <_RemoveFreeBlock>
 800e4b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e4b4:	444b      	add	r3, r9
 800e4b6:	19e1      	adds	r1, r4, r7
 800e4b8:	605c      	str	r4, [r3, #4]
 800e4ba:	45b8      	cmp	r8, r7
 800e4bc:	f04f 0300 	mov.w	r3, #0
 800e4c0:	e884 00c0 	stmia.w	r4, {r6, r7}
 800e4c4:	60a3      	str	r3, [r4, #8]
 800e4c6:	6124      	str	r4, [r4, #16]
 800e4c8:	f841 7c04 	str.w	r7, [r1, #-4]
 800e4cc:	dd03      	ble.n	800e4d6 <_Alloc+0xe2>
 800e4ce:	ebc7 0008 	rsb	r0, r7, r8
 800e4d2:	f7ff fd87 	bl	800dfe4 <_AddFreeMemory>
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4dc:	200056a4 	.word	0x200056a4

0800e4e0 <GUI_ALLOC_AllocNoInit>:
 800e4e0:	b108      	cbz	r0, 800e4e6 <GUI_ALLOC_AllocNoInit+0x6>
 800e4e2:	f7ff bf87 	b.w	800e3f4 <_Alloc>
 800e4e6:	4770      	bx	lr

0800e4e8 <GUI_ALLOC_FreePtr>:
 800e4e8:	b510      	push	{r4, lr}
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	6800      	ldr	r0, [r0, #0]
 800e4ee:	f7ff fe65 	bl	800e1bc <GUI_ALLOC_Free>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	6023      	str	r3, [r4, #0]
 800e4f6:	bd10      	pop	{r4, pc}

0800e4f8 <GUI_ALLOC_AllocZero>:
 800e4f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e4fa:	4605      	mov	r5, r0
 800e4fc:	f7ff fff0 	bl	800e4e0 <GUI_ALLOC_AllocNoInit>
 800e500:	4606      	mov	r6, r0
 800e502:	b160      	cbz	r0, 800e51e <GUI_ALLOC_AllocZero+0x26>
 800e504:	f7ff fe20 	bl	800e148 <GUI_ALLOC_LockH>
 800e508:	ac02      	add	r4, sp, #8
 800e50a:	4b06      	ldr	r3, [pc, #24]	; (800e524 <GUI_ALLOC_AllocZero+0x2c>)
 800e50c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	2100      	movs	r1, #0
 800e514:	462a      	mov	r2, r5
 800e516:	4798      	blx	r3
 800e518:	4620      	mov	r0, r4
 800e51a:	f7ff fe23 	bl	800e164 <GUI_ALLOC_UnlockH>
 800e51e:	4630      	mov	r0, r6
 800e520:	b002      	add	sp, #8
 800e522:	bd70      	pop	{r4, r5, r6, pc}
 800e524:	20000070 	.word	0x20000070

0800e528 <LCD_Index2Color_M555>:
 800e528:	4b07      	ldr	r3, [pc, #28]	; (800e548 <LCD_Index2Color_M555+0x20>)
 800e52a:	f000 021f 	and.w	r2, r0, #31
 800e52e:	5c99      	ldrb	r1, [r3, r2]
 800e530:	f3c0 2284 	ubfx	r2, r0, #10, #5
 800e534:	f3c0 1044 	ubfx	r0, r0, #5, #5
 800e538:	5c9a      	ldrb	r2, [r3, r2]
 800e53a:	5c18      	ldrb	r0, [r3, r0]
 800e53c:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 800e540:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800e544:	4770      	bx	lr
 800e546:	bf00      	nop
 800e548:	080146de 	.word	0x080146de

0800e54c <LCD_Index2Color_888>:
 800e54c:	4770      	bx	lr

0800e54e <LCD_Index2Color_8888>:
 800e54e:	4770      	bx	lr

0800e550 <_Color2Index_8888>:
 800e550:	4770      	bx	lr

0800e552 <_GetIndexMask_8888>:
 800e552:	f04f 30ff 	mov.w	r0, #4294967295
 800e556:	4770      	bx	lr

0800e558 <_Color2IndexBulk>:
 800e558:	b510      	push	{r4, lr}
 800e55a:	f850 4b04 	ldr.w	r4, [r0], #4
 800e55e:	600c      	str	r4, [r1, #0]
 800e560:	3a01      	subs	r2, #1
 800e562:	4419      	add	r1, r3
 800e564:	d1f9      	bne.n	800e55a <_Color2IndexBulk+0x2>
 800e566:	bd10      	pop	{r4, pc}

0800e568 <_Index2ColorBulk>:
 800e568:	b510      	push	{r4, lr}
 800e56a:	6804      	ldr	r4, [r0, #0]
 800e56c:	f841 4b04 	str.w	r4, [r1], #4
 800e570:	3a01      	subs	r2, #1
 800e572:	4418      	add	r0, r3
 800e574:	d1f9      	bne.n	800e56a <_Index2ColorBulk+0x2>
 800e576:	bd10      	pop	{r4, pc}

0800e578 <LCD_Index2Color_565>:
 800e578:	f3c0 1345 	ubfx	r3, r0, #5, #6
 800e57c:	4a06      	ldr	r2, [pc, #24]	; (800e598 <LCD_Index2Color_565+0x20>)
 800e57e:	5cd1      	ldrb	r1, [r2, r3]
 800e580:	4b06      	ldr	r3, [pc, #24]	; (800e59c <LCD_Index2Color_565+0x24>)
 800e582:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 800e586:	f000 001f 	and.w	r0, r0, #31
 800e58a:	5c9a      	ldrb	r2, [r3, r2]
 800e58c:	5c18      	ldrb	r0, [r3, r0]
 800e58e:	0412      	lsls	r2, r2, #16
 800e590:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800e594:	4410      	add	r0, r2
 800e596:	4770      	bx	lr
 800e598:	080146fe 	.word	0x080146fe
 800e59c:	080146de 	.word	0x080146de

0800e5a0 <_Color2Index_565>:
 800e5a0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e5a4:	4a06      	ldr	r2, [pc, #24]	; (800e5c0 <_Color2Index_565+0x20>)
 800e5a6:	5cd1      	ldrb	r1, [r2, r3]
 800e5a8:	4b06      	ldr	r3, [pc, #24]	; (800e5c4 <_Color2Index_565+0x24>)
 800e5aa:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800e5ae:	b2c0      	uxtb	r0, r0
 800e5b0:	5c9a      	ldrb	r2, [r3, r2]
 800e5b2:	5c18      	ldrb	r0, [r3, r0]
 800e5b4:	02d2      	lsls	r2, r2, #11
 800e5b6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800e5ba:	4410      	add	r0, r2
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	0801473e 	.word	0x0801473e
 800e5c4:	080145de 	.word	0x080145de

0800e5c8 <_GetIndexMask_565>:
 800e5c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e5cc:	4770      	bx	lr
	...

0800e5d0 <_Color2IndexBulk>:
 800e5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5d2:	f850 4b04 	ldr.w	r4, [r0], #4
 800e5d6:	4e0a      	ldr	r6, [pc, #40]	; (800e600 <_Color2IndexBulk+0x30>)
 800e5d8:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800e5dc:	3a01      	subs	r2, #1
 800e5de:	5d77      	ldrb	r7, [r6, r5]
 800e5e0:	4d08      	ldr	r5, [pc, #32]	; (800e604 <_Color2IndexBulk+0x34>)
 800e5e2:	f3c4 4607 	ubfx	r6, r4, #16, #8
 800e5e6:	b2e4      	uxtb	r4, r4
 800e5e8:	5dae      	ldrb	r6, [r5, r6]
 800e5ea:	5d2c      	ldrb	r4, [r5, r4]
 800e5ec:	ea4f 26c6 	mov.w	r6, r6, lsl #11
 800e5f0:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 800e5f4:	4434      	add	r4, r6
 800e5f6:	800c      	strh	r4, [r1, #0]
 800e5f8:	4419      	add	r1, r3
 800e5fa:	d1ea      	bne.n	800e5d2 <_Color2IndexBulk+0x2>
 800e5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5fe:	bf00      	nop
 800e600:	0801473e 	.word	0x0801473e
 800e604:	080145de 	.word	0x080145de

0800e608 <_Index2ColorBulk>:
 800e608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e60a:	1e54      	subs	r4, r2, #1
 800e60c:	fb03 0004 	mla	r0, r3, r4, r0
 800e610:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 800e614:	3c01      	subs	r4, #1
 800e616:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e61a:	8805      	ldrh	r5, [r0, #0]
 800e61c:	4c0a      	ldr	r4, [pc, #40]	; (800e648 <_Index2ColorBulk+0x40>)
 800e61e:	0aee      	lsrs	r6, r5, #11
 800e620:	f005 071f 	and.w	r7, r5, #31
 800e624:	5da6      	ldrb	r6, [r4, r6]
 800e626:	5de4      	ldrb	r4, [r4, r7]
 800e628:	f3c5 1545 	ubfx	r5, r5, #5, #6
 800e62c:	eb04 4406 	add.w	r4, r4, r6, lsl #16
 800e630:	4e06      	ldr	r6, [pc, #24]	; (800e64c <_Index2ColorBulk+0x44>)
 800e632:	5d75      	ldrb	r5, [r6, r5]
 800e634:	3a01      	subs	r2, #1
 800e636:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 800e63a:	f841 4904 	str.w	r4, [r1], #-4
 800e63e:	ebc3 0000 	rsb	r0, r3, r0
 800e642:	d1ea      	bne.n	800e61a <_Index2ColorBulk+0x12>
 800e644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e646:	bf00      	nop
 800e648:	080146de 	.word	0x080146de
 800e64c:	080146fe 	.word	0x080146fe

0800e650 <WIDGET__GetInsideRect>:
 800e650:	b538      	push	{r3, r4, r5, lr}
 800e652:	4604      	mov	r4, r0
 800e654:	460d      	mov	r5, r1
 800e656:	f7f9 fe55 	bl	8008304 <WM__GetClientRectWin>
 800e65a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e65c:	4628      	mov	r0, r5
 800e65e:	4629      	mov	r1, r5
 800e660:	681a      	ldr	r2, [r3, #0]
 800e662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e666:	f7fd bae2 	b.w	800bc2e <GUI__ReduceRect>
	...

0800e66c <WIDGET__Init>:
 800e66c:	4b02      	ldr	r3, [pc, #8]	; (800e678 <WIDGET__Init+0xc>)
 800e66e:	8642      	strh	r2, [r0, #50]	; 0x32
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	62c3      	str	r3, [r0, #44]	; 0x2c
 800e674:	8601      	strh	r1, [r0, #48]	; 0x30
 800e676:	4770      	bx	lr
 800e678:	200000a8 	.word	0x200000a8

0800e67c <WIDGET_SetState>:
 800e67c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e67e:	460c      	mov	r4, r1
 800e680:	4605      	mov	r5, r0
 800e682:	f7ff fd61 	bl	800e148 <GUI_ALLOC_LockH>
 800e686:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800e688:	9001      	str	r0, [sp, #4]
 800e68a:	4294      	cmp	r4, r2
 800e68c:	d003      	beq.n	800e696 <WIDGET_SetState+0x1a>
 800e68e:	8644      	strh	r4, [r0, #50]	; 0x32
 800e690:	4628      	mov	r0, r5
 800e692:	f7f9 ff81 	bl	8008598 <WM_InvalidateWindow>
 800e696:	a801      	add	r0, sp, #4
 800e698:	f7ff fd64 	bl	800e164 <GUI_ALLOC_UnlockH>
 800e69c:	b003      	add	sp, #12
 800e69e:	bd30      	pop	{r4, r5, pc}

0800e6a0 <WIDGET_OrState>:
 800e6a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6a2:	460c      	mov	r4, r1
 800e6a4:	4605      	mov	r5, r0
 800e6a6:	b178      	cbz	r0, 800e6c8 <WIDGET_OrState+0x28>
 800e6a8:	f7ff fd4e 	bl	800e148 <GUI_ALLOC_LockH>
 800e6ac:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800e6ae:	9001      	str	r0, [sp, #4]
 800e6b0:	ea04 0102 	and.w	r1, r4, r2
 800e6b4:	428c      	cmp	r4, r1
 800e6b6:	d004      	beq.n	800e6c2 <WIDGET_OrState+0x22>
 800e6b8:	4314      	orrs	r4, r2
 800e6ba:	8644      	strh	r4, [r0, #50]	; 0x32
 800e6bc:	4628      	mov	r0, r5
 800e6be:	f7f9 ff6b 	bl	8008598 <WM_InvalidateWindow>
 800e6c2:	a801      	add	r0, sp, #4
 800e6c4:	f7ff fd4e 	bl	800e164 <GUI_ALLOC_UnlockH>
 800e6c8:	b003      	add	sp, #12
 800e6ca:	bd30      	pop	{r4, r5, pc}

0800e6cc <WIDGET_HandleActive>:
 800e6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ce:	460d      	mov	r5, r1
 800e6d0:	b085      	sub	sp, #20
 800e6d2:	4606      	mov	r6, r0
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	f000 8095 	beq.w	800e804 <WIDGET_HandleActive+0x138>
 800e6da:	f7ff fd35 	bl	800e148 <GUI_ALLOC_LockH>
 800e6de:	682b      	ldr	r3, [r5, #0]
 800e6e0:	9002      	str	r0, [sp, #8]
 800e6e2:	2b16      	cmp	r3, #22
 800e6e4:	d054      	beq.n	800e790 <WIDGET_HandleActive+0xc4>
 800e6e6:	dc0c      	bgt.n	800e702 <WIDGET_HandleActive+0x36>
 800e6e8:	2b11      	cmp	r3, #17
 800e6ea:	d033      	beq.n	800e754 <WIDGET_HandleActive+0x88>
 800e6ec:	dc02      	bgt.n	800e6f4 <WIDGET_HandleActive+0x28>
 800e6ee:	2b0d      	cmp	r3, #13
 800e6f0:	d040      	beq.n	800e774 <WIDGET_HandleActive+0xa8>
 800e6f2:	e080      	b.n	800e7f6 <WIDGET_HandleActive+0x12a>
 800e6f4:	2b14      	cmp	r3, #20
 800e6f6:	d079      	beq.n	800e7ec <WIDGET_HandleActive+0x120>
 800e6f8:	2b15      	cmp	r3, #21
 800e6fa:	d17c      	bne.n	800e7f6 <WIDGET_HandleActive+0x12a>
 800e6fc:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 800e700:	e072      	b.n	800e7e8 <WIDGET_HandleActive+0x11c>
 800e702:	2b1f      	cmp	r3, #31
 800e704:	d06d      	beq.n	800e7e2 <WIDGET_HandleActive+0x116>
 800e706:	dc02      	bgt.n	800e70e <WIDGET_HandleActive+0x42>
 800e708:	2b1e      	cmp	r3, #30
 800e70a:	d044      	beq.n	800e796 <WIDGET_HandleActive+0xca>
 800e70c:	e073      	b.n	800e7f6 <WIDGET_HandleActive+0x12a>
 800e70e:	2b31      	cmp	r3, #49	; 0x31
 800e710:	d01e      	beq.n	800e750 <WIDGET_HandleActive+0x84>
 800e712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e716:	d16e      	bne.n	800e7f6 <WIDGET_HandleActive+0x12a>
 800e718:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e71a:	6819      	ldr	r1, [r3, #0]
 800e71c:	68eb      	ldr	r3, [r5, #12]
 800e71e:	62c3      	str	r3, [r0, #44]	; 0x2c
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	a802      	add	r0, sp, #8
 800e724:	1acd      	subs	r5, r1, r3
 800e726:	f7ff fd1d 	bl	800e164 <GUI_ALLOC_UnlockH>
 800e72a:	4630      	mov	r0, r6
 800e72c:	f7ff fd0c 	bl	800e148 <GUI_ALLOC_LockH>
 800e730:	ac04      	add	r4, sp, #16
 800e732:	4269      	negs	r1, r5
 800e734:	f844 0d04 	str.w	r0, [r4, #-4]!
 800e738:	460a      	mov	r2, r1
 800e73a:	462b      	mov	r3, r5
 800e73c:	9500      	str	r5, [sp, #0]
 800e73e:	f7f8 fced 	bl	800711c <WM__UpdateChildPositions>
 800e742:	4620      	mov	r0, r4
 800e744:	f7ff fd0e 	bl	800e164 <GUI_ALLOC_UnlockH>
 800e748:	4630      	mov	r0, r6
 800e74a:	f7f9 ff25 	bl	8008598 <WM_InvalidateWindow>
 800e74e:	e050      	b.n	800e7f2 <WIDGET_HandleActive+0x126>
 800e750:	2400      	movs	r4, #0
 800e752:	e041      	b.n	800e7d8 <WIDGET_HandleActive+0x10c>
 800e754:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800e756:	06d9      	lsls	r1, r3, #27
 800e758:	d54d      	bpl.n	800e7f6 <WIDGET_HandleActive+0x12a>
 800e75a:	68eb      	ldr	r3, [r5, #12]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d04a      	beq.n	800e7f6 <WIDGET_HandleActive+0x12a>
 800e760:	7a1b      	ldrb	r3, [r3, #8]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d047      	beq.n	800e7f6 <WIDGET_HandleActive+0x12a>
 800e766:	a802      	add	r0, sp, #8
 800e768:	f7ff fcfc 	bl	800e164 <GUI_ALLOC_UnlockH>
 800e76c:	4630      	mov	r0, r6
 800e76e:	f7f9 f8f7 	bl	8007960 <WM_SetFocus>
 800e772:	e040      	b.n	800e7f6 <WIDGET_HandleActive+0x12a>
 800e774:	68eb      	ldr	r3, [r5, #12]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d03c      	beq.n	800e7f6 <WIDGET_HandleActive+0x12a>
 800e77c:	7a1b      	ldrb	r3, [r3, #8]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d039      	beq.n	800e7f6 <WIDGET_HandleActive+0x12a>
 800e782:	a802      	add	r0, sp, #8
 800e784:	f7ff fcee 	bl	800e164 <GUI_ALLOC_UnlockH>
 800e788:	4630      	mov	r0, r6
 800e78a:	f7f9 f9e1 	bl	8007b50 <WM_BringToTop>
 800e78e:	e030      	b.n	800e7f2 <WIDGET_HandleActive+0x126>
 800e790:	68eb      	ldr	r3, [r5, #12]
 800e792:	8603      	strh	r3, [r0, #48]	; 0x30
 800e794:	e02d      	b.n	800e7f2 <WIDGET_HandleActive+0x126>
 800e796:	68eb      	ldr	r3, [r5, #12]
 800e798:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	d108      	bne.n	800e7b0 <WIDGET_HandleActive+0xe4>
 800e79e:	06ca      	lsls	r2, r1, #27
 800e7a0:	d50d      	bpl.n	800e7be <WIDGET_HandleActive+0xf2>
 800e7a2:	4630      	mov	r0, r6
 800e7a4:	f041 0101 	orr.w	r1, r1, #1
 800e7a8:	f7ff ff68 	bl	800e67c <WIDGET_SetState>
 800e7ac:	2708      	movs	r7, #8
 800e7ae:	e008      	b.n	800e7c2 <WIDGET_HandleActive+0xf6>
 800e7b0:	f021 0101 	bic.w	r1, r1, #1
 800e7b4:	4630      	mov	r0, r6
 800e7b6:	f7ff ff61 	bl	800e67c <WIDGET_SetState>
 800e7ba:	2709      	movs	r7, #9
 800e7bc:	e001      	b.n	800e7c2 <WIDGET_HandleActive+0xf6>
 800e7be:	f04f 37ff 	mov.w	r7, #4294967295
 800e7c2:	a802      	add	r0, sp, #8
 800e7c4:	f7ff fcce 	bl	800e164 <GUI_ALLOC_UnlockH>
 800e7c8:	1c7b      	adds	r3, r7, #1
 800e7ca:	f04f 0400 	mov.w	r4, #0
 800e7ce:	d005      	beq.n	800e7dc <WIDGET_HandleActive+0x110>
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	4639      	mov	r1, r7
 800e7d4:	f7f9 f8b9 	bl	800794a <WM_NotifyParent>
 800e7d8:	60ec      	str	r4, [r5, #12]
 800e7da:	e00d      	b.n	800e7f8 <WIDGET_HandleActive+0x12c>
 800e7dc:	2301      	movs	r3, #1
 800e7de:	60eb      	str	r3, [r5, #12]
 800e7e0:	e00a      	b.n	800e7f8 <WIDGET_HandleActive+0x12c>
 800e7e2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800e7e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e7e8:	60eb      	str	r3, [r5, #12]
 800e7ea:	e002      	b.n	800e7f2 <WIDGET_HandleActive+0x126>
 800e7ec:	68e9      	ldr	r1, [r5, #12]
 800e7ee:	f7ff ff2f 	bl	800e650 <WIDGET__GetInsideRect>
 800e7f2:	2400      	movs	r4, #0
 800e7f4:	e000      	b.n	800e7f8 <WIDGET_HandleActive+0x12c>
 800e7f6:	2401      	movs	r4, #1
 800e7f8:	9b02      	ldr	r3, [sp, #8]
 800e7fa:	b123      	cbz	r3, 800e806 <WIDGET_HandleActive+0x13a>
 800e7fc:	a802      	add	r0, sp, #8
 800e7fe:	f7ff fcb1 	bl	800e164 <GUI_ALLOC_UnlockH>
 800e802:	e000      	b.n	800e806 <WIDGET_HandleActive+0x13a>
 800e804:	2401      	movs	r4, #1
 800e806:	4620      	mov	r0, r4
 800e808:	b005      	add	sp, #20
 800e80a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e80c <FRAMEWIN_DrawSkinFlex>:
 800e80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e810:	4604      	mov	r4, r0
 800e812:	b090      	sub	sp, #64	; 0x40
 800e814:	6800      	ldr	r0, [r0, #0]
 800e816:	4d9b      	ldr	r5, [pc, #620]	; (800ea84 <FRAMEWIN_DrawSkinFlex+0x278>)
 800e818:	f7f8 fb70 	bl	8006efc <FRAMEWIN_GetActive>
 800e81c:	4b9a      	ldr	r3, [pc, #616]	; (800ea88 <FRAMEWIN_DrawSkinFlex+0x27c>)
 800e81e:	6866      	ldr	r6, [r4, #4]
 800e820:	2800      	cmp	r0, #0
 800e822:	bf18      	it	ne
 800e824:	461d      	movne	r5, r3
 800e826:	2e1c      	cmp	r6, #28
 800e828:	f200 81a6 	bhi.w	800eb78 <FRAMEWIN_DrawSkinFlex+0x36c>
 800e82c:	e8df f016 	tbh	[pc, r6, lsl #1]
 800e830:	01a40191 	.word	0x01a40191
 800e834:	01a401a4 	.word	0x01a401a4
 800e838:	012e01a4 	.word	0x012e01a4
 800e83c:	01a401a4 	.word	0x01a401a4
 800e840:	01a401a4 	.word	0x01a401a4
 800e844:	002701a4 	.word	0x002701a4
 800e848:	01a401a4 	.word	0x01a401a4
 800e84c:	01a4017e 	.word	0x01a4017e
 800e850:	01a401a4 	.word	0x01a401a4
 800e854:	01a40145 	.word	0x01a40145
 800e858:	002301a4 	.word	0x002301a4
 800e85c:	001f001d 	.word	0x001f001d
 800e860:	01a40021 	.word	0x01a40021
 800e864:	01a401a4 	.word	0x01a401a4
 800e868:	0025      	.short	0x0025
 800e86a:	69ee      	ldr	r6, [r5, #28]
 800e86c:	e189      	b.n	800eb82 <FRAMEWIN_DrawSkinFlex+0x376>
 800e86e:	6a2e      	ldr	r6, [r5, #32]
 800e870:	e187      	b.n	800eb82 <FRAMEWIN_DrawSkinFlex+0x376>
 800e872:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800e874:	e185      	b.n	800eb82 <FRAMEWIN_DrawSkinFlex+0x376>
 800e876:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800e878:	e183      	b.n	800eb82 <FRAMEWIN_DrawSkinFlex+0x376>
 800e87a:	696e      	ldr	r6, [r5, #20]
 800e87c:	e181      	b.n	800eb82 <FRAMEWIN_DrawSkinFlex+0x376>
 800e87e:	231c      	movs	r3, #28
 800e880:	6820      	ldr	r0, [r4, #0]
 800e882:	9308      	str	r3, [sp, #32]
 800e884:	9007      	str	r0, [sp, #28]
 800e886:	f7ff fc5f 	bl	800e148 <GUI_ALLOC_LockH>
 800e88a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e88c:	9005      	str	r0, [sp, #20]
 800e88e:	a807      	add	r0, sp, #28
 800e890:	4798      	blx	r3
 800e892:	4606      	mov	r6, r0
 800e894:	a805      	add	r0, sp, #20
 800e896:	f7ff fc65 	bl	800e164 <GUI_ALLOC_UnlockH>
 800e89a:	2e01      	cmp	r6, #1
 800e89c:	dd11      	ble.n	800e8c2 <FRAMEWIN_DrawSkinFlex+0xb6>
 800e89e:	682b      	ldr	r3, [r5, #0]
 800e8a0:	9300      	str	r3, [sp, #0]
 800e8a2:	686b      	ldr	r3, [r5, #4]
 800e8a4:	9301      	str	r3, [sp, #4]
 800e8a6:	68ab      	ldr	r3, [r5, #8]
 800e8a8:	9302      	str	r3, [sp, #8]
 800e8aa:	6920      	ldr	r0, [r4, #16]
 800e8ac:	69a1      	ldr	r1, [r4, #24]
 800e8ae:	6962      	ldr	r2, [r4, #20]
 800e8b0:	4633      	mov	r3, r6
 800e8b2:	f002 f8c7 	bl	8010a44 <GUI__DrawTwinArc2>
 800e8b6:	6923      	ldr	r3, [r4, #16]
 800e8b8:	69a7      	ldr	r7, [r4, #24]
 800e8ba:	eb06 0803 	add.w	r8, r6, r3
 800e8be:	1bbf      	subs	r7, r7, r6
 800e8c0:	e02c      	b.n	800e91c <FRAMEWIN_DrawSkinFlex+0x110>
 800e8c2:	6828      	ldr	r0, [r5, #0]
 800e8c4:	f7fe f9eb 	bl	800cc9e <GUI_SetColor>
 800e8c8:	6921      	ldr	r1, [r4, #16]
 800e8ca:	69ea      	ldr	r2, [r5, #28]
 800e8cc:	6960      	ldr	r0, [r4, #20]
 800e8ce:	440a      	add	r2, r1
 800e8d0:	3a01      	subs	r2, #1
 800e8d2:	f002 fb05 	bl	8010ee0 <GUI_DrawHLine>
 800e8d6:	69a2      	ldr	r2, [r4, #24]
 800e8d8:	69e9      	ldr	r1, [r5, #28]
 800e8da:	6960      	ldr	r0, [r4, #20]
 800e8dc:	1a51      	subs	r1, r2, r1
 800e8de:	3101      	adds	r1, #1
 800e8e0:	f002 fafe 	bl	8010ee0 <GUI_DrawHLine>
 800e8e4:	6967      	ldr	r7, [r4, #20]
 800e8e6:	6920      	ldr	r0, [r4, #16]
 800e8e8:	3701      	adds	r7, #1
 800e8ea:	4639      	mov	r1, r7
 800e8ec:	f002 fb1c 	bl	8010f28 <GUI_DrawPixel>
 800e8f0:	4639      	mov	r1, r7
 800e8f2:	69a0      	ldr	r0, [r4, #24]
 800e8f4:	f002 fb18 	bl	8010f28 <GUI_DrawPixel>
 800e8f8:	6868      	ldr	r0, [r5, #4]
 800e8fa:	f7fe f9d0 	bl	800cc9e <GUI_SetColor>
 800e8fe:	6920      	ldr	r0, [r4, #16]
 800e900:	4639      	mov	r1, r7
 800e902:	3001      	adds	r0, #1
 800e904:	f002 fb10 	bl	8010f28 <GUI_DrawPixel>
 800e908:	69a0      	ldr	r0, [r4, #24]
 800e90a:	4639      	mov	r1, r7
 800e90c:	3801      	subs	r0, #1
 800e90e:	f002 fb0b 	bl	8010f28 <GUI_DrawPixel>
 800e912:	6923      	ldr	r3, [r4, #16]
 800e914:	69a7      	ldr	r7, [r4, #24]
 800e916:	f103 0802 	add.w	r8, r3, #2
 800e91a:	3f02      	subs	r7, #2
 800e91c:	6828      	ldr	r0, [r5, #0]
 800e91e:	f7fe f9be 	bl	800cc9e <GUI_SetColor>
 800e922:	4641      	mov	r1, r8
 800e924:	463a      	mov	r2, r7
 800e926:	6960      	ldr	r0, [r4, #20]
 800e928:	f002 fada 	bl	8010ee0 <GUI_DrawHLine>
 800e92c:	6868      	ldr	r0, [r5, #4]
 800e92e:	f7fe f9b6 	bl	800cc9e <GUI_SetColor>
 800e932:	6960      	ldr	r0, [r4, #20]
 800e934:	4641      	mov	r1, r8
 800e936:	3001      	adds	r0, #1
 800e938:	463a      	mov	r2, r7
 800e93a:	f002 fad1 	bl	8010ee0 <GUI_DrawHLine>
 800e93e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e940:	2b02      	cmp	r3, #2
 800e942:	dd0a      	ble.n	800e95a <FRAMEWIN_DrawSkinFlex+0x14e>
 800e944:	68a8      	ldr	r0, [r5, #8]
 800e946:	f7fe f9aa 	bl	800cc9e <GUI_SetColor>
 800e94a:	6961      	ldr	r1, [r4, #20]
 800e94c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e94e:	440b      	add	r3, r1
 800e950:	4640      	mov	r0, r8
 800e952:	3102      	adds	r1, #2
 800e954:	463a      	mov	r2, r7
 800e956:	3b01      	subs	r3, #1
 800e958:	e01d      	b.n	800e996 <FRAMEWIN_DrawSkinFlex+0x18a>
 800e95a:	6a2a      	ldr	r2, [r5, #32]
 800e95c:	42b2      	cmp	r2, r6
 800e95e:	dd1c      	ble.n	800e99a <FRAMEWIN_DrawSkinFlex+0x18e>
 800e960:	6967      	ldr	r7, [r4, #20]
 800e962:	6923      	ldr	r3, [r4, #16]
 800e964:	2e01      	cmp	r6, #1
 800e966:	f107 0802 	add.w	r8, r7, #2
 800e96a:	f340 8107 	ble.w	800eb7c <FRAMEWIN_DrawSkinFlex+0x370>
 800e96e:	4437      	add	r7, r6
 800e970:	18f0      	adds	r0, r6, r3
 800e972:	441a      	add	r2, r3
 800e974:	3a01      	subs	r2, #1
 800e976:	4641      	mov	r1, r8
 800e978:	463b      	mov	r3, r7
 800e97a:	f002 fb19 	bl	8010fb0 <GUI_FillRect>
 800e97e:	69a3      	ldr	r3, [r4, #24]
 800e980:	69e8      	ldr	r0, [r5, #28]
 800e982:	2e01      	cmp	r6, #1
 800e984:	ebc0 0003 	rsb	r0, r0, r3
 800e988:	bfcc      	ite	gt
 800e98a:	ebc6 0203 	rsbgt	r2, r6, r3
 800e98e:	1e9a      	suble	r2, r3, #2
 800e990:	3001      	adds	r0, #1
 800e992:	4641      	mov	r1, r8
 800e994:	463b      	mov	r3, r7
 800e996:	f002 fb0b 	bl	8010fb0 <GUI_FillRect>
 800e99a:	6963      	ldr	r3, [r4, #20]
 800e99c:	69e7      	ldr	r7, [r4, #28]
 800e99e:	6828      	ldr	r0, [r5, #0]
 800e9a0:	2e01      	cmp	r6, #1
 800e9a2:	bfcc      	ite	gt
 800e9a4:	18f6      	addgt	r6, r6, r3
 800e9a6:	1c9e      	addle	r6, r3, #2
 800e9a8:	3f01      	subs	r7, #1
 800e9aa:	f7fe f978 	bl	800cc9e <GUI_SetColor>
 800e9ae:	463a      	mov	r2, r7
 800e9b0:	6920      	ldr	r0, [r4, #16]
 800e9b2:	4631      	mov	r1, r6
 800e9b4:	f002 fada 	bl	8010f6c <GUI_DrawVLine>
 800e9b8:	463a      	mov	r2, r7
 800e9ba:	4631      	mov	r1, r6
 800e9bc:	69a0      	ldr	r0, [r4, #24]
 800e9be:	f002 fad5 	bl	8010f6c <GUI_DrawVLine>
 800e9c2:	69e7      	ldr	r7, [r4, #28]
 800e9c4:	6868      	ldr	r0, [r5, #4]
 800e9c6:	f7fe f96a 	bl	800cc9e <GUI_SetColor>
 800e9ca:	6920      	ldr	r0, [r4, #16]
 800e9cc:	3f02      	subs	r7, #2
 800e9ce:	3001      	adds	r0, #1
 800e9d0:	4631      	mov	r1, r6
 800e9d2:	463a      	mov	r2, r7
 800e9d4:	f002 faca 	bl	8010f6c <GUI_DrawVLine>
 800e9d8:	69a0      	ldr	r0, [r4, #24]
 800e9da:	4631      	mov	r1, r6
 800e9dc:	3801      	subs	r0, #1
 800e9de:	463a      	mov	r2, r7
 800e9e0:	f002 fac4 	bl	8010f6c <GUI_DrawVLine>
 800e9e4:	69eb      	ldr	r3, [r5, #28]
 800e9e6:	2b02      	cmp	r3, #2
 800e9e8:	dc02      	bgt.n	800e9f0 <FRAMEWIN_DrawSkinFlex+0x1e4>
 800e9ea:	6a2b      	ldr	r3, [r5, #32]
 800e9ec:	2b02      	cmp	r3, #2
 800e9ee:	dd20      	ble.n	800ea32 <FRAMEWIN_DrawSkinFlex+0x226>
 800e9f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e9f2:	69e7      	ldr	r7, [r4, #28]
 800e9f4:	68a8      	ldr	r0, [r5, #8]
 800e9f6:	2b02      	cmp	r3, #2
 800e9f8:	bfcc      	ite	gt
 800e9fa:	ebc3 0707 	rsbgt	r7, r3, r7
 800e9fe:	3f02      	suble	r7, #2
 800ea00:	f7fe f94d 	bl	800cc9e <GUI_SetColor>
 800ea04:	69ea      	ldr	r2, [r5, #28]
 800ea06:	2a02      	cmp	r2, #2
 800ea08:	dd07      	ble.n	800ea1a <FRAMEWIN_DrawSkinFlex+0x20e>
 800ea0a:	6920      	ldr	r0, [r4, #16]
 800ea0c:	4402      	add	r2, r0
 800ea0e:	4631      	mov	r1, r6
 800ea10:	3002      	adds	r0, #2
 800ea12:	3a01      	subs	r2, #1
 800ea14:	463b      	mov	r3, r7
 800ea16:	f002 facb 	bl	8010fb0 <GUI_FillRect>
 800ea1a:	6a2b      	ldr	r3, [r5, #32]
 800ea1c:	2b02      	cmp	r3, #2
 800ea1e:	dd08      	ble.n	800ea32 <FRAMEWIN_DrawSkinFlex+0x226>
 800ea20:	69a2      	ldr	r2, [r4, #24]
 800ea22:	69e8      	ldr	r0, [r5, #28]
 800ea24:	1a10      	subs	r0, r2, r0
 800ea26:	3001      	adds	r0, #1
 800ea28:	4631      	mov	r1, r6
 800ea2a:	3a02      	subs	r2, #2
 800ea2c:	463b      	mov	r3, r7
 800ea2e:	f002 fabf 	bl	8010fb0 <GUI_FillRect>
 800ea32:	6828      	ldr	r0, [r5, #0]
 800ea34:	f7fe f933 	bl	800cc9e <GUI_SetColor>
 800ea38:	6921      	ldr	r1, [r4, #16]
 800ea3a:	69a2      	ldr	r2, [r4, #24]
 800ea3c:	69e0      	ldr	r0, [r4, #28]
 800ea3e:	f002 fa4f 	bl	8010ee0 <GUI_DrawHLine>
 800ea42:	6868      	ldr	r0, [r5, #4]
 800ea44:	f7fe f92b 	bl	800cc9e <GUI_SetColor>
 800ea48:	69e0      	ldr	r0, [r4, #28]
 800ea4a:	6921      	ldr	r1, [r4, #16]
 800ea4c:	69a2      	ldr	r2, [r4, #24]
 800ea4e:	3801      	subs	r0, #1
 800ea50:	3101      	adds	r1, #1
 800ea52:	3a01      	subs	r2, #1
 800ea54:	f002 fa44 	bl	8010ee0 <GUI_DrawHLine>
 800ea58:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800ea5a:	2e02      	cmp	r6, #2
 800ea5c:	f340 808c 	ble.w	800eb78 <FRAMEWIN_DrawSkinFlex+0x36c>
 800ea60:	6920      	ldr	r0, [r4, #16]
 800ea62:	69a2      	ldr	r2, [r4, #24]
 800ea64:	69e4      	ldr	r4, [r4, #28]
 800ea66:	f100 0802 	add.w	r8, r0, #2
 800ea6a:	68a8      	ldr	r0, [r5, #8]
 800ea6c:	1e97      	subs	r7, r2, #2
 800ea6e:	f7fe f916 	bl	800cc9e <GUI_SetColor>
 800ea72:	1ba1      	subs	r1, r4, r6
 800ea74:	4640      	mov	r0, r8
 800ea76:	3101      	adds	r1, #1
 800ea78:	463a      	mov	r2, r7
 800ea7a:	1ea3      	subs	r3, r4, #2
 800ea7c:	f002 fa98 	bl	8010fb0 <GUI_FillRect>
 800ea80:	e07a      	b.n	800eb78 <FRAMEWIN_DrawSkinFlex+0x36c>
 800ea82:	bf00      	nop
 800ea84:	200000d8 	.word	0x200000d8
 800ea88:	200000ac 	.word	0x200000ac
 800ea8c:	8a20      	ldrh	r0, [r4, #16]
 800ea8e:	8aa1      	ldrh	r1, [r4, #20]
 800ea90:	8b22      	ldrh	r2, [r4, #24]
 800ea92:	8ba3      	ldrh	r3, [r4, #28]
 800ea94:	68ec      	ldr	r4, [r5, #12]
 800ea96:	9400      	str	r4, [sp, #0]
 800ea98:	692c      	ldr	r4, [r5, #16]
 800ea9a:	f8ad 001c 	strh.w	r0, [sp, #28]
 800ea9e:	f8ad 101e 	strh.w	r1, [sp, #30]
 800eaa2:	f8ad 2020 	strh.w	r2, [sp, #32]
 800eaa6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800eaaa:	9401      	str	r4, [sp, #4]
 800eaac:	b200      	sxth	r0, r0
 800eaae:	b209      	sxth	r1, r1
 800eab0:	b212      	sxth	r2, r2
 800eab2:	b21b      	sxth	r3, r3
 800eab4:	f002 fb80 	bl	80111b8 <GUI_DrawGradientV>
 800eab8:	e05e      	b.n	800eb78 <FRAMEWIN_DrawSkinFlex+0x36c>
 800eaba:	8b2b      	ldrh	r3, [r5, #24]
 800eabc:	6922      	ldr	r2, [r4, #16]
 800eabe:	6820      	ldr	r0, [r4, #0]
 800eac0:	441a      	add	r2, r3
 800eac2:	f8ad 201c 	strh.w	r2, [sp, #28]
 800eac6:	6962      	ldr	r2, [r4, #20]
 800eac8:	f8ad 201e 	strh.w	r2, [sp, #30]
 800eacc:	69a2      	ldr	r2, [r4, #24]
 800eace:	1ad3      	subs	r3, r2, r3
 800ead0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ead4:	69e3      	ldr	r3, [r4, #28]
 800ead6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800eada:	f7ff fb35 	bl	800e148 <GUI_ALLOC_LockH>
 800eade:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800eae0:	9005      	str	r0, [sp, #20]
 800eae2:	b1fb      	cbz	r3, 800eb24 <FRAMEWIN_DrawSkinFlex+0x318>
 800eae4:	2002      	movs	r0, #2
 800eae6:	f7fe f915 	bl	800cd14 <GUI_SetTextMode>
 800eaea:	9b05      	ldr	r3, [sp, #20]
 800eaec:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 800eaf0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800eaf4:	320e      	adds	r2, #14
 800eaf6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800eafa:	6898      	ldr	r0, [r3, #8]
 800eafc:	f7fe f8cf 	bl	800cc9e <GUI_SetColor>
 800eb00:	9b05      	ldr	r3, [sp, #20]
 800eb02:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800eb04:	f7fe f8d0 	bl	800cca8 <GUI_SetFont>
 800eb08:	9b05      	ldr	r3, [sp, #20]
 800eb0a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800eb0c:	f7ff fb1c 	bl	800e148 <GUI_ALLOC_LockH>
 800eb10:	9b05      	ldr	r3, [sp, #20]
 800eb12:	9006      	str	r0, [sp, #24]
 800eb14:	a907      	add	r1, sp, #28
 800eb16:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 800eb1a:	f7fd fd28 	bl	800c56e <GUI_DispStringInRect>
 800eb1e:	a806      	add	r0, sp, #24
 800eb20:	f7ff fb20 	bl	800e164 <GUI_ALLOC_UnlockH>
 800eb24:	a805      	add	r0, sp, #20
 800eb26:	f7ff fb1d 	bl	800e164 <GUI_ALLOC_UnlockH>
 800eb2a:	e025      	b.n	800eb78 <FRAMEWIN_DrawSkinFlex+0x36c>
 800eb2c:	6923      	ldr	r3, [r4, #16]
 800eb2e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eb32:	6963      	ldr	r3, [r4, #20]
 800eb34:	f8ad 301e 	strh.w	r3, [sp, #30]
 800eb38:	69a3      	ldr	r3, [r4, #24]
 800eb3a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800eb3e:	68a8      	ldr	r0, [r5, #8]
 800eb40:	69e3      	ldr	r3, [r4, #28]
 800eb42:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800eb46:	f7fe f8aa 	bl	800cc9e <GUI_SetColor>
 800eb4a:	a807      	add	r0, sp, #28
 800eb4c:	f002 fa52 	bl	8010ff4 <GUI_FillRectEx>
 800eb50:	e012      	b.n	800eb78 <FRAMEWIN_DrawSkinFlex+0x36c>
 800eb52:	6820      	ldr	r0, [r4, #0]
 800eb54:	f7ff faf8 	bl	800e148 <GUI_ALLOC_LockH>
 800eb58:	ab10      	add	r3, sp, #64	; 0x40
 800eb5a:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 800eb5e:	f843 0d2c 	str.w	r0, [r3, #-44]!
 800eb62:	f042 020c 	orr.w	r2, r2, #12
 800eb66:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7ff fafa 	bl	800e164 <GUI_ALLOC_UnlockH>
 800eb70:	6820      	ldr	r0, [r4, #0]
 800eb72:	f7f8 fb67 	bl	8007244 <WM_SetHasTrans>
 800eb76:	e004      	b.n	800eb82 <FRAMEWIN_DrawSkinFlex+0x376>
 800eb78:	2600      	movs	r6, #0
 800eb7a:	e002      	b.n	800eb82 <FRAMEWIN_DrawSkinFlex+0x376>
 800eb7c:	1c98      	adds	r0, r3, #2
 800eb7e:	4647      	mov	r7, r8
 800eb80:	e6f7      	b.n	800e972 <FRAMEWIN_DrawSkinFlex+0x166>
 800eb82:	4630      	mov	r0, r6
 800eb84:	b010      	add	sp, #64	; 0x40
 800eb86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb8a:	bf00      	nop

0800eb8c <_GetBorderSize>:
 800eb8c:	b570      	push	{r4, r5, r6, lr}
 800eb8e:	b08a      	sub	sp, #40	; 0x28
 800eb90:	4605      	mov	r5, r0
 800eb92:	460c      	mov	r4, r1
 800eb94:	f7ff fad8 	bl	800e148 <GUI_ALLOC_LockH>
 800eb98:	ab0a      	add	r3, sp, #40	; 0x28
 800eb9a:	6d06      	ldr	r6, [r0, #80]	; 0x50
 800eb9c:	f843 0d28 	str.w	r0, [r3, #-40]!
 800eba0:	4668      	mov	r0, sp
 800eba2:	f7ff fadf 	bl	800e164 <GUI_ALLOC_UnlockH>
 800eba6:	9501      	str	r5, [sp, #4]
 800eba8:	2c03      	cmp	r4, #3
 800ebaa:	d80b      	bhi.n	800ebc4 <_GetBorderSize+0x38>
 800ebac:	e8df f004 	tbb	[pc, r4]
 800ebb0:	08060402 	.word	0x08060402
 800ebb4:	2318      	movs	r3, #24
 800ebb6:	e004      	b.n	800ebc2 <_GetBorderSize+0x36>
 800ebb8:	2316      	movs	r3, #22
 800ebba:	e002      	b.n	800ebc2 <_GetBorderSize+0x36>
 800ebbc:	2315      	movs	r3, #21
 800ebbe:	e000      	b.n	800ebc2 <_GetBorderSize+0x36>
 800ebc0:	2317      	movs	r3, #23
 800ebc2:	9302      	str	r3, [sp, #8]
 800ebc4:	a801      	add	r0, sp, #4
 800ebc6:	47b0      	blx	r6
 800ebc8:	b00a      	add	sp, #40	; 0x28
 800ebca:	bd70      	pop	{r4, r5, r6, pc}

0800ebcc <_Create>:
 800ebcc:	b530      	push	{r4, r5, lr}
 800ebce:	b08b      	sub	sp, #44	; 0x2c
 800ebd0:	4605      	mov	r5, r0
 800ebd2:	f7ff fab9 	bl	800e148 <GUI_ALLOC_LockH>
 800ebd6:	ab0a      	add	r3, sp, #40	; 0x28
 800ebd8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800ebda:	f843 0d28 	str.w	r0, [r3, #-40]!
 800ebde:	4668      	mov	r0, sp
 800ebe0:	6894      	ldr	r4, [r2, #8]
 800ebe2:	f7ff fabf 	bl	800e164 <GUI_ALLOC_UnlockH>
 800ebe6:	a80a      	add	r0, sp, #40	; 0x28
 800ebe8:	2300      	movs	r3, #0
 800ebea:	9302      	str	r3, [sp, #8]
 800ebec:	f840 5d24 	str.w	r5, [r0, #-36]!
 800ebf0:	6863      	ldr	r3, [r4, #4]
 800ebf2:	4798      	blx	r3
 800ebf4:	b00b      	add	sp, #44	; 0x2c
 800ebf6:	bd30      	pop	{r4, r5, pc}

0800ebf8 <_Paint>:
 800ebf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebfc:	b091      	sub	sp, #68	; 0x44
 800ebfe:	4604      	mov	r4, r0
 800ec00:	f7ff faa2 	bl	800e148 <GUI_ALLOC_LockH>
 800ec04:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ec06:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800ec08:	9603      	str	r6, [sp, #12]
 800ec0a:	9006      	str	r0, [sp, #24]
 800ec0c:	689e      	ldr	r6, [r3, #8]
 800ec0e:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800ec10:	f7f7 feab 	bl	800696a <FRAMEWIN__CalcTitleHeight>
 800ec14:	4683      	mov	fp, r0
 800ec16:	a810      	add	r0, sp, #64	; 0x40
 800ec18:	f850 2d28 	ldr.w	r2, [r0, #-40]!
 800ec1c:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800ec20:	9204      	str	r2, [sp, #16]
 800ec22:	f7ff fa9f 	bl	800e164 <GUI_ALLOC_UnlockH>
 800ec26:	4620      	mov	r0, r4
 800ec28:	f7f8 ff66 	bl	8007af8 <WM_GetWindowSizeX>
 800ec2c:	4681      	mov	r9, r0
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f7f8 ff77 	bl	8007b22 <WM_GetWindowSizeY>
 800ec34:	6832      	ldr	r2, [r6, #0]
 800ec36:	2101      	movs	r1, #1
 800ec38:	4680      	mov	r8, r0
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	4790      	blx	r2
 800ec3e:	6832      	ldr	r2, [r6, #0]
 800ec40:	2103      	movs	r1, #3
 800ec42:	4607      	mov	r7, r0
 800ec44:	4620      	mov	r0, r4
 800ec46:	4790      	blx	r2
 800ec48:	6832      	ldr	r2, [r6, #0]
 800ec4a:	2100      	movs	r1, #0
 800ec4c:	4682      	mov	sl, r0
 800ec4e:	4620      	mov	r0, r4
 800ec50:	4790      	blx	r2
 800ec52:	6833      	ldr	r3, [r6, #0]
 800ec54:	9002      	str	r0, [sp, #8]
 800ec56:	2102      	movs	r1, #2
 800ec58:	4620      	mov	r0, r4
 800ec5a:	4798      	blx	r3
 800ec5c:	9005      	str	r0, [sp, #20]
 800ec5e:	2000      	movs	r0, #0
 800ec60:	9407      	str	r4, [sp, #28]
 800ec62:	f7f9 ff05 	bl	8008a70 <WM__InitIVRSearch>
 800ec66:	2800      	cmp	r0, #0
 800ec68:	d044      	beq.n	800ecf4 <_Paint+0xfc>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	930c      	str	r3, [sp, #48]	; 0x30
 800ec6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec70:	f109 33ff 	add.w	r3, r9, #4294967295
 800ec74:	930d      	str	r3, [sp, #52]	; 0x34
 800ec76:	f108 33ff 	add.w	r3, r8, #4294967295
 800ec7a:	930e      	str	r3, [sp, #56]	; 0x38
 800ec7c:	230b      	movs	r3, #11
 800ec7e:	9308      	str	r3, [sp, #32]
 800ec80:	a807      	add	r0, sp, #28
 800ec82:	47a8      	blx	r5
 800ec84:	9b02      	ldr	r3, [sp, #8]
 800ec86:	9e04      	ldr	r6, [sp, #16]
 800ec88:	970b      	str	r7, [sp, #44]	; 0x2c
 800ec8a:	445b      	add	r3, fp
 800ec8c:	fa03 f086 	sxtah	r0, r3, r6
 800ec90:	9e05      	ldr	r6, [sp, #20]
 800ec92:	930c      	str	r3, [sp, #48]	; 0x30
 800ec94:	ebc6 0108 	rsb	r1, r6, r8
 800ec98:	ebca 0209 	rsb	r2, sl, r9
 800ec9c:	3801      	subs	r0, #1
 800ec9e:	3901      	subs	r1, #1
 800eca0:	3a01      	subs	r2, #1
 800eca2:	4288      	cmp	r0, r1
 800eca4:	bfd4      	ite	le
 800eca6:	900e      	strle	r0, [sp, #56]	; 0x38
 800eca8:	910e      	strgt	r1, [sp, #56]	; 0x38
 800ecaa:	210e      	movs	r1, #14
 800ecac:	9108      	str	r1, [sp, #32]
 800ecae:	e88d 000c 	stmia.w	sp, {r2, r3}
 800ecb2:	920d      	str	r2, [sp, #52]	; 0x34
 800ecb4:	a807      	add	r0, sp, #28
 800ecb6:	47a8      	blx	r5
 800ecb8:	9b01      	ldr	r3, [sp, #4]
 800ecba:	9a00      	ldr	r2, [sp, #0]
 800ecbc:	9e02      	ldr	r6, [sp, #8]
 800ecbe:	920d      	str	r2, [sp, #52]	; 0x34
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	930e      	str	r3, [sp, #56]	; 0x38
 800ecc4:	2305      	movs	r3, #5
 800ecc6:	9308      	str	r3, [sp, #32]
 800ecc8:	970b      	str	r7, [sp, #44]	; 0x2c
 800ecca:	960c      	str	r6, [sp, #48]	; 0x30
 800eccc:	a807      	add	r0, sp, #28
 800ecce:	47a8      	blx	r5
 800ecd0:	a90b      	add	r1, sp, #44	; 0x2c
 800ecd2:	aa0d      	add	r2, sp, #52	; 0x34
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	f7f7 fe57 	bl	8006988 <FRAMEWIN__GetTitleLimits>
 800ecda:	2002      	movs	r0, #2
 800ecdc:	f7fe f81a 	bl	800cd14 <GUI_SetTextMode>
 800ece0:	9803      	ldr	r0, [sp, #12]
 800ece2:	f7fd ffe1 	bl	800cca8 <GUI_SetFont>
 800ece6:	2312      	movs	r3, #18
 800ece8:	9308      	str	r3, [sp, #32]
 800ecea:	a807      	add	r0, sp, #28
 800ecec:	47a8      	blx	r5
 800ecee:	f7f9 fdfd 	bl	80088ec <WM__GetNextIVR>
 800ecf2:	e7b8      	b.n	800ec66 <_Paint+0x6e>
 800ecf4:	b011      	add	sp, #68	; 0x44
 800ecf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ecfa <WM_DeleteTimer>:
 800ecfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	b168      	cbz	r0, 800ed1c <WM_DeleteTimer+0x22>
 800ed00:	f7ff fa22 	bl	800e148 <GUI_ALLOC_LockH>
 800ed04:	ac02      	add	r4, sp, #8
 800ed06:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ed0a:	6800      	ldr	r0, [r0, #0]
 800ed0c:	f7fd fad0 	bl	800c2b0 <GUI_TIMER_Delete>
 800ed10:	4620      	mov	r0, r4
 800ed12:	f7ff fa27 	bl	800e164 <GUI_ALLOC_UnlockH>
 800ed16:	4628      	mov	r0, r5
 800ed18:	f7ff fa50 	bl	800e1bc <GUI_ALLOC_Free>
 800ed1c:	b003      	add	sp, #12
 800ed1e:	bd30      	pop	{r4, r5, pc}

0800ed20 <WM__DeleteAssocTimer>:
 800ed20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed22:	4605      	mov	r5, r0
 800ed24:	a801      	add	r0, sp, #4
 800ed26:	f7fd fa8f 	bl	800c248 <GUI_TIMER__GetFirstTimer>
 800ed2a:	4604      	mov	r4, r0
 800ed2c:	b1dc      	cbz	r4, 800ed66 <WM__DeleteAssocTimer+0x46>
 800ed2e:	4620      	mov	r0, r4
 800ed30:	2101      	movs	r1, #1
 800ed32:	f7fd faf1 	bl	800c318 <GUI_TIMER_GetFlag>
 800ed36:	9b01      	ldr	r3, [sp, #4]
 800ed38:	b183      	cbz	r3, 800ed5c <WM__DeleteAssocTimer+0x3c>
 800ed3a:	b178      	cbz	r0, 800ed5c <WM__DeleteAssocTimer+0x3c>
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7ff f9f9 	bl	800e134 <GUI_ALLOC_h2p>
 800ed42:	6843      	ldr	r3, [r0, #4]
 800ed44:	42ab      	cmp	r3, r5
 800ed46:	d109      	bne.n	800ed5c <WM__DeleteAssocTimer+0x3c>
 800ed48:	4620      	mov	r0, r4
 800ed4a:	a901      	add	r1, sp, #4
 800ed4c:	9e01      	ldr	r6, [sp, #4]
 800ed4e:	f7fd fa93 	bl	800c278 <GUI_TIMER__GetNextTimerLin>
 800ed52:	4604      	mov	r4, r0
 800ed54:	4630      	mov	r0, r6
 800ed56:	f7ff ffd0 	bl	800ecfa <WM_DeleteTimer>
 800ed5a:	e7e7      	b.n	800ed2c <WM__DeleteAssocTimer+0xc>
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	a901      	add	r1, sp, #4
 800ed60:	f7fd fa8a 	bl	800c278 <GUI_TIMER__GetNextTimerLin>
 800ed64:	e7e1      	b.n	800ed2a <WM__DeleteAssocTimer+0xa>
 800ed66:	b002      	add	sp, #8
 800ed68:	bd70      	pop	{r4, r5, r6, pc}

0800ed6a <_Convert16>:
 800ed6a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed6e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800ed72:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800ed76:	4605      	mov	r5, r0
 800ed78:	460e      	mov	r6, r1
 800ed7a:	4690      	mov	r8, r2
 800ed7c:	461f      	mov	r7, r3
 800ed7e:	4614      	mov	r4, r2
 800ed80:	4689      	mov	r9, r1
 800ed82:	f835 0b02 	ldrh.w	r0, [r5], #2
 800ed86:	47d8      	blx	fp
 800ed88:	47d0      	blx	sl
 800ed8a:	3c01      	subs	r4, #1
 800ed8c:	f849 0b04 	str.w	r0, [r9], #4
 800ed90:	d1f7      	bne.n	800ed82 <_Convert16+0x18>
 800ed92:	2f1f      	cmp	r7, #31
 800ed94:	d806      	bhi.n	800eda4 <_Convert16+0x3a>
 800ed96:	4630      	mov	r0, r6
 800ed98:	4641      	mov	r1, r8
 800ed9a:	463a      	mov	r2, r7
 800ed9c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda0:	f001 bf04 	b.w	8010bac <GUI__CompactPixelIndices>
 800eda4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eda8 <_Convert8>:
 800eda8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edac:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800edb0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800edb4:	4605      	mov	r5, r0
 800edb6:	460e      	mov	r6, r1
 800edb8:	4690      	mov	r8, r2
 800edba:	461f      	mov	r7, r3
 800edbc:	4689      	mov	r9, r1
 800edbe:	4604      	mov	r4, r0
 800edc0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800edc4:	47d8      	blx	fp
 800edc6:	47d0      	blx	sl
 800edc8:	1b2b      	subs	r3, r5, r4
 800edca:	4443      	add	r3, r8
 800edcc:	f849 0b04 	str.w	r0, [r9], #4
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d1f5      	bne.n	800edc0 <_Convert8+0x18>
 800edd4:	2f1f      	cmp	r7, #31
 800edd6:	d806      	bhi.n	800ede6 <_Convert8+0x3e>
 800edd8:	4630      	mov	r0, r6
 800edda:	4641      	mov	r1, r8
 800eddc:	463a      	mov	r2, r7
 800edde:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede2:	f001 bee3 	b.w	8010bac <GUI__CompactPixelIndices>
 800ede6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800edec <GUI_MEMDEV__WriteToActiveOpaque>:
 800edec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf0:	b09d      	sub	sp, #116	; 0x74
 800edf2:	4606      	mov	r6, r0
 800edf4:	910f      	str	r1, [sp, #60]	; 0x3c
 800edf6:	920d      	str	r2, [sp, #52]	; 0x34
 800edf8:	2800      	cmp	r0, #0
 800edfa:	f000 8386 	beq.w	800f50a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800edfe:	f7ff f9a3 	bl	800e148 <GUI_ALLOC_LockH>
 800ee02:	ab1c      	add	r3, sp, #112	; 0x70
 800ee04:	6944      	ldr	r4, [r0, #20]
 800ee06:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7ff f9aa 	bl	800e164 <GUI_ALLOC_UnlockH>
 800ee10:	4630      	mov	r0, r6
 800ee12:	f7fb f823 	bl	8009e5c <GUI_MEMDEV_GetBitsPerPixel>
 800ee16:	2808      	cmp	r0, #8
 800ee18:	4601      	mov	r1, r0
 800ee1a:	dd02      	ble.n	800ee22 <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 800ee1c:	2c00      	cmp	r4, #0
 800ee1e:	f000 81c3 	beq.w	800f1a8 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 800ee22:	2201      	movs	r2, #1
 800ee24:	f04f 0800 	mov.w	r8, #0
 800ee28:	4630      	mov	r0, r6
 800ee2a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ee2c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ee2e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ee32:	f7ff f989 	bl	800e148 <GUI_ALLOC_LockH>
 800ee36:	6803      	ldr	r3, [r0, #0]
 800ee38:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 800f448 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	930e      	str	r3, [sp, #56]	; 0x38
 800ee46:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800ee4a:	f8da 3000 	ldr.w	r3, [sl]
 800ee4e:	f84b 0d14 	str.w	r0, [fp, #-20]!
 800ee52:	6904      	ldr	r4, [r0, #16]
 800ee54:	6945      	ldr	r5, [r0, #20]
 800ee56:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800ee5a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800ee5e:	7c58      	ldrb	r0, [r3, #17]
 800ee60:	9112      	str	r1, [sp, #72]	; 0x48
 800ee62:	f7fc fa19 	bl	800b298 <GUI_GetBitsPerPixelEx>
 800ee66:	f8da 3000 	ldr.w	r3, [sl]
 800ee6a:	9010      	str	r0, [sp, #64]	; 0x40
 800ee6c:	7c58      	ldrb	r0, [r3, #17]
 800ee6e:	f7fc fa31 	bl	800b2d4 <GUI_GetpfIndex2ColorEx>
 800ee72:	4603      	mov	r3, r0
 800ee74:	4658      	mov	r0, fp
 800ee76:	9309      	str	r3, [sp, #36]	; 0x24
 800ee78:	f7ff f974 	bl	800e164 <GUI_ALLOC_UnlockH>
 800ee7c:	2c08      	cmp	r4, #8
 800ee7e:	4651      	mov	r1, sl
 800ee80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee84:	d904      	bls.n	800ee90 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800ee86:	2c10      	cmp	r4, #16
 800ee88:	bf8c      	ite	hi
 800ee8a:	2204      	movhi	r2, #4
 800ee8c:	2202      	movls	r2, #2
 800ee8e:	e005      	b.n	800ee9c <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800ee90:	2c01      	cmp	r4, #1
 800ee92:	d103      	bne.n	800ee9c <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800ee94:	9411      	str	r4, [sp, #68]	; 0x44
 800ee96:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 800ee9a:	e000      	b.n	800ee9e <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 800ee9c:	9211      	str	r2, [sp, #68]	; 0x44
 800ee9e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800eea0:	4298      	cmp	r0, r3
 800eea2:	f000 80e2 	beq.w	800f06a <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 800eea6:	680b      	ldr	r3, [r1, #0]
 800eea8:	7c58      	ldrb	r0, [r3, #17]
 800eeaa:	f7fc fa23 	bl	800b2f4 <GUI_GetpfColor2IndexEx>
 800eeae:	9013      	str	r0, [sp, #76]	; 0x4c
 800eeb0:	00b8      	lsls	r0, r7, #2
 800eeb2:	f7ff fb15 	bl	800e4e0 <GUI_ALLOC_AllocNoInit>
 800eeb6:	900c      	str	r0, [sp, #48]	; 0x30
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	f000 8326 	beq.w	800f50a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800eebe:	4630      	mov	r0, r6
 800eec0:	f7fa f964 	bl	800918c <GUI_MEMDEV_GetDataPtr>
 800eec4:	4606      	mov	r6, r0
 800eec6:	2d00      	cmp	r5, #0
 800eec8:	f000 80be 	beq.w	800f048 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 800eecc:	4628      	mov	r0, r5
 800eece:	f7ff f93b 	bl	800e148 <GUI_ALLOC_LockH>
 800eed2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800eed6:	9018      	str	r0, [sp, #96]	; 0x60
 800eed8:	f04f 0a00 	mov.w	sl, #0
 800eedc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eede:	4592      	cmp	sl, r2
 800eee0:	f280 80ae 	bge.w	800f040 <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 800eee4:	9818      	ldr	r0, [sp, #96]	; 0x60
 800eee6:	2300      	movs	r3, #0
 800eee8:	9319      	str	r3, [sp, #100]	; 0x64
 800eeea:	6883      	ldr	r3, [r0, #8]
 800eeec:	a919      	add	r1, sp, #100	; 0x64
 800eeee:	695b      	ldr	r3, [r3, #20]
 800eef0:	4652      	mov	r2, sl
 800eef2:	4798      	blx	r3
 800eef4:	42b8      	cmp	r0, r7
 800eef6:	4605      	mov	r5, r0
 800eef8:	d12f      	bne.n	800ef5a <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 800eefa:	980c      	ldr	r0, [sp, #48]	; 0x30
 800eefc:	f7ff f924 	bl	800e148 <GUI_ALLOC_LockH>
 800ef00:	2c08      	cmp	r4, #8
 800ef02:	4601      	mov	r1, r0
 800ef04:	9016      	str	r0, [sp, #88]	; 0x58
 800ef06:	d909      	bls.n	800ef1c <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 800ef08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ef0c:	9200      	str	r2, [sp, #0]
 800ef0e:	9301      	str	r3, [sp, #4]
 800ef10:	4630      	mov	r0, r6
 800ef12:	463a      	mov	r2, r7
 800ef14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef16:	f7ff ff28 	bl	800ed6a <_Convert16>
 800ef1a:	e008      	b.n	800ef2e <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 800ef1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ef1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ef20:	9000      	str	r0, [sp, #0]
 800ef22:	9201      	str	r2, [sp, #4]
 800ef24:	4630      	mov	r0, r6
 800ef26:	463a      	mov	r2, r7
 800ef28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef2a:	f7ff ff3d 	bl	800eda8 <_Convert8>
 800ef2e:	2301      	movs	r3, #1
 800ef30:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ef32:	9002      	str	r0, [sp, #8]
 800ef34:	ad1c      	add	r5, sp, #112	; 0x70
 800ef36:	2200      	movs	r2, #0
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	9301      	str	r3, [sp, #4]
 800ef3c:	9203      	str	r2, [sp, #12]
 800ef3e:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 800ef42:	9204      	str	r2, [sp, #16]
 800ef44:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ef46:	f8cd 8014 	str.w	r8, [sp, #20]
 800ef4a:	4659      	mov	r1, fp
 800ef4c:	463a      	mov	r2, r7
 800ef4e:	f7fc fbed 	bl	800b72c <LCD_DrawBitmap>
 800ef52:	4628      	mov	r0, r5
 800ef54:	f7ff f906 	bl	800e164 <GUI_ALLOC_UnlockH>
 800ef58:	e060      	b.n	800f01c <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800ef5a:	2c01      	cmp	r4, #1
 800ef5c:	d15c      	bne.n	800f018 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800ef5e:	2d00      	cmp	r5, #0
 800ef60:	d05c      	beq.n	800f01c <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800ef62:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ef64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ef66:	f8cd 900c 	str.w	r9, [sp, #12]
 800ef6a:	2208      	movs	r2, #8
 800ef6c:	fb90 f2f2 	sdiv	r2, r0, r2
 800ef70:	4432      	add	r2, r6
 800ef72:	2301      	movs	r3, #1
 800ef74:	9204      	str	r2, [sp, #16]
 800ef76:	f000 0207 	and.w	r2, r0, #7
 800ef7a:	9300      	str	r3, [sp, #0]
 800ef7c:	4408      	add	r0, r1
 800ef7e:	9301      	str	r3, [sp, #4]
 800ef80:	9302      	str	r3, [sp, #8]
 800ef82:	9206      	str	r2, [sp, #24]
 800ef84:	4659      	mov	r1, fp
 800ef86:	462a      	mov	r2, r5
 800ef88:	f8cd 8014 	str.w	r8, [sp, #20]
 800ef8c:	f7fc faf2 	bl	800b574 <LCD__DrawBitmap_1bpp>
 800ef90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ef92:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ef94:	441d      	add	r5, r3
 800ef96:	6883      	ldr	r3, [r0, #8]
 800ef98:	9519      	str	r5, [sp, #100]	; 0x64
 800ef9a:	695b      	ldr	r3, [r3, #20]
 800ef9c:	a919      	add	r1, sp, #100	; 0x64
 800ef9e:	4652      	mov	r2, sl
 800efa0:	4798      	blx	r3
 800efa2:	4605      	mov	r5, r0
 800efa4:	e7db      	b.n	800ef5e <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 800efa6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800efa8:	f7ff f8ce 	bl	800e148 <GUI_ALLOC_LockH>
 800efac:	2c08      	cmp	r4, #8
 800efae:	4601      	mov	r1, r0
 800efb0:	9016      	str	r0, [sp, #88]	; 0x58
 800efb2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800efb4:	d938      	bls.n	800f028 <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 800efb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efb8:	9200      	str	r2, [sp, #0]
 800efba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800efbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800efbe:	9301      	str	r3, [sp, #4]
 800efc0:	fb00 6002 	mla	r0, r0, r2, r6
 800efc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efc6:	462a      	mov	r2, r5
 800efc8:	f7ff fecf 	bl	800ed6a <_Convert16>
 800efcc:	2301      	movs	r3, #1
 800efce:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 800efd2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800efd4:	9300      	str	r3, [sp, #0]
 800efd6:	2200      	movs	r2, #0
 800efd8:	9301      	str	r3, [sp, #4]
 800efda:	9002      	str	r0, [sp, #8]
 800efdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800efde:	9203      	str	r2, [sp, #12]
 800efe0:	9819      	ldr	r0, [sp, #100]	; 0x64
 800efe2:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 800efe6:	9204      	str	r2, [sp, #16]
 800efe8:	4408      	add	r0, r1
 800efea:	462a      	mov	r2, r5
 800efec:	4659      	mov	r1, fp
 800efee:	f8cd 8014 	str.w	r8, [sp, #20]
 800eff2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800eff6:	f7fc fb99 	bl	800b72c <LCD_DrawBitmap>
 800effa:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800effe:	4660      	mov	r0, ip
 800f000:	f7ff f8b0 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f004:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f006:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f008:	441d      	add	r5, r3
 800f00a:	6883      	ldr	r3, [r0, #8]
 800f00c:	9519      	str	r5, [sp, #100]	; 0x64
 800f00e:	695b      	ldr	r3, [r3, #20]
 800f010:	a919      	add	r1, sp, #100	; 0x64
 800f012:	4652      	mov	r2, sl
 800f014:	4798      	blx	r3
 800f016:	4605      	mov	r5, r0
 800f018:	2d00      	cmp	r5, #0
 800f01a:	d1c4      	bne.n	800efa6 <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 800f01c:	444e      	add	r6, r9
 800f01e:	f10a 0a01 	add.w	sl, sl, #1
 800f022:	f10b 0b01 	add.w	fp, fp, #1
 800f026:	e759      	b.n	800eedc <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 800f028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f02a:	9300      	str	r3, [sp, #0]
 800f02c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f02e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f030:	9201      	str	r2, [sp, #4]
 800f032:	fb00 6003 	mla	r0, r0, r3, r6
 800f036:	462a      	mov	r2, r5
 800f038:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f03a:	f7ff feb5 	bl	800eda8 <_Convert8>
 800f03e:	e7c5      	b.n	800efcc <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 800f040:	a818      	add	r0, sp, #96	; 0x60
 800f042:	f7ff f88f 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f046:	e00e      	b.n	800f066 <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 800f048:	2301      	movs	r3, #1
 800f04a:	9300      	str	r3, [sp, #0]
 800f04c:	9301      	str	r3, [sp, #4]
 800f04e:	9004      	str	r0, [sp, #16]
 800f050:	9402      	str	r4, [sp, #8]
 800f052:	f8cd 900c 	str.w	r9, [sp, #12]
 800f056:	f8cd 8014 	str.w	r8, [sp, #20]
 800f05a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f05c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f05e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f060:	463a      	mov	r2, r7
 800f062:	f7fc fb63 	bl	800b72c <LCD_DrawBitmap>
 800f066:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f068:	e24d      	b.n	800f506 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800f06a:	4630      	mov	r0, r6
 800f06c:	f7fa f88e 	bl	800918c <GUI_MEMDEV_GetDataPtr>
 800f070:	4606      	mov	r6, r0
 800f072:	2d00      	cmp	r5, #0
 800f074:	f000 808a 	beq.w	800f18c <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 800f078:	4628      	mov	r0, r5
 800f07a:	f7ff f865 	bl	800e148 <GUI_ALLOC_LockH>
 800f07e:	2500      	movs	r5, #0
 800f080:	9018      	str	r0, [sp, #96]	; 0x60
 800f082:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f084:	429d      	cmp	r5, r3
 800f086:	da7d      	bge.n	800f184 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 800f088:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f08a:	2300      	movs	r3, #0
 800f08c:	9319      	str	r3, [sp, #100]	; 0x64
 800f08e:	6883      	ldr	r3, [r0, #8]
 800f090:	a919      	add	r1, sp, #100	; 0x64
 800f092:	695b      	ldr	r3, [r3, #20]
 800f094:	462a      	mov	r2, r5
 800f096:	4798      	blx	r3
 800f098:	42b8      	cmp	r0, r7
 800f09a:	4682      	mov	sl, r0
 800f09c:	d124      	bne.n	800f0e8 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 800f09e:	46aa      	mov	sl, r5
 800f0a0:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f0a2:	6883      	ldr	r3, [r0, #8]
 800f0a4:	f10a 0b01 	add.w	fp, sl, #1
 800f0a8:	695b      	ldr	r3, [r3, #20]
 800f0aa:	a919      	add	r1, sp, #100	; 0x64
 800f0ac:	465a      	mov	r2, fp
 800f0ae:	4798      	blx	r3
 800f0b0:	42b8      	cmp	r0, r7
 800f0b2:	d101      	bne.n	800f0b8 <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 800f0b4:	46da      	mov	sl, fp
 800f0b6:	e7f3      	b.n	800f0a0 <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 800f0b8:	ebc5 0b0a 	rsb	fp, r5, sl
 800f0bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f0be:	9604      	str	r6, [sp, #16]
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	f10b 0b01 	add.w	fp, fp, #1
 800f0c6:	9300      	str	r3, [sp, #0]
 800f0c8:	9301      	str	r3, [sp, #4]
 800f0ca:	4429      	add	r1, r5
 800f0cc:	9402      	str	r4, [sp, #8]
 800f0ce:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0d2:	f8cd 8014 	str.w	r8, [sp, #20]
 800f0d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f0d8:	463a      	mov	r2, r7
 800f0da:	465b      	mov	r3, fp
 800f0dc:	f7fc fb26 	bl	800b72c <LCD_DrawBitmap>
 800f0e0:	fb09 660b 	mla	r6, r9, fp, r6
 800f0e4:	4655      	mov	r5, sl
 800f0e6:	e04b      	b.n	800f180 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800f0e8:	2c01      	cmp	r4, #1
 800f0ea:	d127      	bne.n	800f13c <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800f0ec:	f1ba 0f00 	cmp.w	sl, #0
 800f0f0:	d022      	beq.n	800f138 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800f0f2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800f0f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f0f6:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0fa:	2208      	movs	r2, #8
 800f0fc:	fb90 f2f2 	sdiv	r2, r0, r2
 800f100:	4432      	add	r2, r6
 800f102:	9204      	str	r2, [sp, #16]
 800f104:	f000 0207 	and.w	r2, r0, #7
 800f108:	4408      	add	r0, r1
 800f10a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f10c:	9206      	str	r2, [sp, #24]
 800f10e:	2301      	movs	r3, #1
 800f110:	4652      	mov	r2, sl
 800f112:	9300      	str	r3, [sp, #0]
 800f114:	9301      	str	r3, [sp, #4]
 800f116:	9302      	str	r3, [sp, #8]
 800f118:	4429      	add	r1, r5
 800f11a:	f8cd 8014 	str.w	r8, [sp, #20]
 800f11e:	f7fc fa29 	bl	800b574 <LCD__DrawBitmap_1bpp>
 800f122:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f124:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f126:	4453      	add	r3, sl
 800f128:	9319      	str	r3, [sp, #100]	; 0x64
 800f12a:	6883      	ldr	r3, [r0, #8]
 800f12c:	a919      	add	r1, sp, #100	; 0x64
 800f12e:	695b      	ldr	r3, [r3, #20]
 800f130:	462a      	mov	r2, r5
 800f132:	4798      	blx	r3
 800f134:	4682      	mov	sl, r0
 800f136:	e7d9      	b.n	800f0ec <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 800f138:	444e      	add	r6, r9
 800f13a:	e021      	b.n	800f180 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800f13c:	f1ba 0f00 	cmp.w	sl, #0
 800f140:	d0fa      	beq.n	800f138 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800f142:	9819      	ldr	r0, [sp, #100]	; 0x64
 800f144:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f146:	9402      	str	r4, [sp, #8]
 800f148:	fb00 6201 	mla	r2, r0, r1, r6
 800f14c:	9204      	str	r2, [sp, #16]
 800f14e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f150:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f152:	f8cd 900c 	str.w	r9, [sp, #12]
 800f156:	2301      	movs	r3, #1
 800f158:	4410      	add	r0, r2
 800f15a:	9300      	str	r3, [sp, #0]
 800f15c:	4652      	mov	r2, sl
 800f15e:	9301      	str	r3, [sp, #4]
 800f160:	4429      	add	r1, r5
 800f162:	f8cd 8014 	str.w	r8, [sp, #20]
 800f166:	f7fc fae1 	bl	800b72c <LCD_DrawBitmap>
 800f16a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f16c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f16e:	4453      	add	r3, sl
 800f170:	9319      	str	r3, [sp, #100]	; 0x64
 800f172:	6883      	ldr	r3, [r0, #8]
 800f174:	a919      	add	r1, sp, #100	; 0x64
 800f176:	695b      	ldr	r3, [r3, #20]
 800f178:	462a      	mov	r2, r5
 800f17a:	4798      	blx	r3
 800f17c:	4682      	mov	sl, r0
 800f17e:	e7dd      	b.n	800f13c <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800f180:	3501      	adds	r5, #1
 800f182:	e77e      	b.n	800f082 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 800f184:	a818      	add	r0, sp, #96	; 0x60
 800f186:	f7fe ffed 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f18a:	e1be      	b.n	800f50a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800f18c:	2301      	movs	r3, #1
 800f18e:	9300      	str	r3, [sp, #0]
 800f190:	9301      	str	r3, [sp, #4]
 800f192:	9004      	str	r0, [sp, #16]
 800f194:	9402      	str	r4, [sp, #8]
 800f196:	f8cd 900c 	str.w	r9, [sp, #12]
 800f19a:	f8cd 8014 	str.w	r8, [sp, #20]
 800f19e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f1a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f1a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f1a4:	463a      	mov	r2, r7
 800f1a6:	e041      	b.n	800f22c <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 800f1a8:	4630      	mov	r0, r6
 800f1aa:	910a      	str	r1, [sp, #40]	; 0x28
 800f1ac:	f7fe ffcc 	bl	800e148 <GUI_ALLOC_LockH>
 800f1b0:	4682      	mov	sl, r0
 800f1b2:	a81c      	add	r0, sp, #112	; 0x70
 800f1b4:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800f1b8:	f840 ad10 	str.w	sl, [r0, #-16]!
 800f1bc:	f8da 4000 	ldr.w	r4, [sl]
 800f1c0:	9210      	str	r2, [sp, #64]	; 0x40
 800f1c2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f1c6:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 800f1ca:	4c9e      	ldr	r4, [pc, #632]	; (800f444 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 800f1cc:	b213      	sxth	r3, r2
 800f1ce:	f8da 200c 	ldr.w	r2, [sl, #12]
 800f1d2:	920b      	str	r2, [sp, #44]	; 0x2c
 800f1d4:	9309      	str	r3, [sp, #36]	; 0x24
 800f1d6:	f7fe ffc5 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f1da:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800f1de:	900e      	str	r0, [sp, #56]	; 0x38
 800f1e0:	4899      	ldr	r0, [pc, #612]	; (800f448 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 800f1e2:	6800      	ldr	r0, [r0, #0]
 800f1e4:	7c40      	ldrb	r0, [r0, #17]
 800f1e6:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800f1ea:	6925      	ldr	r5, [r4, #16]
 800f1ec:	f8d5 8000 	ldr.w	r8, [r5]
 800f1f0:	f7fc f852 	bl	800b298 <GUI_GetBitsPerPixelEx>
 800f1f4:	2808      	cmp	r0, #8
 800f1f6:	fa0f fb87 	sxth.w	fp, r7
 800f1fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f1fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f200:	d904      	bls.n	800f20c <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800f202:	2810      	cmp	r0, #16
 800f204:	bf8c      	ite	hi
 800f206:	2404      	movhi	r4, #4
 800f208:	2402      	movls	r4, #2
 800f20a:	e000      	b.n	800f20e <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 800f20c:	2401      	movs	r4, #1
 800f20e:	45a9      	cmp	r9, r5
 800f210:	d10f      	bne.n	800f232 <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 800f212:	2001      	movs	r0, #1
 800f214:	9203      	str	r2, [sp, #12]
 800f216:	f10a 0218 	add.w	r2, sl, #24
 800f21a:	9000      	str	r0, [sp, #0]
 800f21c:	9001      	str	r0, [sp, #4]
 800f21e:	9102      	str	r1, [sp, #8]
 800f220:	9204      	str	r2, [sp, #16]
 800f222:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f224:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f226:	2200      	movs	r2, #0
 800f228:	9205      	str	r2, [sp, #20]
 800f22a:	465a      	mov	r2, fp
 800f22c:	f7fc fa7e 	bl	800b72c <LCD_DrawBitmap>
 800f230:	e16b      	b.n	800f50a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800f232:	2920      	cmp	r1, #32
 800f234:	f040 808e 	bne.w	800f354 <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 800f238:	fb0b f004 	mul.w	r0, fp, r4
 800f23c:	f7ff f950 	bl	800e4e0 <GUI_ALLOC_AllocNoInit>
 800f240:	900e      	str	r0, [sp, #56]	; 0x38
 800f242:	2800      	cmp	r0, #0
 800f244:	f000 8161 	beq.w	800f50a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800f248:	f7fe ff7e 	bl	800e148 <GUI_ALLOC_LockH>
 800f24c:	901a      	str	r0, [sp, #104]	; 0x68
 800f24e:	4630      	mov	r0, r6
 800f250:	f7fe ff7a 	bl	800e148 <GUI_ALLOC_LockH>
 800f254:	9018      	str	r0, [sp, #96]	; 0x60
 800f256:	692b      	ldr	r3, [r5, #16]
 800f258:	f100 0a18 	add.w	sl, r0, #24
 800f25c:	ea4f 068b 	mov.w	r6, fp, lsl #2
 800f260:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800f264:	2b00      	cmp	r3, #0
 800f266:	d02f      	beq.n	800f2c8 <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 800f268:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800f26c:	2c02      	cmp	r4, #2
 800f26e:	d003      	beq.n	800f278 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800f270:	2c04      	cmp	r4, #4
 800f272:	d001      	beq.n	800f278 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800f274:	2c01      	cmp	r4, #1
 800f276:	d106      	bne.n	800f286 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800f278:	4650      	mov	r0, sl
 800f27a:	692f      	ldr	r7, [r5, #16]
 800f27c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f27e:	465a      	mov	r2, fp
 800f280:	4623      	mov	r3, r4
 800f282:	47b8      	blx	r7
 800f284:	44b2      	add	sl, r6
 800f286:	2301      	movs	r3, #1
 800f288:	2200      	movs	r2, #0
 800f28a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	9301      	str	r3, [sp, #4]
 800f290:	9203      	str	r2, [sp, #12]
 800f292:	9104      	str	r1, [sp, #16]
 800f294:	9205      	str	r2, [sp, #20]
 800f296:	4641      	mov	r1, r8
 800f298:	465a      	mov	r2, fp
 800f29a:	f8cd 9008 	str.w	r9, [sp, #8]
 800f29e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f2a0:	f7fc fa44 	bl	800b72c <LCD_DrawBitmap>
 800f2a4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f2a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f2a8:	f108 0701 	add.w	r7, r8, #1
 800f2ac:	fa02 f381 	sxtah	r3, r2, r1
 800f2b0:	42bb      	cmp	r3, r7
 800f2b2:	d107      	bne.n	800f2c4 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 800f2b4:	a818      	add	r0, sp, #96	; 0x60
 800f2b6:	f7fe ff55 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f2ba:	a81a      	add	r0, sp, #104	; 0x68
 800f2bc:	f7fe ff52 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f2c0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f2c2:	e120      	b.n	800f506 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800f2c4:	46b8      	mov	r8, r7
 800f2c6:	e7d1      	b.n	800f26c <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 800f2c8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f2ca:	2c02      	cmp	r4, #2
 800f2cc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800f2ce:	d00e      	beq.n	800f2ee <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 800f2d0:	2c04      	cmp	r4, #4
 800f2d2:	d018      	beq.n	800f306 <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 800f2d4:	2c01      	cmp	r4, #1
 800f2d6:	d125      	bne.n	800f324 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 800f2d8:	2300      	movs	r3, #0
 800f2da:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800f2de:	9309      	str	r3, [sp, #36]	; 0x24
 800f2e0:	47c0      	blx	r8
 800f2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2e4:	54f8      	strb	r0, [r7, r3]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	459b      	cmp	fp, r3
 800f2ea:	d1f6      	bne.n	800f2da <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 800f2ec:	e019      	b.n	800f322 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800f2f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f2f6:	47c0      	blx	r8
 800f2f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2fa:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 800f2fe:	3301      	adds	r3, #1
 800f300:	459b      	cmp	fp, r3
 800f302:	d1f5      	bne.n	800f2f0 <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 800f304:	e00d      	b.n	800f322 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800f306:	465a      	mov	r2, fp
 800f308:	2300      	movs	r3, #0
 800f30a:	f85a 0003 	ldr.w	r0, [sl, r3]
 800f30e:	920b      	str	r2, [sp, #44]	; 0x2c
 800f310:	9309      	str	r3, [sp, #36]	; 0x24
 800f312:	47c0      	blx	r8
 800f314:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f318:	3a01      	subs	r2, #1
 800f31a:	50f8      	str	r0, [r7, r3]
 800f31c:	f103 0304 	add.w	r3, r3, #4
 800f320:	d1f3      	bne.n	800f30a <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 800f322:	44b2      	add	sl, r6
 800f324:	2301      	movs	r3, #1
 800f326:	2200      	movs	r2, #0
 800f328:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f32a:	9300      	str	r3, [sp, #0]
 800f32c:	9301      	str	r3, [sp, #4]
 800f32e:	9203      	str	r2, [sp, #12]
 800f330:	9104      	str	r1, [sp, #16]
 800f332:	9205      	str	r2, [sp, #20]
 800f334:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f336:	f8cd 9008 	str.w	r9, [sp, #8]
 800f33a:	4629      	mov	r1, r5
 800f33c:	465a      	mov	r2, fp
 800f33e:	f7fc f9f5 	bl	800b72c <LCD_DrawBitmap>
 800f342:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f344:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f346:	1c6f      	adds	r7, r5, #1
 800f348:	fa01 f380 	sxtah	r3, r1, r0
 800f34c:	42bb      	cmp	r3, r7
 800f34e:	d0b1      	beq.n	800f2b4 <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 800f350:	463d      	mov	r5, r7
 800f352:	e7ba      	b.n	800f2ca <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800f354:	2910      	cmp	r1, #16
 800f356:	f040 80d8 	bne.w	800f50a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800f35a:	fa0f fa87 	sxth.w	sl, r7
 800f35e:	fb0a f004 	mul.w	r0, sl, r4
 800f362:	f7ff f8bd 	bl	800e4e0 <GUI_ALLOC_AllocNoInit>
 800f366:	9012      	str	r0, [sp, #72]	; 0x48
 800f368:	2800      	cmp	r0, #0
 800f36a:	f000 80ce 	beq.w	800f50a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800f36e:	f7fe feeb 	bl	800e148 <GUI_ALLOC_LockH>
 800f372:	901a      	str	r0, [sp, #104]	; 0x68
 800f374:	4630      	mov	r0, r6
 800f376:	f7fe fee7 	bl	800e148 <GUI_ALLOC_LockH>
 800f37a:	9018      	str	r0, [sp, #96]	; 0x60
 800f37c:	692b      	ldr	r3, [r5, #16]
 800f37e:	f100 0618 	add.w	r6, r0, #24
 800f382:	b113      	cbz	r3, 800f38a <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 800f384:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f388:	b92b      	cbnz	r3, 800f396 <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 800f38a:	00e2      	lsls	r2, r4, #3
 800f38c:	b23f      	sxth	r7, r7
 800f38e:	9211      	str	r2, [sp, #68]	; 0x44
 800f390:	007f      	lsls	r7, r7, #1
 800f392:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f394:	e088      	b.n	800f4a8 <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 800f396:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800f39a:	0080      	lsls	r0, r0, #2
 800f39c:	f7ff f8a0 	bl	800e4e0 <GUI_ALLOC_AllocNoInit>
 800f3a0:	9011      	str	r0, [sp, #68]	; 0x44
 800f3a2:	b118      	cbz	r0, 800f3ac <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 800f3a4:	f7fe fed0 	bl	800e148 <GUI_ALLOC_LockH>
 800f3a8:	9019      	str	r0, [sp, #100]	; 0x64
 800f3aa:	e001      	b.n	800f3b0 <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 800f3ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f3ae:	9319      	str	r3, [sp, #100]	; 0x64
 800f3b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	f000 80a0 	beq.w	800f4f8 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800f3b8:	b23f      	sxth	r7, r7
 800f3ba:	007f      	lsls	r7, r7, #1
 800f3bc:	970e      	str	r7, [sp, #56]	; 0x38
 800f3be:	00e7      	lsls	r7, r4, #3
 800f3c0:	9713      	str	r7, [sp, #76]	; 0x4c
 800f3c2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f3c4:	970c      	str	r7, [sp, #48]	; 0x30
 800f3c6:	2c02      	cmp	r4, #2
 800f3c8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800f3cc:	d004      	beq.n	800f3d8 <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 800f3ce:	2c04      	cmp	r4, #4
 800f3d0:	d007      	beq.n	800f3e2 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800f3d2:	2c01      	cmp	r4, #1
 800f3d4:	d114      	bne.n	800f400 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 800f3d6:	e004      	b.n	800f3e2 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800f3d8:	4630      	mov	r0, r6
 800f3da:	9919      	ldr	r1, [sp, #100]	; 0x64
 800f3dc:	4652      	mov	r2, sl
 800f3de:	4623      	mov	r3, r4
 800f3e0:	e003      	b.n	800f3ea <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 800f3e2:	9919      	ldr	r1, [sp, #100]	; 0x64
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	4652      	mov	r2, sl
 800f3e8:	2302      	movs	r3, #2
 800f3ea:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800f3ee:	47b8      	blx	r7
 800f3f0:	692f      	ldr	r7, [r5, #16]
 800f3f2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800f3f4:	4641      	mov	r1, r8
 800f3f6:	4652      	mov	r2, sl
 800f3f8:	4623      	mov	r3, r4
 800f3fa:	47b8      	blx	r7
 800f3fc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800f3fe:	443e      	add	r6, r7
 800f400:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800f402:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f404:	9104      	str	r1, [sp, #16]
 800f406:	2301      	movs	r3, #1
 800f408:	2200      	movs	r2, #0
 800f40a:	f107 0801 	add.w	r8, r7, #1
 800f40e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800f410:	9300      	str	r3, [sp, #0]
 800f412:	9301      	str	r3, [sp, #4]
 800f414:	9702      	str	r7, [sp, #8]
 800f416:	9203      	str	r2, [sp, #12]
 800f418:	9205      	str	r2, [sp, #20]
 800f41a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f41c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f41e:	465a      	mov	r2, fp
 800f420:	f7fc f984 	bl	800b72c <LCD_DrawBitmap>
 800f424:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800f426:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f428:	fa00 f387 	sxtah	r3, r0, r7
 800f42c:	4543      	cmp	r3, r8
 800f42e:	d002      	beq.n	800f436 <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 800f430:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800f434:	e7c7      	b.n	800f3c6 <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 800f436:	a819      	add	r0, sp, #100	; 0x64
 800f438:	f7fe fe94 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f43c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f43e:	f7fe febd 	bl	800e1bc <GUI_ALLOC_Free>
 800f442:	e059      	b.n	800f4f8 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800f444:	20005694 	.word	0x20005694
 800f448:	20000084 	.word	0x20000084
 800f44c:	2c04      	cmp	r4, #4
 800f44e:	d041      	beq.n	800f4d4 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 800f450:	2c01      	cmp	r4, #1
 800f452:	d111      	bne.n	800f478 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 800f454:	464a      	mov	r2, r9
 800f456:	4631      	mov	r1, r6
 800f458:	f831 0b02 	ldrh.w	r0, [r1], #2
 800f45c:	910a      	str	r1, [sp, #40]	; 0x28
 800f45e:	920b      	str	r2, [sp, #44]	; 0x2c
 800f460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f462:	4798      	blx	r3
 800f464:	47c0      	blx	r8
 800f466:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f468:	f802 0b01 	strb.w	r0, [r2], #1
 800f46c:	eb09 000a 	add.w	r0, r9, sl
 800f470:	4282      	cmp	r2, r0
 800f472:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f474:	d1f0      	bne.n	800f458 <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 800f476:	443e      	add	r6, r7
 800f478:	2301      	movs	r3, #1
 800f47a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f47c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f47e:	9300      	str	r3, [sp, #0]
 800f480:	2200      	movs	r2, #0
 800f482:	9301      	str	r3, [sp, #4]
 800f484:	9002      	str	r0, [sp, #8]
 800f486:	9203      	str	r2, [sp, #12]
 800f488:	9104      	str	r1, [sp, #16]
 800f48a:	9205      	str	r2, [sp, #20]
 800f48c:	4629      	mov	r1, r5
 800f48e:	465a      	mov	r2, fp
 800f490:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f492:	f7fc f94b 	bl	800b72c <LCD_DrawBitmap>
 800f496:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f498:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f49a:	f105 0901 	add.w	r9, r5, #1
 800f49e:	fa02 f381 	sxtah	r3, r2, r1
 800f4a2:	454b      	cmp	r3, r9
 800f4a4:	d028      	beq.n	800f4f8 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800f4a6:	464d      	mov	r5, r9
 800f4a8:	2c02      	cmp	r4, #2
 800f4aa:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800f4ae:	d1cd      	bne.n	800f44c <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 800f4b0:	464b      	mov	r3, r9
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	46d9      	mov	r9, fp
 800f4b6:	f831 0b02 	ldrh.w	r0, [r1], #2
 800f4ba:	910a      	str	r1, [sp, #40]	; 0x28
 800f4bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f4be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4c0:	4790      	blx	r2
 800f4c2:	47c0      	blx	r8
 800f4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f4c8:	f823 0b02 	strh.w	r0, [r3], #2
 800f4cc:	f1b9 0901 	subs.w	r9, r9, #1
 800f4d0:	d1f1      	bne.n	800f4b6 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 800f4d2:	e7d0      	b.n	800f476 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800f4d4:	464b      	mov	r3, r9
 800f4d6:	4631      	mov	r1, r6
 800f4d8:	46d9      	mov	r9, fp
 800f4da:	f831 0b02 	ldrh.w	r0, [r1], #2
 800f4de:	910a      	str	r1, [sp, #40]	; 0x28
 800f4e0:	9309      	str	r3, [sp, #36]	; 0x24
 800f4e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4e4:	4790      	blx	r2
 800f4e6:	47c0      	blx	r8
 800f4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f4ec:	f843 0b04 	str.w	r0, [r3], #4
 800f4f0:	f1b9 0901 	subs.w	r9, r9, #1
 800f4f4:	d1f1      	bne.n	800f4da <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 800f4f6:	e7be      	b.n	800f476 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800f4f8:	a818      	add	r0, sp, #96	; 0x60
 800f4fa:	f7fe fe33 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f4fe:	a81a      	add	r0, sp, #104	; 0x68
 800f500:	f7fe fe30 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f504:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f506:	f7fe fe59 	bl	800e1bc <GUI_ALLOC_Free>
 800f50a:	b01d      	add	sp, #116	; 0x74
 800f50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f510 <GUI_MEMDEV__WriteToActiveAlpha>:
 800f510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f514:	4d5f      	ldr	r5, [pc, #380]	; (800f694 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 800f516:	4f60      	ldr	r7, [pc, #384]	; (800f698 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 800f518:	682b      	ldr	r3, [r5, #0]
 800f51a:	7c5b      	ldrb	r3, [r3, #17]
 800f51c:	b091      	sub	sp, #68	; 0x44
 800f51e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800f522:	900d      	str	r0, [sp, #52]	; 0x34
 800f524:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800f528:	460e      	mov	r6, r1
 800f52a:	4614      	mov	r4, r2
 800f52c:	f7fe fe0c 	bl	800e148 <GUI_ALLOC_LockH>
 800f530:	4602      	mov	r2, r0
 800f532:	a810      	add	r0, sp, #64	; 0x40
 800f534:	6813      	ldr	r3, [r2, #0]
 800f536:	f840 2d08 	str.w	r2, [r0, #-8]!
 800f53a:	691b      	ldr	r3, [r3, #16]
 800f53c:	f8b2 a008 	ldrh.w	sl, [r2, #8]
 800f540:	685b      	ldr	r3, [r3, #4]
 800f542:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 800f546:	9309      	str	r3, [sp, #36]	; 0x24
 800f548:	f7fe fe0c 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f54c:	682b      	ldr	r3, [r5, #0]
 800f54e:	7c5b      	ldrb	r3, [r3, #17]
 800f550:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800f554:	68c3      	ldr	r3, [r0, #12]
 800f556:	2108      	movs	r1, #8
 800f558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f55a:	4798      	blx	r3
 800f55c:	2817      	cmp	r0, #23
 800f55e:	bf88      	it	hi
 800f560:	2020      	movhi	r0, #32
 800f562:	9008      	str	r0, [sp, #32]
 800f564:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f568:	f8d8 2000 	ldr.w	r2, [r8]
 800f56c:	910a      	str	r1, [sp, #40]	; 0x28
 800f56e:	2000      	movs	r0, #0
 800f570:	920b      	str	r2, [sp, #44]	; 0x2c
 800f572:	f7fc fe07 	bl	800c184 <GUI__AllocAlphaBuffer>
 800f576:	2800      	cmp	r0, #0
 800f578:	f040 8089 	bne.w	800f68e <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800f57c:	682a      	ldr	r2, [r5, #0]
 800f57e:	fa0f f78a 	sxth.w	r7, sl
 800f582:	19f5      	adds	r5, r6, r7
 800f584:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800f588:	3d01      	subs	r5, #1
 800f58a:	1aed      	subs	r5, r5, r3
 800f58c:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 800f590:	2d00      	cmp	r5, #0
 800f592:	bfcc      	ite	gt
 800f594:	ebc5 0507 	rsbgt	r5, r5, r7
 800f598:	463d      	movle	r5, r7
 800f59a:	42b3      	cmp	r3, r6
 800f59c:	bfc3      	ittte	gt
 800f59e:	ebc6 0103 	rsbgt	r1, r6, r3
 800f5a2:	ebc1 0505 	rsbgt	r5, r1, r5
 800f5a6:	461e      	movgt	r6, r3
 800f5a8:	2100      	movle	r1, #0
 800f5aa:	2d00      	cmp	r5, #0
 800f5ac:	dd6f      	ble.n	800f68e <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800f5ae:	fa0f f389 	sxth.w	r3, r9
 800f5b2:	18e0      	adds	r0, r4, r3
 800f5b4:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 800f5b8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800f5bc:	3801      	subs	r0, #1
 800f5be:	ebcc 0000 	rsb	r0, ip, r0
 800f5c2:	2800      	cmp	r0, #0
 800f5c4:	bfc8      	it	gt
 800f5c6:	ebc0 0303 	rsbgt	r3, r0, r3
 800f5ca:	4294      	cmp	r4, r2
 800f5cc:	bfbd      	ittte	lt
 800f5ce:	ebc4 0b02 	rsblt	fp, r4, r2
 800f5d2:	ebcb 0303 	rsblt	r3, fp, r3
 800f5d6:	4614      	movlt	r4, r2
 800f5d8:	f04f 0b00 	movge.w	fp, #0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	dd56      	ble.n	800f68e <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800f5e0:	fb07 1b0b 	mla	fp, r7, fp, r1
 800f5e4:	18e3      	adds	r3, r4, r3
 800f5e6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800f5ea:	930c      	str	r3, [sp, #48]	; 0x30
 800f5ec:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f5ee:	f7f9 fdcd 	bl	800918c <GUI_MEMDEV_GetDataPtr>
 800f5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5f4:	9300      	str	r3, [sp, #0]
 800f5f6:	ab0f      	add	r3, sp, #60	; 0x3c
 800f5f8:	eb00 020b 	add.w	r2, r0, fp
 800f5fc:	9301      	str	r3, [sp, #4]
 800f5fe:	4630      	mov	r0, r6
 800f600:	4621      	mov	r1, r4
 800f602:	462b      	mov	r3, r5
 800f604:	f7fc fcd4 	bl	800bfb0 <GUI__DoAlphaBlending>
 800f608:	4681      	mov	r9, r0
 800f60a:	2800      	cmp	r0, #0
 800f60c:	d03f      	beq.n	800f68e <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800f60e:	4b23      	ldr	r3, [pc, #140]	; (800f69c <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 800f610:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f612:	4299      	cmp	r1, r3
 800f614:	d01e      	beq.n	800f654 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800f616:	4629      	mov	r1, r5
 800f618:	9a08      	ldr	r2, [sp, #32]
 800f61a:	4643      	mov	r3, r8
 800f61c:	f001 fc50 	bl	8010ec0 <GUI__CompactPixelIndicesEx>
 800f620:	b9c0      	cbnz	r0, 800f654 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800f622:	f8d8 c010 	ldr.w	ip, [r8, #16]
 800f626:	f1bc 0f00 	cmp.w	ip, #0
 800f62a:	d006      	beq.n	800f63a <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 800f62c:	4648      	mov	r0, r9
 800f62e:	4649      	mov	r1, r9
 800f630:	fa0f f28a 	sxth.w	r2, sl
 800f634:	2304      	movs	r3, #4
 800f636:	47e0      	blx	ip
 800f638:	e00c      	b.n	800f654 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800f63a:	464a      	mov	r2, r9
 800f63c:	463b      	mov	r3, r7
 800f63e:	6810      	ldr	r0, [r2, #0]
 800f640:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f642:	9206      	str	r2, [sp, #24]
 800f644:	9307      	str	r3, [sp, #28]
 800f646:	4788      	blx	r1
 800f648:	9b07      	ldr	r3, [sp, #28]
 800f64a:	9a06      	ldr	r2, [sp, #24]
 800f64c:	3b01      	subs	r3, #1
 800f64e:	f842 0b04 	str.w	r0, [r2], #4
 800f652:	d1f4      	bne.n	800f63e <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 800f654:	9a08      	ldr	r2, [sp, #32]
 800f656:	9202      	str	r2, [sp, #8]
 800f658:	2301      	movs	r3, #1
 800f65a:	2200      	movs	r2, #0
 800f65c:	f104 0c01 	add.w	ip, r4, #1
 800f660:	9300      	str	r3, [sp, #0]
 800f662:	9301      	str	r3, [sp, #4]
 800f664:	9203      	str	r2, [sp, #12]
 800f666:	9205      	str	r2, [sp, #20]
 800f668:	f8cd 9010 	str.w	r9, [sp, #16]
 800f66c:	4630      	mov	r0, r6
 800f66e:	4621      	mov	r1, r4
 800f670:	462a      	mov	r2, r5
 800f672:	f8cd c01c 	str.w	ip, [sp, #28]
 800f676:	f7fc f859 	bl	800b72c <LCD_DrawBitmap>
 800f67a:	2304      	movs	r3, #4
 800f67c:	fb1a bb03 	smlabb	fp, sl, r3, fp
 800f680:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800f684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f686:	459c      	cmp	ip, r3
 800f688:	d001      	beq.n	800f68e <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800f68a:	4664      	mov	r4, ip
 800f68c:	e7ae      	b.n	800f5ec <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 800f68e:	b011      	add	sp, #68	; 0x44
 800f690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f694:	20000084 	.word	0x20000084
 800f698:	20005694 	.word	0x20005694
 800f69c:	0800e54f 	.word	0x0800e54f

0800f6a0 <GUI_MEMDEV_WriteAt>:
 800f6a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f6a2:	460c      	mov	r4, r1
 800f6a4:	4615      	mov	r5, r2
 800f6a6:	4606      	mov	r6, r0
 800f6a8:	b330      	cbz	r0, 800f6f8 <GUI_MEMDEV_WriteAt+0x58>
 800f6aa:	f7fe fd4d 	bl	800e148 <GUI_ALLOC_LockH>
 800f6ae:	4a13      	ldr	r2, [pc, #76]	; (800f6fc <GUI_MEMDEV_WriteAt+0x5c>)
 800f6b0:	8943      	ldrh	r3, [r0, #10]
 800f6b2:	9001      	str	r0, [sp, #4]
 800f6b4:	4294      	cmp	r4, r2
 800f6b6:	8902      	ldrh	r2, [r0, #8]
 800f6b8:	bf04      	itt	eq
 800f6ba:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 800f6be:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 800f6c2:	f8ad 4008 	strh.w	r4, [sp, #8]
 800f6c6:	3a01      	subs	r2, #1
 800f6c8:	3b01      	subs	r3, #1
 800f6ca:	4422      	add	r2, r4
 800f6cc:	442b      	add	r3, r5
 800f6ce:	a801      	add	r0, sp, #4
 800f6d0:	f8ad 200c 	strh.w	r2, [sp, #12]
 800f6d4:	f8ad 500a 	strh.w	r5, [sp, #10]
 800f6d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f6dc:	f7fe fd42 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f6e0:	a802      	add	r0, sp, #8
 800f6e2:	f7f9 f9c5 	bl	8008a70 <WM__InitIVRSearch>
 800f6e6:	b138      	cbz	r0, 800f6f8 <GUI_MEMDEV_WriteAt+0x58>
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	4621      	mov	r1, r4
 800f6ec:	462a      	mov	r2, r5
 800f6ee:	f7fa fb17 	bl	8009d20 <GUI_MEMDEV__WriteToActiveAt>
 800f6f2:	f7f9 f8fb 	bl	80088ec <WM__GetNextIVR>
 800f6f6:	e7f6      	b.n	800f6e6 <GUI_MEMDEV_WriteAt+0x46>
 800f6f8:	b004      	add	sp, #16
 800f6fa:	bd70      	pop	{r4, r5, r6, pc}
 800f6fc:	fffff001 	.word	0xfffff001

0800f700 <GUI_MEMDEV_Write>:
 800f700:	4901      	ldr	r1, [pc, #4]	; (800f708 <GUI_MEMDEV_Write+0x8>)
 800f702:	460a      	mov	r2, r1
 800f704:	f7ff bfcc 	b.w	800f6a0 <GUI_MEMDEV_WriteAt>
 800f708:	fffff001 	.word	0xfffff001

0800f70c <GUI_USAGE_BM_AddPixel>:
 800f70c:	4603      	mov	r3, r0
 800f70e:	b510      	push	{r4, lr}
 800f710:	f933 4b14 	ldrsh.w	r4, [r3], #20
 800f714:	1b09      	subs	r1, r1, r4
 800f716:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800f71a:	6900      	ldr	r0, [r0, #16]
 800f71c:	1b12      	subs	r2, r2, r4
 800f71e:	fb00 3302 	mla	r3, r0, r2, r3
 800f722:	10c8      	asrs	r0, r1, #3
 800f724:	2280      	movs	r2, #128	; 0x80
 800f726:	f001 0107 	and.w	r1, r1, #7
 800f72a:	fa42 f101 	asr.w	r1, r2, r1
 800f72e:	5c1a      	ldrb	r2, [r3, r0]
 800f730:	4311      	orrs	r1, r2
 800f732:	5419      	strb	r1, [r3, r0]
 800f734:	bd10      	pop	{r4, pc}

0800f736 <GUI_USAGE_BM_GetNextDirty>:
 800f736:	b570      	push	{r4, r5, r6, lr}
 800f738:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800f73c:	680b      	ldr	r3, [r1, #0]
 800f73e:	8886      	ldrh	r6, [r0, #4]
 800f740:	42a2      	cmp	r2, r4
 800f742:	da41      	bge.n	800f7c8 <GUI_USAGE_BM_GetNextDirty+0x92>
 800f744:	b236      	sxth	r6, r6
 800f746:	42b3      	cmp	r3, r6
 800f748:	6904      	ldr	r4, [r0, #16]
 800f74a:	da3d      	bge.n	800f7c8 <GUI_USAGE_BM_GetNextDirty+0x92>
 800f74c:	3014      	adds	r0, #20
 800f74e:	fb04 0202 	mla	r2, r4, r2, r0
 800f752:	10dd      	asrs	r5, r3, #3
 800f754:	1e70      	subs	r0, r6, #1
 800f756:	1954      	adds	r4, r2, r5
 800f758:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 800f75c:	5d55      	ldrb	r5, [r2, r5]
 800f75e:	f003 0207 	and.w	r2, r3, #7
 800f762:	fa05 f202 	lsl.w	r2, r5, r2
 800f766:	3401      	adds	r4, #1
 800f768:	b2d2      	uxtb	r2, r2
 800f76a:	b93a      	cbnz	r2, 800f77c <GUI_USAGE_BM_GetNextDirty+0x46>
 800f76c:	b368      	cbz	r0, 800f7ca <GUI_USAGE_BM_GetNextDirty+0x94>
 800f76e:	3308      	adds	r3, #8
 800f770:	f814 2b01 	ldrb.w	r2, [r4], #1
 800f774:	3801      	subs	r0, #1
 800f776:	f023 0307 	bic.w	r3, r3, #7
 800f77a:	e7f6      	b.n	800f76a <GUI_USAGE_BM_GetNextDirty+0x34>
 800f77c:	0615      	lsls	r5, r2, #24
 800f77e:	d403      	bmi.n	800f788 <GUI_USAGE_BM_GetNextDirty+0x52>
 800f780:	0052      	lsls	r2, r2, #1
 800f782:	b2d2      	uxtb	r2, r2
 800f784:	3301      	adds	r3, #1
 800f786:	e7f9      	b.n	800f77c <GUI_USAGE_BM_GetNextDirty+0x46>
 800f788:	2aff      	cmp	r2, #255	; 0xff
 800f78a:	461d      	mov	r5, r3
 800f78c:	d005      	beq.n	800f79a <GUI_USAGE_BM_GetNextDirty+0x64>
 800f78e:	0656      	lsls	r6, r2, #25
 800f790:	d504      	bpl.n	800f79c <GUI_USAGE_BM_GetNextDirty+0x66>
 800f792:	0052      	lsls	r2, r2, #1
 800f794:	b2d2      	uxtb	r2, r2
 800f796:	3301      	adds	r3, #1
 800f798:	e7f9      	b.n	800f78e <GUI_USAGE_BM_GetNextDirty+0x58>
 800f79a:	3307      	adds	r3, #7
 800f79c:	f003 0207 	and.w	r2, r3, #7
 800f7a0:	2a07      	cmp	r2, #7
 800f7a2:	d10d      	bne.n	800f7c0 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800f7a4:	3801      	subs	r0, #1
 800f7a6:	d40b      	bmi.n	800f7c0 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800f7a8:	f814 2b01 	ldrb.w	r2, [r4], #1
 800f7ac:	2aff      	cmp	r2, #255	; 0xff
 800f7ae:	d101      	bne.n	800f7b4 <GUI_USAGE_BM_GetNextDirty+0x7e>
 800f7b0:	3308      	adds	r3, #8
 800f7b2:	e7f7      	b.n	800f7a4 <GUI_USAGE_BM_GetNextDirty+0x6e>
 800f7b4:	0610      	lsls	r0, r2, #24
 800f7b6:	d503      	bpl.n	800f7c0 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800f7b8:	0052      	lsls	r2, r2, #1
 800f7ba:	b2d2      	uxtb	r2, r2
 800f7bc:	3301      	adds	r3, #1
 800f7be:	e7f9      	b.n	800f7b4 <GUI_USAGE_BM_GetNextDirty+0x7e>
 800f7c0:	1b58      	subs	r0, r3, r5
 800f7c2:	600d      	str	r5, [r1, #0]
 800f7c4:	3001      	adds	r0, #1
 800f7c6:	bd70      	pop	{r4, r5, r6, pc}
 800f7c8:	2000      	movs	r0, #0
 800f7ca:	bd70      	pop	{r4, r5, r6, pc}

0800f7cc <_GUI_USAGE_BM_Delete>:
 800f7cc:	f7fe bcf6 	b.w	800e1bc <GUI_ALLOC_Free>

0800f7d0 <GUI_USAGE_BM_Clear>:
 800f7d0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800f7d4:	6902      	ldr	r2, [r0, #16]
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	3014      	adds	r0, #20
 800f7da:	435a      	muls	r2, r3
 800f7dc:	f001 be76 	b.w	80114cc <memset>

0800f7e0 <GUI_USAGE_BM_AddHLine>:
 800f7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e2:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f7e6:	1b09      	subs	r1, r1, r4
 800f7e8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800f7ec:	42a1      	cmp	r1, r4
 800f7ee:	da2f      	bge.n	800f850 <GUI_USAGE_BM_AddHLine+0x70>
 800f7f0:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800f7f4:	440b      	add	r3, r1
 800f7f6:	f100 0414 	add.w	r4, r0, #20
 800f7fa:	3b01      	subs	r3, #1
 800f7fc:	6900      	ldr	r0, [r0, #16]
 800f7fe:	1b52      	subs	r2, r2, r5
 800f800:	43de      	mvns	r6, r3
 800f802:	fb00 4202 	mla	r2, r0, r2, r4
 800f806:	f001 0707 	and.w	r7, r1, #7
 800f80a:	10cc      	asrs	r4, r1, #3
 800f80c:	f006 0607 	and.w	r6, r6, #7
 800f810:	21ff      	movs	r1, #255	; 0xff
 800f812:	fa41 f707 	asr.w	r7, r1, r7
 800f816:	fa01 f606 	lsl.w	r6, r1, r6
 800f81a:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 800f81e:	eb02 0504 	add.w	r5, r2, r4
 800f822:	b2ff      	uxtb	r7, r7
 800f824:	b2f6      	uxtb	r6, r6
 800f826:	5d10      	ldrb	r0, [r2, r4]
 800f828:	d103      	bne.n	800f832 <GUI_USAGE_BM_AddHLine+0x52>
 800f82a:	403e      	ands	r6, r7
 800f82c:	4330      	orrs	r0, r6
 800f82e:	5510      	strb	r0, [r2, r4]
 800f830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f832:	4338      	orrs	r0, r7
 800f834:	5510      	strb	r0, [r2, r4]
 800f836:	1e5c      	subs	r4, r3, #1
 800f838:	2c00      	cmp	r4, #0
 800f83a:	f105 0501 	add.w	r5, r5, #1
 800f83e:	dd04      	ble.n	800f84a <GUI_USAGE_BM_AddHLine+0x6a>
 800f840:	4628      	mov	r0, r5
 800f842:	4622      	mov	r2, r4
 800f844:	f001 fe42 	bl	80114cc <memset>
 800f848:	4425      	add	r5, r4
 800f84a:	782b      	ldrb	r3, [r5, #0]
 800f84c:	431e      	orrs	r6, r3
 800f84e:	702e      	strb	r6, [r5, #0]
 800f850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f854 <GUI_USAGE_BM_Create>:
 800f854:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 800f858:	f102 060f 	add.w	r6, r2, #15
 800f85c:	1136      	asrs	r6, r6, #4
 800f85e:	0076      	lsls	r6, r6, #1
 800f860:	4682      	mov	sl, r0
 800f862:	fb06 f003 	mul.w	r0, r6, r3
 800f866:	3014      	adds	r0, #20
 800f868:	4689      	mov	r9, r1
 800f86a:	4690      	mov	r8, r2
 800f86c:	461f      	mov	r7, r3
 800f86e:	f7fe fe43 	bl	800e4f8 <GUI_ALLOC_AllocZero>
 800f872:	4683      	mov	fp, r0
 800f874:	b198      	cbz	r0, 800f89e <GUI_USAGE_BM_Create+0x4a>
 800f876:	f7fe fc67 	bl	800e148 <GUI_ALLOC_LockH>
 800f87a:	4604      	mov	r4, r0
 800f87c:	4b0a      	ldr	r3, [pc, #40]	; (800f8a8 <GUI_USAGE_BM_Create+0x54>)
 800f87e:	60a3      	str	r3, [r4, #8]
 800f880:	a802      	add	r0, sp, #8
 800f882:	2301      	movs	r3, #1
 800f884:	f840 4d04 	str.w	r4, [r0, #-4]!
 800f888:	f8a4 8004 	strh.w	r8, [r4, #4]
 800f88c:	f8a4 a000 	strh.w	sl, [r4]
 800f890:	f8a4 9002 	strh.w	r9, [r4, #2]
 800f894:	80e7      	strh	r7, [r4, #6]
 800f896:	81a3      	strh	r3, [r4, #12]
 800f898:	6126      	str	r6, [r4, #16]
 800f89a:	f7fe fc63 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f89e:	4658      	mov	r0, fp
 800f8a0:	b002      	add	sp, #8
 800f8a2:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 800f8a6:	bf00      	nop
 800f8a8:	08013d50 	.word	0x08013d50

0800f8ac <GUI_USAGE_DecUseCnt>:
 800f8ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8ae:	4605      	mov	r5, r0
 800f8b0:	f7fe fc4a 	bl	800e148 <GUI_ALLOC_LockH>
 800f8b4:	4602      	mov	r2, r0
 800f8b6:	a802      	add	r0, sp, #8
 800f8b8:	8994      	ldrh	r4, [r2, #12]
 800f8ba:	f840 2d04 	str.w	r2, [r0, #-4]!
 800f8be:	3c01      	subs	r4, #1
 800f8c0:	b2a4      	uxth	r4, r4
 800f8c2:	8194      	strh	r4, [r2, #12]
 800f8c4:	f7fe fc4e 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f8c8:	b914      	cbnz	r4, 800f8d0 <GUI_USAGE_DecUseCnt+0x24>
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	f7fe fc76 	bl	800e1bc <GUI_ALLOC_Free>
 800f8d0:	b003      	add	sp, #12
 800f8d2:	bd30      	pop	{r4, r5, pc}

0800f8d4 <GUI_USAGE_AddRect>:
 800f8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8d8:	4605      	mov	r5, r0
 800f8da:	4688      	mov	r8, r1
 800f8dc:	4617      	mov	r7, r2
 800f8de:	4699      	mov	r9, r3
 800f8e0:	68a8      	ldr	r0, [r5, #8]
 800f8e2:	464b      	mov	r3, r9
 800f8e4:	6846      	ldr	r6, [r0, #4]
 800f8e6:	4641      	mov	r1, r8
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	1c54      	adds	r4, r2, #1
 800f8ec:	47b0      	blx	r6
 800f8ee:	9b08      	ldr	r3, [sp, #32]
 800f8f0:	443b      	add	r3, r7
 800f8f2:	42a3      	cmp	r3, r4
 800f8f4:	d001      	beq.n	800f8fa <GUI_USAGE_AddRect+0x26>
 800f8f6:	4622      	mov	r2, r4
 800f8f8:	e7f2      	b.n	800f8e0 <GUI_USAGE_AddRect+0xc>
 800f8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800f900 <GUI_MEMDEV_ReduceYSize>:
 800f900:	b513      	push	{r0, r1, r4, lr}
 800f902:	460c      	mov	r4, r1
 800f904:	b918      	cbnz	r0, 800f90e <GUI_MEMDEV_ReduceYSize+0xe>
 800f906:	4b08      	ldr	r3, [pc, #32]	; (800f928 <GUI_MEMDEV_ReduceYSize+0x28>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800f90c:	b150      	cbz	r0, 800f924 <GUI_MEMDEV_ReduceYSize+0x24>
 800f90e:	f7fe fc1b 	bl	800e148 <GUI_ALLOC_LockH>
 800f912:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800f916:	9001      	str	r0, [sp, #4]
 800f918:	429c      	cmp	r4, r3
 800f91a:	bfb8      	it	lt
 800f91c:	8144      	strhlt	r4, [r0, #10]
 800f91e:	a801      	add	r0, sp, #4
 800f920:	f7fe fc20 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f924:	b002      	add	sp, #8
 800f926:	bd10      	pop	{r4, pc}
 800f928:	20000084 	.word	0x20000084

0800f92c <GUI_MEMDEV_Clear>:
 800f92c:	b513      	push	{r0, r1, r4, lr}
 800f92e:	b918      	cbnz	r0, 800f938 <GUI_MEMDEV_Clear+0xc>
 800f930:	4b0d      	ldr	r3, [pc, #52]	; (800f968 <GUI_MEMDEV_Clear+0x3c>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800f936:	b1a8      	cbz	r0, 800f964 <GUI_MEMDEV_Clear+0x38>
 800f938:	f7fe fc06 	bl	800e148 <GUI_ALLOC_LockH>
 800f93c:	ab02      	add	r3, sp, #8
 800f93e:	6944      	ldr	r4, [r0, #20]
 800f940:	f843 0d08 	str.w	r0, [r3, #-8]!
 800f944:	4668      	mov	r0, sp
 800f946:	f7fe fc0d 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f94a:	b15c      	cbz	r4, 800f964 <GUI_MEMDEV_Clear+0x38>
 800f94c:	4620      	mov	r0, r4
 800f94e:	f7fe fbfb 	bl	800e148 <GUI_ALLOC_LockH>
 800f952:	ac02      	add	r4, sp, #8
 800f954:	6883      	ldr	r3, [r0, #8]
 800f956:	f844 0d04 	str.w	r0, [r4, #-4]!
 800f95a:	689b      	ldr	r3, [r3, #8]
 800f95c:	4798      	blx	r3
 800f95e:	4620      	mov	r0, r4
 800f960:	f7fe fc00 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f964:	b002      	add	sp, #8
 800f966:	bd10      	pop	{r4, pc}
 800f968:	20000084 	.word	0x20000084

0800f96c <_GetDevData>:
 800f96c:	4802      	ldr	r0, [pc, #8]	; (800f978 <_GetDevData+0xc>)
 800f96e:	2901      	cmp	r1, #1
 800f970:	bf18      	it	ne
 800f972:	2000      	movne	r0, #0
 800f974:	4770      	bx	lr
 800f976:	bf00      	nop
 800f978:	08013da8 	.word	0x08013da8

0800f97c <_GetDevFunc>:
 800f97c:	4802      	ldr	r0, [pc, #8]	; (800f988 <_GetDevFunc+0xc>)
 800f97e:	2916      	cmp	r1, #22
 800f980:	bf18      	it	ne
 800f982:	2000      	movne	r0, #0
 800f984:	4770      	bx	lr
 800f986:	bf00      	nop
 800f988:	0800eded 	.word	0x0800eded

0800f98c <_SetOrg>:
 800f98c:	6800      	ldr	r0, [r0, #0]
 800f98e:	b508      	push	{r3, lr}
 800f990:	b110      	cbz	r0, 800f998 <_SetOrg+0xc>
 800f992:	68c3      	ldr	r3, [r0, #12]
 800f994:	6a1b      	ldr	r3, [r3, #32]
 800f996:	4798      	blx	r3
 800f998:	bd08      	pop	{r3, pc}

0800f99a <_GetRect>:
 800f99a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f99c:	6880      	ldr	r0, [r0, #8]
 800f99e:	460c      	mov	r4, r1
 800f9a0:	f7fe fbd2 	bl	800e148 <GUI_ALLOC_LockH>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	a802      	add	r0, sp, #8
 800f9a8:	8899      	ldrh	r1, [r3, #4]
 800f9aa:	88da      	ldrh	r2, [r3, #6]
 800f9ac:	891d      	ldrh	r5, [r3, #8]
 800f9ae:	f840 3d04 	str.w	r3, [r0, #-4]!
 800f9b2:	895b      	ldrh	r3, [r3, #10]
 800f9b4:	8021      	strh	r1, [r4, #0]
 800f9b6:	8062      	strh	r2, [r4, #2]
 800f9b8:	4429      	add	r1, r5
 800f9ba:	441a      	add	r2, r3
 800f9bc:	3901      	subs	r1, #1
 800f9be:	3a01      	subs	r2, #1
 800f9c0:	80a1      	strh	r1, [r4, #4]
 800f9c2:	80e2      	strh	r2, [r4, #6]
 800f9c4:	f7fe fbce 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f9c8:	b003      	add	sp, #12
 800f9ca:	bd30      	pop	{r4, r5, pc}

0800f9cc <_XY2PTR>:
 800f9cc:	4b0e      	ldr	r3, [pc, #56]	; (800fa08 <_XY2PTR+0x3c>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f9d2:	4605      	mov	r5, r0
 800f9d4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800f9d6:	460e      	mov	r6, r1
 800f9d8:	f7fe fbb6 	bl	800e148 <GUI_ALLOC_LockH>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	a802      	add	r0, sp, #8
 800f9e0:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800f9e4:	f840 3d04 	str.w	r3, [r0, #-4]!
 800f9e8:	f103 0118 	add.w	r1, r3, #24
 800f9ec:	1b36      	subs	r6, r6, r4
 800f9ee:	68dc      	ldr	r4, [r3, #12]
 800f9f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f9f4:	fb04 1406 	mla	r4, r4, r6, r1
 800f9f8:	1aed      	subs	r5, r5, r3
 800f9fa:	f7fe fbb3 	bl	800e164 <GUI_ALLOC_UnlockH>
 800f9fe:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800fa02:	4620      	mov	r0, r4
 800fa04:	b002      	add	sp, #8
 800fa06:	bd70      	pop	{r4, r5, r6, pc}
 800fa08:	20000084 	.word	0x20000084

0800fa0c <_GetPixelIndex>:
 800fa0c:	b508      	push	{r3, lr}
 800fa0e:	4608      	mov	r0, r1
 800fa10:	4611      	mov	r1, r2
 800fa12:	f7ff ffdb 	bl	800f9cc <_XY2PTR>
 800fa16:	8800      	ldrh	r0, [r0, #0]
 800fa18:	bd08      	pop	{r3, pc}
	...

0800fa1c <_XorPixel>:
 800fa1c:	4b14      	ldr	r3, [pc, #80]	; (800fa70 <_XorPixel+0x54>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa22:	4607      	mov	r7, r0
 800fa24:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800fa26:	4615      	mov	r5, r2
 800fa28:	460e      	mov	r6, r1
 800fa2a:	f7fe fb8d 	bl	800e148 <GUI_ALLOC_LockH>
 800fa2e:	4629      	mov	r1, r5
 800fa30:	9000      	str	r0, [sp, #0]
 800fa32:	4630      	mov	r0, r6
 800fa34:	f7ff ffca 	bl	800f9cc <_XY2PTR>
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	4604      	mov	r4, r0
 800fa3c:	689b      	ldr	r3, [r3, #8]
 800fa3e:	4798      	blx	r3
 800fa40:	8823      	ldrh	r3, [r4, #0]
 800fa42:	4058      	eors	r0, r3
 800fa44:	9b00      	ldr	r3, [sp, #0]
 800fa46:	8020      	strh	r0, [r4, #0]
 800fa48:	6958      	ldr	r0, [r3, #20]
 800fa4a:	b160      	cbz	r0, 800fa66 <_XorPixel+0x4a>
 800fa4c:	f7fe fb7c 	bl	800e148 <GUI_ALLOC_LockH>
 800fa50:	ac02      	add	r4, sp, #8
 800fa52:	6883      	ldr	r3, [r0, #8]
 800fa54:	f844 0d04 	str.w	r0, [r4, #-4]!
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4631      	mov	r1, r6
 800fa5c:	462a      	mov	r2, r5
 800fa5e:	4798      	blx	r3
 800fa60:	4620      	mov	r0, r4
 800fa62:	f7fe fb7f 	bl	800e164 <GUI_ALLOC_UnlockH>
 800fa66:	4668      	mov	r0, sp
 800fa68:	f7fe fb7c 	bl	800e164 <GUI_ALLOC_UnlockH>
 800fa6c:	b003      	add	sp, #12
 800fa6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa70:	20000084 	.word	0x20000084

0800fa74 <_SetPixelIndex>:
 800fa74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa76:	461c      	mov	r4, r3
 800fa78:	4b10      	ldr	r3, [pc, #64]	; (800fabc <_SetPixelIndex+0x48>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800fa7e:	460e      	mov	r6, r1
 800fa80:	4615      	mov	r5, r2
 800fa82:	f7fe fb61 	bl	800e148 <GUI_ALLOC_LockH>
 800fa86:	4629      	mov	r1, r5
 800fa88:	9000      	str	r0, [sp, #0]
 800fa8a:	4630      	mov	r0, r6
 800fa8c:	f7ff ff9e 	bl	800f9cc <_XY2PTR>
 800fa90:	9b00      	ldr	r3, [sp, #0]
 800fa92:	8004      	strh	r4, [r0, #0]
 800fa94:	6958      	ldr	r0, [r3, #20]
 800fa96:	b160      	cbz	r0, 800fab2 <_SetPixelIndex+0x3e>
 800fa98:	f7fe fb56 	bl	800e148 <GUI_ALLOC_LockH>
 800fa9c:	ac02      	add	r4, sp, #8
 800fa9e:	6883      	ldr	r3, [r0, #8]
 800faa0:	f844 0d04 	str.w	r0, [r4, #-4]!
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	4631      	mov	r1, r6
 800faa8:	462a      	mov	r2, r5
 800faaa:	4798      	blx	r3
 800faac:	4620      	mov	r0, r4
 800faae:	f7fe fb59 	bl	800e164 <GUI_ALLOC_UnlockH>
 800fab2:	4668      	mov	r0, sp
 800fab4:	f7fe fb56 	bl	800e164 <GUI_ALLOC_UnlockH>
 800fab8:	b002      	add	sp, #8
 800faba:	bd70      	pop	{r4, r5, r6, pc}
 800fabc:	20000084 	.word	0x20000084

0800fac0 <_DrawVLine>:
 800fac0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800fac4:	4d2c      	ldr	r5, [pc, #176]	; (800fb78 <_DrawVLine+0xb8>)
 800fac6:	461e      	mov	r6, r3
 800fac8:	682b      	ldr	r3, [r5, #0]
 800faca:	4681      	mov	r9, r0
 800facc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800face:	460f      	mov	r7, r1
 800fad0:	4614      	mov	r4, r2
 800fad2:	f7fe fb39 	bl	800e148 <GUI_ALLOC_LockH>
 800fad6:	9000      	str	r0, [sp, #0]
 800fad8:	6940      	ldr	r0, [r0, #20]
 800fada:	46aa      	mov	sl, r5
 800fadc:	b108      	cbz	r0, 800fae2 <_DrawVLine+0x22>
 800fade:	f7fe fb33 	bl	800e148 <GUI_ALLOC_LockH>
 800fae2:	9001      	str	r0, [sp, #4]
 800fae4:	4621      	mov	r1, r4
 800fae6:	4638      	mov	r0, r7
 800fae8:	f7ff ff70 	bl	800f9cc <_XY2PTR>
 800faec:	9b00      	ldr	r3, [sp, #0]
 800faee:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800faf2:	f8da 3000 	ldr.w	r3, [sl]
 800faf6:	7c1a      	ldrb	r2, [r3, #16]
 800faf8:	07d2      	lsls	r2, r2, #31
 800fafa:	4605      	mov	r5, r0
 800fafc:	d51f      	bpl.n	800fb3e <_DrawVLine+0x7e>
 800fafe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fb02:	689b      	ldr	r3, [r3, #8]
 800fb04:	4798      	blx	r3
 800fb06:	fa1f f880 	uxth.w	r8, r0
 800fb0a:	9801      	ldr	r0, [sp, #4]
 800fb0c:	b120      	cbz	r0, 800fb18 <_DrawVLine+0x58>
 800fb0e:	6883      	ldr	r3, [r0, #8]
 800fb10:	4639      	mov	r1, r7
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	4622      	mov	r2, r4
 800fb16:	4798      	blx	r3
 800fb18:	882b      	ldrh	r3, [r5, #0]
 800fb1a:	ea88 0303 	eor.w	r3, r8, r3
 800fb1e:	802b      	strh	r3, [r5, #0]
 800fb20:	9b00      	ldr	r3, [sp, #0]
 800fb22:	3401      	adds	r4, #1
 800fb24:	68db      	ldr	r3, [r3, #12]
 800fb26:	42b4      	cmp	r4, r6
 800fb28:	441d      	add	r5, r3
 800fb2a:	ddee      	ble.n	800fb0a <_DrawVLine+0x4a>
 800fb2c:	4668      	mov	r0, sp
 800fb2e:	f7fe fb19 	bl	800e164 <GUI_ALLOC_UnlockH>
 800fb32:	9b01      	ldr	r3, [sp, #4]
 800fb34:	b1eb      	cbz	r3, 800fb72 <_DrawVLine+0xb2>
 800fb36:	a801      	add	r0, sp, #4
 800fb38:	f7fe fb14 	bl	800e164 <GUI_ALLOC_UnlockH>
 800fb3c:	e019      	b.n	800fb72 <_DrawVLine+0xb2>
 800fb3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb40:	f8d3 9000 	ldr.w	r9, [r3]
 800fb44:	9b01      	ldr	r3, [sp, #4]
 800fb46:	b163      	cbz	r3, 800fb62 <_DrawVLine+0xa2>
 800fb48:	9801      	ldr	r0, [sp, #4]
 800fb4a:	6883      	ldr	r3, [r0, #8]
 800fb4c:	4622      	mov	r2, r4
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	4639      	mov	r1, r7
 800fb52:	3401      	adds	r4, #1
 800fb54:	4798      	blx	r3
 800fb56:	42b4      	cmp	r4, r6
 800fb58:	f8a5 9000 	strh.w	r9, [r5]
 800fb5c:	4445      	add	r5, r8
 800fb5e:	ddf3      	ble.n	800fb48 <_DrawVLine+0x88>
 800fb60:	e7e4      	b.n	800fb2c <_DrawVLine+0x6c>
 800fb62:	1b34      	subs	r4, r6, r4
 800fb64:	3401      	adds	r4, #1
 800fb66:	3c01      	subs	r4, #1
 800fb68:	f8a5 9000 	strh.w	r9, [r5]
 800fb6c:	4445      	add	r5, r8
 800fb6e:	d1fa      	bne.n	800fb66 <_DrawVLine+0xa6>
 800fb70:	e7dc      	b.n	800fb2c <_DrawVLine+0x6c>
 800fb72:	b002      	add	sp, #8
 800fb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb78:	20000084 	.word	0x20000084

0800fb7c <_FillRect>:
 800fb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb80:	4f2a      	ldr	r7, [pc, #168]	; (800fc2c <_FillRect+0xb0>)
 800fb82:	4614      	mov	r4, r2
 800fb84:	683a      	ldr	r2, [r7, #0]
 800fb86:	4698      	mov	r8, r3
 800fb88:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800fb8a:	b087      	sub	sp, #28
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	9302      	str	r3, [sp, #8]
 800fb90:	4682      	mov	sl, r0
 800fb92:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800fb94:	460e      	mov	r6, r1
 800fb96:	f7fe fad7 	bl	800e148 <GUI_ALLOC_LockH>
 800fb9a:	4621      	mov	r1, r4
 800fb9c:	9004      	str	r0, [sp, #16]
 800fb9e:	4630      	mov	r0, r6
 800fba0:	f7ff ff14 	bl	800f9cc <_XY2PTR>
 800fba4:	9a04      	ldr	r2, [sp, #16]
 800fba6:	4605      	mov	r5, r0
 800fba8:	6950      	ldr	r0, [r2, #20]
 800fbaa:	68d3      	ldr	r3, [r2, #12]
 800fbac:	9303      	str	r3, [sp, #12]
 800fbae:	ebc6 0908 	rsb	r9, r6, r8
 800fbb2:	f109 0801 	add.w	r8, r9, #1
 800fbb6:	46bb      	mov	fp, r7
 800fbb8:	b180      	cbz	r0, 800fbdc <_FillRect+0x60>
 800fbba:	f7fe fac5 	bl	800e148 <GUI_ALLOC_LockH>
 800fbbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fbc0:	af06      	add	r7, sp, #24
 800fbc2:	1b13      	subs	r3, r2, r4
 800fbc4:	f847 0d04 	str.w	r0, [r7, #-4]!
 800fbc8:	3301      	adds	r3, #1
 800fbca:	9300      	str	r3, [sp, #0]
 800fbcc:	4631      	mov	r1, r6
 800fbce:	4622      	mov	r2, r4
 800fbd0:	4643      	mov	r3, r8
 800fbd2:	f7ff fe7f 	bl	800f8d4 <GUI_USAGE_AddRect>
 800fbd6:	4638      	mov	r0, r7
 800fbd8:	f7fe fac4 	bl	800e164 <GUI_ALLOC_UnlockH>
 800fbdc:	ea4f 0649 	mov.w	r6, r9, lsl #1
 800fbe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fbe2:	429c      	cmp	r4, r3
 800fbe4:	dc1c      	bgt.n	800fc20 <_FillRect+0xa4>
 800fbe6:	f8db 3000 	ldr.w	r3, [fp]
 800fbea:	7c1b      	ldrb	r3, [r3, #16]
 800fbec:	07db      	lsls	r3, r3, #31
 800fbee:	d50d      	bpl.n	800fc0c <_FillRect+0x90>
 800fbf0:	f8da 3010 	ldr.w	r3, [sl, #16]
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	4798      	blx	r3
 800fbf8:	19aa      	adds	r2, r5, r6
 800fbfa:	b280      	uxth	r0, r0
 800fbfc:	1eab      	subs	r3, r5, #2
 800fbfe:	8859      	ldrh	r1, [r3, #2]
 800fc00:	4041      	eors	r1, r0
 800fc02:	f823 1f02 	strh.w	r1, [r3, #2]!
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d1f9      	bne.n	800fbfe <_FillRect+0x82>
 800fc0a:	e005      	b.n	800fc18 <_FillRect+0x9c>
 800fc0c:	9b02      	ldr	r3, [sp, #8]
 800fc0e:	4628      	mov	r0, r5
 800fc10:	b299      	uxth	r1, r3
 800fc12:	4642      	mov	r2, r8
 800fc14:	f7fb ffc6 	bl	800bba4 <GUI__memset16>
 800fc18:	9a03      	ldr	r2, [sp, #12]
 800fc1a:	3401      	adds	r4, #1
 800fc1c:	4415      	add	r5, r2
 800fc1e:	e7df      	b.n	800fbe0 <_FillRect+0x64>
 800fc20:	a804      	add	r0, sp, #16
 800fc22:	f7fe fa9f 	bl	800e164 <GUI_ALLOC_UnlockH>
 800fc26:	b007      	add	sp, #28
 800fc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc2c:	20000084 	.word	0x20000084

0800fc30 <_DrawHLine>:
 800fc30:	b507      	push	{r0, r1, r2, lr}
 800fc32:	9200      	str	r2, [sp, #0]
 800fc34:	f7ff ffa2 	bl	800fb7c <_FillRect>
 800fc38:	b003      	add	sp, #12
 800fc3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800fc40 <_DrawBitmap>:
 800fc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc44:	4c8b      	ldr	r4, [pc, #556]	; (800fe74 <_DrawBitmap+0x234>)
 800fc46:	b093      	sub	sp, #76	; 0x4c
 800fc48:	469b      	mov	fp, r3
 800fc4a:	6823      	ldr	r3, [r4, #0]
 800fc4c:	900d      	str	r0, [sp, #52]	; 0x34
 800fc4e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800fc50:	9207      	str	r2, [sp, #28]
 800fc52:	460d      	mov	r5, r1
 800fc54:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 800fc58:	f7fe fa76 	bl	800e148 <GUI_ALLOC_LockH>
 800fc5c:	9010      	str	r0, [sp, #64]	; 0x40
 800fc5e:	6940      	ldr	r0, [r0, #20]
 800fc60:	b108      	cbz	r0, 800fc66 <_DrawBitmap+0x26>
 800fc62:	f7fe fa71 	bl	800e148 <GUI_ALLOC_LockH>
 800fc66:	9011      	str	r0, [sp, #68]	; 0x44
 800fc68:	a812      	add	r0, sp, #72	; 0x48
 800fc6a:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800fc6e:	68db      	ldr	r3, [r3, #12]
 800fc70:	9308      	str	r3, [sp, #32]
 800fc72:	f7fe fa77 	bl	800e164 <GUI_ALLOC_UnlockH>
 800fc76:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800fc78:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fc7a:	442e      	add	r6, r5
 800fc7c:	9604      	str	r6, [sp, #16]
 800fc7e:	b150      	cbz	r0, 800fc96 <_DrawBitmap+0x56>
 800fc80:	6823      	ldr	r3, [r4, #0]
 800fc82:	7c1b      	ldrb	r3, [r3, #16]
 800fc84:	0799      	lsls	r1, r3, #30
 800fc86:	d106      	bne.n	800fc96 <_DrawBitmap+0x56>
 800fc88:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800fc8a:	9700      	str	r7, [sp, #0]
 800fc8c:	4631      	mov	r1, r6
 800fc8e:	9a07      	ldr	r2, [sp, #28]
 800fc90:	465b      	mov	r3, fp
 800fc92:	f7ff fe1f 	bl	800f8d4 <GUI_USAGE_AddRect>
 800fc96:	9804      	ldr	r0, [sp, #16]
 800fc98:	9907      	ldr	r1, [sp, #28]
 800fc9a:	f7ff fe97 	bl	800f9cc <_XY2PTR>
 800fc9e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800fca0:	2e10      	cmp	r6, #16
 800fca2:	4604      	mov	r4, r0
 800fca4:	d13a      	bne.n	800fd1c <_DrawBitmap+0xdc>
 800fca6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fca8:	b11b      	cbz	r3, 800fcb2 <_DrawBitmap+0x72>
 800fcaa:	ea4f 064b 	mov.w	r6, fp, lsl #1
 800fcae:	2500      	movs	r5, #0
 800fcb0:	e014      	b.n	800fcdc <_DrawBitmap+0x9c>
 800fcb2:	4b71      	ldr	r3, [pc, #452]	; (800fe78 <_DrawBitmap+0x238>)
 800fcb4:	681d      	ldr	r5, [r3, #0]
 800fcb6:	2d00      	cmp	r5, #0
 800fcb8:	d0f7      	beq.n	800fcaa <_DrawBitmap+0x6a>
 800fcba:	9e08      	ldr	r6, [sp, #32]
 800fcbc:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800fcbe:	9600      	str	r6, [sp, #0]
 800fcc0:	9701      	str	r7, [sp, #4]
 800fcc2:	4651      	mov	r1, sl
 800fcc4:	465a      	mov	r2, fp
 800fcc6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fcc8:	47a8      	blx	r5
 800fcca:	e349      	b.n	8010360 <_DrawBitmap+0x720>
 800fccc:	f1ba 0f00 	cmp.w	sl, #0
 800fcd0:	d10a      	bne.n	800fce8 <_DrawBitmap+0xa8>
 800fcd2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800fcd4:	44ba      	add	sl, r7
 800fcd6:	9f08      	ldr	r7, [sp, #32]
 800fcd8:	3501      	adds	r5, #1
 800fcda:	443c      	add	r4, r7
 800fcdc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800fcde:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800fce2:	42bd      	cmp	r5, r7
 800fce4:	dbf2      	blt.n	800fccc <_DrawBitmap+0x8c>
 800fce6:	e014      	b.n	800fd12 <_DrawBitmap+0xd2>
 800fce8:	2c00      	cmp	r4, #0
 800fcea:	d0f2      	beq.n	800fcd2 <_DrawBitmap+0x92>
 800fcec:	4b63      	ldr	r3, [pc, #396]	; (800fe7c <_DrawBitmap+0x23c>)
 800fcee:	4620      	mov	r0, r4
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4651      	mov	r1, sl
 800fcf4:	4632      	mov	r2, r6
 800fcf6:	4798      	blx	r3
 800fcf8:	f1b8 0f00 	cmp.w	r8, #0
 800fcfc:	d0e9      	beq.n	800fcd2 <_DrawBitmap+0x92>
 800fcfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd02:	9a07      	ldr	r2, [sp, #28]
 800fd04:	685f      	ldr	r7, [r3, #4]
 800fd06:	9904      	ldr	r1, [sp, #16]
 800fd08:	4640      	mov	r0, r8
 800fd0a:	442a      	add	r2, r5
 800fd0c:	465b      	mov	r3, fp
 800fd0e:	47b8      	blx	r7
 800fd10:	e7df      	b.n	800fcd2 <_DrawBitmap+0x92>
 800fd12:	f1b8 0f00 	cmp.w	r8, #0
 800fd16:	f040 8320 	bne.w	801035a <_DrawBitmap+0x71a>
 800fd1a:	e321      	b.n	8010360 <_DrawBitmap+0x720>
 800fd1c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800fd1e:	2e17      	cmp	r6, #23
 800fd20:	dd38      	ble.n	800fd94 <_DrawBitmap+0x154>
 800fd22:	2600      	movs	r6, #0
 800fd24:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800fd26:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800fd28:	42be      	cmp	r6, r7
 800fd2a:	f280 809e 	bge.w	800fe6a <_DrawBitmap+0x22a>
 800fd2e:	9f07      	ldr	r7, [sp, #28]
 800fd30:	4437      	add	r7, r6
 800fd32:	f1ba 0f00 	cmp.w	sl, #0
 800fd36:	d027      	beq.n	800fd88 <_DrawBitmap+0x148>
 800fd38:	b334      	cbz	r4, 800fd88 <_DrawBitmap+0x148>
 800fd3a:	b13d      	cbz	r5, 800fd4c <_DrawBitmap+0x10c>
 800fd3c:	68ab      	ldr	r3, [r5, #8]
 800fd3e:	9904      	ldr	r1, [sp, #16]
 800fd40:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800fd44:	4628      	mov	r0, r5
 800fd46:	463a      	mov	r2, r7
 800fd48:	465b      	mov	r3, fp
 800fd4a:	47e0      	blx	ip
 800fd4c:	1ea3      	subs	r3, r4, #2
 800fd4e:	f1aa 0904 	sub.w	r9, sl, #4
 800fd52:	9303      	str	r3, [sp, #12]
 800fd54:	46d8      	mov	r8, fp
 800fd56:	9b04      	ldr	r3, [sp, #16]
 800fd58:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fd5a:	445b      	add	r3, fp
 800fd5c:	ebc8 0103 	rsb	r1, r8, r3
 800fd60:	6903      	ldr	r3, [r0, #16]
 800fd62:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	9102      	str	r1, [sp, #8]
 800fd6a:	4798      	blx	r3
 800fd6c:	9b03      	ldr	r3, [sp, #12]
 800fd6e:	9902      	ldr	r1, [sp, #8]
 800fd70:	f823 0f02 	strh.w	r0, [r3, #2]!
 800fd74:	9303      	str	r3, [sp, #12]
 800fd76:	b125      	cbz	r5, 800fd82 <_DrawBitmap+0x142>
 800fd78:	68ab      	ldr	r3, [r5, #8]
 800fd7a:	4628      	mov	r0, r5
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	463a      	mov	r2, r7
 800fd80:	4798      	blx	r3
 800fd82:	f1b8 0801 	subs.w	r8, r8, #1
 800fd86:	d1e6      	bne.n	800fd56 <_DrawBitmap+0x116>
 800fd88:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800fd8a:	44ba      	add	sl, r7
 800fd8c:	9f08      	ldr	r7, [sp, #32]
 800fd8e:	3601      	adds	r6, #1
 800fd90:	443c      	add	r4, r7
 800fd92:	e7c7      	b.n	800fd24 <_DrawBitmap+0xe4>
 800fd94:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800fd96:	2e08      	cmp	r6, #8
 800fd98:	f100 0402 	add.w	r4, r0, #2
 800fd9c:	d170      	bne.n	800fe80 <_DrawBitmap+0x240>
 800fd9e:	9e07      	ldr	r6, [sp, #28]
 800fda0:	9f07      	ldr	r7, [sp, #28]
 800fda2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800fda4:	1bf3      	subs	r3, r6, r7
 800fda6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800fda8:	42bb      	cmp	r3, r7
 800fdaa:	f1a4 0002 	sub.w	r0, r4, #2
 800fdae:	da5c      	bge.n	800fe6a <_DrawBitmap+0x22a>
 800fdb0:	4b30      	ldr	r3, [pc, #192]	; (800fe74 <_DrawBitmap+0x234>)
 800fdb2:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	7c1b      	ldrb	r3, [r3, #16]
 800fdb8:	b367      	cbz	r7, 800fe14 <_DrawBitmap+0x1d4>
 800fdba:	f013 0303 	ands.w	r3, r3, #3
 800fdbe:	d004      	beq.n	800fdca <_DrawBitmap+0x18a>
 800fdc0:	2b02      	cmp	r3, #2
 800fdc2:	d14c      	bne.n	800fe5e <_DrawBitmap+0x21e>
 800fdc4:	46a0      	mov	r8, r4
 800fdc6:	9f04      	ldr	r7, [sp, #16]
 800fdc8:	e01d      	b.n	800fe06 <_DrawBitmap+0x1c6>
 800fdca:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800fdce:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800fdd0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800fdd4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800fdd8:	3301      	adds	r3, #1
 800fdda:	455b      	cmp	r3, fp
 800fddc:	d1f5      	bne.n	800fdca <_DrawBitmap+0x18a>
 800fdde:	e03e      	b.n	800fe5e <_DrawBitmap+0x21e>
 800fde0:	9921      	ldr	r1, [sp, #132]	; 0x84
 800fde2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fde6:	f828 3c02 	strh.w	r3, [r8, #-2]
 800fdea:	b12d      	cbz	r5, 800fdf8 <_DrawBitmap+0x1b8>
 800fdec:	68ab      	ldr	r3, [r5, #8]
 800fdee:	4628      	mov	r0, r5
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	4639      	mov	r1, r7
 800fdf4:	4632      	mov	r2, r6
 800fdf6:	4798      	blx	r3
 800fdf8:	9b04      	ldr	r3, [sp, #16]
 800fdfa:	3701      	adds	r7, #1
 800fdfc:	445b      	add	r3, fp
 800fdfe:	42bb      	cmp	r3, r7
 800fe00:	f108 0802 	add.w	r8, r8, #2
 800fe04:	d02b      	beq.n	800fe5e <_DrawBitmap+0x21e>
 800fe06:	9804      	ldr	r0, [sp, #16]
 800fe08:	ebc0 030a 	rsb	r3, r0, sl
 800fe0c:	5ddb      	ldrb	r3, [r3, r7]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d0f2      	beq.n	800fdf8 <_DrawBitmap+0x1b8>
 800fe12:	e7e5      	b.n	800fde0 <_DrawBitmap+0x1a0>
 800fe14:	f013 0303 	ands.w	r3, r3, #3
 800fe18:	d004      	beq.n	800fe24 <_DrawBitmap+0x1e4>
 800fe1a:	2b02      	cmp	r3, #2
 800fe1c:	d11f      	bne.n	800fe5e <_DrawBitmap+0x21e>
 800fe1e:	46a0      	mov	r8, r4
 800fe20:	9f04      	ldr	r7, [sp, #16]
 800fe22:	e015      	b.n	800fe50 <_DrawBitmap+0x210>
 800fe24:	4b15      	ldr	r3, [pc, #84]	; (800fe7c <_DrawBitmap+0x23c>)
 800fe26:	4651      	mov	r1, sl
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	465a      	mov	r2, fp
 800fe2c:	4798      	blx	r3
 800fe2e:	e016      	b.n	800fe5e <_DrawBitmap+0x21e>
 800fe30:	f828 3c02 	strh.w	r3, [r8, #-2]
 800fe34:	b12d      	cbz	r5, 800fe42 <_DrawBitmap+0x202>
 800fe36:	68ab      	ldr	r3, [r5, #8]
 800fe38:	4628      	mov	r0, r5
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4639      	mov	r1, r7
 800fe3e:	4632      	mov	r2, r6
 800fe40:	4798      	blx	r3
 800fe42:	9b04      	ldr	r3, [sp, #16]
 800fe44:	3701      	adds	r7, #1
 800fe46:	445b      	add	r3, fp
 800fe48:	42bb      	cmp	r3, r7
 800fe4a:	f108 0802 	add.w	r8, r8, #2
 800fe4e:	d006      	beq.n	800fe5e <_DrawBitmap+0x21e>
 800fe50:	9a04      	ldr	r2, [sp, #16]
 800fe52:	ebc2 030a 	rsb	r3, r2, sl
 800fe56:	5ddb      	ldrb	r3, [r3, r7]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d0f2      	beq.n	800fe42 <_DrawBitmap+0x202>
 800fe5c:	e7e8      	b.n	800fe30 <_DrawBitmap+0x1f0>
 800fe5e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800fe60:	44ba      	add	sl, r7
 800fe62:	9f08      	ldr	r7, [sp, #32]
 800fe64:	3601      	adds	r6, #1
 800fe66:	443c      	add	r4, r7
 800fe68:	e79a      	b.n	800fda0 <_DrawBitmap+0x160>
 800fe6a:	2d00      	cmp	r5, #0
 800fe6c:	f040 8275 	bne.w	801035a <_DrawBitmap+0x71a>
 800fe70:	e276      	b.n	8010360 <_DrawBitmap+0x720>
 800fe72:	bf00      	nop
 800fe74:	20000084 	.word	0x20000084
 800fe78:	200055b8 	.word	0x200055b8
 800fe7c:	20000074 	.word	0x20000074
 800fe80:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800fe82:	4bab      	ldr	r3, [pc, #684]	; (8010130 <_DrawBitmap+0x4f0>)
 800fe84:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800fe86:	9409      	str	r4, [sp, #36]	; 0x24
 800fe88:	2e00      	cmp	r6, #0
 800fe8a:	bf08      	it	eq
 800fe8c:	461e      	moveq	r6, r3
 800fe8e:	9621      	str	r6, [sp, #132]	; 0x84
 800fe90:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800fe92:	0076      	lsls	r6, r6, #1
 800fe94:	960e      	str	r6, [sp, #56]	; 0x38
 800fe96:	00bf      	lsls	r7, r7, #2
 800fe98:	9e07      	ldr	r6, [sp, #28]
 800fe9a:	970f      	str	r7, [sp, #60]	; 0x3c
 800fe9c:	9605      	str	r6, [sp, #20]
 800fe9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fea0:	9e05      	ldr	r6, [sp, #20]
 800fea2:	9f07      	ldr	r7, [sp, #28]
 800fea4:	1e9c      	subs	r4, r3, #2
 800fea6:	1bf3      	subs	r3, r6, r7
 800fea8:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800feaa:	42b3      	cmp	r3, r6
 800feac:	f280 8253 	bge.w	8010356 <_DrawBitmap+0x716>
 800feb0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800feb2:	2f02      	cmp	r7, #2
 800feb4:	f000 80d9 	beq.w	801006a <_DrawBitmap+0x42a>
 800feb8:	2f04      	cmp	r7, #4
 800feba:	f000 8178 	beq.w	80101ae <_DrawBitmap+0x56e>
 800febe:	2f01      	cmp	r7, #1
 800fec0:	f040 823f 	bne.w	8010342 <_DrawBitmap+0x702>
 800fec4:	f8df 9270 	ldr.w	r9, [pc, #624]	; 8010138 <_DrawBitmap+0x4f8>
 800fec8:	f8d9 3000 	ldr.w	r3, [r9]
 800fecc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800fece:	f7fe f93b 	bl	800e148 <GUI_ALLOC_LockH>
 800fed2:	f89a 3000 	ldrb.w	r3, [sl]
 800fed6:	4a97      	ldr	r2, [pc, #604]	; (8010134 <_DrawBitmap+0x4f4>)
 800fed8:	9010      	str	r0, [sp, #64]	; 0x40
 800feda:	5cd5      	ldrb	r5, [r2, r3]
 800fedc:	f8d9 3000 	ldr.w	r3, [r9]
 800fee0:	9820      	ldr	r0, [sp, #128]	; 0x80
 800fee2:	7c1b      	ldrb	r3, [r3, #16]
 800fee4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800fee6:	f003 0303 	and.w	r3, r3, #3
 800feea:	2b02      	cmp	r3, #2
 800feec:	465e      	mov	r6, fp
 800feee:	f1c0 0808 	rsb	r8, r0, #8
 800fef2:	fa45 f500 	asr.w	r5, r5, r0
 800fef6:	d022      	beq.n	800ff3e <_DrawBitmap+0x2fe>
 800fef8:	2b03      	cmp	r3, #3
 800fefa:	d062      	beq.n	800ffc2 <_DrawBitmap+0x382>
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d060      	beq.n	800ffc2 <_DrawBitmap+0x382>
 800ff00:	4652      	mov	r2, sl
 800ff02:	4546      	cmp	r6, r8
 800ff04:	bf38      	it	cc
 800ff06:	46b0      	movcc	r8, r6
 800ff08:	ebc8 0606 	rsb	r6, r8, r6
 800ff0c:	4643      	mov	r3, r8
 800ff0e:	4621      	mov	r1, r4
 800ff10:	f005 0001 	and.w	r0, r5, #1
 800ff14:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800ff16:	3b01      	subs	r3, #1
 800ff18:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800ff1c:	f821 0b02 	strh.w	r0, [r1], #2
 800ff20:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800ff24:	d1f4      	bne.n	800ff10 <_DrawBitmap+0x2d0>
 800ff26:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800ff2a:	2e00      	cmp	r6, #0
 800ff2c:	f000 8099 	beq.w	8010062 <_DrawBitmap+0x422>
 800ff30:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800ff34:	497f      	ldr	r1, [pc, #508]	; (8010134 <_DrawBitmap+0x4f4>)
 800ff36:	f04f 0808 	mov.w	r8, #8
 800ff3a:	5ccd      	ldrb	r5, [r1, r3]
 800ff3c:	e7e1      	b.n	800ff02 <_DrawBitmap+0x2c2>
 800ff3e:	9821      	ldr	r0, [sp, #132]	; 0x84
 800ff40:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800ff44:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800ff48:	f8cd a018 	str.w	sl, [sp, #24]
 800ff4c:	4546      	cmp	r6, r8
 800ff4e:	bf38      	it	cc
 800ff50:	46b0      	movcc	r8, r6
 800ff52:	ebc8 0606 	rsb	r6, r8, r6
 800ff56:	b32f      	cbz	r7, 800ffa4 <_DrawBitmap+0x364>
 800ff58:	b91d      	cbnz	r5, 800ff62 <_DrawBitmap+0x322>
 800ff5a:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800ff5e:	44c1      	add	r9, r8
 800ff60:	e024      	b.n	800ffac <_DrawBitmap+0x36c>
 800ff62:	07ea      	lsls	r2, r5, #31
 800ff64:	d50b      	bpl.n	800ff7e <_DrawBitmap+0x33e>
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	9a05      	ldr	r2, [sp, #20]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f8cd c008 	str.w	ip, [sp, #8]
 800ff70:	4638      	mov	r0, r7
 800ff72:	4649      	mov	r1, r9
 800ff74:	4798      	blx	r3
 800ff76:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ff7a:	f8a4 c000 	strh.w	ip, [r4]
 800ff7e:	f1b8 0801 	subs.w	r8, r8, #1
 800ff82:	f109 0901 	add.w	r9, r9, #1
 800ff86:	f104 0402 	add.w	r4, r4, #2
 800ff8a:	d00f      	beq.n	800ffac <_DrawBitmap+0x36c>
 800ff8c:	086d      	lsrs	r5, r5, #1
 800ff8e:	e7e3      	b.n	800ff58 <_DrawBitmap+0x318>
 800ff90:	07eb      	lsls	r3, r5, #31
 800ff92:	bf48      	it	mi
 800ff94:	f8a4 c000 	strhmi.w	ip, [r4]
 800ff98:	f1b8 0801 	subs.w	r8, r8, #1
 800ff9c:	f104 0402 	add.w	r4, r4, #2
 800ffa0:	d004      	beq.n	800ffac <_DrawBitmap+0x36c>
 800ffa2:	086d      	lsrs	r5, r5, #1
 800ffa4:	2d00      	cmp	r5, #0
 800ffa6:	d1f3      	bne.n	800ff90 <_DrawBitmap+0x350>
 800ffa8:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800ffac:	2e00      	cmp	r6, #0
 800ffae:	d058      	beq.n	8010062 <_DrawBitmap+0x422>
 800ffb0:	9906      	ldr	r1, [sp, #24]
 800ffb2:	4a60      	ldr	r2, [pc, #384]	; (8010134 <_DrawBitmap+0x4f4>)
 800ffb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ffb8:	9106      	str	r1, [sp, #24]
 800ffba:	5cd5      	ldrb	r5, [r2, r3]
 800ffbc:	f04f 0808 	mov.w	r8, #8
 800ffc0:	e7c4      	b.n	800ff4c <_DrawBitmap+0x30c>
 800ffc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ffc4:	6913      	ldr	r3, [r2, #16]
 800ffc6:	689b      	ldr	r3, [r3, #8]
 800ffc8:	4798      	blx	r3
 800ffca:	9b04      	ldr	r3, [sp, #16]
 800ffcc:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffce:	b280      	uxth	r0, r0
 800ffd0:	900a      	str	r0, [sp, #40]	; 0x28
 800ffd2:	f10a 0901 	add.w	r9, sl, #1
 800ffd6:	4546      	cmp	r6, r8
 800ffd8:	bf38      	it	cc
 800ffda:	46b0      	movcc	r8, r6
 800ffdc:	ebc8 0606 	rsb	r6, r8, r6
 800ffe0:	1ca3      	adds	r3, r4, #2
 800ffe2:	b31f      	cbz	r7, 801002c <_DrawBitmap+0x3ec>
 800ffe4:	f8cd 8018 	str.w	r8, [sp, #24]
 800ffe8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ffea:	9a06      	ldr	r2, [sp, #24]
 800ffec:	4440      	add	r0, r8
 800ffee:	900c      	str	r0, [sp, #48]	; 0x30
 800fff0:	1a81      	subs	r1, r0, r2
 800fff2:	07e8      	lsls	r0, r5, #31
 800fff4:	d50d      	bpl.n	8010012 <_DrawBitmap+0x3d2>
 800fff6:	68ba      	ldr	r2, [r7, #8]
 800fff8:	4638      	mov	r0, r7
 800fffa:	f8d2 c000 	ldr.w	ip, [r2]
 800fffe:	9a05      	ldr	r2, [sp, #20]
 8010000:	9302      	str	r3, [sp, #8]
 8010002:	47e0      	blx	ip
 8010004:	9b02      	ldr	r3, [sp, #8]
 8010006:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010008:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 801000c:	4042      	eors	r2, r0
 801000e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8010012:	9906      	ldr	r1, [sp, #24]
 8010014:	3901      	subs	r1, #1
 8010016:	ea4f 0555 	mov.w	r5, r5, lsr #1
 801001a:	f103 0302 	add.w	r3, r3, #2
 801001e:	9106      	str	r1, [sp, #24]
 8010020:	d1e2      	bne.n	800ffe8 <_DrawBitmap+0x3a8>
 8010022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010024:	930b      	str	r3, [sp, #44]	; 0x2c
 8010026:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 801002a:	e010      	b.n	801004e <_DrawBitmap+0x40e>
 801002c:	4642      	mov	r2, r8
 801002e:	07e9      	lsls	r1, r5, #31
 8010030:	d505      	bpl.n	801003e <_DrawBitmap+0x3fe>
 8010032:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 8010036:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010038:	4041      	eors	r1, r0
 801003a:	f823 1c02 	strh.w	r1, [r3, #-2]
 801003e:	3a01      	subs	r2, #1
 8010040:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8010044:	f103 0302 	add.w	r3, r3, #2
 8010048:	d1f1      	bne.n	801002e <_DrawBitmap+0x3ee>
 801004a:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 801004e:	b146      	cbz	r6, 8010062 <_DrawBitmap+0x422>
 8010050:	f899 3000 	ldrb.w	r3, [r9]
 8010054:	4a37      	ldr	r2, [pc, #220]	; (8010134 <_DrawBitmap+0x4f4>)
 8010056:	f109 0901 	add.w	r9, r9, #1
 801005a:	5cd5      	ldrb	r5, [r2, r3]
 801005c:	f04f 0808 	mov.w	r8, #8
 8010060:	e7b9      	b.n	800ffd6 <_DrawBitmap+0x396>
 8010062:	a810      	add	r0, sp, #64	; 0x40
 8010064:	f7fe f87e 	bl	800e164 <GUI_ALLOC_UnlockH>
 8010068:	e16b      	b.n	8010342 <_DrawBitmap+0x702>
 801006a:	4b33      	ldr	r3, [pc, #204]	; (8010138 <_DrawBitmap+0x4f8>)
 801006c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8010072:	7c1b      	ldrb	r3, [r3, #16]
 8010074:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8010078:	f1c6 0504 	rsb	r5, r6, #4
 801007c:	f89a 6000 	ldrb.w	r6, [sl]
 8010080:	f003 0303 	and.w	r3, r3, #3
 8010084:	40be      	lsls	r6, r7
 8010086:	2b01      	cmp	r3, #1
 8010088:	b2ed      	uxtb	r5, r5
 801008a:	b2f6      	uxtb	r6, r6
 801008c:	d06a      	beq.n	8010164 <_DrawBitmap+0x524>
 801008e:	d308      	bcc.n	80100a2 <_DrawBitmap+0x462>
 8010090:	2b02      	cmp	r3, #2
 8010092:	f040 8156 	bne.w	8010342 <_DrawBitmap+0x702>
 8010096:	f8cd a018 	str.w	sl, [sp, #24]
 801009a:	465f      	mov	r7, fp
 801009c:	f8dd c010 	ldr.w	ip, [sp, #16]
 80100a0:	e03e      	b.n	8010120 <_DrawBitmap+0x4e0>
 80100a2:	4652      	mov	r2, sl
 80100a4:	465b      	mov	r3, fp
 80100a6:	429d      	cmp	r5, r3
 80100a8:	bfc8      	it	gt
 80100aa:	b2dd      	uxtbgt	r5, r3
 80100ac:	1b5b      	subs	r3, r3, r5
 80100ae:	4629      	mov	r1, r5
 80100b0:	4620      	mov	r0, r4
 80100b2:	ea4f 1c96 	mov.w	ip, r6, lsr #6
 80100b6:	9f21      	ldr	r7, [sp, #132]	; 0x84
 80100b8:	3901      	subs	r1, #1
 80100ba:	f857 c02c 	ldr.w	ip, [r7, ip, lsl #2]
 80100be:	f820 cb02 	strh.w	ip, [r0], #2
 80100c2:	00b6      	lsls	r6, r6, #2
 80100c4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80100c8:	b2f6      	uxtb	r6, r6
 80100ca:	d1f2      	bne.n	80100b2 <_DrawBitmap+0x472>
 80100cc:	3d01      	subs	r5, #1
 80100ce:	b2ed      	uxtb	r5, r5
 80100d0:	3501      	adds	r5, #1
 80100d2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	f000 8133 	beq.w	8010342 <_DrawBitmap+0x702>
 80100dc:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 80100e0:	2504      	movs	r5, #4
 80100e2:	e7e0      	b.n	80100a6 <_DrawBitmap+0x466>
 80100e4:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 80100e8:	eb08 010c 	add.w	r1, r8, ip
 80100ec:	d126      	bne.n	801013c <_DrawBitmap+0x4fc>
 80100ee:	f108 0801 	add.w	r8, r8, #1
 80100f2:	fa5f f388 	uxtb.w	r3, r8
 80100f6:	00b6      	lsls	r6, r6, #2
 80100f8:	429d      	cmp	r5, r3
 80100fa:	b2f6      	uxtb	r6, r6
 80100fc:	d1f2      	bne.n	80100e4 <_DrawBitmap+0x4a4>
 80100fe:	3d01      	subs	r5, #1
 8010100:	b2ed      	uxtb	r5, r5
 8010102:	1c6b      	adds	r3, r5, #1
 8010104:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010108:	f10c 0301 	add.w	r3, ip, #1
 801010c:	eb03 0c05 	add.w	ip, r3, r5
 8010110:	2f00      	cmp	r7, #0
 8010112:	f000 8116 	beq.w	8010342 <_DrawBitmap+0x702>
 8010116:	9b06      	ldr	r3, [sp, #24]
 8010118:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 801011c:	9306      	str	r3, [sp, #24]
 801011e:	2504      	movs	r5, #4
 8010120:	42bd      	cmp	r5, r7
 8010122:	bfc8      	it	gt
 8010124:	b2fd      	uxtbgt	r5, r7
 8010126:	1b7f      	subs	r7, r7, r5
 8010128:	f04f 0800 	mov.w	r8, #0
 801012c:	e7da      	b.n	80100e4 <_DrawBitmap+0x4a4>
 801012e:	bf00      	nop
 8010130:	08013d68 	.word	0x08013d68
 8010134:	08013c0c 	.word	0x08013c0c
 8010138:	20000084 	.word	0x20000084
 801013c:	09b3      	lsrs	r3, r6, #6
 801013e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8010140:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010144:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
 8010148:	f1b9 0f00 	cmp.w	r9, #0
 801014c:	d0cf      	beq.n	80100ee <_DrawBitmap+0x4ae>
 801014e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010152:	9a05      	ldr	r2, [sp, #20]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f8cd c008 	str.w	ip, [sp, #8]
 801015a:	4648      	mov	r0, r9
 801015c:	4798      	blx	r3
 801015e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8010162:	e7c4      	b.n	80100ee <_DrawBitmap+0x4ae>
 8010164:	4651      	mov	r1, sl
 8010166:	465b      	mov	r3, fp
 8010168:	429d      	cmp	r5, r3
 801016a:	bfc8      	it	gt
 801016c:	b2dd      	uxtbgt	r5, r3
 801016e:	1b5b      	subs	r3, r3, r5
 8010170:	1ca2      	adds	r2, r4, #2
 8010172:	4628      	mov	r0, r5
 8010174:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8010178:	d005      	beq.n	8010186 <_DrawBitmap+0x546>
 801017a:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 801017e:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 8010182:	f822 7c02 	strh.w	r7, [r2, #-2]
 8010186:	3801      	subs	r0, #1
 8010188:	00b6      	lsls	r6, r6, #2
 801018a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 801018e:	b2f6      	uxtb	r6, r6
 8010190:	f102 0202 	add.w	r2, r2, #2
 8010194:	d1ee      	bne.n	8010174 <_DrawBitmap+0x534>
 8010196:	3d01      	subs	r5, #1
 8010198:	b2ed      	uxtb	r5, r5
 801019a:	3501      	adds	r5, #1
 801019c:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	f000 80ce 	beq.w	8010342 <_DrawBitmap+0x702>
 80101a6:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 80101aa:	2504      	movs	r5, #4
 80101ac:	e7dc      	b.n	8010168 <_DrawBitmap+0x528>
 80101ae:	4a6e      	ldr	r2, [pc, #440]	; (8010368 <_DrawBitmap+0x728>)
 80101b0:	f89a 3000 	ldrb.w	r3, [sl]
 80101b4:	6812      	ldr	r2, [r2, #0]
 80101b6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80101b8:	7c12      	ldrb	r2, [r2, #16]
 80101ba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80101bc:	f002 0203 	and.w	r2, r2, #3
 80101c0:	40bb      	lsls	r3, r7
 80101c2:	2a01      	cmp	r2, #1
 80101c4:	b2dd      	uxtb	r5, r3
 80101c6:	f000 8095 	beq.w	80102f4 <_DrawBitmap+0x6b4>
 80101ca:	d302      	bcc.n	80101d2 <_DrawBitmap+0x592>
 80101cc:	2a02      	cmp	r2, #2
 80101ce:	d036      	beq.n	801023e <_DrawBitmap+0x5fe>
 80101d0:	e0b7      	b.n	8010342 <_DrawBitmap+0x702>
 80101d2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80101d4:	b166      	cbz	r6, 80101f0 <_DrawBitmap+0x5b0>
 80101d6:	092d      	lsrs	r5, r5, #4
 80101d8:	9f21      	ldr	r7, [sp, #132]	; 0x84
 80101da:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 80101de:	8023      	strh	r3, [r4, #0]
 80101e0:	f10a 0201 	add.w	r2, sl, #1
 80101e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80101e6:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80101ea:	f10b 33ff 	add.w	r3, fp, #4294967295
 80101ee:	e001      	b.n	80101f4 <_DrawBitmap+0x5b4>
 80101f0:	465b      	mov	r3, fp
 80101f2:	4652      	mov	r2, sl
 80101f4:	2b01      	cmp	r3, #1
 80101f6:	dd19      	ble.n	801022c <_DrawBitmap+0x5ec>
 80101f8:	1058      	asrs	r0, r3, #1
 80101fa:	1d21      	adds	r1, r4, #4
 80101fc:	f003 0301 	and.w	r3, r3, #1
 8010200:	eb02 0c00 	add.w	ip, r2, r0
 8010204:	092f      	lsrs	r7, r5, #4
 8010206:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8010208:	f005 050f 	and.w	r5, r5, #15
 801020c:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8010210:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8010214:	f821 7c04 	strh.w	r7, [r1, #-4]
 8010218:	f821 5c02 	strh.w	r5, [r1, #-2]
 801021c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8010220:	4562      	cmp	r2, ip
 8010222:	f101 0104 	add.w	r1, r1, #4
 8010226:	d1ed      	bne.n	8010204 <_DrawBitmap+0x5c4>
 8010228:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 801022c:	2b00      	cmp	r3, #0
 801022e:	f000 8088 	beq.w	8010342 <_DrawBitmap+0x702>
 8010232:	092d      	lsrs	r5, r5, #4
 8010234:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8010236:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 801023a:	8023      	strh	r3, [r4, #0]
 801023c:	e081      	b.n	8010342 <_DrawBitmap+0x702>
 801023e:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8010240:	b1c7      	cbz	r7, 8010274 <_DrawBitmap+0x634>
 8010242:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8010246:	d00b      	beq.n	8010260 <_DrawBitmap+0x620>
 8010248:	092d      	lsrs	r5, r5, #4
 801024a:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801024c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8010250:	8023      	strh	r3, [r4, #0]
 8010252:	b12e      	cbz	r6, 8010260 <_DrawBitmap+0x620>
 8010254:	68b3      	ldr	r3, [r6, #8]
 8010256:	9904      	ldr	r1, [sp, #16]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	9a05      	ldr	r2, [sp, #20]
 801025c:	4630      	mov	r0, r6
 801025e:	4798      	blx	r3
 8010260:	9804      	ldr	r0, [sp, #16]
 8010262:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010264:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8010268:	1c47      	adds	r7, r0, #1
 801026a:	f10b 39ff 	add.w	r9, fp, #4294967295
 801026e:	f10a 0801 	add.w	r8, sl, #1
 8010272:	e00f      	b.n	8010294 <_DrawBitmap+0x654>
 8010274:	46d9      	mov	r9, fp
 8010276:	46d0      	mov	r8, sl
 8010278:	9f04      	ldr	r7, [sp, #16]
 801027a:	e00b      	b.n	8010294 <_DrawBitmap+0x654>
 801027c:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8010280:	d10c      	bne.n	801029c <_DrawBitmap+0x65c>
 8010282:	f015 050f 	ands.w	r5, r5, #15
 8010286:	d117      	bne.n	80102b8 <_DrawBitmap+0x678>
 8010288:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 801028c:	3404      	adds	r4, #4
 801028e:	3702      	adds	r7, #2
 8010290:	f1a9 0902 	sub.w	r9, r9, #2
 8010294:	f1b9 0f01 	cmp.w	r9, #1
 8010298:	dcf0      	bgt.n	801027c <_DrawBitmap+0x63c>
 801029a:	e01a      	b.n	80102d2 <_DrawBitmap+0x692>
 801029c:	092b      	lsrs	r3, r5, #4
 801029e:	9921      	ldr	r1, [sp, #132]	; 0x84
 80102a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80102a4:	8023      	strh	r3, [r4, #0]
 80102a6:	2e00      	cmp	r6, #0
 80102a8:	d0eb      	beq.n	8010282 <_DrawBitmap+0x642>
 80102aa:	68b3      	ldr	r3, [r6, #8]
 80102ac:	9a05      	ldr	r2, [sp, #20]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	4630      	mov	r0, r6
 80102b2:	4639      	mov	r1, r7
 80102b4:	4798      	blx	r3
 80102b6:	e7e4      	b.n	8010282 <_DrawBitmap+0x642>
 80102b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80102ba:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 80102be:	8063      	strh	r3, [r4, #2]
 80102c0:	2e00      	cmp	r6, #0
 80102c2:	d0e1      	beq.n	8010288 <_DrawBitmap+0x648>
 80102c4:	68b3      	ldr	r3, [r6, #8]
 80102c6:	9a05      	ldr	r2, [sp, #20]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	4630      	mov	r0, r6
 80102cc:	1c79      	adds	r1, r7, #1
 80102ce:	4798      	blx	r3
 80102d0:	e7da      	b.n	8010288 <_DrawBitmap+0x648>
 80102d2:	f1b9 0f00 	cmp.w	r9, #0
 80102d6:	d034      	beq.n	8010342 <_DrawBitmap+0x702>
 80102d8:	092d      	lsrs	r5, r5, #4
 80102da:	d032      	beq.n	8010342 <_DrawBitmap+0x702>
 80102dc:	9821      	ldr	r0, [sp, #132]	; 0x84
 80102de:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 80102e2:	8023      	strh	r3, [r4, #0]
 80102e4:	b36e      	cbz	r6, 8010342 <_DrawBitmap+0x702>
 80102e6:	68b3      	ldr	r3, [r6, #8]
 80102e8:	9a05      	ldr	r2, [sp, #20]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	4630      	mov	r0, r6
 80102ee:	4639      	mov	r1, r7
 80102f0:	4798      	blx	r3
 80102f2:	e026      	b.n	8010342 <_DrawBitmap+0x702>
 80102f4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80102f6:	f1c6 0302 	rsb	r3, r6, #2
 80102fa:	b2db      	uxtb	r3, r3
 80102fc:	4650      	mov	r0, sl
 80102fe:	465a      	mov	r2, fp
 8010300:	4293      	cmp	r3, r2
 8010302:	bfc8      	it	gt
 8010304:	b2d3      	uxtbgt	r3, r2
 8010306:	1ad2      	subs	r2, r2, r3
 8010308:	1ca1      	adds	r1, r4, #2
 801030a:	461e      	mov	r6, r3
 801030c:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8010310:	d005      	beq.n	801031e <_DrawBitmap+0x6de>
 8010312:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 8010316:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 801031a:	f821 7c02 	strh.w	r7, [r1, #-2]
 801031e:	3e01      	subs	r6, #1
 8010320:	012d      	lsls	r5, r5, #4
 8010322:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8010326:	b2ed      	uxtb	r5, r5
 8010328:	f101 0102 	add.w	r1, r1, #2
 801032c:	d1ee      	bne.n	801030c <_DrawBitmap+0x6cc>
 801032e:	3b01      	subs	r3, #1
 8010330:	b2db      	uxtb	r3, r3
 8010332:	3301      	adds	r3, #1
 8010334:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010338:	b11a      	cbz	r2, 8010342 <_DrawBitmap+0x702>
 801033a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801033e:	2302      	movs	r3, #2
 8010340:	e7de      	b.n	8010300 <_DrawBitmap+0x6c0>
 8010342:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8010344:	9b05      	ldr	r3, [sp, #20]
 8010346:	9e08      	ldr	r6, [sp, #32]
 8010348:	44ba      	add	sl, r7
 801034a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801034c:	3301      	adds	r3, #1
 801034e:	4437      	add	r7, r6
 8010350:	9305      	str	r3, [sp, #20]
 8010352:	9709      	str	r7, [sp, #36]	; 0x24
 8010354:	e5a3      	b.n	800fe9e <_DrawBitmap+0x25e>
 8010356:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010358:	b113      	cbz	r3, 8010360 <_DrawBitmap+0x720>
 801035a:	a811      	add	r0, sp, #68	; 0x44
 801035c:	f7fd ff02 	bl	800e164 <GUI_ALLOC_UnlockH>
 8010360:	b013      	add	sp, #76	; 0x4c
 8010362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010366:	bf00      	nop
 8010368:	20000084 	.word	0x20000084

0801036c <_GetDevProp>:
 801036c:	2908      	cmp	r1, #8
 801036e:	b508      	push	{r3, lr}
 8010370:	d008      	beq.n	8010384 <_GetDevProp+0x18>
 8010372:	6800      	ldr	r0, [r0, #0]
 8010374:	b118      	cbz	r0, 801037e <_GetDevProp+0x12>
 8010376:	68c3      	ldr	r3, [r0, #12]
 8010378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801037a:	4798      	blx	r3
 801037c:	bd08      	pop	{r3, pc}
 801037e:	f04f 30ff 	mov.w	r0, #4294967295
 8010382:	bd08      	pop	{r3, pc}
 8010384:	2010      	movs	r0, #16
 8010386:	bd08      	pop	{r3, pc}

08010388 <LCD_SelectLCD>:
 8010388:	b510      	push	{r4, lr}
 801038a:	4b0d      	ldr	r3, [pc, #52]	; (80103c0 <LCD_SelectLCD+0x38>)
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	7c51      	ldrb	r1, [r2, #17]
 8010390:	4a0c      	ldr	r2, [pc, #48]	; (80103c4 <LCD_SelectLCD+0x3c>)
 8010392:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8010396:	461c      	mov	r4, r3
 8010398:	b140      	cbz	r0, 80103ac <LCD_SelectLCD+0x24>
 801039a:	68c3      	ldr	r3, [r0, #12]
 801039c:	b113      	cbz	r3, 80103a4 <LCD_SelectLCD+0x1c>
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	2b04      	cmp	r3, #4
 80103a2:	d001      	beq.n	80103a8 <LCD_SelectLCD+0x20>
 80103a4:	6800      	ldr	r0, [r0, #0]
 80103a6:	e7f7      	b.n	8010398 <LCD_SelectLCD+0x10>
 80103a8:	f7fc f9cc 	bl	800c744 <GUI_DEVICE_Unlink>
 80103ac:	6823      	ldr	r3, [r4, #0]
 80103ae:	2200      	movs	r2, #0
 80103b0:	661a      	str	r2, [r3, #96]	; 0x60
 80103b2:	f103 0208 	add.w	r2, r3, #8
 80103b6:	615a      	str	r2, [r3, #20]
 80103b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103bc:	f7fb bac2 	b.w	800b944 <LCD_SetClipRectMax>
 80103c0:	20000084 	.word	0x20000084
 80103c4:	20005694 	.word	0x20005694

080103c8 <LCD_ReadRectEx>:
 80103c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103cc:	b087      	sub	sp, #28
 80103ce:	4617      	mov	r7, r2
 80103d0:	9304      	str	r3, [sp, #16]
 80103d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80103d4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80103d6:	68da      	ldr	r2, [r3, #12]
 80103d8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80103da:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80103de:	4606      	mov	r6, r0
 80103e0:	460d      	mov	r5, r1
 80103e2:	b973      	cbnz	r3, 8010402 <LCD_ReadRectEx+0x3a>
 80103e4:	4b71      	ldr	r3, [pc, #452]	; (80105ac <LCD_ReadRectEx+0x1e4>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	7c58      	ldrb	r0, [r3, #17]
 80103ea:	f7fa ff55 	bl	800b298 <GUI_GetBitsPerPixelEx>
 80103ee:	2808      	cmp	r0, #8
 80103f0:	4682      	mov	sl, r0
 80103f2:	dd15      	ble.n	8010420 <LCD_ReadRectEx+0x58>
 80103f4:	2810      	cmp	r0, #16
 80103f6:	bfcc      	ite	gt
 80103f8:	f04f 0904 	movgt.w	r9, #4
 80103fc:	f04f 0902 	movle.w	r9, #2
 8010400:	e010      	b.n	8010424 <LCD_ReadRectEx+0x5c>
 8010402:	a811      	add	r0, sp, #68	; 0x44
 8010404:	2101      	movs	r1, #1
 8010406:	4798      	blx	r3
 8010408:	4684      	mov	ip, r0
 801040a:	2800      	cmp	r0, #0
 801040c:	d0ea      	beq.n	80103e4 <LCD_ReadRectEx+0x1c>
 801040e:	9b04      	ldr	r3, [sp, #16]
 8010410:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010412:	e88d 0018 	stmia.w	sp, {r3, r4}
 8010416:	4631      	mov	r1, r6
 8010418:	462a      	mov	r2, r5
 801041a:	463b      	mov	r3, r7
 801041c:	47e0      	blx	ip
 801041e:	e0c1      	b.n	80105a4 <LCD_ReadRectEx+0x1dc>
 8010420:	f04f 0901 	mov.w	r9, #1
 8010424:	f04f 0b00 	mov.w	fp, #0
 8010428:	9b04      	ldr	r3, [sp, #16]
 801042a:	429d      	cmp	r5, r3
 801042c:	f300 80ba 	bgt.w	80105a4 <LCD_ReadRectEx+0x1dc>
 8010430:	f1b9 0f02 	cmp.w	r9, #2
 8010434:	d009      	beq.n	801044a <LCD_ReadRectEx+0x82>
 8010436:	f1b9 0f04 	cmp.w	r9, #4
 801043a:	d004      	beq.n	8010446 <LCD_ReadRectEx+0x7e>
 801043c:	f1b9 0f01 	cmp.w	r9, #1
 8010440:	f040 80ae 	bne.w	80105a0 <LCD_ReadRectEx+0x1d8>
 8010444:	e003      	b.n	801044e <LCD_ReadRectEx+0x86>
 8010446:	46b4      	mov	ip, r6
 8010448:	e09b      	b.n	8010582 <LCD_ReadRectEx+0x1ba>
 801044a:	46b4      	mov	ip, r6
 801044c:	e08a      	b.n	8010564 <LCD_ReadRectEx+0x19c>
 801044e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8010452:	2a07      	cmp	r2, #7
 8010454:	f200 80a4 	bhi.w	80105a0 <LCD_ReadRectEx+0x1d8>
 8010458:	e8df f002 	tbb	[pc, r2]
 801045c:	0606080a 	.word	0x0606080a
 8010460:	04040404 	.word	0x04040404
 8010464:	46b4      	mov	ip, r6
 8010466:	e066      	b.n	8010536 <LCD_ReadRectEx+0x16e>
 8010468:	46b4      	mov	ip, r6
 801046a:	e047      	b.n	80104fc <LCD_ReadRectEx+0x134>
 801046c:	46b4      	mov	ip, r6
 801046e:	e022      	b.n	80104b6 <LCD_ReadRectEx+0xee>
 8010470:	46b4      	mov	ip, r6
 8010472:	45bc      	cmp	ip, r7
 8010474:	f300 8094 	bgt.w	80105a0 <LCD_ReadRectEx+0x1d8>
 8010478:	4661      	mov	r1, ip
 801047a:	462a      	mov	r2, r5
 801047c:	f8cd c00c 	str.w	ip, [sp, #12]
 8010480:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010482:	47c0      	blx	r8
 8010484:	f1cb 0207 	rsb	r2, fp, #7
 8010488:	fa00 f202 	lsl.w	r2, r0, r2
 801048c:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8010490:	7820      	ldrb	r0, [r4, #0]
 8010492:	fa41 f10b 	asr.w	r1, r1, fp
 8010496:	4001      	ands	r1, r0
 8010498:	430a      	orrs	r2, r1
 801049a:	7022      	strb	r2, [r4, #0]
 801049c:	f10b 0301 	add.w	r3, fp, #1
 80104a0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80104a4:	f023 0207 	bic.w	r2, r3, #7
 80104a8:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 80104ac:	fa43 fb02 	asr.w	fp, r3, r2
 80104b0:	f10c 0c01 	add.w	ip, ip, #1
 80104b4:	e7dd      	b.n	8010472 <LCD_ReadRectEx+0xaa>
 80104b6:	45bc      	cmp	ip, r7
 80104b8:	dc72      	bgt.n	80105a0 <LCD_ReadRectEx+0x1d8>
 80104ba:	4661      	mov	r1, ip
 80104bc:	462a      	mov	r2, r5
 80104be:	f8cd c00c 	str.w	ip, [sp, #12]
 80104c2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80104c4:	47c0      	blx	r8
 80104c6:	ea4f 024b 	mov.w	r2, fp, lsl #1
 80104ca:	f1c2 0106 	rsb	r1, r2, #6
 80104ce:	fa00 f101 	lsl.w	r1, r0, r1
 80104d2:	f64f 703f 	movw	r0, #65343	; 0xff3f
 80104d6:	fa40 f202 	asr.w	r2, r0, r2
 80104da:	7820      	ldrb	r0, [r4, #0]
 80104dc:	4002      	ands	r2, r0
 80104de:	4311      	orrs	r1, r2
 80104e0:	7021      	strb	r1, [r4, #0]
 80104e2:	f10b 0301 	add.w	r3, fp, #1
 80104e6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80104ea:	f023 0203 	bic.w	r2, r3, #3
 80104ee:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 80104f2:	fa43 fb02 	asr.w	fp, r3, r2
 80104f6:	f10c 0c01 	add.w	ip, ip, #1
 80104fa:	e7dc      	b.n	80104b6 <LCD_ReadRectEx+0xee>
 80104fc:	45bc      	cmp	ip, r7
 80104fe:	dc4f      	bgt.n	80105a0 <LCD_ReadRectEx+0x1d8>
 8010500:	4661      	mov	r1, ip
 8010502:	462a      	mov	r2, r5
 8010504:	f8cd c00c 	str.w	ip, [sp, #12]
 8010508:	9811      	ldr	r0, [sp, #68]	; 0x44
 801050a:	47c0      	blx	r8
 801050c:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8010510:	f1c2 0104 	rsb	r1, r2, #4
 8010514:	fa00 f101 	lsl.w	r1, r0, r1
 8010518:	200f      	movs	r0, #15
 801051a:	fa00 f202 	lsl.w	r2, r0, r2
 801051e:	7820      	ldrb	r0, [r4, #0]
 8010520:	4002      	ands	r2, r0
 8010522:	4311      	orrs	r1, r2
 8010524:	7021      	strb	r1, [r4, #0]
 8010526:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801052a:	445c      	add	r4, fp
 801052c:	f10c 0c01 	add.w	ip, ip, #1
 8010530:	f08b 0b01 	eor.w	fp, fp, #1
 8010534:	e7e2      	b.n	80104fc <LCD_ReadRectEx+0x134>
 8010536:	4273      	negs	r3, r6
 8010538:	1ba2      	subs	r2, r4, r6
 801053a:	45bc      	cmp	ip, r7
 801053c:	9305      	str	r3, [sp, #20]
 801053e:	4462      	add	r2, ip
 8010540:	dc0e      	bgt.n	8010560 <LCD_ReadRectEx+0x198>
 8010542:	4661      	mov	r1, ip
 8010544:	462a      	mov	r2, r5
 8010546:	f8cd c00c 	str.w	ip, [sp, #12]
 801054a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801054c:	47c0      	blx	r8
 801054e:	9a05      	ldr	r2, [sp, #20]
 8010550:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010554:	4422      	add	r2, r4
 8010556:	f802 000c 	strb.w	r0, [r2, ip]
 801055a:	f10c 0c01 	add.w	ip, ip, #1
 801055e:	e7ea      	b.n	8010536 <LCD_ReadRectEx+0x16e>
 8010560:	4614      	mov	r4, r2
 8010562:	e01d      	b.n	80105a0 <LCD_ReadRectEx+0x1d8>
 8010564:	45bc      	cmp	ip, r7
 8010566:	dc1b      	bgt.n	80105a0 <LCD_ReadRectEx+0x1d8>
 8010568:	4661      	mov	r1, ip
 801056a:	f8cd c00c 	str.w	ip, [sp, #12]
 801056e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010570:	462a      	mov	r2, r5
 8010572:	47c0      	blx	r8
 8010574:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010578:	f824 0b02 	strh.w	r0, [r4], #2
 801057c:	f10c 0c01 	add.w	ip, ip, #1
 8010580:	e7f0      	b.n	8010564 <LCD_ReadRectEx+0x19c>
 8010582:	45bc      	cmp	ip, r7
 8010584:	dc0c      	bgt.n	80105a0 <LCD_ReadRectEx+0x1d8>
 8010586:	4661      	mov	r1, ip
 8010588:	f8cd c00c 	str.w	ip, [sp, #12]
 801058c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801058e:	462a      	mov	r2, r5
 8010590:	47c0      	blx	r8
 8010592:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010596:	f844 0b04 	str.w	r0, [r4], #4
 801059a:	f10c 0c01 	add.w	ip, ip, #1
 801059e:	e7f0      	b.n	8010582 <LCD_ReadRectEx+0x1ba>
 80105a0:	3501      	adds	r5, #1
 80105a2:	e741      	b.n	8010428 <LCD_ReadRectEx+0x60>
 80105a4:	b007      	add	sp, #28
 80105a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105aa:	bf00      	nop
 80105ac:	20000084 	.word	0x20000084

080105b0 <GUI_ReadRectEx>:
 80105b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105b2:	4d16      	ldr	r5, [pc, #88]	; (801060c <GUI_ReadRectEx+0x5c>)
 80105b4:	9e05      	ldr	r6, [sp, #20]
 80105b6:	682d      	ldr	r5, [r5, #0]
 80105b8:	9c06      	ldr	r4, [sp, #24]
 80105ba:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 80105be:	42b8      	cmp	r0, r7
 80105c0:	bfb8      	it	lt
 80105c2:	4638      	movlt	r0, r7
 80105c4:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 80105c8:	42ba      	cmp	r2, r7
 80105ca:	bfa8      	it	ge
 80105cc:	463a      	movge	r2, r7
 80105ce:	4282      	cmp	r2, r0
 80105d0:	db1b      	blt.n	801060a <GUI_ReadRectEx+0x5a>
 80105d2:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 80105d6:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 80105da:	42b9      	cmp	r1, r7
 80105dc:	bfb8      	it	lt
 80105de:	4639      	movlt	r1, r7
 80105e0:	42ab      	cmp	r3, r5
 80105e2:	bfa8      	it	ge
 80105e4:	462b      	movge	r3, r5
 80105e6:	428b      	cmp	r3, r1
 80105e8:	db0f      	blt.n	801060a <GUI_ReadRectEx+0x5a>
 80105ea:	68e5      	ldr	r5, [r4, #12]
 80105ec:	682d      	ldr	r5, [r5, #0]
 80105ee:	f035 0704 	bics.w	r7, r5, #4
 80105f2:	d105      	bne.n	8010600 <GUI_ReadRectEx+0x50>
 80105f4:	9605      	str	r6, [sp, #20]
 80105f6:	9406      	str	r4, [sp, #24]
 80105f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80105fc:	f7ff bee4 	b.w	80103c8 <LCD_ReadRectEx>
 8010600:	6825      	ldr	r5, [r4, #0]
 8010602:	2d00      	cmp	r5, #0
 8010604:	d0f6      	beq.n	80105f4 <GUI_ReadRectEx+0x44>
 8010606:	462c      	mov	r4, r5
 8010608:	e7ef      	b.n	80105ea <GUI_ReadRectEx+0x3a>
 801060a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801060c:	20000084 	.word	0x20000084

08010610 <LCD_GetBkColorIndex>:
 8010610:	4b02      	ldr	r3, [pc, #8]	; (801061c <LCD_GetBkColorIndex+0xc>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010616:	6818      	ldr	r0, [r3, #0]
 8010618:	4770      	bx	lr
 801061a:	bf00      	nop
 801061c:	20000084 	.word	0x20000084

08010620 <LCD_GetColorIndex>:
 8010620:	4b02      	ldr	r3, [pc, #8]	; (801062c <LCD_GetColorIndex+0xc>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010626:	6818      	ldr	r0, [r3, #0]
 8010628:	4770      	bx	lr
 801062a:	bf00      	nop
 801062c:	20000084 	.word	0x20000084

08010630 <_OnExit>:
 8010630:	b510      	push	{r4, lr}
 8010632:	4c04      	ldr	r4, [pc, #16]	; (8010644 <_OnExit+0x14>)
 8010634:	6820      	ldr	r0, [r4, #0]
 8010636:	f7fd fd73 	bl	800e120 <GUI_ALLOC_FreeFixedBlock>
 801063a:	4a03      	ldr	r2, [pc, #12]	; (8010648 <_OnExit+0x18>)
 801063c:	2300      	movs	r3, #0
 801063e:	6023      	str	r3, [r4, #0]
 8010640:	6013      	str	r3, [r2, #0]
 8010642:	bd10      	pop	{r4, pc}
 8010644:	20005794 	.word	0x20005794
 8010648:	200055bc 	.word	0x200055bc

0801064c <LCD_InitColors>:
 801064c:	b538      	push	{r3, r4, r5, lr}
 801064e:	4d09      	ldr	r5, [pc, #36]	; (8010674 <LCD_InitColors+0x28>)
 8010650:	682c      	ldr	r4, [r5, #0]
 8010652:	b95c      	cbnz	r4, 801066c <LCD_InitColors+0x20>
 8010654:	4b08      	ldr	r3, [pc, #32]	; (8010678 <LCD_InitColors+0x2c>)
 8010656:	6818      	ldr	r0, [r3, #0]
 8010658:	0080      	lsls	r0, r0, #2
 801065a:	f7fd fe45 	bl	800e2e8 <GUI_ALLOC_GetFixedBlock>
 801065e:	6028      	str	r0, [r5, #0]
 8010660:	b130      	cbz	r0, 8010670 <LCD_InitColors+0x24>
 8010662:	4806      	ldr	r0, [pc, #24]	; (801067c <LCD_InitColors+0x30>)
 8010664:	4b06      	ldr	r3, [pc, #24]	; (8010680 <LCD_InitColors+0x34>)
 8010666:	6003      	str	r3, [r0, #0]
 8010668:	f7fc f98e 	bl	800c988 <GUI__RegisterExit>
 801066c:	2000      	movs	r0, #0
 801066e:	bd38      	pop	{r3, r4, r5, pc}
 8010670:	2001      	movs	r0, #1
 8010672:	bd38      	pop	{r3, r4, r5, pc}
 8010674:	20005794 	.word	0x20005794
 8010678:	20000118 	.word	0x20000118
 801067c:	200055c0 	.word	0x200055c0
 8010680:	08010631 	.word	0x08010631

08010684 <LCD_InitLUT>:
 8010684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010688:	f000 febe 	bl	8011408 <LCD_GetNumLayers>
 801068c:	2400      	movs	r4, #0
 801068e:	4680      	mov	r8, r0
 8010690:	4544      	cmp	r4, r8
 8010692:	da2c      	bge.n	80106ee <LCD_InitLUT+0x6a>
 8010694:	4620      	mov	r0, r4
 8010696:	f7fc f81d 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 801069a:	b330      	cbz	r0, 80106ea <LCD_InitLUT+0x66>
 801069c:	4e15      	ldr	r6, [pc, #84]	; (80106f4 <LCD_InitLUT+0x70>)
 801069e:	6833      	ldr	r3, [r6, #0]
 80106a0:	4620      	mov	r0, r4
 80106a2:	f893 9011 	ldrb.w	r9, [r3, #17]
 80106a6:	745c      	strb	r4, [r3, #17]
 80106a8:	f7fa fdd8 	bl	800b25c <LCD_GetBitsPerPixelEx>
 80106ac:	2808      	cmp	r0, #8
 80106ae:	dd03      	ble.n	80106b8 <LCD_InitLUT+0x34>
 80106b0:	6833      	ldr	r3, [r6, #0]
 80106b2:	f883 9011 	strb.w	r9, [r3, #17]
 80106b6:	e018      	b.n	80106ea <LCD_InitLUT+0x66>
 80106b8:	4b0f      	ldr	r3, [pc, #60]	; (80106f8 <LCD_InitLUT+0x74>)
 80106ba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80106be:	691a      	ldr	r2, [r3, #16]
 80106c0:	4b0e      	ldr	r3, [pc, #56]	; (80106fc <LCD_InitLUT+0x78>)
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d0f4      	beq.n	80106b0 <LCD_InitLUT+0x2c>
 80106c6:	4620      	mov	r0, r4
 80106c8:	f7fa fdcb 	bl	800b262 <LCD_GetNumColorsEx>
 80106cc:	2500      	movs	r5, #0
 80106ce:	4682      	mov	sl, r0
 80106d0:	4555      	cmp	r5, sl
 80106d2:	daed      	bge.n	80106b0 <LCD_InitLUT+0x2c>
 80106d4:	b2ef      	uxtb	r7, r5
 80106d6:	4638      	mov	r0, r7
 80106d8:	f7fb f9a8 	bl	800ba2c <LCD_Index2Color>
 80106dc:	4639      	mov	r1, r7
 80106de:	4602      	mov	r2, r0
 80106e0:	4620      	mov	r0, r4
 80106e2:	f7fa fd77 	bl	800b1d4 <LCD_SetLUTEntryEx>
 80106e6:	3501      	adds	r5, #1
 80106e8:	e7f2      	b.n	80106d0 <LCD_InitLUT+0x4c>
 80106ea:	3401      	adds	r4, #1
 80106ec:	e7d0      	b.n	8010690 <LCD_InitLUT+0xc>
 80106ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106f2:	bf00      	nop
 80106f4:	20000084 	.word	0x20000084
 80106f8:	20005694 	.word	0x20005694
 80106fc:	08014850 	.word	0x08014850

08010700 <LCD_AA_SetAndMask>:
 8010700:	4b02      	ldr	r3, [pc, #8]	; (801070c <LCD_AA_SetAndMask+0xc>)
 8010702:	681a      	ldr	r2, [r3, #0]
 8010704:	6018      	str	r0, [r3, #0]
 8010706:	4610      	mov	r0, r2
 8010708:	4770      	bx	lr
 801070a:	bf00      	nop
 801070c:	2000011c 	.word	0x2000011c

08010710 <_GetWordWrap>:
 8010710:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010714:	2500      	movs	r5, #0
 8010716:	9001      	str	r0, [sp, #4]
 8010718:	4689      	mov	r9, r1
 801071a:	4690      	mov	r8, r2
 801071c:	46aa      	mov	sl, r5
 801071e:	462e      	mov	r6, r5
 8010720:	462c      	mov	r4, r5
 8010722:	462f      	mov	r7, r5
 8010724:	a801      	add	r0, sp, #4
 8010726:	f7fb fd43 	bl	800c1b0 <GUI_UC__GetCharCodeInc>
 801072a:	2d00      	cmp	r5, #0
 801072c:	bf08      	it	eq
 801072e:	4605      	moveq	r5, r0
 8010730:	b108      	cbz	r0, 8010736 <_GetWordWrap+0x26>
 8010732:	280a      	cmp	r0, #10
 8010734:	d10b      	bne.n	801074e <_GetWordWrap+0x3e>
 8010736:	4626      	mov	r6, r4
 8010738:	2e00      	cmp	r6, #0
 801073a:	bf18      	it	ne
 801073c:	4634      	movne	r4, r6
 801073e:	f1b8 0f00 	cmp.w	r8, #0
 8010742:	d025      	beq.n	8010790 <_GetWordWrap+0x80>
 8010744:	ebca 0707 	rsb	r7, sl, r7
 8010748:	f8c8 7000 	str.w	r7, [r8]
 801074c:	e020      	b.n	8010790 <_GetWordWrap+0x80>
 801074e:	2820      	cmp	r0, #32
 8010750:	d01c      	beq.n	801078c <_GetWordWrap+0x7c>
 8010752:	2d20      	cmp	r5, #32
 8010754:	d00e      	beq.n	8010774 <_GetWordWrap+0x64>
 8010756:	4b10      	ldr	r3, [pc, #64]	; (8010798 <_GetWordWrap+0x88>)
 8010758:	6819      	ldr	r1, [r3, #0]
 801075a:	4b10      	ldr	r3, [pc, #64]	; (801079c <_GetWordWrap+0x8c>)
 801075c:	681a      	ldr	r2, [r3, #0]
 801075e:	2300      	movs	r3, #0
 8010760:	4293      	cmp	r3, r2
 8010762:	da09      	bge.n	8010778 <_GetWordWrap+0x68>
 8010764:	f831 e013 	ldrh.w	lr, [r1, r3, lsl #1]
 8010768:	4586      	cmp	lr, r0
 801076a:	d101      	bne.n	8010770 <_GetWordWrap+0x60>
 801076c:	1c66      	adds	r6, r4, #1
 801076e:	e003      	b.n	8010778 <_GetWordWrap+0x68>
 8010770:	3301      	adds	r3, #1
 8010772:	e7f5      	b.n	8010760 <_GetWordWrap+0x50>
 8010774:	4626      	mov	r6, r4
 8010776:	2500      	movs	r5, #0
 8010778:	f7fc fd80 	bl	800d27c <GUI_GetCharDistX>
 801077c:	4407      	add	r7, r0
 801077e:	454f      	cmp	r7, r9
 8010780:	4682      	mov	sl, r0
 8010782:	dd01      	ble.n	8010788 <_GetWordWrap+0x78>
 8010784:	2c00      	cmp	r4, #0
 8010786:	d1d7      	bne.n	8010738 <_GetWordWrap+0x28>
 8010788:	3401      	adds	r4, #1
 801078a:	e7cb      	b.n	8010724 <_GetWordWrap+0x14>
 801078c:	4626      	mov	r6, r4
 801078e:	e7f3      	b.n	8010778 <_GetWordWrap+0x68>
 8010790:	4620      	mov	r0, r4
 8010792:	b002      	add	sp, #8
 8010794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010798:	200055c8 	.word	0x200055c8
 801079c:	200055cc 	.word	0x200055cc

080107a0 <_GetCharWrap>:
 80107a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107a2:	2400      	movs	r4, #0
 80107a4:	9001      	str	r0, [sp, #4]
 80107a6:	460e      	mov	r6, r1
 80107a8:	4625      	mov	r5, r4
 80107aa:	a801      	add	r0, sp, #4
 80107ac:	f7fb fd00 	bl	800c1b0 <GUI_UC__GetCharCodeInc>
 80107b0:	4607      	mov	r7, r0
 80107b2:	b148      	cbz	r0, 80107c8 <_GetCharWrap+0x28>
 80107b4:	f7fc fd62 	bl	800d27c <GUI_GetCharDistX>
 80107b8:	4405      	add	r5, r0
 80107ba:	b10c      	cbz	r4, 80107c0 <_GetCharWrap+0x20>
 80107bc:	42b5      	cmp	r5, r6
 80107be:	dc03      	bgt.n	80107c8 <_GetCharWrap+0x28>
 80107c0:	2f0a      	cmp	r7, #10
 80107c2:	d001      	beq.n	80107c8 <_GetCharWrap+0x28>
 80107c4:	3401      	adds	r4, #1
 80107c6:	e7f0      	b.n	80107aa <_GetCharWrap+0xa>
 80107c8:	4620      	mov	r0, r4
 80107ca:	b003      	add	sp, #12
 80107cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080107d0 <_WrapGetNumCharsDisp>:
 80107d0:	2a01      	cmp	r2, #1
 80107d2:	b510      	push	{r4, lr}
 80107d4:	d005      	beq.n	80107e2 <_WrapGetNumCharsDisp+0x12>
 80107d6:	2a02      	cmp	r2, #2
 80107d8:	d108      	bne.n	80107ec <_WrapGetNumCharsDisp+0x1c>
 80107da:	4b07      	ldr	r3, [pc, #28]	; (80107f8 <_WrapGetNumCharsDisp+0x28>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4798      	blx	r3
 80107e0:	bd10      	pop	{r4, pc}
 80107e2:	4a06      	ldr	r2, [pc, #24]	; (80107fc <_WrapGetNumCharsDisp+0x2c>)
 80107e4:	6814      	ldr	r4, [r2, #0]
 80107e6:	461a      	mov	r2, r3
 80107e8:	47a0      	blx	r4
 80107ea:	bd10      	pop	{r4, pc}
 80107ec:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80107f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107f4:	f7fc bc88 	b.w	800d108 <GUI__GetLineNumChars>
 80107f8:	20000120 	.word	0x20000120
 80107fc:	20000124 	.word	0x20000124

08010800 <GUI__WrapGetNumCharsDisp>:
 8010800:	2300      	movs	r3, #0
 8010802:	f7ff bfe5 	b.w	80107d0 <_WrapGetNumCharsDisp>

08010806 <GUI__WrapGetNumCharsToNextLine>:
 8010806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010808:	b085      	sub	sp, #20
 801080a:	ab03      	add	r3, sp, #12
 801080c:	4617      	mov	r7, r2
 801080e:	460e      	mov	r6, r1
 8010810:	9001      	str	r0, [sp, #4]
 8010812:	f7ff ffdd 	bl	80107d0 <_WrapGetNumCharsDisp>
 8010816:	9d01      	ldr	r5, [sp, #4]
 8010818:	4604      	mov	r4, r0
 801081a:	4621      	mov	r1, r4
 801081c:	4628      	mov	r0, r5
 801081e:	f7fb fcdb 	bl	800c1d8 <GUI_UC__NumChars2NumBytes>
 8010822:	4428      	add	r0, r5
 8010824:	ad04      	add	r5, sp, #16
 8010826:	f845 0d0c 	str.w	r0, [r5, #-12]!
 801082a:	4628      	mov	r0, r5
 801082c:	f7fb fcc0 	bl	800c1b0 <GUI_UC__GetCharCodeInc>
 8010830:	280a      	cmp	r0, #10
 8010832:	d101      	bne.n	8010838 <GUI__WrapGetNumCharsToNextLine+0x32>
 8010834:	3401      	adds	r4, #1
 8010836:	e012      	b.n	801085e <GUI__WrapGetNumCharsToNextLine+0x58>
 8010838:	2f01      	cmp	r7, #1
 801083a:	d110      	bne.n	801085e <GUI__WrapGetNumCharsToNextLine+0x58>
 801083c:	2820      	cmp	r0, #32
 801083e:	d10e      	bne.n	801085e <GUI__WrapGetNumCharsToNextLine+0x58>
 8010840:	f7fc fd1c 	bl	800d27c <GUI_GetCharDistX>
 8010844:	4607      	mov	r7, r0
 8010846:	9b03      	ldr	r3, [sp, #12]
 8010848:	429e      	cmp	r6, r3
 801084a:	db08      	blt.n	801085e <GUI__WrapGetNumCharsToNextLine+0x58>
 801084c:	443b      	add	r3, r7
 801084e:	4628      	mov	r0, r5
 8010850:	9303      	str	r3, [sp, #12]
 8010852:	f7fb fcad 	bl	800c1b0 <GUI_UC__GetCharCodeInc>
 8010856:	2820      	cmp	r0, #32
 8010858:	f104 0401 	add.w	r4, r4, #1
 801085c:	d0f3      	beq.n	8010846 <GUI__WrapGetNumCharsToNextLine+0x40>
 801085e:	4620      	mov	r0, r4
 8010860:	b005      	add	sp, #20
 8010862:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010864 <GUI__WrapGetNumBytesToNextLine>:
 8010864:	b510      	push	{r4, lr}
 8010866:	4604      	mov	r4, r0
 8010868:	f7ff ffcd 	bl	8010806 <GUI__WrapGetNumCharsToNextLine>
 801086c:	4601      	mov	r1, r0
 801086e:	4620      	mov	r0, r4
 8010870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010874:	f7fb bcb0 	b.w	800c1d8 <GUI_UC__NumChars2NumBytes>

08010878 <GUI__ExpandPixelIndicesEx>:
 8010878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801087c:	1e0c      	subs	r4, r1, #0
 801087e:	4605      	mov	r5, r0
 8010880:	f340 80b3 	ble.w	80109ea <GUI__ExpandPixelIndicesEx+0x172>
 8010884:	2a08      	cmp	r2, #8
 8010886:	685f      	ldr	r7, [r3, #4]
 8010888:	dd04      	ble.n	8010894 <GUI__ExpandPixelIndicesEx+0x1c>
 801088a:	2a10      	cmp	r2, #16
 801088c:	f340 8098 	ble.w	80109c0 <GUI__ExpandPixelIndicesEx+0x148>
 8010890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010894:	3a01      	subs	r2, #1
 8010896:	2a07      	cmp	r2, #7
 8010898:	f200 80a7 	bhi.w	80109ea <GUI__ExpandPixelIndicesEx+0x172>
 801089c:	e8df f002 	tbb	[pc, r2]
 80108a0:	58a52d04 	.word	0x58a52d04
 80108a4:	83a5a5a5 	.word	0x83a5a5a5
 80108a8:	1e66      	subs	r6, r4, #1
 80108aa:	10f2      	asrs	r2, r6, #3
 80108ac:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80108b0:	3b01      	subs	r3, #1
 80108b2:	eb05 0802 	add.w	r8, r5, r2
 80108b6:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80108ba:	f006 0607 	and.w	r6, r6, #7
 80108be:	f815 a002 	ldrb.w	sl, [r5, r2]
 80108c2:	2580      	movs	r5, #128	; 0x80
 80108c4:	4135      	asrs	r5, r6
 80108c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80108ca:	b2ed      	uxtb	r5, r5
 80108cc:	f1c6 0307 	rsb	r3, r6, #7
 80108d0:	ea0a 0005 	and.w	r0, sl, r5
 80108d4:	4118      	asrs	r0, r3
 80108d6:	47b8      	blx	r7
 80108d8:	f849 0904 	str.w	r0, [r9], #-4
 80108dc:	b936      	cbnz	r6, 80108ec <GUI__ExpandPixelIndicesEx+0x74>
 80108de:	f898 a000 	ldrb.w	sl, [r8]
 80108e2:	2501      	movs	r5, #1
 80108e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80108e8:	2607      	movs	r6, #7
 80108ea:	e002      	b.n	80108f2 <GUI__ExpandPixelIndicesEx+0x7a>
 80108ec:	006d      	lsls	r5, r5, #1
 80108ee:	3e01      	subs	r6, #1
 80108f0:	b2ed      	uxtb	r5, r5
 80108f2:	3c01      	subs	r4, #1
 80108f4:	d1ea      	bne.n	80108cc <GUI__ExpandPixelIndicesEx+0x54>
 80108f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108fa:	1e66      	subs	r6, r4, #1
 80108fc:	10b2      	asrs	r2, r6, #2
 80108fe:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8010902:	3b01      	subs	r3, #1
 8010904:	f006 0603 	and.w	r6, r6, #3
 8010908:	eb05 0802 	add.w	r8, r5, r2
 801090c:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8010910:	f815 a002 	ldrb.w	sl, [r5, r2]
 8010914:	0073      	lsls	r3, r6, #1
 8010916:	25c0      	movs	r5, #192	; 0xc0
 8010918:	411d      	asrs	r5, r3
 801091a:	f108 38ff 	add.w	r8, r8, #4294967295
 801091e:	b2ed      	uxtb	r5, r5
 8010920:	0073      	lsls	r3, r6, #1
 8010922:	f1c3 0306 	rsb	r3, r3, #6
 8010926:	ea0a 0005 	and.w	r0, sl, r5
 801092a:	4118      	asrs	r0, r3
 801092c:	47b8      	blx	r7
 801092e:	f849 0904 	str.w	r0, [r9], #-4
 8010932:	b936      	cbnz	r6, 8010942 <GUI__ExpandPixelIndicesEx+0xca>
 8010934:	2503      	movs	r5, #3
 8010936:	f898 a000 	ldrb.w	sl, [r8]
 801093a:	462e      	mov	r6, r5
 801093c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010940:	e002      	b.n	8010948 <GUI__ExpandPixelIndicesEx+0xd0>
 8010942:	00ad      	lsls	r5, r5, #2
 8010944:	3e01      	subs	r6, #1
 8010946:	b2ed      	uxtb	r5, r5
 8010948:	3c01      	subs	r4, #1
 801094a:	d1e9      	bne.n	8010920 <GUI__ExpandPixelIndicesEx+0xa8>
 801094c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010950:	1e66      	subs	r6, r4, #1
 8010952:	1072      	asrs	r2, r6, #1
 8010954:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8010958:	3b01      	subs	r3, #1
 801095a:	f006 0601 	and.w	r6, r6, #1
 801095e:	eb05 0802 	add.w	r8, r5, r2
 8010962:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8010966:	f815 a002 	ldrb.w	sl, [r5, r2]
 801096a:	00b3      	lsls	r3, r6, #2
 801096c:	25f0      	movs	r5, #240	; 0xf0
 801096e:	411d      	asrs	r5, r3
 8010970:	f108 38ff 	add.w	r8, r8, #4294967295
 8010974:	b2ed      	uxtb	r5, r5
 8010976:	00b3      	lsls	r3, r6, #2
 8010978:	f1c3 0304 	rsb	r3, r3, #4
 801097c:	ea0a 0005 	and.w	r0, sl, r5
 8010980:	4118      	asrs	r0, r3
 8010982:	47b8      	blx	r7
 8010984:	f849 0904 	str.w	r0, [r9], #-4
 8010988:	b936      	cbnz	r6, 8010998 <GUI__ExpandPixelIndicesEx+0x120>
 801098a:	f898 a000 	ldrb.w	sl, [r8]
 801098e:	250f      	movs	r5, #15
 8010990:	f108 38ff 	add.w	r8, r8, #4294967295
 8010994:	2601      	movs	r6, #1
 8010996:	e002      	b.n	801099e <GUI__ExpandPixelIndicesEx+0x126>
 8010998:	012d      	lsls	r5, r5, #4
 801099a:	b2ed      	uxtb	r5, r5
 801099c:	2600      	movs	r6, #0
 801099e:	3c01      	subs	r4, #1
 80109a0:	d1e9      	bne.n	8010976 <GUI__ExpandPixelIndicesEx+0xfe>
 80109a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109a6:	192e      	adds	r6, r5, r4
 80109a8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 80109ac:	1b34      	subs	r4, r6, r4
 80109ae:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 80109b2:	47b8      	blx	r7
 80109b4:	42a6      	cmp	r6, r4
 80109b6:	f845 0d04 	str.w	r0, [r5, #-4]!
 80109ba:	d1f8      	bne.n	80109ae <GUI__ExpandPixelIndicesEx+0x136>
 80109bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109c0:	695e      	ldr	r6, [r3, #20]
 80109c2:	b12e      	cbz	r6, 80109d0 <GUI__ExpandPixelIndicesEx+0x158>
 80109c4:	4629      	mov	r1, r5
 80109c6:	4622      	mov	r2, r4
 80109c8:	2302      	movs	r3, #2
 80109ca:	47b0      	blx	r6
 80109cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109d0:	0064      	lsls	r4, r4, #1
 80109d2:	4425      	add	r5, r4
 80109d4:	192e      	adds	r6, r5, r4
 80109d6:	1b2c      	subs	r4, r5, r4
 80109d8:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 80109dc:	47b8      	blx	r7
 80109de:	42a5      	cmp	r5, r4
 80109e0:	f846 0d04 	str.w	r0, [r6, #-4]!
 80109e4:	d1f8      	bne.n	80109d8 <GUI__ExpandPixelIndicesEx+0x160>
 80109e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080109ee <_GetTwinArcPara>:
 80109ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109f2:	fb01 f901 	mul.w	r9, r1, r1
 80109f6:	1e47      	subs	r7, r0, #1
 80109f8:	4604      	mov	r4, r0
 80109fa:	4340      	muls	r0, r0
 80109fc:	ebc9 0000 	rsb	r0, r9, r0
 8010a00:	460d      	mov	r5, r1
 8010a02:	4692      	mov	sl, r2
 8010a04:	4698      	mov	r8, r3
 8010a06:	9e08      	ldr	r6, [sp, #32]
 8010a08:	f7fb f91f 	bl	800bc4a <GUI__sqrt32>
 8010a0c:	42bd      	cmp	r5, r7
 8010a0e:	f8ca 0000 	str.w	r0, [sl]
 8010a12:	da10      	bge.n	8010a36 <_GetTwinArcPara+0x48>
 8010a14:	fb07 f007 	mul.w	r0, r7, r7
 8010a18:	ebc9 0000 	rsb	r0, r9, r0
 8010a1c:	f7fb f915 	bl	800bc4a <GUI__sqrt32>
 8010a20:	3c02      	subs	r4, #2
 8010a22:	42a5      	cmp	r5, r4
 8010a24:	f8c8 0000 	str.w	r0, [r8]
 8010a28:	da03      	bge.n	8010a32 <_GetTwinArcPara+0x44>
 8010a2a:	3801      	subs	r0, #1
 8010a2c:	6030      	str	r0, [r6, #0]
 8010a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a32:	2300      	movs	r3, #0
 8010a34:	e002      	b.n	8010a3c <_GetTwinArcPara+0x4e>
 8010a36:	2300      	movs	r3, #0
 8010a38:	f8c8 3000 	str.w	r3, [r8]
 8010a3c:	6033      	str	r3, [r6, #0]
 8010a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08010a44 <GUI__DrawTwinArc2>:
 8010a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a48:	461c      	mov	r4, r3
 8010a4a:	4b57      	ldr	r3, [pc, #348]	; (8010ba8 <GUI__DrawTwinArc2+0x164>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8010a50:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8010a52:	b08b      	sub	sp, #44	; 0x2c
 8010a54:	4415      	add	r5, r2
 8010a56:	1e63      	subs	r3, r4, #1
 8010a58:	19c6      	adds	r6, r0, r7
 8010a5a:	442b      	add	r3, r5
 8010a5c:	440f      	add	r7, r1
 8010a5e:	a808      	add	r0, sp, #32
 8010a60:	f8ad 6020 	strh.w	r6, [sp, #32]
 8010a64:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8010a68:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8010a6c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010a70:	f7f7 fffe 	bl	8008a70 <WM__InitIVRSearch>
 8010a74:	2800      	cmp	r0, #0
 8010a76:	f000 8094 	beq.w	8010ba2 <GUI__DrawTwinArc2+0x15e>
 8010a7a:	2c00      	cmp	r4, #0
 8010a7c:	dc02      	bgt.n	8010a84 <GUI__DrawTwinArc2+0x40>
 8010a7e:	f7f7 ff35 	bl	80088ec <WM__GetNextIVR>
 8010a82:	e7f7      	b.n	8010a74 <GUI__DrawTwinArc2+0x30>
 8010a84:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010a86:	f7fc f90a 	bl	800cc9e <GUI_SetColor>
 8010a8a:	f104 38ff 	add.w	r8, r4, #4294967295
 8010a8e:	4641      	mov	r1, r8
 8010a90:	f118 38ff 	adds.w	r8, r8, #4294967295
 8010a94:	d324      	bcc.n	8010ae0 <GUI__DrawTwinArc2+0x9c>
 8010a96:	ab07      	add	r3, sp, #28
 8010a98:	9300      	str	r3, [sp, #0]
 8010a9a:	4620      	mov	r0, r4
 8010a9c:	aa05      	add	r2, sp, #20
 8010a9e:	ab06      	add	r3, sp, #24
 8010aa0:	f7ff ffa5 	bl	80109ee <_GetTwinArcPara>
 8010aa4:	f104 39ff 	add.w	r9, r4, #4294967295
 8010aa8:	f8dd a018 	ldr.w	sl, [sp, #24]
 8010aac:	9905      	ldr	r1, [sp, #20]
 8010aae:	1930      	adds	r0, r6, r4
 8010ab0:	44a9      	add	r9, r5
 8010ab2:	ebc8 0909 	rsb	r9, r8, r9
 8010ab6:	ebc4 0b07 	rsb	fp, r4, r7
 8010aba:	ebca 0200 	rsb	r2, sl, r0
 8010abe:	eb0b 0301 	add.w	r3, fp, r1
 8010ac2:	1a40      	subs	r0, r0, r1
 8010ac4:	3a01      	subs	r2, #1
 8010ac6:	4649      	mov	r1, r9
 8010ac8:	9302      	str	r3, [sp, #8]
 8010aca:	f7fa fcdb 	bl	800b484 <LCD_DrawHLine>
 8010ace:	9b02      	ldr	r3, [sp, #8]
 8010ad0:	eb0b 000a 	add.w	r0, fp, sl
 8010ad4:	3001      	adds	r0, #1
 8010ad6:	4649      	mov	r1, r9
 8010ad8:	461a      	mov	r2, r3
 8010ada:	f7fa fcd3 	bl	800b484 <LCD_DrawHLine>
 8010ade:	e7d6      	b.n	8010a8e <GUI__DrawTwinArc2+0x4a>
 8010ae0:	2c01      	cmp	r4, #1
 8010ae2:	d0cc      	beq.n	8010a7e <GUI__DrawTwinArc2+0x3a>
 8010ae4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010ae6:	f7fc f8da 	bl	800cc9e <GUI_SetColor>
 8010aea:	f1a4 0902 	sub.w	r9, r4, #2
 8010aee:	eb05 0b04 	add.w	fp, r5, r4
 8010af2:	f105 0802 	add.w	r8, r5, #2
 8010af6:	f1b9 0f00 	cmp.w	r9, #0
 8010afa:	d027      	beq.n	8010b4c <GUI__DrawTwinArc2+0x108>
 8010afc:	ab07      	add	r3, sp, #28
 8010afe:	4649      	mov	r1, r9
 8010b00:	9300      	str	r3, [sp, #0]
 8010b02:	4620      	mov	r0, r4
 8010b04:	aa05      	add	r2, sp, #20
 8010b06:	ab06      	add	r3, sp, #24
 8010b08:	f7ff ff71 	bl	80109ee <_GetTwinArcPara>
 8010b0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010b10:	9906      	ldr	r1, [sp, #24]
 8010b12:	1930      	adds	r0, r6, r4
 8010b14:	1b3b      	subs	r3, r7, r4
 8010b16:	ebca 0200 	rsb	r2, sl, r0
 8010b1a:	eb03 0c01 	add.w	ip, r3, r1
 8010b1e:	1a40      	subs	r0, r0, r1
 8010b20:	3a01      	subs	r2, #1
 8010b22:	4641      	mov	r1, r8
 8010b24:	9302      	str	r3, [sp, #8]
 8010b26:	f8cd c00c 	str.w	ip, [sp, #12]
 8010b2a:	f7fa fcab 	bl	800b484 <LCD_DrawHLine>
 8010b2e:	9b02      	ldr	r3, [sp, #8]
 8010b30:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010b34:	eb03 000a 	add.w	r0, r3, sl
 8010b38:	4641      	mov	r1, r8
 8010b3a:	3001      	adds	r0, #1
 8010b3c:	4662      	mov	r2, ip
 8010b3e:	f7fa fca1 	bl	800b484 <LCD_DrawHLine>
 8010b42:	f109 39ff 	add.w	r9, r9, #4294967295
 8010b46:	f108 0801 	add.w	r8, r8, #1
 8010b4a:	e7d4      	b.n	8010af6 <GUI__DrawTwinArc2+0xb2>
 8010b4c:	2c02      	cmp	r4, #2
 8010b4e:	d096      	beq.n	8010a7e <GUI__DrawTwinArc2+0x3a>
 8010b50:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010b52:	f7fc f8a4 	bl	800cc9e <GUI_SetColor>
 8010b56:	f1c4 0303 	rsb	r3, r4, #3
 8010b5a:	f1a4 0803 	sub.w	r8, r4, #3
 8010b5e:	449b      	add	fp, r3
 8010b60:	f1b8 0f00 	cmp.w	r8, #0
 8010b64:	d08b      	beq.n	8010a7e <GUI__DrawTwinArc2+0x3a>
 8010b66:	ab07      	add	r3, sp, #28
 8010b68:	4641      	mov	r1, r8
 8010b6a:	9300      	str	r3, [sp, #0]
 8010b6c:	4620      	mov	r0, r4
 8010b6e:	ab06      	add	r3, sp, #24
 8010b70:	aa05      	add	r2, sp, #20
 8010b72:	f7ff ff3c 	bl	80109ee <_GetTwinArcPara>
 8010b76:	9807      	ldr	r0, [sp, #28]
 8010b78:	1932      	adds	r2, r6, r4
 8010b7a:	ebc4 0907 	rsb	r9, r4, r7
 8010b7e:	4659      	mov	r1, fp
 8010b80:	eb09 0a00 	add.w	sl, r9, r0
 8010b84:	1a10      	subs	r0, r2, r0
 8010b86:	3a01      	subs	r2, #1
 8010b88:	f7fa fc7c 	bl	800b484 <LCD_DrawHLine>
 8010b8c:	4659      	mov	r1, fp
 8010b8e:	f109 0001 	add.w	r0, r9, #1
 8010b92:	4652      	mov	r2, sl
 8010b94:	f7fa fc76 	bl	800b484 <LCD_DrawHLine>
 8010b98:	f108 38ff 	add.w	r8, r8, #4294967295
 8010b9c:	f10b 0b01 	add.w	fp, fp, #1
 8010ba0:	e7de      	b.n	8010b60 <GUI__DrawTwinArc2+0x11c>
 8010ba2:	b00b      	add	sp, #44	; 0x2c
 8010ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ba8:	20000084 	.word	0x20000084

08010bac <GUI__CompactPixelIndices>:
 8010bac:	2a08      	cmp	r2, #8
 8010bae:	b510      	push	{r4, lr}
 8010bb0:	dd0e      	ble.n	8010bd0 <GUI__CompactPixelIndices+0x24>
 8010bb2:	2a10      	cmp	r2, #16
 8010bb4:	dc0a      	bgt.n	8010bcc <GUI__CompactPixelIndices+0x20>
 8010bb6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8010bba:	4603      	mov	r3, r0
 8010bbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8010bc0:	f823 2b02 	strh.w	r2, [r3], #2
 8010bc4:	428b      	cmp	r3, r1
 8010bc6:	d1f9      	bne.n	8010bbc <GUI__CompactPixelIndices+0x10>
 8010bc8:	2001      	movs	r0, #1
 8010bca:	bd10      	pop	{r4, pc}
 8010bcc:	2000      	movs	r0, #0
 8010bce:	bd10      	pop	{r4, pc}
 8010bd0:	2a02      	cmp	r2, #2
 8010bd2:	d06d      	beq.n	8010cb0 <GUI__CompactPixelIndices+0x104>
 8010bd4:	2a04      	cmp	r2, #4
 8010bd6:	d054      	beq.n	8010c82 <GUI__CompactPixelIndices+0xd6>
 8010bd8:	2a01      	cmp	r2, #1
 8010bda:	f040 8095 	bne.w	8010d08 <GUI__CompactPixelIndices+0x15c>
 8010bde:	4604      	mov	r4, r0
 8010be0:	6803      	ldr	r3, [r0, #0]
 8010be2:	2901      	cmp	r1, #1
 8010be4:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	d047      	beq.n	8010c7c <GUI__CompactPixelIndices+0xd0>
 8010bec:	6842      	ldr	r2, [r0, #4]
 8010bee:	2902      	cmp	r1, #2
 8010bf0:	f002 0201 	and.w	r2, r2, #1
 8010bf4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8010bf8:	d102      	bne.n	8010c00 <GUI__CompactPixelIndices+0x54>
 8010bfa:	f100 0208 	add.w	r2, r0, #8
 8010bfe:	e03e      	b.n	8010c7e <GUI__CompactPixelIndices+0xd2>
 8010c00:	6882      	ldr	r2, [r0, #8]
 8010c02:	2903      	cmp	r1, #3
 8010c04:	f002 0201 	and.w	r2, r2, #1
 8010c08:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8010c0c:	d102      	bne.n	8010c14 <GUI__CompactPixelIndices+0x68>
 8010c0e:	f100 020c 	add.w	r2, r0, #12
 8010c12:	e034      	b.n	8010c7e <GUI__CompactPixelIndices+0xd2>
 8010c14:	68c2      	ldr	r2, [r0, #12]
 8010c16:	2904      	cmp	r1, #4
 8010c18:	f002 0201 	and.w	r2, r2, #1
 8010c1c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8010c20:	d102      	bne.n	8010c28 <GUI__CompactPixelIndices+0x7c>
 8010c22:	f100 0210 	add.w	r2, r0, #16
 8010c26:	e02a      	b.n	8010c7e <GUI__CompactPixelIndices+0xd2>
 8010c28:	6902      	ldr	r2, [r0, #16]
 8010c2a:	2905      	cmp	r1, #5
 8010c2c:	f002 0201 	and.w	r2, r2, #1
 8010c30:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8010c34:	d102      	bne.n	8010c3c <GUI__CompactPixelIndices+0x90>
 8010c36:	f100 0214 	add.w	r2, r0, #20
 8010c3a:	e020      	b.n	8010c7e <GUI__CompactPixelIndices+0xd2>
 8010c3c:	6942      	ldr	r2, [r0, #20]
 8010c3e:	2906      	cmp	r1, #6
 8010c40:	f002 0201 	and.w	r2, r2, #1
 8010c44:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8010c48:	d102      	bne.n	8010c50 <GUI__CompactPixelIndices+0xa4>
 8010c4a:	f100 0218 	add.w	r2, r0, #24
 8010c4e:	e016      	b.n	8010c7e <GUI__CompactPixelIndices+0xd2>
 8010c50:	6982      	ldr	r2, [r0, #24]
 8010c52:	3907      	subs	r1, #7
 8010c54:	f002 0201 	and.w	r2, r2, #1
 8010c58:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8010c5c:	d102      	bne.n	8010c64 <GUI__CompactPixelIndices+0xb8>
 8010c5e:	f100 021c 	add.w	r2, r0, #28
 8010c62:	e005      	b.n	8010c70 <GUI__CompactPixelIndices+0xc4>
 8010c64:	f100 0220 	add.w	r2, r0, #32
 8010c68:	69c0      	ldr	r0, [r0, #28]
 8010c6a:	f000 0001 	and.w	r0, r0, #1
 8010c6e:	4303      	orrs	r3, r0
 8010c70:	f804 3b01 	strb.w	r3, [r4], #1
 8010c74:	2900      	cmp	r1, #0
 8010c76:	d0a7      	beq.n	8010bc8 <GUI__CompactPixelIndices+0x1c>
 8010c78:	4610      	mov	r0, r2
 8010c7a:	e7b1      	b.n	8010be0 <GUI__CompactPixelIndices+0x34>
 8010c7c:	1d02      	adds	r2, r0, #4
 8010c7e:	2100      	movs	r1, #0
 8010c80:	e7f6      	b.n	8010c70 <GUI__CompactPixelIndices+0xc4>
 8010c82:	4602      	mov	r2, r0
 8010c84:	6803      	ldr	r3, [r0, #0]
 8010c86:	2901      	cmp	r1, #1
 8010c88:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	d102      	bne.n	8010c96 <GUI__CompactPixelIndices+0xea>
 8010c90:	1d04      	adds	r4, r0, #4
 8010c92:	2100      	movs	r1, #0
 8010c94:	e006      	b.n	8010ca4 <GUI__CompactPixelIndices+0xf8>
 8010c96:	f100 0408 	add.w	r4, r0, #8
 8010c9a:	6840      	ldr	r0, [r0, #4]
 8010c9c:	f000 000f 	and.w	r0, r0, #15
 8010ca0:	4303      	orrs	r3, r0
 8010ca2:	3902      	subs	r1, #2
 8010ca4:	f802 3b01 	strb.w	r3, [r2], #1
 8010ca8:	2900      	cmp	r1, #0
 8010caa:	d08d      	beq.n	8010bc8 <GUI__CompactPixelIndices+0x1c>
 8010cac:	4620      	mov	r0, r4
 8010cae:	e7e9      	b.n	8010c84 <GUI__CompactPixelIndices+0xd8>
 8010cb0:	4604      	mov	r4, r0
 8010cb2:	6803      	ldr	r3, [r0, #0]
 8010cb4:	2901      	cmp	r1, #1
 8010cb6:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	d021      	beq.n	8010d02 <GUI__CompactPixelIndices+0x156>
 8010cbe:	6842      	ldr	r2, [r0, #4]
 8010cc0:	2902      	cmp	r1, #2
 8010cc2:	f002 0203 	and.w	r2, r2, #3
 8010cc6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8010cca:	d102      	bne.n	8010cd2 <GUI__CompactPixelIndices+0x126>
 8010ccc:	f100 0208 	add.w	r2, r0, #8
 8010cd0:	e018      	b.n	8010d04 <GUI__CompactPixelIndices+0x158>
 8010cd2:	6882      	ldr	r2, [r0, #8]
 8010cd4:	2903      	cmp	r1, #3
 8010cd6:	f002 0203 	and.w	r2, r2, #3
 8010cda:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8010cde:	d102      	bne.n	8010ce6 <GUI__CompactPixelIndices+0x13a>
 8010ce0:	f100 020c 	add.w	r2, r0, #12
 8010ce4:	e00e      	b.n	8010d04 <GUI__CompactPixelIndices+0x158>
 8010ce6:	f100 0210 	add.w	r2, r0, #16
 8010cea:	68c0      	ldr	r0, [r0, #12]
 8010cec:	f000 0003 	and.w	r0, r0, #3
 8010cf0:	4303      	orrs	r3, r0
 8010cf2:	3904      	subs	r1, #4
 8010cf4:	f804 3b01 	strb.w	r3, [r4], #1
 8010cf8:	2900      	cmp	r1, #0
 8010cfa:	f43f af65 	beq.w	8010bc8 <GUI__CompactPixelIndices+0x1c>
 8010cfe:	4610      	mov	r0, r2
 8010d00:	e7d7      	b.n	8010cb2 <GUI__CompactPixelIndices+0x106>
 8010d02:	1d02      	adds	r2, r0, #4
 8010d04:	2100      	movs	r1, #0
 8010d06:	e7f5      	b.n	8010cf4 <GUI__CompactPixelIndices+0x148>
 8010d08:	2300      	movs	r3, #0
 8010d0a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8010d0e:	54c2      	strb	r2, [r0, r3]
 8010d10:	3301      	adds	r3, #1
 8010d12:	428b      	cmp	r3, r1
 8010d14:	d1f9      	bne.n	8010d0a <GUI__CompactPixelIndices+0x15e>
 8010d16:	e757      	b.n	8010bc8 <GUI__CompactPixelIndices+0x1c>

08010d18 <GUI__ConvertColor2Index>:
 8010d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010d20:	681e      	ldr	r6, [r3, #0]
 8010d22:	f1b8 0f00 	cmp.w	r8, #0
 8010d26:	bf08      	it	eq
 8010d28:	4680      	moveq	r8, r0
 8010d2a:	2a08      	cmp	r2, #8
 8010d2c:	4604      	mov	r4, r0
 8010d2e:	460d      	mov	r5, r1
 8010d30:	dd05      	ble.n	8010d3e <GUI__ConvertColor2Index+0x26>
 8010d32:	2a10      	cmp	r2, #16
 8010d34:	f340 80b6 	ble.w	8010ea4 <GUI__ConvertColor2Index+0x18c>
 8010d38:	2000      	movs	r0, #0
 8010d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d3e:	3a01      	subs	r2, #1
 8010d40:	2a07      	cmp	r2, #7
 8010d42:	f200 80a4 	bhi.w	8010e8e <GUI__ConvertColor2Index+0x176>
 8010d46:	e8df f002 	tbb	[pc, r2]
 8010d4a:	6111      	.short	0x6111
 8010d4c:	a2a287a2 	.word	0xa2a287a2
 8010d50:	92a2      	.short	0x92a2
 8010d52:	69e0      	ldr	r0, [r4, #28]
 8010d54:	47b0      	blx	r6
 8010d56:	4338      	orrs	r0, r7
 8010d58:	f104 0920 	add.w	r9, r4, #32
 8010d5c:	b2c7      	uxtb	r7, r0
 8010d5e:	3d08      	subs	r5, #8
 8010d60:	f808 7b01 	strb.w	r7, [r8], #1
 8010d64:	2d00      	cmp	r5, #0
 8010d66:	f000 8092 	beq.w	8010e8e <GUI__ConvertColor2Index+0x176>
 8010d6a:	464c      	mov	r4, r9
 8010d6c:	6820      	ldr	r0, [r4, #0]
 8010d6e:	47b0      	blx	r6
 8010d70:	2d01      	cmp	r5, #1
 8010d72:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8010d76:	b2c7      	uxtb	r7, r0
 8010d78:	f000 808c 	beq.w	8010e94 <GUI__ConvertColor2Index+0x17c>
 8010d7c:	6860      	ldr	r0, [r4, #4]
 8010d7e:	47b0      	blx	r6
 8010d80:	2d02      	cmp	r5, #2
 8010d82:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 8010d86:	b2c7      	uxtb	r7, r0
 8010d88:	d102      	bne.n	8010d90 <GUI__ConvertColor2Index+0x78>
 8010d8a:	f104 0908 	add.w	r9, r4, #8
 8010d8e:	e083      	b.n	8010e98 <GUI__ConvertColor2Index+0x180>
 8010d90:	68a0      	ldr	r0, [r4, #8]
 8010d92:	47b0      	blx	r6
 8010d94:	2d03      	cmp	r5, #3
 8010d96:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 8010d9a:	b2c7      	uxtb	r7, r0
 8010d9c:	d102      	bne.n	8010da4 <GUI__ConvertColor2Index+0x8c>
 8010d9e:	f104 090c 	add.w	r9, r4, #12
 8010da2:	e079      	b.n	8010e98 <GUI__ConvertColor2Index+0x180>
 8010da4:	68e0      	ldr	r0, [r4, #12]
 8010da6:	47b0      	blx	r6
 8010da8:	2d04      	cmp	r5, #4
 8010daa:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8010dae:	b2c7      	uxtb	r7, r0
 8010db0:	d102      	bne.n	8010db8 <GUI__ConvertColor2Index+0xa0>
 8010db2:	f104 0910 	add.w	r9, r4, #16
 8010db6:	e06f      	b.n	8010e98 <GUI__ConvertColor2Index+0x180>
 8010db8:	6920      	ldr	r0, [r4, #16]
 8010dba:	47b0      	blx	r6
 8010dbc:	2d05      	cmp	r5, #5
 8010dbe:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 8010dc2:	b2c7      	uxtb	r7, r0
 8010dc4:	d102      	bne.n	8010dcc <GUI__ConvertColor2Index+0xb4>
 8010dc6:	f104 0914 	add.w	r9, r4, #20
 8010dca:	e065      	b.n	8010e98 <GUI__ConvertColor2Index+0x180>
 8010dcc:	6960      	ldr	r0, [r4, #20]
 8010dce:	47b0      	blx	r6
 8010dd0:	2d06      	cmp	r5, #6
 8010dd2:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8010dd6:	b2c7      	uxtb	r7, r0
 8010dd8:	d102      	bne.n	8010de0 <GUI__ConvertColor2Index+0xc8>
 8010dda:	f104 0918 	add.w	r9, r4, #24
 8010dde:	e05b      	b.n	8010e98 <GUI__ConvertColor2Index+0x180>
 8010de0:	69a0      	ldr	r0, [r4, #24]
 8010de2:	47b0      	blx	r6
 8010de4:	2d07      	cmp	r5, #7
 8010de6:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 8010dea:	b2c7      	uxtb	r7, r0
 8010dec:	d1b1      	bne.n	8010d52 <GUI__ConvertColor2Index+0x3a>
 8010dee:	f104 091c 	add.w	r9, r4, #28
 8010df2:	e051      	b.n	8010e98 <GUI__ConvertColor2Index+0x180>
 8010df4:	68e0      	ldr	r0, [r4, #12]
 8010df6:	47b0      	blx	r6
 8010df8:	4338      	orrs	r0, r7
 8010dfa:	f104 0910 	add.w	r9, r4, #16
 8010dfe:	b2c7      	uxtb	r7, r0
 8010e00:	3d04      	subs	r5, #4
 8010e02:	f808 7b01 	strb.w	r7, [r8], #1
 8010e06:	2d00      	cmp	r5, #0
 8010e08:	d041      	beq.n	8010e8e <GUI__ConvertColor2Index+0x176>
 8010e0a:	464c      	mov	r4, r9
 8010e0c:	6820      	ldr	r0, [r4, #0]
 8010e0e:	47b0      	blx	r6
 8010e10:	2d01      	cmp	r5, #1
 8010e12:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8010e16:	b2c7      	uxtb	r7, r0
 8010e18:	d040      	beq.n	8010e9c <GUI__ConvertColor2Index+0x184>
 8010e1a:	6860      	ldr	r0, [r4, #4]
 8010e1c:	47b0      	blx	r6
 8010e1e:	2d02      	cmp	r5, #2
 8010e20:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8010e24:	b2c7      	uxtb	r7, r0
 8010e26:	d102      	bne.n	8010e2e <GUI__ConvertColor2Index+0x116>
 8010e28:	f104 0908 	add.w	r9, r4, #8
 8010e2c:	e038      	b.n	8010ea0 <GUI__ConvertColor2Index+0x188>
 8010e2e:	68a0      	ldr	r0, [r4, #8]
 8010e30:	47b0      	blx	r6
 8010e32:	2d03      	cmp	r5, #3
 8010e34:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8010e38:	b2c7      	uxtb	r7, r0
 8010e3a:	d1db      	bne.n	8010df4 <GUI__ConvertColor2Index+0xdc>
 8010e3c:	f104 090c 	add.w	r9, r4, #12
 8010e40:	e02e      	b.n	8010ea0 <GUI__ConvertColor2Index+0x188>
 8010e42:	6860      	ldr	r0, [r4, #4]
 8010e44:	47b0      	blx	r6
 8010e46:	4338      	orrs	r0, r7
 8010e48:	f104 0908 	add.w	r9, r4, #8
 8010e4c:	b2c7      	uxtb	r7, r0
 8010e4e:	3d02      	subs	r5, #2
 8010e50:	f808 7b01 	strb.w	r7, [r8], #1
 8010e54:	b1dd      	cbz	r5, 8010e8e <GUI__ConvertColor2Index+0x176>
 8010e56:	464c      	mov	r4, r9
 8010e58:	6820      	ldr	r0, [r4, #0]
 8010e5a:	47b0      	blx	r6
 8010e5c:	2d01      	cmp	r5, #1
 8010e5e:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8010e62:	b2c7      	uxtb	r7, r0
 8010e64:	d1ed      	bne.n	8010e42 <GUI__ConvertColor2Index+0x12a>
 8010e66:	f104 0904 	add.w	r9, r4, #4
 8010e6a:	2500      	movs	r5, #0
 8010e6c:	e7f0      	b.n	8010e50 <GUI__ConvertColor2Index+0x138>
 8010e6e:	691f      	ldr	r7, [r3, #16]
 8010e70:	b12f      	cbz	r7, 8010e7e <GUI__ConvertColor2Index+0x166>
 8010e72:	4620      	mov	r0, r4
 8010e74:	4641      	mov	r1, r8
 8010e76:	462a      	mov	r2, r5
 8010e78:	2301      	movs	r3, #1
 8010e7a:	47b8      	blx	r7
 8010e7c:	e007      	b.n	8010e8e <GUI__ConvertColor2Index+0x176>
 8010e7e:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8010e82:	47b0      	blx	r6
 8010e84:	f808 0007 	strb.w	r0, [r8, r7]
 8010e88:	3701      	adds	r7, #1
 8010e8a:	42bd      	cmp	r5, r7
 8010e8c:	d1f7      	bne.n	8010e7e <GUI__ConvertColor2Index+0x166>
 8010e8e:	2001      	movs	r0, #1
 8010e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e94:	f104 0904 	add.w	r9, r4, #4
 8010e98:	2500      	movs	r5, #0
 8010e9a:	e761      	b.n	8010d60 <GUI__ConvertColor2Index+0x48>
 8010e9c:	f104 0904 	add.w	r9, r4, #4
 8010ea0:	2500      	movs	r5, #0
 8010ea2:	e7ae      	b.n	8010e02 <GUI__ConvertColor2Index+0xea>
 8010ea4:	691f      	ldr	r7, [r3, #16]
 8010ea6:	b11f      	cbz	r7, 8010eb0 <GUI__ConvertColor2Index+0x198>
 8010ea8:	4641      	mov	r1, r8
 8010eaa:	462a      	mov	r2, r5
 8010eac:	2302      	movs	r3, #2
 8010eae:	e7e4      	b.n	8010e7a <GUI__ConvertColor2Index+0x162>
 8010eb0:	f854 0b04 	ldr.w	r0, [r4], #4
 8010eb4:	47b0      	blx	r6
 8010eb6:	3d01      	subs	r5, #1
 8010eb8:	f828 0b02 	strh.w	r0, [r8], #2
 8010ebc:	d1f8      	bne.n	8010eb0 <GUI__ConvertColor2Index+0x198>
 8010ebe:	e7e6      	b.n	8010e8e <GUI__ConvertColor2Index+0x176>

08010ec0 <GUI__CompactPixelIndicesEx>:
 8010ec0:	b513      	push	{r0, r1, r4, lr}
 8010ec2:	2400      	movs	r4, #0
 8010ec4:	9400      	str	r4, [sp, #0]
 8010ec6:	f7ff ff27 	bl	8010d18 <GUI__ConvertColor2Index>
 8010eca:	b002      	add	sp, #8
 8010ecc:	bd10      	pop	{r4, pc}

08010ece <_GetCharCode>:
 8010ece:	7800      	ldrb	r0, [r0, #0]
 8010ed0:	4770      	bx	lr

08010ed2 <_GetCharSize>:
 8010ed2:	2001      	movs	r0, #1
 8010ed4:	4770      	bx	lr

08010ed6 <_CalcSizeOfChar>:
 8010ed6:	2001      	movs	r0, #1
 8010ed8:	4770      	bx	lr

08010eda <_Encode>:
 8010eda:	7001      	strb	r1, [r0, #0]
 8010edc:	2001      	movs	r0, #1
 8010ede:	4770      	bx	lr

08010ee0 <GUI_DrawHLine>:
 8010ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ee2:	4f10      	ldr	r7, [pc, #64]	; (8010f24 <GUI_DrawHLine+0x44>)
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8010ee8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010eea:	4405      	add	r5, r0
 8010eec:	190e      	adds	r6, r1, r4
 8010eee:	b2ab      	uxth	r3, r5
 8010ef0:	4414      	add	r4, r2
 8010ef2:	4668      	mov	r0, sp
 8010ef4:	f8ad 6000 	strh.w	r6, [sp]
 8010ef8:	f8ad 4004 	strh.w	r4, [sp, #4]
 8010efc:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010f00:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010f04:	f7f7 fdb4 	bl	8008a70 <WM__InitIVRSearch>
 8010f08:	b148      	cbz	r0, 8010f1e <GUI_DrawHLine+0x3e>
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f0e:	4630      	mov	r0, r6
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	4629      	mov	r1, r5
 8010f14:	4622      	mov	r2, r4
 8010f16:	4798      	blx	r3
 8010f18:	f7f7 fce8 	bl	80088ec <WM__GetNextIVR>
 8010f1c:	e7f4      	b.n	8010f08 <GUI_DrawHLine+0x28>
 8010f1e:	b003      	add	sp, #12
 8010f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f22:	bf00      	nop
 8010f24:	20000084 	.word	0x20000084

08010f28 <GUI_DrawPixel>:
 8010f28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f2a:	4e0f      	ldr	r6, [pc, #60]	; (8010f68 <GUI_DrawPixel+0x40>)
 8010f2c:	6833      	ldr	r3, [r6, #0]
 8010f2e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8010f30:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8010f32:	4405      	add	r5, r0
 8010f34:	b2ab      	uxth	r3, r5
 8010f36:	440c      	add	r4, r1
 8010f38:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010f3c:	f8ad 3000 	strh.w	r3, [sp]
 8010f40:	4668      	mov	r0, sp
 8010f42:	b2a3      	uxth	r3, r4
 8010f44:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010f48:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010f4c:	f7f7 fd90 	bl	8008a70 <WM__InitIVRSearch>
 8010f50:	b140      	cbz	r0, 8010f64 <GUI_DrawPixel+0x3c>
 8010f52:	6833      	ldr	r3, [r6, #0]
 8010f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f56:	4628      	mov	r0, r5
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	4621      	mov	r1, r4
 8010f5c:	4798      	blx	r3
 8010f5e:	f7f7 fcc5 	bl	80088ec <WM__GetNextIVR>
 8010f62:	e7f5      	b.n	8010f50 <GUI_DrawPixel+0x28>
 8010f64:	b002      	add	sp, #8
 8010f66:	bd70      	pop	{r4, r5, r6, pc}
 8010f68:	20000084 	.word	0x20000084

08010f6c <GUI_DrawVLine>:
 8010f6c:	4b0f      	ldr	r3, [pc, #60]	; (8010fac <GUI_DrawVLine+0x40>)
 8010f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8010f74:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8010f76:	4406      	add	r6, r0
 8010f78:	190d      	adds	r5, r1, r4
 8010f7a:	b2b3      	uxth	r3, r6
 8010f7c:	4414      	add	r4, r2
 8010f7e:	4668      	mov	r0, sp
 8010f80:	f8ad 3000 	strh.w	r3, [sp]
 8010f84:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010f88:	f8ad 5002 	strh.w	r5, [sp, #2]
 8010f8c:	f8ad 4006 	strh.w	r4, [sp, #6]
 8010f90:	f7f7 fd6e 	bl	8008a70 <WM__InitIVRSearch>
 8010f94:	b138      	cbz	r0, 8010fa6 <GUI_DrawVLine+0x3a>
 8010f96:	4630      	mov	r0, r6
 8010f98:	4629      	mov	r1, r5
 8010f9a:	4622      	mov	r2, r4
 8010f9c:	f7fa fa98 	bl	800b4d0 <LCD_DrawVLine>
 8010fa0:	f7f7 fca4 	bl	80088ec <WM__GetNextIVR>
 8010fa4:	e7f6      	b.n	8010f94 <GUI_DrawVLine+0x28>
 8010fa6:	b002      	add	sp, #8
 8010fa8:	bd70      	pop	{r4, r5, r6, pc}
 8010faa:	bf00      	nop
 8010fac:	20000084 	.word	0x20000084

08010fb0 <GUI_FillRect>:
 8010fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010fb2:	4c0f      	ldr	r4, [pc, #60]	; (8010ff0 <GUI_FillRect+0x40>)
 8010fb4:	6824      	ldr	r4, [r4, #0]
 8010fb6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010fb8:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8010fba:	1947      	adds	r7, r0, r5
 8010fbc:	190e      	adds	r6, r1, r4
 8010fbe:	4415      	add	r5, r2
 8010fc0:	441c      	add	r4, r3
 8010fc2:	4668      	mov	r0, sp
 8010fc4:	f8ad 7000 	strh.w	r7, [sp]
 8010fc8:	f8ad 5004 	strh.w	r5, [sp, #4]
 8010fcc:	f8ad 6002 	strh.w	r6, [sp, #2]
 8010fd0:	f8ad 4006 	strh.w	r4, [sp, #6]
 8010fd4:	f7f7 fd4c 	bl	8008a70 <WM__InitIVRSearch>
 8010fd8:	b140      	cbz	r0, 8010fec <GUI_FillRect+0x3c>
 8010fda:	4638      	mov	r0, r7
 8010fdc:	4631      	mov	r1, r6
 8010fde:	462a      	mov	r2, r5
 8010fe0:	4623      	mov	r3, r4
 8010fe2:	f7fa fa9b 	bl	800b51c <LCD_FillRect>
 8010fe6:	f7f7 fc81 	bl	80088ec <WM__GetNextIVR>
 8010fea:	e7f5      	b.n	8010fd8 <GUI_FillRect+0x28>
 8010fec:	b003      	add	sp, #12
 8010fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ff0:	20000084 	.word	0x20000084

08010ff4 <GUI_FillRectEx>:
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	f9b0 0000 	ldrsh.w	r0, [r0]
 8010ffa:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8010ffe:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8011002:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011006:	f7ff bfd3 	b.w	8010fb0 <GUI_FillRect>

0801100a <_DrawGradient>:
 801100a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801100e:	b08f      	sub	sp, #60	; 0x3c
 8011010:	4688      	mov	r8, r1
 8011012:	4614      	mov	r4, r2
 8011014:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011016:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011018:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 801101c:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8011020:	9104      	str	r1, [sp, #16]
 8011022:	4605      	mov	r5, r0
 8011024:	461e      	mov	r6, r3
 8011026:	9203      	str	r2, [sp, #12]
 8011028:	f7fb fd6d 	bl	800cb06 <GUI_GetColor>
 801102c:	45da      	cmp	sl, fp
 801102e:	9009      	str	r0, [sp, #36]	; 0x24
 8011030:	d109      	bne.n	8011046 <_DrawGradient+0x3c>
 8011032:	4650      	mov	r0, sl
 8011034:	f7fa fd4a 	bl	800bacc <LCD_SetColor>
 8011038:	9b03      	ldr	r3, [sp, #12]
 801103a:	b113      	cbz	r3, 8011042 <_DrawGradient+0x38>
 801103c:	4628      	mov	r0, r5
 801103e:	4641      	mov	r1, r8
 8011040:	e09d      	b.n	801117e <_DrawGradient+0x174>
 8011042:	4640      	mov	r0, r8
 8011044:	e0a1      	b.n	801118a <_DrawGradient+0x180>
 8011046:	ebb6 0708 	subs.w	r7, r6, r8
 801104a:	f000 80b2 	beq.w	80111b2 <_DrawGradient+0x1a8>
 801104e:	fa5f f28a 	uxtb.w	r2, sl
 8011052:	fa5f f38b 	uxtb.w	r3, fp
 8011056:	1a9b      	subs	r3, r3, r2
 8011058:	930a      	str	r3, [sp, #40]	; 0x28
 801105a:	2302      	movs	r3, #2
 801105c:	fb97 f3f3 	sdiv	r3, r7, r3
 8011060:	fb02 3207 	mla	r2, r2, r7, r3
 8011064:	f3cb 2107 	ubfx	r1, fp, #8, #8
 8011068:	9205      	str	r2, [sp, #20]
 801106a:	f3ca 2207 	ubfx	r2, sl, #8, #8
 801106e:	1a89      	subs	r1, r1, r2
 8011070:	fb02 3207 	mla	r2, r2, r7, r3
 8011074:	910b      	str	r1, [sp, #44]	; 0x2c
 8011076:	9206      	str	r2, [sp, #24]
 8011078:	f3cb 4107 	ubfx	r1, fp, #16, #8
 801107c:	f3ca 4207 	ubfx	r2, sl, #16, #8
 8011080:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8011084:	1a89      	subs	r1, r1, r2
 8011086:	ebca 6b1b 	rsb	fp, sl, fp, lsr #24
 801108a:	fb02 3207 	mla	r2, r2, r7, r3
 801108e:	fb0a 3a07 	mla	sl, sl, r7, r3
 8011092:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011094:	910c      	str	r1, [sp, #48]	; 0x30
 8011096:	9207      	str	r2, [sp, #28]
 8011098:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 801109c:	f8cd a020 	str.w	sl, [sp, #32]
 80110a0:	f108 33ff 	add.w	r3, r8, #4294967295
 80110a4:	f04f 0901 	mov.w	r9, #1
 80110a8:	f103 0a01 	add.w	sl, r3, #1
 80110ac:	45b2      	cmp	sl, r6
 80110ae:	dc5b      	bgt.n	8011168 <_DrawGradient+0x15e>
 80110b0:	f8dd c014 	ldr.w	ip, [sp, #20]
 80110b4:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80110b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110ba:	fb9c fcf7 	sdiv	ip, ip, r7
 80110be:	f8cd c004 	str.w	ip, [sp, #4]
 80110c2:	f8dd c014 	ldr.w	ip, [sp, #20]
 80110c6:	44f4      	add	ip, lr
 80110c8:	f8cd c014 	str.w	ip, [sp, #20]
 80110cc:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 80110d0:	f8dd c018 	ldr.w	ip, [sp, #24]
 80110d4:	fb9c f1f7 	sdiv	r1, ip, r7
 80110d8:	44f4      	add	ip, lr
 80110da:	f8cd c018 	str.w	ip, [sp, #24]
 80110de:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80110e2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80110e6:	fb9c fbf7 	sdiv	fp, ip, r7
 80110ea:	44f4      	add	ip, lr
 80110ec:	f8cd c01c 	str.w	ip, [sp, #28]
 80110f0:	f8dd c020 	ldr.w	ip, [sp, #32]
 80110f4:	fb9c fef7 	sdiv	lr, ip, r7
 80110f8:	4494      	add	ip, r2
 80110fa:	f8cd c020 	str.w	ip, [sp, #32]
 80110fe:	f8dd c004 	ldr.w	ip, [sp, #4]
 8011102:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 8011106:	ea4b 6b0e 	orr.w	fp, fp, lr, lsl #24
 801110a:	ea4c 2201 	orr.w	r2, ip, r1, lsl #8
 801110e:	45c2      	cmp	sl, r8
 8011110:	ea4b 0b02 	orr.w	fp, fp, r2
 8011114:	dd25      	ble.n	8011162 <_DrawGradient+0x158>
 8011116:	4583      	cmp	fp, r0
 8011118:	d102      	bne.n	8011120 <_DrawGradient+0x116>
 801111a:	f109 0901 	add.w	r9, r9, #1
 801111e:	e020      	b.n	8011162 <_DrawGradient+0x158>
 8011120:	9302      	str	r3, [sp, #8]
 8011122:	f7fa fcd3 	bl	800bacc <LCD_SetColor>
 8011126:	f1b9 0f01 	cmp.w	r9, #1
 801112a:	9b02      	ldr	r3, [sp, #8]
 801112c:	d00f      	beq.n	801114e <_DrawGradient+0x144>
 801112e:	9a03      	ldr	r2, [sp, #12]
 8011130:	ebc9 010a 	rsb	r1, r9, sl
 8011134:	b112      	cbz	r2, 801113c <_DrawGradient+0x132>
 8011136:	4628      	mov	r0, r5
 8011138:	4622      	mov	r2, r4
 801113a:	e003      	b.n	8011144 <_DrawGradient+0x13a>
 801113c:	4608      	mov	r0, r1
 801113e:	461a      	mov	r2, r3
 8011140:	4629      	mov	r1, r5
 8011142:	4623      	mov	r3, r4
 8011144:	f7fa f9ea 	bl	800b51c <LCD_FillRect>
 8011148:	f04f 0901 	mov.w	r9, #1
 801114c:	e009      	b.n	8011162 <_DrawGradient+0x158>
 801114e:	9903      	ldr	r1, [sp, #12]
 8011150:	b111      	cbz	r1, 8011158 <_DrawGradient+0x14e>
 8011152:	4628      	mov	r0, r5
 8011154:	4619      	mov	r1, r3
 8011156:	e001      	b.n	801115c <_DrawGradient+0x152>
 8011158:	4618      	mov	r0, r3
 801115a:	4629      	mov	r1, r5
 801115c:	4622      	mov	r2, r4
 801115e:	9b04      	ldr	r3, [sp, #16]
 8011160:	4798      	blx	r3
 8011162:	4653      	mov	r3, sl
 8011164:	4658      	mov	r0, fp
 8011166:	e79f      	b.n	80110a8 <_DrawGradient+0x9e>
 8011168:	f7fa fcb0 	bl	800bacc <LCD_SetColor>
 801116c:	f1b9 0f01 	cmp.w	r9, #1
 8011170:	d00f      	beq.n	8011192 <_DrawGradient+0x188>
 8011172:	9a03      	ldr	r2, [sp, #12]
 8011174:	ebc9 0106 	rsb	r1, r9, r6
 8011178:	b132      	cbz	r2, 8011188 <_DrawGradient+0x17e>
 801117a:	4628      	mov	r0, r5
 801117c:	3101      	adds	r1, #1
 801117e:	4622      	mov	r2, r4
 8011180:	4633      	mov	r3, r6
 8011182:	f7fa f9cb 	bl	800b51c <LCD_FillRect>
 8011186:	e00e      	b.n	80111a6 <_DrawGradient+0x19c>
 8011188:	1c48      	adds	r0, r1, #1
 801118a:	4629      	mov	r1, r5
 801118c:	4632      	mov	r2, r6
 801118e:	4623      	mov	r3, r4
 8011190:	e7f7      	b.n	8011182 <_DrawGradient+0x178>
 8011192:	9b03      	ldr	r3, [sp, #12]
 8011194:	b113      	cbz	r3, 801119c <_DrawGradient+0x192>
 8011196:	4628      	mov	r0, r5
 8011198:	4631      	mov	r1, r6
 801119a:	e001      	b.n	80111a0 <_DrawGradient+0x196>
 801119c:	4630      	mov	r0, r6
 801119e:	4629      	mov	r1, r5
 80111a0:	4622      	mov	r2, r4
 80111a2:	9b04      	ldr	r3, [sp, #16]
 80111a4:	4798      	blx	r3
 80111a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111a8:	b00f      	add	sp, #60	; 0x3c
 80111aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ae:	f7fa bc8d 	b.w	800bacc <LCD_SetColor>
 80111b2:	b00f      	add	sp, #60	; 0x3c
 80111b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080111b8 <GUI_DrawGradientV>:
 80111b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111bc:	4c15      	ldr	r4, [pc, #84]	; (8011214 <GUI_DrawGradientV+0x5c>)
 80111be:	6824      	ldr	r4, [r4, #0]
 80111c0:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80111c2:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80111c4:	b087      	sub	sp, #28
 80111c6:	eb00 0905 	add.w	r9, r0, r5
 80111ca:	eb01 0804 	add.w	r8, r1, r4
 80111ce:	4415      	add	r5, r2
 80111d0:	441c      	add	r4, r3
 80111d2:	a804      	add	r0, sp, #16
 80111d4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80111d6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80111d8:	f8ad 9010 	strh.w	r9, [sp, #16]
 80111dc:	f8ad 5014 	strh.w	r5, [sp, #20]
 80111e0:	f8ad 8012 	strh.w	r8, [sp, #18]
 80111e4:	f8ad 4016 	strh.w	r4, [sp, #22]
 80111e8:	f7f7 fc42 	bl	8008a70 <WM__InitIVRSearch>
 80111ec:	b170      	cbz	r0, 801120c <GUI_DrawGradientV+0x54>
 80111ee:	4b0a      	ldr	r3, [pc, #40]	; (8011218 <GUI_DrawGradientV+0x60>)
 80111f0:	9302      	str	r3, [sp, #8]
 80111f2:	2301      	movs	r3, #1
 80111f4:	9303      	str	r3, [sp, #12]
 80111f6:	4648      	mov	r0, r9
 80111f8:	4641      	mov	r1, r8
 80111fa:	462a      	mov	r2, r5
 80111fc:	4623      	mov	r3, r4
 80111fe:	9700      	str	r7, [sp, #0]
 8011200:	9601      	str	r6, [sp, #4]
 8011202:	f7ff ff02 	bl	801100a <_DrawGradient>
 8011206:	f7f7 fb71 	bl	80088ec <WM__GetNextIVR>
 801120a:	e7ef      	b.n	80111ec <GUI_DrawGradientV+0x34>
 801120c:	b007      	add	sp, #28
 801120e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011212:	bf00      	nop
 8011214:	20000084 	.word	0x20000084
 8011218:	0800b485 	.word	0x0800b485

0801121c <GUI_DrawRect>:
 801121c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011220:	4c1e      	ldr	r4, [pc, #120]	; (801129c <GUI_DrawRect+0x80>)
 8011222:	f8d4 e000 	ldr.w	lr, [r4]
 8011226:	f8de 404c 	ldr.w	r4, [lr, #76]	; 0x4c
 801122a:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
 801122e:	1905      	adds	r5, r0, r4
 8011230:	4414      	add	r4, r2
 8011232:	f89e 2018 	ldrb.w	r2, [lr, #24]
 8011236:	3a01      	subs	r2, #1
 8011238:	b292      	uxth	r2, r2
 801123a:	198f      	adds	r7, r1, r6
 801123c:	441e      	add	r6, r3
 801123e:	1aab      	subs	r3, r5, r2
 8011240:	f8ad 3000 	strh.w	r3, [sp]
 8011244:	1913      	adds	r3, r2, r4
 8011246:	f8ad 3004 	strh.w	r3, [sp, #4]
 801124a:	4668      	mov	r0, sp
 801124c:	1abb      	subs	r3, r7, r2
 801124e:	4432      	add	r2, r6
 8011250:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011254:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011258:	f7f7 fc0a 	bl	8008a70 <WM__InitIVRSearch>
 801125c:	b1d0      	cbz	r0, 8011294 <GUI_DrawRect+0x78>
 801125e:	4628      	mov	r0, r5
 8011260:	4639      	mov	r1, r7
 8011262:	4622      	mov	r2, r4
 8011264:	f7fa f90e 	bl	800b484 <LCD_DrawHLine>
 8011268:	f107 0901 	add.w	r9, r7, #1
 801126c:	4628      	mov	r0, r5
 801126e:	4631      	mov	r1, r6
 8011270:	4622      	mov	r2, r4
 8011272:	f106 38ff 	add.w	r8, r6, #4294967295
 8011276:	f7fa f905 	bl	800b484 <LCD_DrawHLine>
 801127a:	4628      	mov	r0, r5
 801127c:	4649      	mov	r1, r9
 801127e:	4642      	mov	r2, r8
 8011280:	f7fa f926 	bl	800b4d0 <LCD_DrawVLine>
 8011284:	4620      	mov	r0, r4
 8011286:	4649      	mov	r1, r9
 8011288:	4642      	mov	r2, r8
 801128a:	f7fa f921 	bl	800b4d0 <LCD_DrawVLine>
 801128e:	f7f7 fb2d 	bl	80088ec <WM__GetNextIVR>
 8011292:	e7e3      	b.n	801125c <GUI_DrawRect+0x40>
 8011294:	b003      	add	sp, #12
 8011296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801129a:	bf00      	nop
 801129c:	20000084 	.word	0x20000084

080112a0 <_GetIndexMask_0>:
 80112a0:	b508      	push	{r3, lr}
 80112a2:	f7f9 fff1 	bl	800b288 <LCD_GetNumColors>
 80112a6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80112aa:	d010      	beq.n	80112ce <_GetIndexMask_0+0x2e>
 80112ac:	287f      	cmp	r0, #127	; 0x7f
 80112ae:	d810      	bhi.n	80112d2 <_GetIndexMask_0+0x32>
 80112b0:	283f      	cmp	r0, #63	; 0x3f
 80112b2:	d810      	bhi.n	80112d6 <_GetIndexMask_0+0x36>
 80112b4:	281f      	cmp	r0, #31
 80112b6:	d810      	bhi.n	80112da <_GetIndexMask_0+0x3a>
 80112b8:	280f      	cmp	r0, #15
 80112ba:	d810      	bhi.n	80112de <_GetIndexMask_0+0x3e>
 80112bc:	2807      	cmp	r0, #7
 80112be:	d810      	bhi.n	80112e2 <_GetIndexMask_0+0x42>
 80112c0:	2803      	cmp	r0, #3
 80112c2:	d810      	bhi.n	80112e6 <_GetIndexMask_0+0x46>
 80112c4:	2801      	cmp	r0, #1
 80112c6:	bf94      	ite	ls
 80112c8:	2000      	movls	r0, #0
 80112ca:	2001      	movhi	r0, #1
 80112cc:	e00c      	b.n	80112e8 <_GetIndexMask_0+0x48>
 80112ce:	2008      	movs	r0, #8
 80112d0:	e00a      	b.n	80112e8 <_GetIndexMask_0+0x48>
 80112d2:	2007      	movs	r0, #7
 80112d4:	e008      	b.n	80112e8 <_GetIndexMask_0+0x48>
 80112d6:	2006      	movs	r0, #6
 80112d8:	e006      	b.n	80112e8 <_GetIndexMask_0+0x48>
 80112da:	2005      	movs	r0, #5
 80112dc:	e004      	b.n	80112e8 <_GetIndexMask_0+0x48>
 80112de:	2004      	movs	r0, #4
 80112e0:	e002      	b.n	80112e8 <_GetIndexMask_0+0x48>
 80112e2:	2003      	movs	r0, #3
 80112e4:	e000      	b.n	80112e8 <_GetIndexMask_0+0x48>
 80112e6:	2002      	movs	r0, #2
 80112e8:	2301      	movs	r3, #1
 80112ea:	fa03 f000 	lsl.w	r0, r3, r0
 80112ee:	3801      	subs	r0, #1
 80112f0:	bd08      	pop	{r3, pc}

080112f2 <_Index2Color_0>:
 80112f2:	b538      	push	{r3, r4, r5, lr}
 80112f4:	4604      	mov	r4, r0
 80112f6:	f7f9 ffc7 	bl	800b288 <LCD_GetNumColors>
 80112fa:	4605      	mov	r5, r0
 80112fc:	f7f9 ffe2 	bl	800b2c4 <LCD_GetPalette>
 8011300:	42ac      	cmp	r4, r5
 8011302:	d203      	bcs.n	801130c <_Index2Color_0+0x1a>
 8011304:	b118      	cbz	r0, 801130e <_Index2Color_0+0x1c>
 8011306:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801130a:	bd38      	pop	{r3, r4, r5, pc}
 801130c:	2000      	movs	r0, #0
 801130e:	bd38      	pop	{r3, r4, r5, pc}

08011310 <_Color2Index_0>:
 8011310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011314:	4682      	mov	sl, r0
 8011316:	f7f9 ffb7 	bl	800b288 <LCD_GetNumColors>
 801131a:	4681      	mov	r9, r0
 801131c:	f7f9 ffd2 	bl	800b2c4 <LCD_GetPalette>
 8011320:	4605      	mov	r5, r0
 8011322:	b1e0      	cbz	r0, 801135e <_Color2Index_0+0x4e>
 8011324:	2300      	movs	r3, #0
 8011326:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 801132a:	4592      	cmp	sl, r2
 801132c:	d019      	beq.n	8011362 <_Color2Index_0+0x52>
 801132e:	3301      	adds	r3, #1
 8011330:	454b      	cmp	r3, r9
 8011332:	dbf8      	blt.n	8011326 <_Color2Index_0+0x16>
 8011334:	2700      	movs	r7, #0
 8011336:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 801133a:	463c      	mov	r4, r7
 801133c:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 8011340:	4650      	mov	r0, sl
 8011342:	f7fb fbad 	bl	800caa0 <GUI_CalcColorDist>
 8011346:	4626      	mov	r6, r4
 8011348:	4540      	cmp	r0, r8
 801134a:	f104 0401 	add.w	r4, r4, #1
 801134e:	bf24      	itt	cs
 8011350:	4640      	movcs	r0, r8
 8011352:	463e      	movcs	r6, r7
 8011354:	454c      	cmp	r4, r9
 8011356:	da07      	bge.n	8011368 <_Color2Index_0+0x58>
 8011358:	4680      	mov	r8, r0
 801135a:	4637      	mov	r7, r6
 801135c:	e7ee      	b.n	801133c <_Color2Index_0+0x2c>
 801135e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011362:	4618      	mov	r0, r3
 8011364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011368:	4630      	mov	r0, r6
 801136a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08011370 <_DrawDownRect>:
 8011370:	b510      	push	{r4, lr}
 8011372:	b09c      	sub	sp, #112	; 0x70
 8011374:	4604      	mov	r4, r0
 8011376:	4668      	mov	r0, sp
 8011378:	f7fb fc72 	bl	800cc60 <GUI_SaveContext_W>
 801137c:	4b09      	ldr	r3, [pc, #36]	; (80113a4 <_DrawDownRect+0x34>)
 801137e:	6818      	ldr	r0, [r3, #0]
 8011380:	f7fa fba4 	bl	800bacc <LCD_SetColor>
 8011384:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011388:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801138c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011390:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011394:	f7ff ff42 	bl	801121c <GUI_DrawRect>
 8011398:	4668      	mov	r0, sp
 801139a:	f7fb fc6b 	bl	800cc74 <GUI_RestoreContext>
 801139e:	b01c      	add	sp, #112	; 0x70
 80113a0:	bd10      	pop	{r4, pc}
 80113a2:	bf00      	nop
 80113a4:	200055d0 	.word	0x200055d0

080113a8 <_DrawUpRect>:
 80113a8:	b510      	push	{r4, lr}
 80113aa:	b09c      	sub	sp, #112	; 0x70
 80113ac:	4604      	mov	r4, r0
 80113ae:	4668      	mov	r0, sp
 80113b0:	f7fb fc56 	bl	800cc60 <GUI_SaveContext_W>
 80113b4:	4b09      	ldr	r3, [pc, #36]	; (80113dc <_DrawUpRect+0x34>)
 80113b6:	6818      	ldr	r0, [r3, #0]
 80113b8:	f7fa fb88 	bl	800bacc <LCD_SetColor>
 80113bc:	f9b4 0000 	ldrsh.w	r0, [r4]
 80113c0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80113c4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80113c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80113cc:	f7ff ff26 	bl	801121c <GUI_DrawRect>
 80113d0:	4668      	mov	r0, sp
 80113d2:	f7fb fc4f 	bl	800cc74 <GUI_RestoreContext>
 80113d6:	b01c      	add	sp, #112	; 0x70
 80113d8:	bd10      	pop	{r4, pc}
 80113da:	bf00      	nop
 80113dc:	200055d0 	.word	0x200055d0

080113e0 <_DrawDown>:
 80113e0:	b507      	push	{r0, r1, r2, lr}
 80113e2:	4668      	mov	r0, sp
 80113e4:	f7f6 f8e0 	bl	80075a8 <WM_GetClientRect>
 80113e8:	4668      	mov	r0, sp
 80113ea:	f7ff ffc1 	bl	8011370 <_DrawDownRect>
 80113ee:	b003      	add	sp, #12
 80113f0:	f85d fb04 	ldr.w	pc, [sp], #4

080113f4 <_DrawUp>:
 80113f4:	b507      	push	{r0, r1, r2, lr}
 80113f6:	4668      	mov	r0, sp
 80113f8:	f7f6 f8d6 	bl	80075a8 <WM_GetClientRect>
 80113fc:	4668      	mov	r0, sp
 80113fe:	f7ff ffd3 	bl	80113a8 <_DrawUpRect>
 8011402:	b003      	add	sp, #12
 8011404:	f85d fb04 	ldr.w	pc, [sp], #4

08011408 <LCD_GetNumLayers>:
 8011408:	b510      	push	{r4, lr}
 801140a:	2000      	movs	r0, #0
 801140c:	f7fb f962 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 8011410:	1c04      	adds	r4, r0, #0
 8011412:	f04f 0001 	mov.w	r0, #1
 8011416:	bf18      	it	ne
 8011418:	2401      	movne	r4, #1
 801141a:	f7fb f95b 	bl	800c6d4 <GUI_DEVICE__GetpDriver>
 801141e:	b100      	cbz	r0, 8011422 <LCD_GetNumLayers+0x1a>
 8011420:	3401      	adds	r4, #1
 8011422:	4620      	mov	r0, r4
 8011424:	bd10      	pop	{r4, pc}
	...

08011428 <__errno>:
 8011428:	4b01      	ldr	r3, [pc, #4]	; (8011430 <__errno+0x8>)
 801142a:	6818      	ldr	r0, [r3, #0]
 801142c:	4770      	bx	lr
 801142e:	bf00      	nop
 8011430:	20000128 	.word	0x20000128

08011434 <__libc_init_array>:
 8011434:	b570      	push	{r4, r5, r6, lr}
 8011436:	4d0d      	ldr	r5, [pc, #52]	; (801146c <__libc_init_array+0x38>)
 8011438:	4c0d      	ldr	r4, [pc, #52]	; (8011470 <__libc_init_array+0x3c>)
 801143a:	1b64      	subs	r4, r4, r5
 801143c:	10a4      	asrs	r4, r4, #2
 801143e:	2600      	movs	r6, #0
 8011440:	42a6      	cmp	r6, r4
 8011442:	d109      	bne.n	8011458 <__libc_init_array+0x24>
 8011444:	4d0b      	ldr	r5, [pc, #44]	; (8011474 <__libc_init_array+0x40>)
 8011446:	4c0c      	ldr	r4, [pc, #48]	; (8011478 <__libc_init_array+0x44>)
 8011448:	f001 fa7e 	bl	8012948 <_init>
 801144c:	1b64      	subs	r4, r4, r5
 801144e:	10a4      	asrs	r4, r4, #2
 8011450:	2600      	movs	r6, #0
 8011452:	42a6      	cmp	r6, r4
 8011454:	d105      	bne.n	8011462 <__libc_init_array+0x2e>
 8011456:	bd70      	pop	{r4, r5, r6, pc}
 8011458:	f855 3b04 	ldr.w	r3, [r5], #4
 801145c:	4798      	blx	r3
 801145e:	3601      	adds	r6, #1
 8011460:	e7ee      	b.n	8011440 <__libc_init_array+0xc>
 8011462:	f855 3b04 	ldr.w	r3, [r5], #4
 8011466:	4798      	blx	r3
 8011468:	3601      	adds	r6, #1
 801146a:	e7f2      	b.n	8011452 <__libc_init_array+0x1e>
 801146c:	080149d4 	.word	0x080149d4
 8011470:	080149d4 	.word	0x080149d4
 8011474:	080149d4 	.word	0x080149d4
 8011478:	080149d8 	.word	0x080149d8

0801147c <memcpy>:
 801147c:	440a      	add	r2, r1
 801147e:	4291      	cmp	r1, r2
 8011480:	f100 33ff 	add.w	r3, r0, #4294967295
 8011484:	d100      	bne.n	8011488 <memcpy+0xc>
 8011486:	4770      	bx	lr
 8011488:	b510      	push	{r4, lr}
 801148a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801148e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011492:	4291      	cmp	r1, r2
 8011494:	d1f9      	bne.n	801148a <memcpy+0xe>
 8011496:	bd10      	pop	{r4, pc}

08011498 <memmove>:
 8011498:	4288      	cmp	r0, r1
 801149a:	b510      	push	{r4, lr}
 801149c:	eb01 0402 	add.w	r4, r1, r2
 80114a0:	d902      	bls.n	80114a8 <memmove+0x10>
 80114a2:	4284      	cmp	r4, r0
 80114a4:	4623      	mov	r3, r4
 80114a6:	d807      	bhi.n	80114b8 <memmove+0x20>
 80114a8:	1e43      	subs	r3, r0, #1
 80114aa:	42a1      	cmp	r1, r4
 80114ac:	d008      	beq.n	80114c0 <memmove+0x28>
 80114ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80114b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80114b6:	e7f8      	b.n	80114aa <memmove+0x12>
 80114b8:	4402      	add	r2, r0
 80114ba:	4601      	mov	r1, r0
 80114bc:	428a      	cmp	r2, r1
 80114be:	d100      	bne.n	80114c2 <memmove+0x2a>
 80114c0:	bd10      	pop	{r4, pc}
 80114c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80114c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80114ca:	e7f7      	b.n	80114bc <memmove+0x24>

080114cc <memset>:
 80114cc:	4402      	add	r2, r0
 80114ce:	4603      	mov	r3, r0
 80114d0:	4293      	cmp	r3, r2
 80114d2:	d100      	bne.n	80114d6 <memset+0xa>
 80114d4:	4770      	bx	lr
 80114d6:	f803 1b01 	strb.w	r1, [r3], #1
 80114da:	e7f9      	b.n	80114d0 <memset+0x4>

080114dc <siprintf>:
 80114dc:	b40e      	push	{r1, r2, r3}
 80114de:	b500      	push	{lr}
 80114e0:	b09c      	sub	sp, #112	; 0x70
 80114e2:	ab1d      	add	r3, sp, #116	; 0x74
 80114e4:	9002      	str	r0, [sp, #8]
 80114e6:	9006      	str	r0, [sp, #24]
 80114e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80114ec:	4809      	ldr	r0, [pc, #36]	; (8011514 <siprintf+0x38>)
 80114ee:	9107      	str	r1, [sp, #28]
 80114f0:	9104      	str	r1, [sp, #16]
 80114f2:	4909      	ldr	r1, [pc, #36]	; (8011518 <siprintf+0x3c>)
 80114f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80114f8:	9105      	str	r1, [sp, #20]
 80114fa:	6800      	ldr	r0, [r0, #0]
 80114fc:	9301      	str	r3, [sp, #4]
 80114fe:	a902      	add	r1, sp, #8
 8011500:	f000 fa08 	bl	8011914 <_svfiprintf_r>
 8011504:	9b02      	ldr	r3, [sp, #8]
 8011506:	2200      	movs	r2, #0
 8011508:	701a      	strb	r2, [r3, #0]
 801150a:	b01c      	add	sp, #112	; 0x70
 801150c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011510:	b003      	add	sp, #12
 8011512:	4770      	bx	lr
 8011514:	20000128 	.word	0x20000128
 8011518:	ffff0208 	.word	0xffff0208

0801151c <strchr>:
 801151c:	b2c9      	uxtb	r1, r1
 801151e:	4603      	mov	r3, r0
 8011520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011524:	b11a      	cbz	r2, 801152e <strchr+0x12>
 8011526:	428a      	cmp	r2, r1
 8011528:	d1f9      	bne.n	801151e <strchr+0x2>
 801152a:	4618      	mov	r0, r3
 801152c:	4770      	bx	lr
 801152e:	2900      	cmp	r1, #0
 8011530:	bf18      	it	ne
 8011532:	2300      	movne	r3, #0
 8011534:	e7f9      	b.n	801152a <strchr+0xe>

08011536 <strcpy>:
 8011536:	4603      	mov	r3, r0
 8011538:	f811 2b01 	ldrb.w	r2, [r1], #1
 801153c:	f803 2b01 	strb.w	r2, [r3], #1
 8011540:	2a00      	cmp	r2, #0
 8011542:	d1f9      	bne.n	8011538 <strcpy+0x2>
 8011544:	4770      	bx	lr

08011546 <strstr>:
 8011546:	780a      	ldrb	r2, [r1, #0]
 8011548:	b570      	push	{r4, r5, r6, lr}
 801154a:	b96a      	cbnz	r2, 8011568 <strstr+0x22>
 801154c:	bd70      	pop	{r4, r5, r6, pc}
 801154e:	429a      	cmp	r2, r3
 8011550:	d109      	bne.n	8011566 <strstr+0x20>
 8011552:	460c      	mov	r4, r1
 8011554:	4605      	mov	r5, r0
 8011556:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801155a:	2b00      	cmp	r3, #0
 801155c:	d0f6      	beq.n	801154c <strstr+0x6>
 801155e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011562:	429e      	cmp	r6, r3
 8011564:	d0f7      	beq.n	8011556 <strstr+0x10>
 8011566:	3001      	adds	r0, #1
 8011568:	7803      	ldrb	r3, [r0, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d1ef      	bne.n	801154e <strstr+0x8>
 801156e:	4618      	mov	r0, r3
 8011570:	e7ec      	b.n	801154c <strstr+0x6>
	...

08011574 <strtok>:
 8011574:	4b16      	ldr	r3, [pc, #88]	; (80115d0 <strtok+0x5c>)
 8011576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011578:	681e      	ldr	r6, [r3, #0]
 801157a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801157c:	4605      	mov	r5, r0
 801157e:	b9fc      	cbnz	r4, 80115c0 <strtok+0x4c>
 8011580:	2050      	movs	r0, #80	; 0x50
 8011582:	9101      	str	r1, [sp, #4]
 8011584:	f000 f882 	bl	801168c <malloc>
 8011588:	9901      	ldr	r1, [sp, #4]
 801158a:	65b0      	str	r0, [r6, #88]	; 0x58
 801158c:	4602      	mov	r2, r0
 801158e:	b920      	cbnz	r0, 801159a <strtok+0x26>
 8011590:	4b10      	ldr	r3, [pc, #64]	; (80115d4 <strtok+0x60>)
 8011592:	4811      	ldr	r0, [pc, #68]	; (80115d8 <strtok+0x64>)
 8011594:	2157      	movs	r1, #87	; 0x57
 8011596:	f000 f849 	bl	801162c <__assert_func>
 801159a:	e9c0 4400 	strd	r4, r4, [r0]
 801159e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80115a2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80115a6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80115aa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80115ae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80115b2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80115b6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80115ba:	6184      	str	r4, [r0, #24]
 80115bc:	7704      	strb	r4, [r0, #28]
 80115be:	6244      	str	r4, [r0, #36]	; 0x24
 80115c0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80115c2:	2301      	movs	r3, #1
 80115c4:	4628      	mov	r0, r5
 80115c6:	b002      	add	sp, #8
 80115c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115cc:	f000 b806 	b.w	80115dc <__strtok_r>
 80115d0:	20000128 	.word	0x20000128
 80115d4:	08014888 	.word	0x08014888
 80115d8:	0801489f 	.word	0x0801489f

080115dc <__strtok_r>:
 80115dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115de:	b908      	cbnz	r0, 80115e4 <__strtok_r+0x8>
 80115e0:	6810      	ldr	r0, [r2, #0]
 80115e2:	b188      	cbz	r0, 8011608 <__strtok_r+0x2c>
 80115e4:	4604      	mov	r4, r0
 80115e6:	4620      	mov	r0, r4
 80115e8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80115ec:	460f      	mov	r7, r1
 80115ee:	f817 6b01 	ldrb.w	r6, [r7], #1
 80115f2:	b91e      	cbnz	r6, 80115fc <__strtok_r+0x20>
 80115f4:	b965      	cbnz	r5, 8011610 <__strtok_r+0x34>
 80115f6:	6015      	str	r5, [r2, #0]
 80115f8:	4628      	mov	r0, r5
 80115fa:	e005      	b.n	8011608 <__strtok_r+0x2c>
 80115fc:	42b5      	cmp	r5, r6
 80115fe:	d1f6      	bne.n	80115ee <__strtok_r+0x12>
 8011600:	2b00      	cmp	r3, #0
 8011602:	d1f0      	bne.n	80115e6 <__strtok_r+0xa>
 8011604:	6014      	str	r4, [r2, #0]
 8011606:	7003      	strb	r3, [r0, #0]
 8011608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801160a:	461c      	mov	r4, r3
 801160c:	e00c      	b.n	8011628 <__strtok_r+0x4c>
 801160e:	b915      	cbnz	r5, 8011616 <__strtok_r+0x3a>
 8011610:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011614:	460e      	mov	r6, r1
 8011616:	f816 5b01 	ldrb.w	r5, [r6], #1
 801161a:	42ab      	cmp	r3, r5
 801161c:	d1f7      	bne.n	801160e <__strtok_r+0x32>
 801161e:	2b00      	cmp	r3, #0
 8011620:	d0f3      	beq.n	801160a <__strtok_r+0x2e>
 8011622:	2300      	movs	r3, #0
 8011624:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011628:	6014      	str	r4, [r2, #0]
 801162a:	e7ed      	b.n	8011608 <__strtok_r+0x2c>

0801162c <__assert_func>:
 801162c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801162e:	4614      	mov	r4, r2
 8011630:	461a      	mov	r2, r3
 8011632:	4b09      	ldr	r3, [pc, #36]	; (8011658 <__assert_func+0x2c>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	4605      	mov	r5, r0
 8011638:	68d8      	ldr	r0, [r3, #12]
 801163a:	b14c      	cbz	r4, 8011650 <__assert_func+0x24>
 801163c:	4b07      	ldr	r3, [pc, #28]	; (801165c <__assert_func+0x30>)
 801163e:	9100      	str	r1, [sp, #0]
 8011640:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011644:	4906      	ldr	r1, [pc, #24]	; (8011660 <__assert_func+0x34>)
 8011646:	462b      	mov	r3, r5
 8011648:	f000 f80e 	bl	8011668 <fiprintf>
 801164c:	f000 fe20 	bl	8012290 <abort>
 8011650:	4b04      	ldr	r3, [pc, #16]	; (8011664 <__assert_func+0x38>)
 8011652:	461c      	mov	r4, r3
 8011654:	e7f3      	b.n	801163e <__assert_func+0x12>
 8011656:	bf00      	nop
 8011658:	20000128 	.word	0x20000128
 801165c:	080148fc 	.word	0x080148fc
 8011660:	08014909 	.word	0x08014909
 8011664:	08014937 	.word	0x08014937

08011668 <fiprintf>:
 8011668:	b40e      	push	{r1, r2, r3}
 801166a:	b503      	push	{r0, r1, lr}
 801166c:	4601      	mov	r1, r0
 801166e:	ab03      	add	r3, sp, #12
 8011670:	4805      	ldr	r0, [pc, #20]	; (8011688 <fiprintf+0x20>)
 8011672:	f853 2b04 	ldr.w	r2, [r3], #4
 8011676:	6800      	ldr	r0, [r0, #0]
 8011678:	9301      	str	r3, [sp, #4]
 801167a:	f000 fa75 	bl	8011b68 <_vfiprintf_r>
 801167e:	b002      	add	sp, #8
 8011680:	f85d eb04 	ldr.w	lr, [sp], #4
 8011684:	b003      	add	sp, #12
 8011686:	4770      	bx	lr
 8011688:	20000128 	.word	0x20000128

0801168c <malloc>:
 801168c:	4b02      	ldr	r3, [pc, #8]	; (8011698 <malloc+0xc>)
 801168e:	4601      	mov	r1, r0
 8011690:	6818      	ldr	r0, [r3, #0]
 8011692:	f000 b86f 	b.w	8011774 <_malloc_r>
 8011696:	bf00      	nop
 8011698:	20000128 	.word	0x20000128

0801169c <_free_r>:
 801169c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801169e:	2900      	cmp	r1, #0
 80116a0:	d044      	beq.n	801172c <_free_r+0x90>
 80116a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116a6:	9001      	str	r0, [sp, #4]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	f1a1 0404 	sub.w	r4, r1, #4
 80116ae:	bfb8      	it	lt
 80116b0:	18e4      	addlt	r4, r4, r3
 80116b2:	f001 f815 	bl	80126e0 <__malloc_lock>
 80116b6:	4a1e      	ldr	r2, [pc, #120]	; (8011730 <_free_r+0x94>)
 80116b8:	9801      	ldr	r0, [sp, #4]
 80116ba:	6813      	ldr	r3, [r2, #0]
 80116bc:	b933      	cbnz	r3, 80116cc <_free_r+0x30>
 80116be:	6063      	str	r3, [r4, #4]
 80116c0:	6014      	str	r4, [r2, #0]
 80116c2:	b003      	add	sp, #12
 80116c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80116c8:	f001 b810 	b.w	80126ec <__malloc_unlock>
 80116cc:	42a3      	cmp	r3, r4
 80116ce:	d908      	bls.n	80116e2 <_free_r+0x46>
 80116d0:	6825      	ldr	r5, [r4, #0]
 80116d2:	1961      	adds	r1, r4, r5
 80116d4:	428b      	cmp	r3, r1
 80116d6:	bf01      	itttt	eq
 80116d8:	6819      	ldreq	r1, [r3, #0]
 80116da:	685b      	ldreq	r3, [r3, #4]
 80116dc:	1949      	addeq	r1, r1, r5
 80116de:	6021      	streq	r1, [r4, #0]
 80116e0:	e7ed      	b.n	80116be <_free_r+0x22>
 80116e2:	461a      	mov	r2, r3
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	b10b      	cbz	r3, 80116ec <_free_r+0x50>
 80116e8:	42a3      	cmp	r3, r4
 80116ea:	d9fa      	bls.n	80116e2 <_free_r+0x46>
 80116ec:	6811      	ldr	r1, [r2, #0]
 80116ee:	1855      	adds	r5, r2, r1
 80116f0:	42a5      	cmp	r5, r4
 80116f2:	d10b      	bne.n	801170c <_free_r+0x70>
 80116f4:	6824      	ldr	r4, [r4, #0]
 80116f6:	4421      	add	r1, r4
 80116f8:	1854      	adds	r4, r2, r1
 80116fa:	42a3      	cmp	r3, r4
 80116fc:	6011      	str	r1, [r2, #0]
 80116fe:	d1e0      	bne.n	80116c2 <_free_r+0x26>
 8011700:	681c      	ldr	r4, [r3, #0]
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	6053      	str	r3, [r2, #4]
 8011706:	4421      	add	r1, r4
 8011708:	6011      	str	r1, [r2, #0]
 801170a:	e7da      	b.n	80116c2 <_free_r+0x26>
 801170c:	d902      	bls.n	8011714 <_free_r+0x78>
 801170e:	230c      	movs	r3, #12
 8011710:	6003      	str	r3, [r0, #0]
 8011712:	e7d6      	b.n	80116c2 <_free_r+0x26>
 8011714:	6825      	ldr	r5, [r4, #0]
 8011716:	1961      	adds	r1, r4, r5
 8011718:	428b      	cmp	r3, r1
 801171a:	bf04      	itt	eq
 801171c:	6819      	ldreq	r1, [r3, #0]
 801171e:	685b      	ldreq	r3, [r3, #4]
 8011720:	6063      	str	r3, [r4, #4]
 8011722:	bf04      	itt	eq
 8011724:	1949      	addeq	r1, r1, r5
 8011726:	6021      	streq	r1, [r4, #0]
 8011728:	6054      	str	r4, [r2, #4]
 801172a:	e7ca      	b.n	80116c2 <_free_r+0x26>
 801172c:	b003      	add	sp, #12
 801172e:	bd30      	pop	{r4, r5, pc}
 8011730:	200055d4 	.word	0x200055d4

08011734 <sbrk_aligned>:
 8011734:	b570      	push	{r4, r5, r6, lr}
 8011736:	4e0e      	ldr	r6, [pc, #56]	; (8011770 <sbrk_aligned+0x3c>)
 8011738:	460c      	mov	r4, r1
 801173a:	6831      	ldr	r1, [r6, #0]
 801173c:	4605      	mov	r5, r0
 801173e:	b911      	cbnz	r1, 8011746 <sbrk_aligned+0x12>
 8011740:	f000 fcd6 	bl	80120f0 <_sbrk_r>
 8011744:	6030      	str	r0, [r6, #0]
 8011746:	4621      	mov	r1, r4
 8011748:	4628      	mov	r0, r5
 801174a:	f000 fcd1 	bl	80120f0 <_sbrk_r>
 801174e:	1c43      	adds	r3, r0, #1
 8011750:	d00a      	beq.n	8011768 <sbrk_aligned+0x34>
 8011752:	1cc4      	adds	r4, r0, #3
 8011754:	f024 0403 	bic.w	r4, r4, #3
 8011758:	42a0      	cmp	r0, r4
 801175a:	d007      	beq.n	801176c <sbrk_aligned+0x38>
 801175c:	1a21      	subs	r1, r4, r0
 801175e:	4628      	mov	r0, r5
 8011760:	f000 fcc6 	bl	80120f0 <_sbrk_r>
 8011764:	3001      	adds	r0, #1
 8011766:	d101      	bne.n	801176c <sbrk_aligned+0x38>
 8011768:	f04f 34ff 	mov.w	r4, #4294967295
 801176c:	4620      	mov	r0, r4
 801176e:	bd70      	pop	{r4, r5, r6, pc}
 8011770:	200055d8 	.word	0x200055d8

08011774 <_malloc_r>:
 8011774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011778:	1ccd      	adds	r5, r1, #3
 801177a:	f025 0503 	bic.w	r5, r5, #3
 801177e:	3508      	adds	r5, #8
 8011780:	2d0c      	cmp	r5, #12
 8011782:	bf38      	it	cc
 8011784:	250c      	movcc	r5, #12
 8011786:	2d00      	cmp	r5, #0
 8011788:	4607      	mov	r7, r0
 801178a:	db01      	blt.n	8011790 <_malloc_r+0x1c>
 801178c:	42a9      	cmp	r1, r5
 801178e:	d905      	bls.n	801179c <_malloc_r+0x28>
 8011790:	230c      	movs	r3, #12
 8011792:	603b      	str	r3, [r7, #0]
 8011794:	2600      	movs	r6, #0
 8011796:	4630      	mov	r0, r6
 8011798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801179c:	4e2e      	ldr	r6, [pc, #184]	; (8011858 <_malloc_r+0xe4>)
 801179e:	f000 ff9f 	bl	80126e0 <__malloc_lock>
 80117a2:	6833      	ldr	r3, [r6, #0]
 80117a4:	461c      	mov	r4, r3
 80117a6:	bb34      	cbnz	r4, 80117f6 <_malloc_r+0x82>
 80117a8:	4629      	mov	r1, r5
 80117aa:	4638      	mov	r0, r7
 80117ac:	f7ff ffc2 	bl	8011734 <sbrk_aligned>
 80117b0:	1c43      	adds	r3, r0, #1
 80117b2:	4604      	mov	r4, r0
 80117b4:	d14d      	bne.n	8011852 <_malloc_r+0xde>
 80117b6:	6834      	ldr	r4, [r6, #0]
 80117b8:	4626      	mov	r6, r4
 80117ba:	2e00      	cmp	r6, #0
 80117bc:	d140      	bne.n	8011840 <_malloc_r+0xcc>
 80117be:	6823      	ldr	r3, [r4, #0]
 80117c0:	4631      	mov	r1, r6
 80117c2:	4638      	mov	r0, r7
 80117c4:	eb04 0803 	add.w	r8, r4, r3
 80117c8:	f000 fc92 	bl	80120f0 <_sbrk_r>
 80117cc:	4580      	cmp	r8, r0
 80117ce:	d13a      	bne.n	8011846 <_malloc_r+0xd2>
 80117d0:	6821      	ldr	r1, [r4, #0]
 80117d2:	3503      	adds	r5, #3
 80117d4:	1a6d      	subs	r5, r5, r1
 80117d6:	f025 0503 	bic.w	r5, r5, #3
 80117da:	3508      	adds	r5, #8
 80117dc:	2d0c      	cmp	r5, #12
 80117de:	bf38      	it	cc
 80117e0:	250c      	movcc	r5, #12
 80117e2:	4629      	mov	r1, r5
 80117e4:	4638      	mov	r0, r7
 80117e6:	f7ff ffa5 	bl	8011734 <sbrk_aligned>
 80117ea:	3001      	adds	r0, #1
 80117ec:	d02b      	beq.n	8011846 <_malloc_r+0xd2>
 80117ee:	6823      	ldr	r3, [r4, #0]
 80117f0:	442b      	add	r3, r5
 80117f2:	6023      	str	r3, [r4, #0]
 80117f4:	e00e      	b.n	8011814 <_malloc_r+0xa0>
 80117f6:	6822      	ldr	r2, [r4, #0]
 80117f8:	1b52      	subs	r2, r2, r5
 80117fa:	d41e      	bmi.n	801183a <_malloc_r+0xc6>
 80117fc:	2a0b      	cmp	r2, #11
 80117fe:	d916      	bls.n	801182e <_malloc_r+0xba>
 8011800:	1961      	adds	r1, r4, r5
 8011802:	42a3      	cmp	r3, r4
 8011804:	6025      	str	r5, [r4, #0]
 8011806:	bf18      	it	ne
 8011808:	6059      	strne	r1, [r3, #4]
 801180a:	6863      	ldr	r3, [r4, #4]
 801180c:	bf08      	it	eq
 801180e:	6031      	streq	r1, [r6, #0]
 8011810:	5162      	str	r2, [r4, r5]
 8011812:	604b      	str	r3, [r1, #4]
 8011814:	4638      	mov	r0, r7
 8011816:	f104 060b 	add.w	r6, r4, #11
 801181a:	f000 ff67 	bl	80126ec <__malloc_unlock>
 801181e:	f026 0607 	bic.w	r6, r6, #7
 8011822:	1d23      	adds	r3, r4, #4
 8011824:	1af2      	subs	r2, r6, r3
 8011826:	d0b6      	beq.n	8011796 <_malloc_r+0x22>
 8011828:	1b9b      	subs	r3, r3, r6
 801182a:	50a3      	str	r3, [r4, r2]
 801182c:	e7b3      	b.n	8011796 <_malloc_r+0x22>
 801182e:	6862      	ldr	r2, [r4, #4]
 8011830:	42a3      	cmp	r3, r4
 8011832:	bf0c      	ite	eq
 8011834:	6032      	streq	r2, [r6, #0]
 8011836:	605a      	strne	r2, [r3, #4]
 8011838:	e7ec      	b.n	8011814 <_malloc_r+0xa0>
 801183a:	4623      	mov	r3, r4
 801183c:	6864      	ldr	r4, [r4, #4]
 801183e:	e7b2      	b.n	80117a6 <_malloc_r+0x32>
 8011840:	4634      	mov	r4, r6
 8011842:	6876      	ldr	r6, [r6, #4]
 8011844:	e7b9      	b.n	80117ba <_malloc_r+0x46>
 8011846:	230c      	movs	r3, #12
 8011848:	603b      	str	r3, [r7, #0]
 801184a:	4638      	mov	r0, r7
 801184c:	f000 ff4e 	bl	80126ec <__malloc_unlock>
 8011850:	e7a1      	b.n	8011796 <_malloc_r+0x22>
 8011852:	6025      	str	r5, [r4, #0]
 8011854:	e7de      	b.n	8011814 <_malloc_r+0xa0>
 8011856:	bf00      	nop
 8011858:	200055d4 	.word	0x200055d4

0801185c <__ssputs_r>:
 801185c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011860:	688e      	ldr	r6, [r1, #8]
 8011862:	429e      	cmp	r6, r3
 8011864:	4682      	mov	sl, r0
 8011866:	460c      	mov	r4, r1
 8011868:	4690      	mov	r8, r2
 801186a:	461f      	mov	r7, r3
 801186c:	d838      	bhi.n	80118e0 <__ssputs_r+0x84>
 801186e:	898a      	ldrh	r2, [r1, #12]
 8011870:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011874:	d032      	beq.n	80118dc <__ssputs_r+0x80>
 8011876:	6825      	ldr	r5, [r4, #0]
 8011878:	6909      	ldr	r1, [r1, #16]
 801187a:	eba5 0901 	sub.w	r9, r5, r1
 801187e:	6965      	ldr	r5, [r4, #20]
 8011880:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011884:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011888:	3301      	adds	r3, #1
 801188a:	444b      	add	r3, r9
 801188c:	106d      	asrs	r5, r5, #1
 801188e:	429d      	cmp	r5, r3
 8011890:	bf38      	it	cc
 8011892:	461d      	movcc	r5, r3
 8011894:	0553      	lsls	r3, r2, #21
 8011896:	d531      	bpl.n	80118fc <__ssputs_r+0xa0>
 8011898:	4629      	mov	r1, r5
 801189a:	f7ff ff6b 	bl	8011774 <_malloc_r>
 801189e:	4606      	mov	r6, r0
 80118a0:	b950      	cbnz	r0, 80118b8 <__ssputs_r+0x5c>
 80118a2:	230c      	movs	r3, #12
 80118a4:	f8ca 3000 	str.w	r3, [sl]
 80118a8:	89a3      	ldrh	r3, [r4, #12]
 80118aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118ae:	81a3      	strh	r3, [r4, #12]
 80118b0:	f04f 30ff 	mov.w	r0, #4294967295
 80118b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118b8:	6921      	ldr	r1, [r4, #16]
 80118ba:	464a      	mov	r2, r9
 80118bc:	f7ff fdde 	bl	801147c <memcpy>
 80118c0:	89a3      	ldrh	r3, [r4, #12]
 80118c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80118c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118ca:	81a3      	strh	r3, [r4, #12]
 80118cc:	6126      	str	r6, [r4, #16]
 80118ce:	6165      	str	r5, [r4, #20]
 80118d0:	444e      	add	r6, r9
 80118d2:	eba5 0509 	sub.w	r5, r5, r9
 80118d6:	6026      	str	r6, [r4, #0]
 80118d8:	60a5      	str	r5, [r4, #8]
 80118da:	463e      	mov	r6, r7
 80118dc:	42be      	cmp	r6, r7
 80118de:	d900      	bls.n	80118e2 <__ssputs_r+0x86>
 80118e0:	463e      	mov	r6, r7
 80118e2:	6820      	ldr	r0, [r4, #0]
 80118e4:	4632      	mov	r2, r6
 80118e6:	4641      	mov	r1, r8
 80118e8:	f7ff fdd6 	bl	8011498 <memmove>
 80118ec:	68a3      	ldr	r3, [r4, #8]
 80118ee:	1b9b      	subs	r3, r3, r6
 80118f0:	60a3      	str	r3, [r4, #8]
 80118f2:	6823      	ldr	r3, [r4, #0]
 80118f4:	4433      	add	r3, r6
 80118f6:	6023      	str	r3, [r4, #0]
 80118f8:	2000      	movs	r0, #0
 80118fa:	e7db      	b.n	80118b4 <__ssputs_r+0x58>
 80118fc:	462a      	mov	r2, r5
 80118fe:	f000 fefb 	bl	80126f8 <_realloc_r>
 8011902:	4606      	mov	r6, r0
 8011904:	2800      	cmp	r0, #0
 8011906:	d1e1      	bne.n	80118cc <__ssputs_r+0x70>
 8011908:	6921      	ldr	r1, [r4, #16]
 801190a:	4650      	mov	r0, sl
 801190c:	f7ff fec6 	bl	801169c <_free_r>
 8011910:	e7c7      	b.n	80118a2 <__ssputs_r+0x46>
	...

08011914 <_svfiprintf_r>:
 8011914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011918:	4698      	mov	r8, r3
 801191a:	898b      	ldrh	r3, [r1, #12]
 801191c:	061b      	lsls	r3, r3, #24
 801191e:	b09d      	sub	sp, #116	; 0x74
 8011920:	4607      	mov	r7, r0
 8011922:	460d      	mov	r5, r1
 8011924:	4614      	mov	r4, r2
 8011926:	d50e      	bpl.n	8011946 <_svfiprintf_r+0x32>
 8011928:	690b      	ldr	r3, [r1, #16]
 801192a:	b963      	cbnz	r3, 8011946 <_svfiprintf_r+0x32>
 801192c:	2140      	movs	r1, #64	; 0x40
 801192e:	f7ff ff21 	bl	8011774 <_malloc_r>
 8011932:	6028      	str	r0, [r5, #0]
 8011934:	6128      	str	r0, [r5, #16]
 8011936:	b920      	cbnz	r0, 8011942 <_svfiprintf_r+0x2e>
 8011938:	230c      	movs	r3, #12
 801193a:	603b      	str	r3, [r7, #0]
 801193c:	f04f 30ff 	mov.w	r0, #4294967295
 8011940:	e0d1      	b.n	8011ae6 <_svfiprintf_r+0x1d2>
 8011942:	2340      	movs	r3, #64	; 0x40
 8011944:	616b      	str	r3, [r5, #20]
 8011946:	2300      	movs	r3, #0
 8011948:	9309      	str	r3, [sp, #36]	; 0x24
 801194a:	2320      	movs	r3, #32
 801194c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011950:	f8cd 800c 	str.w	r8, [sp, #12]
 8011954:	2330      	movs	r3, #48	; 0x30
 8011956:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011b00 <_svfiprintf_r+0x1ec>
 801195a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801195e:	f04f 0901 	mov.w	r9, #1
 8011962:	4623      	mov	r3, r4
 8011964:	469a      	mov	sl, r3
 8011966:	f813 2b01 	ldrb.w	r2, [r3], #1
 801196a:	b10a      	cbz	r2, 8011970 <_svfiprintf_r+0x5c>
 801196c:	2a25      	cmp	r2, #37	; 0x25
 801196e:	d1f9      	bne.n	8011964 <_svfiprintf_r+0x50>
 8011970:	ebba 0b04 	subs.w	fp, sl, r4
 8011974:	d00b      	beq.n	801198e <_svfiprintf_r+0x7a>
 8011976:	465b      	mov	r3, fp
 8011978:	4622      	mov	r2, r4
 801197a:	4629      	mov	r1, r5
 801197c:	4638      	mov	r0, r7
 801197e:	f7ff ff6d 	bl	801185c <__ssputs_r>
 8011982:	3001      	adds	r0, #1
 8011984:	f000 80aa 	beq.w	8011adc <_svfiprintf_r+0x1c8>
 8011988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801198a:	445a      	add	r2, fp
 801198c:	9209      	str	r2, [sp, #36]	; 0x24
 801198e:	f89a 3000 	ldrb.w	r3, [sl]
 8011992:	2b00      	cmp	r3, #0
 8011994:	f000 80a2 	beq.w	8011adc <_svfiprintf_r+0x1c8>
 8011998:	2300      	movs	r3, #0
 801199a:	f04f 32ff 	mov.w	r2, #4294967295
 801199e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119a2:	f10a 0a01 	add.w	sl, sl, #1
 80119a6:	9304      	str	r3, [sp, #16]
 80119a8:	9307      	str	r3, [sp, #28]
 80119aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80119ae:	931a      	str	r3, [sp, #104]	; 0x68
 80119b0:	4654      	mov	r4, sl
 80119b2:	2205      	movs	r2, #5
 80119b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119b8:	4851      	ldr	r0, [pc, #324]	; (8011b00 <_svfiprintf_r+0x1ec>)
 80119ba:	f7ee fc11 	bl	80001e0 <memchr>
 80119be:	9a04      	ldr	r2, [sp, #16]
 80119c0:	b9d8      	cbnz	r0, 80119fa <_svfiprintf_r+0xe6>
 80119c2:	06d0      	lsls	r0, r2, #27
 80119c4:	bf44      	itt	mi
 80119c6:	2320      	movmi	r3, #32
 80119c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119cc:	0711      	lsls	r1, r2, #28
 80119ce:	bf44      	itt	mi
 80119d0:	232b      	movmi	r3, #43	; 0x2b
 80119d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119d6:	f89a 3000 	ldrb.w	r3, [sl]
 80119da:	2b2a      	cmp	r3, #42	; 0x2a
 80119dc:	d015      	beq.n	8011a0a <_svfiprintf_r+0xf6>
 80119de:	9a07      	ldr	r2, [sp, #28]
 80119e0:	4654      	mov	r4, sl
 80119e2:	2000      	movs	r0, #0
 80119e4:	f04f 0c0a 	mov.w	ip, #10
 80119e8:	4621      	mov	r1, r4
 80119ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80119ee:	3b30      	subs	r3, #48	; 0x30
 80119f0:	2b09      	cmp	r3, #9
 80119f2:	d94e      	bls.n	8011a92 <_svfiprintf_r+0x17e>
 80119f4:	b1b0      	cbz	r0, 8011a24 <_svfiprintf_r+0x110>
 80119f6:	9207      	str	r2, [sp, #28]
 80119f8:	e014      	b.n	8011a24 <_svfiprintf_r+0x110>
 80119fa:	eba0 0308 	sub.w	r3, r0, r8
 80119fe:	fa09 f303 	lsl.w	r3, r9, r3
 8011a02:	4313      	orrs	r3, r2
 8011a04:	9304      	str	r3, [sp, #16]
 8011a06:	46a2      	mov	sl, r4
 8011a08:	e7d2      	b.n	80119b0 <_svfiprintf_r+0x9c>
 8011a0a:	9b03      	ldr	r3, [sp, #12]
 8011a0c:	1d19      	adds	r1, r3, #4
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	9103      	str	r1, [sp, #12]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	bfbb      	ittet	lt
 8011a16:	425b      	neglt	r3, r3
 8011a18:	f042 0202 	orrlt.w	r2, r2, #2
 8011a1c:	9307      	strge	r3, [sp, #28]
 8011a1e:	9307      	strlt	r3, [sp, #28]
 8011a20:	bfb8      	it	lt
 8011a22:	9204      	strlt	r2, [sp, #16]
 8011a24:	7823      	ldrb	r3, [r4, #0]
 8011a26:	2b2e      	cmp	r3, #46	; 0x2e
 8011a28:	d10c      	bne.n	8011a44 <_svfiprintf_r+0x130>
 8011a2a:	7863      	ldrb	r3, [r4, #1]
 8011a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8011a2e:	d135      	bne.n	8011a9c <_svfiprintf_r+0x188>
 8011a30:	9b03      	ldr	r3, [sp, #12]
 8011a32:	1d1a      	adds	r2, r3, #4
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	9203      	str	r2, [sp, #12]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	bfb8      	it	lt
 8011a3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011a40:	3402      	adds	r4, #2
 8011a42:	9305      	str	r3, [sp, #20]
 8011a44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011b10 <_svfiprintf_r+0x1fc>
 8011a48:	7821      	ldrb	r1, [r4, #0]
 8011a4a:	2203      	movs	r2, #3
 8011a4c:	4650      	mov	r0, sl
 8011a4e:	f7ee fbc7 	bl	80001e0 <memchr>
 8011a52:	b140      	cbz	r0, 8011a66 <_svfiprintf_r+0x152>
 8011a54:	2340      	movs	r3, #64	; 0x40
 8011a56:	eba0 000a 	sub.w	r0, r0, sl
 8011a5a:	fa03 f000 	lsl.w	r0, r3, r0
 8011a5e:	9b04      	ldr	r3, [sp, #16]
 8011a60:	4303      	orrs	r3, r0
 8011a62:	3401      	adds	r4, #1
 8011a64:	9304      	str	r3, [sp, #16]
 8011a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a6a:	4826      	ldr	r0, [pc, #152]	; (8011b04 <_svfiprintf_r+0x1f0>)
 8011a6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a70:	2206      	movs	r2, #6
 8011a72:	f7ee fbb5 	bl	80001e0 <memchr>
 8011a76:	2800      	cmp	r0, #0
 8011a78:	d038      	beq.n	8011aec <_svfiprintf_r+0x1d8>
 8011a7a:	4b23      	ldr	r3, [pc, #140]	; (8011b08 <_svfiprintf_r+0x1f4>)
 8011a7c:	bb1b      	cbnz	r3, 8011ac6 <_svfiprintf_r+0x1b2>
 8011a7e:	9b03      	ldr	r3, [sp, #12]
 8011a80:	3307      	adds	r3, #7
 8011a82:	f023 0307 	bic.w	r3, r3, #7
 8011a86:	3308      	adds	r3, #8
 8011a88:	9303      	str	r3, [sp, #12]
 8011a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a8c:	4433      	add	r3, r6
 8011a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8011a90:	e767      	b.n	8011962 <_svfiprintf_r+0x4e>
 8011a92:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a96:	460c      	mov	r4, r1
 8011a98:	2001      	movs	r0, #1
 8011a9a:	e7a5      	b.n	80119e8 <_svfiprintf_r+0xd4>
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	3401      	adds	r4, #1
 8011aa0:	9305      	str	r3, [sp, #20]
 8011aa2:	4619      	mov	r1, r3
 8011aa4:	f04f 0c0a 	mov.w	ip, #10
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011aae:	3a30      	subs	r2, #48	; 0x30
 8011ab0:	2a09      	cmp	r2, #9
 8011ab2:	d903      	bls.n	8011abc <_svfiprintf_r+0x1a8>
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d0c5      	beq.n	8011a44 <_svfiprintf_r+0x130>
 8011ab8:	9105      	str	r1, [sp, #20]
 8011aba:	e7c3      	b.n	8011a44 <_svfiprintf_r+0x130>
 8011abc:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ac0:	4604      	mov	r4, r0
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	e7f0      	b.n	8011aa8 <_svfiprintf_r+0x194>
 8011ac6:	ab03      	add	r3, sp, #12
 8011ac8:	9300      	str	r3, [sp, #0]
 8011aca:	462a      	mov	r2, r5
 8011acc:	4b0f      	ldr	r3, [pc, #60]	; (8011b0c <_svfiprintf_r+0x1f8>)
 8011ace:	a904      	add	r1, sp, #16
 8011ad0:	4638      	mov	r0, r7
 8011ad2:	f3af 8000 	nop.w
 8011ad6:	1c42      	adds	r2, r0, #1
 8011ad8:	4606      	mov	r6, r0
 8011ada:	d1d6      	bne.n	8011a8a <_svfiprintf_r+0x176>
 8011adc:	89ab      	ldrh	r3, [r5, #12]
 8011ade:	065b      	lsls	r3, r3, #25
 8011ae0:	f53f af2c 	bmi.w	801193c <_svfiprintf_r+0x28>
 8011ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ae6:	b01d      	add	sp, #116	; 0x74
 8011ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aec:	ab03      	add	r3, sp, #12
 8011aee:	9300      	str	r3, [sp, #0]
 8011af0:	462a      	mov	r2, r5
 8011af2:	4b06      	ldr	r3, [pc, #24]	; (8011b0c <_svfiprintf_r+0x1f8>)
 8011af4:	a904      	add	r1, sp, #16
 8011af6:	4638      	mov	r0, r7
 8011af8:	f000 f9d4 	bl	8011ea4 <_printf_i>
 8011afc:	e7eb      	b.n	8011ad6 <_svfiprintf_r+0x1c2>
 8011afe:	bf00      	nop
 8011b00:	08014938 	.word	0x08014938
 8011b04:	08014942 	.word	0x08014942
 8011b08:	00000000 	.word	0x00000000
 8011b0c:	0801185d 	.word	0x0801185d
 8011b10:	0801493e 	.word	0x0801493e

08011b14 <__sfputc_r>:
 8011b14:	6893      	ldr	r3, [r2, #8]
 8011b16:	3b01      	subs	r3, #1
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	b410      	push	{r4}
 8011b1c:	6093      	str	r3, [r2, #8]
 8011b1e:	da08      	bge.n	8011b32 <__sfputc_r+0x1e>
 8011b20:	6994      	ldr	r4, [r2, #24]
 8011b22:	42a3      	cmp	r3, r4
 8011b24:	db01      	blt.n	8011b2a <__sfputc_r+0x16>
 8011b26:	290a      	cmp	r1, #10
 8011b28:	d103      	bne.n	8011b32 <__sfputc_r+0x1e>
 8011b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b2e:	f000 baef 	b.w	8012110 <__swbuf_r>
 8011b32:	6813      	ldr	r3, [r2, #0]
 8011b34:	1c58      	adds	r0, r3, #1
 8011b36:	6010      	str	r0, [r2, #0]
 8011b38:	7019      	strb	r1, [r3, #0]
 8011b3a:	4608      	mov	r0, r1
 8011b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b40:	4770      	bx	lr

08011b42 <__sfputs_r>:
 8011b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b44:	4606      	mov	r6, r0
 8011b46:	460f      	mov	r7, r1
 8011b48:	4614      	mov	r4, r2
 8011b4a:	18d5      	adds	r5, r2, r3
 8011b4c:	42ac      	cmp	r4, r5
 8011b4e:	d101      	bne.n	8011b54 <__sfputs_r+0x12>
 8011b50:	2000      	movs	r0, #0
 8011b52:	e007      	b.n	8011b64 <__sfputs_r+0x22>
 8011b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b58:	463a      	mov	r2, r7
 8011b5a:	4630      	mov	r0, r6
 8011b5c:	f7ff ffda 	bl	8011b14 <__sfputc_r>
 8011b60:	1c43      	adds	r3, r0, #1
 8011b62:	d1f3      	bne.n	8011b4c <__sfputs_r+0xa>
 8011b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011b68 <_vfiprintf_r>:
 8011b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b6c:	460d      	mov	r5, r1
 8011b6e:	b09d      	sub	sp, #116	; 0x74
 8011b70:	4614      	mov	r4, r2
 8011b72:	4698      	mov	r8, r3
 8011b74:	4606      	mov	r6, r0
 8011b76:	b118      	cbz	r0, 8011b80 <_vfiprintf_r+0x18>
 8011b78:	6983      	ldr	r3, [r0, #24]
 8011b7a:	b90b      	cbnz	r3, 8011b80 <_vfiprintf_r+0x18>
 8011b7c:	f000 fcaa 	bl	80124d4 <__sinit>
 8011b80:	4b89      	ldr	r3, [pc, #548]	; (8011da8 <_vfiprintf_r+0x240>)
 8011b82:	429d      	cmp	r5, r3
 8011b84:	d11b      	bne.n	8011bbe <_vfiprintf_r+0x56>
 8011b86:	6875      	ldr	r5, [r6, #4]
 8011b88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b8a:	07d9      	lsls	r1, r3, #31
 8011b8c:	d405      	bmi.n	8011b9a <_vfiprintf_r+0x32>
 8011b8e:	89ab      	ldrh	r3, [r5, #12]
 8011b90:	059a      	lsls	r2, r3, #22
 8011b92:	d402      	bmi.n	8011b9a <_vfiprintf_r+0x32>
 8011b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b96:	f000 fd3b 	bl	8012610 <__retarget_lock_acquire_recursive>
 8011b9a:	89ab      	ldrh	r3, [r5, #12]
 8011b9c:	071b      	lsls	r3, r3, #28
 8011b9e:	d501      	bpl.n	8011ba4 <_vfiprintf_r+0x3c>
 8011ba0:	692b      	ldr	r3, [r5, #16]
 8011ba2:	b9eb      	cbnz	r3, 8011be0 <_vfiprintf_r+0x78>
 8011ba4:	4629      	mov	r1, r5
 8011ba6:	4630      	mov	r0, r6
 8011ba8:	f000 fb04 	bl	80121b4 <__swsetup_r>
 8011bac:	b1c0      	cbz	r0, 8011be0 <_vfiprintf_r+0x78>
 8011bae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bb0:	07dc      	lsls	r4, r3, #31
 8011bb2:	d50e      	bpl.n	8011bd2 <_vfiprintf_r+0x6a>
 8011bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8011bb8:	b01d      	add	sp, #116	; 0x74
 8011bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bbe:	4b7b      	ldr	r3, [pc, #492]	; (8011dac <_vfiprintf_r+0x244>)
 8011bc0:	429d      	cmp	r5, r3
 8011bc2:	d101      	bne.n	8011bc8 <_vfiprintf_r+0x60>
 8011bc4:	68b5      	ldr	r5, [r6, #8]
 8011bc6:	e7df      	b.n	8011b88 <_vfiprintf_r+0x20>
 8011bc8:	4b79      	ldr	r3, [pc, #484]	; (8011db0 <_vfiprintf_r+0x248>)
 8011bca:	429d      	cmp	r5, r3
 8011bcc:	bf08      	it	eq
 8011bce:	68f5      	ldreq	r5, [r6, #12]
 8011bd0:	e7da      	b.n	8011b88 <_vfiprintf_r+0x20>
 8011bd2:	89ab      	ldrh	r3, [r5, #12]
 8011bd4:	0598      	lsls	r0, r3, #22
 8011bd6:	d4ed      	bmi.n	8011bb4 <_vfiprintf_r+0x4c>
 8011bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011bda:	f000 fd1a 	bl	8012612 <__retarget_lock_release_recursive>
 8011bde:	e7e9      	b.n	8011bb4 <_vfiprintf_r+0x4c>
 8011be0:	2300      	movs	r3, #0
 8011be2:	9309      	str	r3, [sp, #36]	; 0x24
 8011be4:	2320      	movs	r3, #32
 8011be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011bea:	f8cd 800c 	str.w	r8, [sp, #12]
 8011bee:	2330      	movs	r3, #48	; 0x30
 8011bf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011db4 <_vfiprintf_r+0x24c>
 8011bf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011bf8:	f04f 0901 	mov.w	r9, #1
 8011bfc:	4623      	mov	r3, r4
 8011bfe:	469a      	mov	sl, r3
 8011c00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c04:	b10a      	cbz	r2, 8011c0a <_vfiprintf_r+0xa2>
 8011c06:	2a25      	cmp	r2, #37	; 0x25
 8011c08:	d1f9      	bne.n	8011bfe <_vfiprintf_r+0x96>
 8011c0a:	ebba 0b04 	subs.w	fp, sl, r4
 8011c0e:	d00b      	beq.n	8011c28 <_vfiprintf_r+0xc0>
 8011c10:	465b      	mov	r3, fp
 8011c12:	4622      	mov	r2, r4
 8011c14:	4629      	mov	r1, r5
 8011c16:	4630      	mov	r0, r6
 8011c18:	f7ff ff93 	bl	8011b42 <__sfputs_r>
 8011c1c:	3001      	adds	r0, #1
 8011c1e:	f000 80aa 	beq.w	8011d76 <_vfiprintf_r+0x20e>
 8011c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c24:	445a      	add	r2, fp
 8011c26:	9209      	str	r2, [sp, #36]	; 0x24
 8011c28:	f89a 3000 	ldrb.w	r3, [sl]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	f000 80a2 	beq.w	8011d76 <_vfiprintf_r+0x20e>
 8011c32:	2300      	movs	r3, #0
 8011c34:	f04f 32ff 	mov.w	r2, #4294967295
 8011c38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c3c:	f10a 0a01 	add.w	sl, sl, #1
 8011c40:	9304      	str	r3, [sp, #16]
 8011c42:	9307      	str	r3, [sp, #28]
 8011c44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c48:	931a      	str	r3, [sp, #104]	; 0x68
 8011c4a:	4654      	mov	r4, sl
 8011c4c:	2205      	movs	r2, #5
 8011c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c52:	4858      	ldr	r0, [pc, #352]	; (8011db4 <_vfiprintf_r+0x24c>)
 8011c54:	f7ee fac4 	bl	80001e0 <memchr>
 8011c58:	9a04      	ldr	r2, [sp, #16]
 8011c5a:	b9d8      	cbnz	r0, 8011c94 <_vfiprintf_r+0x12c>
 8011c5c:	06d1      	lsls	r1, r2, #27
 8011c5e:	bf44      	itt	mi
 8011c60:	2320      	movmi	r3, #32
 8011c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c66:	0713      	lsls	r3, r2, #28
 8011c68:	bf44      	itt	mi
 8011c6a:	232b      	movmi	r3, #43	; 0x2b
 8011c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c70:	f89a 3000 	ldrb.w	r3, [sl]
 8011c74:	2b2a      	cmp	r3, #42	; 0x2a
 8011c76:	d015      	beq.n	8011ca4 <_vfiprintf_r+0x13c>
 8011c78:	9a07      	ldr	r2, [sp, #28]
 8011c7a:	4654      	mov	r4, sl
 8011c7c:	2000      	movs	r0, #0
 8011c7e:	f04f 0c0a 	mov.w	ip, #10
 8011c82:	4621      	mov	r1, r4
 8011c84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c88:	3b30      	subs	r3, #48	; 0x30
 8011c8a:	2b09      	cmp	r3, #9
 8011c8c:	d94e      	bls.n	8011d2c <_vfiprintf_r+0x1c4>
 8011c8e:	b1b0      	cbz	r0, 8011cbe <_vfiprintf_r+0x156>
 8011c90:	9207      	str	r2, [sp, #28]
 8011c92:	e014      	b.n	8011cbe <_vfiprintf_r+0x156>
 8011c94:	eba0 0308 	sub.w	r3, r0, r8
 8011c98:	fa09 f303 	lsl.w	r3, r9, r3
 8011c9c:	4313      	orrs	r3, r2
 8011c9e:	9304      	str	r3, [sp, #16]
 8011ca0:	46a2      	mov	sl, r4
 8011ca2:	e7d2      	b.n	8011c4a <_vfiprintf_r+0xe2>
 8011ca4:	9b03      	ldr	r3, [sp, #12]
 8011ca6:	1d19      	adds	r1, r3, #4
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	9103      	str	r1, [sp, #12]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	bfbb      	ittet	lt
 8011cb0:	425b      	neglt	r3, r3
 8011cb2:	f042 0202 	orrlt.w	r2, r2, #2
 8011cb6:	9307      	strge	r3, [sp, #28]
 8011cb8:	9307      	strlt	r3, [sp, #28]
 8011cba:	bfb8      	it	lt
 8011cbc:	9204      	strlt	r2, [sp, #16]
 8011cbe:	7823      	ldrb	r3, [r4, #0]
 8011cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8011cc2:	d10c      	bne.n	8011cde <_vfiprintf_r+0x176>
 8011cc4:	7863      	ldrb	r3, [r4, #1]
 8011cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8011cc8:	d135      	bne.n	8011d36 <_vfiprintf_r+0x1ce>
 8011cca:	9b03      	ldr	r3, [sp, #12]
 8011ccc:	1d1a      	adds	r2, r3, #4
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	9203      	str	r2, [sp, #12]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	bfb8      	it	lt
 8011cd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8011cda:	3402      	adds	r4, #2
 8011cdc:	9305      	str	r3, [sp, #20]
 8011cde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011dc4 <_vfiprintf_r+0x25c>
 8011ce2:	7821      	ldrb	r1, [r4, #0]
 8011ce4:	2203      	movs	r2, #3
 8011ce6:	4650      	mov	r0, sl
 8011ce8:	f7ee fa7a 	bl	80001e0 <memchr>
 8011cec:	b140      	cbz	r0, 8011d00 <_vfiprintf_r+0x198>
 8011cee:	2340      	movs	r3, #64	; 0x40
 8011cf0:	eba0 000a 	sub.w	r0, r0, sl
 8011cf4:	fa03 f000 	lsl.w	r0, r3, r0
 8011cf8:	9b04      	ldr	r3, [sp, #16]
 8011cfa:	4303      	orrs	r3, r0
 8011cfc:	3401      	adds	r4, #1
 8011cfe:	9304      	str	r3, [sp, #16]
 8011d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d04:	482c      	ldr	r0, [pc, #176]	; (8011db8 <_vfiprintf_r+0x250>)
 8011d06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d0a:	2206      	movs	r2, #6
 8011d0c:	f7ee fa68 	bl	80001e0 <memchr>
 8011d10:	2800      	cmp	r0, #0
 8011d12:	d03f      	beq.n	8011d94 <_vfiprintf_r+0x22c>
 8011d14:	4b29      	ldr	r3, [pc, #164]	; (8011dbc <_vfiprintf_r+0x254>)
 8011d16:	bb1b      	cbnz	r3, 8011d60 <_vfiprintf_r+0x1f8>
 8011d18:	9b03      	ldr	r3, [sp, #12]
 8011d1a:	3307      	adds	r3, #7
 8011d1c:	f023 0307 	bic.w	r3, r3, #7
 8011d20:	3308      	adds	r3, #8
 8011d22:	9303      	str	r3, [sp, #12]
 8011d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d26:	443b      	add	r3, r7
 8011d28:	9309      	str	r3, [sp, #36]	; 0x24
 8011d2a:	e767      	b.n	8011bfc <_vfiprintf_r+0x94>
 8011d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d30:	460c      	mov	r4, r1
 8011d32:	2001      	movs	r0, #1
 8011d34:	e7a5      	b.n	8011c82 <_vfiprintf_r+0x11a>
 8011d36:	2300      	movs	r3, #0
 8011d38:	3401      	adds	r4, #1
 8011d3a:	9305      	str	r3, [sp, #20]
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	f04f 0c0a 	mov.w	ip, #10
 8011d42:	4620      	mov	r0, r4
 8011d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d48:	3a30      	subs	r2, #48	; 0x30
 8011d4a:	2a09      	cmp	r2, #9
 8011d4c:	d903      	bls.n	8011d56 <_vfiprintf_r+0x1ee>
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d0c5      	beq.n	8011cde <_vfiprintf_r+0x176>
 8011d52:	9105      	str	r1, [sp, #20]
 8011d54:	e7c3      	b.n	8011cde <_vfiprintf_r+0x176>
 8011d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d5a:	4604      	mov	r4, r0
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	e7f0      	b.n	8011d42 <_vfiprintf_r+0x1da>
 8011d60:	ab03      	add	r3, sp, #12
 8011d62:	9300      	str	r3, [sp, #0]
 8011d64:	462a      	mov	r2, r5
 8011d66:	4b16      	ldr	r3, [pc, #88]	; (8011dc0 <_vfiprintf_r+0x258>)
 8011d68:	a904      	add	r1, sp, #16
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	f3af 8000 	nop.w
 8011d70:	4607      	mov	r7, r0
 8011d72:	1c78      	adds	r0, r7, #1
 8011d74:	d1d6      	bne.n	8011d24 <_vfiprintf_r+0x1bc>
 8011d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d78:	07d9      	lsls	r1, r3, #31
 8011d7a:	d405      	bmi.n	8011d88 <_vfiprintf_r+0x220>
 8011d7c:	89ab      	ldrh	r3, [r5, #12]
 8011d7e:	059a      	lsls	r2, r3, #22
 8011d80:	d402      	bmi.n	8011d88 <_vfiprintf_r+0x220>
 8011d82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d84:	f000 fc45 	bl	8012612 <__retarget_lock_release_recursive>
 8011d88:	89ab      	ldrh	r3, [r5, #12]
 8011d8a:	065b      	lsls	r3, r3, #25
 8011d8c:	f53f af12 	bmi.w	8011bb4 <_vfiprintf_r+0x4c>
 8011d90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d92:	e711      	b.n	8011bb8 <_vfiprintf_r+0x50>
 8011d94:	ab03      	add	r3, sp, #12
 8011d96:	9300      	str	r3, [sp, #0]
 8011d98:	462a      	mov	r2, r5
 8011d9a:	4b09      	ldr	r3, [pc, #36]	; (8011dc0 <_vfiprintf_r+0x258>)
 8011d9c:	a904      	add	r1, sp, #16
 8011d9e:	4630      	mov	r0, r6
 8011da0:	f000 f880 	bl	8011ea4 <_printf_i>
 8011da4:	e7e4      	b.n	8011d70 <_vfiprintf_r+0x208>
 8011da6:	bf00      	nop
 8011da8:	0801498c 	.word	0x0801498c
 8011dac:	080149ac 	.word	0x080149ac
 8011db0:	0801496c 	.word	0x0801496c
 8011db4:	08014938 	.word	0x08014938
 8011db8:	08014942 	.word	0x08014942
 8011dbc:	00000000 	.word	0x00000000
 8011dc0:	08011b43 	.word	0x08011b43
 8011dc4:	0801493e 	.word	0x0801493e

08011dc8 <_printf_common>:
 8011dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dcc:	4616      	mov	r6, r2
 8011dce:	4699      	mov	r9, r3
 8011dd0:	688a      	ldr	r2, [r1, #8]
 8011dd2:	690b      	ldr	r3, [r1, #16]
 8011dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011dd8:	4293      	cmp	r3, r2
 8011dda:	bfb8      	it	lt
 8011ddc:	4613      	movlt	r3, r2
 8011dde:	6033      	str	r3, [r6, #0]
 8011de0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011de4:	4607      	mov	r7, r0
 8011de6:	460c      	mov	r4, r1
 8011de8:	b10a      	cbz	r2, 8011dee <_printf_common+0x26>
 8011dea:	3301      	adds	r3, #1
 8011dec:	6033      	str	r3, [r6, #0]
 8011dee:	6823      	ldr	r3, [r4, #0]
 8011df0:	0699      	lsls	r1, r3, #26
 8011df2:	bf42      	ittt	mi
 8011df4:	6833      	ldrmi	r3, [r6, #0]
 8011df6:	3302      	addmi	r3, #2
 8011df8:	6033      	strmi	r3, [r6, #0]
 8011dfa:	6825      	ldr	r5, [r4, #0]
 8011dfc:	f015 0506 	ands.w	r5, r5, #6
 8011e00:	d106      	bne.n	8011e10 <_printf_common+0x48>
 8011e02:	f104 0a19 	add.w	sl, r4, #25
 8011e06:	68e3      	ldr	r3, [r4, #12]
 8011e08:	6832      	ldr	r2, [r6, #0]
 8011e0a:	1a9b      	subs	r3, r3, r2
 8011e0c:	42ab      	cmp	r3, r5
 8011e0e:	dc26      	bgt.n	8011e5e <_printf_common+0x96>
 8011e10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e14:	1e13      	subs	r3, r2, #0
 8011e16:	6822      	ldr	r2, [r4, #0]
 8011e18:	bf18      	it	ne
 8011e1a:	2301      	movne	r3, #1
 8011e1c:	0692      	lsls	r2, r2, #26
 8011e1e:	d42b      	bmi.n	8011e78 <_printf_common+0xb0>
 8011e20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e24:	4649      	mov	r1, r9
 8011e26:	4638      	mov	r0, r7
 8011e28:	47c0      	blx	r8
 8011e2a:	3001      	adds	r0, #1
 8011e2c:	d01e      	beq.n	8011e6c <_printf_common+0xa4>
 8011e2e:	6823      	ldr	r3, [r4, #0]
 8011e30:	68e5      	ldr	r5, [r4, #12]
 8011e32:	6832      	ldr	r2, [r6, #0]
 8011e34:	f003 0306 	and.w	r3, r3, #6
 8011e38:	2b04      	cmp	r3, #4
 8011e3a:	bf08      	it	eq
 8011e3c:	1aad      	subeq	r5, r5, r2
 8011e3e:	68a3      	ldr	r3, [r4, #8]
 8011e40:	6922      	ldr	r2, [r4, #16]
 8011e42:	bf0c      	ite	eq
 8011e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e48:	2500      	movne	r5, #0
 8011e4a:	4293      	cmp	r3, r2
 8011e4c:	bfc4      	itt	gt
 8011e4e:	1a9b      	subgt	r3, r3, r2
 8011e50:	18ed      	addgt	r5, r5, r3
 8011e52:	2600      	movs	r6, #0
 8011e54:	341a      	adds	r4, #26
 8011e56:	42b5      	cmp	r5, r6
 8011e58:	d11a      	bne.n	8011e90 <_printf_common+0xc8>
 8011e5a:	2000      	movs	r0, #0
 8011e5c:	e008      	b.n	8011e70 <_printf_common+0xa8>
 8011e5e:	2301      	movs	r3, #1
 8011e60:	4652      	mov	r2, sl
 8011e62:	4649      	mov	r1, r9
 8011e64:	4638      	mov	r0, r7
 8011e66:	47c0      	blx	r8
 8011e68:	3001      	adds	r0, #1
 8011e6a:	d103      	bne.n	8011e74 <_printf_common+0xac>
 8011e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e74:	3501      	adds	r5, #1
 8011e76:	e7c6      	b.n	8011e06 <_printf_common+0x3e>
 8011e78:	18e1      	adds	r1, r4, r3
 8011e7a:	1c5a      	adds	r2, r3, #1
 8011e7c:	2030      	movs	r0, #48	; 0x30
 8011e7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e82:	4422      	add	r2, r4
 8011e84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e8c:	3302      	adds	r3, #2
 8011e8e:	e7c7      	b.n	8011e20 <_printf_common+0x58>
 8011e90:	2301      	movs	r3, #1
 8011e92:	4622      	mov	r2, r4
 8011e94:	4649      	mov	r1, r9
 8011e96:	4638      	mov	r0, r7
 8011e98:	47c0      	blx	r8
 8011e9a:	3001      	adds	r0, #1
 8011e9c:	d0e6      	beq.n	8011e6c <_printf_common+0xa4>
 8011e9e:	3601      	adds	r6, #1
 8011ea0:	e7d9      	b.n	8011e56 <_printf_common+0x8e>
	...

08011ea4 <_printf_i>:
 8011ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ea8:	7e0f      	ldrb	r7, [r1, #24]
 8011eaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011eac:	2f78      	cmp	r7, #120	; 0x78
 8011eae:	4691      	mov	r9, r2
 8011eb0:	4680      	mov	r8, r0
 8011eb2:	460c      	mov	r4, r1
 8011eb4:	469a      	mov	sl, r3
 8011eb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011eba:	d807      	bhi.n	8011ecc <_printf_i+0x28>
 8011ebc:	2f62      	cmp	r7, #98	; 0x62
 8011ebe:	d80a      	bhi.n	8011ed6 <_printf_i+0x32>
 8011ec0:	2f00      	cmp	r7, #0
 8011ec2:	f000 80d8 	beq.w	8012076 <_printf_i+0x1d2>
 8011ec6:	2f58      	cmp	r7, #88	; 0x58
 8011ec8:	f000 80a3 	beq.w	8012012 <_printf_i+0x16e>
 8011ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ed0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ed4:	e03a      	b.n	8011f4c <_printf_i+0xa8>
 8011ed6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011eda:	2b15      	cmp	r3, #21
 8011edc:	d8f6      	bhi.n	8011ecc <_printf_i+0x28>
 8011ede:	a101      	add	r1, pc, #4	; (adr r1, 8011ee4 <_printf_i+0x40>)
 8011ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ee4:	08011f3d 	.word	0x08011f3d
 8011ee8:	08011f51 	.word	0x08011f51
 8011eec:	08011ecd 	.word	0x08011ecd
 8011ef0:	08011ecd 	.word	0x08011ecd
 8011ef4:	08011ecd 	.word	0x08011ecd
 8011ef8:	08011ecd 	.word	0x08011ecd
 8011efc:	08011f51 	.word	0x08011f51
 8011f00:	08011ecd 	.word	0x08011ecd
 8011f04:	08011ecd 	.word	0x08011ecd
 8011f08:	08011ecd 	.word	0x08011ecd
 8011f0c:	08011ecd 	.word	0x08011ecd
 8011f10:	0801205d 	.word	0x0801205d
 8011f14:	08011f81 	.word	0x08011f81
 8011f18:	0801203f 	.word	0x0801203f
 8011f1c:	08011ecd 	.word	0x08011ecd
 8011f20:	08011ecd 	.word	0x08011ecd
 8011f24:	0801207f 	.word	0x0801207f
 8011f28:	08011ecd 	.word	0x08011ecd
 8011f2c:	08011f81 	.word	0x08011f81
 8011f30:	08011ecd 	.word	0x08011ecd
 8011f34:	08011ecd 	.word	0x08011ecd
 8011f38:	08012047 	.word	0x08012047
 8011f3c:	682b      	ldr	r3, [r5, #0]
 8011f3e:	1d1a      	adds	r2, r3, #4
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	602a      	str	r2, [r5, #0]
 8011f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	e0a3      	b.n	8012098 <_printf_i+0x1f4>
 8011f50:	6820      	ldr	r0, [r4, #0]
 8011f52:	6829      	ldr	r1, [r5, #0]
 8011f54:	0606      	lsls	r6, r0, #24
 8011f56:	f101 0304 	add.w	r3, r1, #4
 8011f5a:	d50a      	bpl.n	8011f72 <_printf_i+0xce>
 8011f5c:	680e      	ldr	r6, [r1, #0]
 8011f5e:	602b      	str	r3, [r5, #0]
 8011f60:	2e00      	cmp	r6, #0
 8011f62:	da03      	bge.n	8011f6c <_printf_i+0xc8>
 8011f64:	232d      	movs	r3, #45	; 0x2d
 8011f66:	4276      	negs	r6, r6
 8011f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f6c:	485e      	ldr	r0, [pc, #376]	; (80120e8 <_printf_i+0x244>)
 8011f6e:	230a      	movs	r3, #10
 8011f70:	e019      	b.n	8011fa6 <_printf_i+0x102>
 8011f72:	680e      	ldr	r6, [r1, #0]
 8011f74:	602b      	str	r3, [r5, #0]
 8011f76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011f7a:	bf18      	it	ne
 8011f7c:	b236      	sxthne	r6, r6
 8011f7e:	e7ef      	b.n	8011f60 <_printf_i+0xbc>
 8011f80:	682b      	ldr	r3, [r5, #0]
 8011f82:	6820      	ldr	r0, [r4, #0]
 8011f84:	1d19      	adds	r1, r3, #4
 8011f86:	6029      	str	r1, [r5, #0]
 8011f88:	0601      	lsls	r1, r0, #24
 8011f8a:	d501      	bpl.n	8011f90 <_printf_i+0xec>
 8011f8c:	681e      	ldr	r6, [r3, #0]
 8011f8e:	e002      	b.n	8011f96 <_printf_i+0xf2>
 8011f90:	0646      	lsls	r6, r0, #25
 8011f92:	d5fb      	bpl.n	8011f8c <_printf_i+0xe8>
 8011f94:	881e      	ldrh	r6, [r3, #0]
 8011f96:	4854      	ldr	r0, [pc, #336]	; (80120e8 <_printf_i+0x244>)
 8011f98:	2f6f      	cmp	r7, #111	; 0x6f
 8011f9a:	bf0c      	ite	eq
 8011f9c:	2308      	moveq	r3, #8
 8011f9e:	230a      	movne	r3, #10
 8011fa0:	2100      	movs	r1, #0
 8011fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011fa6:	6865      	ldr	r5, [r4, #4]
 8011fa8:	60a5      	str	r5, [r4, #8]
 8011faa:	2d00      	cmp	r5, #0
 8011fac:	bfa2      	ittt	ge
 8011fae:	6821      	ldrge	r1, [r4, #0]
 8011fb0:	f021 0104 	bicge.w	r1, r1, #4
 8011fb4:	6021      	strge	r1, [r4, #0]
 8011fb6:	b90e      	cbnz	r6, 8011fbc <_printf_i+0x118>
 8011fb8:	2d00      	cmp	r5, #0
 8011fba:	d04d      	beq.n	8012058 <_printf_i+0x1b4>
 8011fbc:	4615      	mov	r5, r2
 8011fbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8011fc2:	fb03 6711 	mls	r7, r3, r1, r6
 8011fc6:	5dc7      	ldrb	r7, [r0, r7]
 8011fc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011fcc:	4637      	mov	r7, r6
 8011fce:	42bb      	cmp	r3, r7
 8011fd0:	460e      	mov	r6, r1
 8011fd2:	d9f4      	bls.n	8011fbe <_printf_i+0x11a>
 8011fd4:	2b08      	cmp	r3, #8
 8011fd6:	d10b      	bne.n	8011ff0 <_printf_i+0x14c>
 8011fd8:	6823      	ldr	r3, [r4, #0]
 8011fda:	07de      	lsls	r6, r3, #31
 8011fdc:	d508      	bpl.n	8011ff0 <_printf_i+0x14c>
 8011fde:	6923      	ldr	r3, [r4, #16]
 8011fe0:	6861      	ldr	r1, [r4, #4]
 8011fe2:	4299      	cmp	r1, r3
 8011fe4:	bfde      	ittt	le
 8011fe6:	2330      	movle	r3, #48	; 0x30
 8011fe8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011fec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011ff0:	1b52      	subs	r2, r2, r5
 8011ff2:	6122      	str	r2, [r4, #16]
 8011ff4:	f8cd a000 	str.w	sl, [sp]
 8011ff8:	464b      	mov	r3, r9
 8011ffa:	aa03      	add	r2, sp, #12
 8011ffc:	4621      	mov	r1, r4
 8011ffe:	4640      	mov	r0, r8
 8012000:	f7ff fee2 	bl	8011dc8 <_printf_common>
 8012004:	3001      	adds	r0, #1
 8012006:	d14c      	bne.n	80120a2 <_printf_i+0x1fe>
 8012008:	f04f 30ff 	mov.w	r0, #4294967295
 801200c:	b004      	add	sp, #16
 801200e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012012:	4835      	ldr	r0, [pc, #212]	; (80120e8 <_printf_i+0x244>)
 8012014:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012018:	6829      	ldr	r1, [r5, #0]
 801201a:	6823      	ldr	r3, [r4, #0]
 801201c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012020:	6029      	str	r1, [r5, #0]
 8012022:	061d      	lsls	r5, r3, #24
 8012024:	d514      	bpl.n	8012050 <_printf_i+0x1ac>
 8012026:	07df      	lsls	r7, r3, #31
 8012028:	bf44      	itt	mi
 801202a:	f043 0320 	orrmi.w	r3, r3, #32
 801202e:	6023      	strmi	r3, [r4, #0]
 8012030:	b91e      	cbnz	r6, 801203a <_printf_i+0x196>
 8012032:	6823      	ldr	r3, [r4, #0]
 8012034:	f023 0320 	bic.w	r3, r3, #32
 8012038:	6023      	str	r3, [r4, #0]
 801203a:	2310      	movs	r3, #16
 801203c:	e7b0      	b.n	8011fa0 <_printf_i+0xfc>
 801203e:	6823      	ldr	r3, [r4, #0]
 8012040:	f043 0320 	orr.w	r3, r3, #32
 8012044:	6023      	str	r3, [r4, #0]
 8012046:	2378      	movs	r3, #120	; 0x78
 8012048:	4828      	ldr	r0, [pc, #160]	; (80120ec <_printf_i+0x248>)
 801204a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801204e:	e7e3      	b.n	8012018 <_printf_i+0x174>
 8012050:	0659      	lsls	r1, r3, #25
 8012052:	bf48      	it	mi
 8012054:	b2b6      	uxthmi	r6, r6
 8012056:	e7e6      	b.n	8012026 <_printf_i+0x182>
 8012058:	4615      	mov	r5, r2
 801205a:	e7bb      	b.n	8011fd4 <_printf_i+0x130>
 801205c:	682b      	ldr	r3, [r5, #0]
 801205e:	6826      	ldr	r6, [r4, #0]
 8012060:	6961      	ldr	r1, [r4, #20]
 8012062:	1d18      	adds	r0, r3, #4
 8012064:	6028      	str	r0, [r5, #0]
 8012066:	0635      	lsls	r5, r6, #24
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	d501      	bpl.n	8012070 <_printf_i+0x1cc>
 801206c:	6019      	str	r1, [r3, #0]
 801206e:	e002      	b.n	8012076 <_printf_i+0x1d2>
 8012070:	0670      	lsls	r0, r6, #25
 8012072:	d5fb      	bpl.n	801206c <_printf_i+0x1c8>
 8012074:	8019      	strh	r1, [r3, #0]
 8012076:	2300      	movs	r3, #0
 8012078:	6123      	str	r3, [r4, #16]
 801207a:	4615      	mov	r5, r2
 801207c:	e7ba      	b.n	8011ff4 <_printf_i+0x150>
 801207e:	682b      	ldr	r3, [r5, #0]
 8012080:	1d1a      	adds	r2, r3, #4
 8012082:	602a      	str	r2, [r5, #0]
 8012084:	681d      	ldr	r5, [r3, #0]
 8012086:	6862      	ldr	r2, [r4, #4]
 8012088:	2100      	movs	r1, #0
 801208a:	4628      	mov	r0, r5
 801208c:	f7ee f8a8 	bl	80001e0 <memchr>
 8012090:	b108      	cbz	r0, 8012096 <_printf_i+0x1f2>
 8012092:	1b40      	subs	r0, r0, r5
 8012094:	6060      	str	r0, [r4, #4]
 8012096:	6863      	ldr	r3, [r4, #4]
 8012098:	6123      	str	r3, [r4, #16]
 801209a:	2300      	movs	r3, #0
 801209c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120a0:	e7a8      	b.n	8011ff4 <_printf_i+0x150>
 80120a2:	6923      	ldr	r3, [r4, #16]
 80120a4:	462a      	mov	r2, r5
 80120a6:	4649      	mov	r1, r9
 80120a8:	4640      	mov	r0, r8
 80120aa:	47d0      	blx	sl
 80120ac:	3001      	adds	r0, #1
 80120ae:	d0ab      	beq.n	8012008 <_printf_i+0x164>
 80120b0:	6823      	ldr	r3, [r4, #0]
 80120b2:	079b      	lsls	r3, r3, #30
 80120b4:	d413      	bmi.n	80120de <_printf_i+0x23a>
 80120b6:	68e0      	ldr	r0, [r4, #12]
 80120b8:	9b03      	ldr	r3, [sp, #12]
 80120ba:	4298      	cmp	r0, r3
 80120bc:	bfb8      	it	lt
 80120be:	4618      	movlt	r0, r3
 80120c0:	e7a4      	b.n	801200c <_printf_i+0x168>
 80120c2:	2301      	movs	r3, #1
 80120c4:	4632      	mov	r2, r6
 80120c6:	4649      	mov	r1, r9
 80120c8:	4640      	mov	r0, r8
 80120ca:	47d0      	blx	sl
 80120cc:	3001      	adds	r0, #1
 80120ce:	d09b      	beq.n	8012008 <_printf_i+0x164>
 80120d0:	3501      	adds	r5, #1
 80120d2:	68e3      	ldr	r3, [r4, #12]
 80120d4:	9903      	ldr	r1, [sp, #12]
 80120d6:	1a5b      	subs	r3, r3, r1
 80120d8:	42ab      	cmp	r3, r5
 80120da:	dcf2      	bgt.n	80120c2 <_printf_i+0x21e>
 80120dc:	e7eb      	b.n	80120b6 <_printf_i+0x212>
 80120de:	2500      	movs	r5, #0
 80120e0:	f104 0619 	add.w	r6, r4, #25
 80120e4:	e7f5      	b.n	80120d2 <_printf_i+0x22e>
 80120e6:	bf00      	nop
 80120e8:	08014949 	.word	0x08014949
 80120ec:	0801495a 	.word	0x0801495a

080120f0 <_sbrk_r>:
 80120f0:	b538      	push	{r3, r4, r5, lr}
 80120f2:	4d06      	ldr	r5, [pc, #24]	; (801210c <_sbrk_r+0x1c>)
 80120f4:	2300      	movs	r3, #0
 80120f6:	4604      	mov	r4, r0
 80120f8:	4608      	mov	r0, r1
 80120fa:	602b      	str	r3, [r5, #0]
 80120fc:	f7f0 f930 	bl	8002360 <_sbrk>
 8012100:	1c43      	adds	r3, r0, #1
 8012102:	d102      	bne.n	801210a <_sbrk_r+0x1a>
 8012104:	682b      	ldr	r3, [r5, #0]
 8012106:	b103      	cbz	r3, 801210a <_sbrk_r+0x1a>
 8012108:	6023      	str	r3, [r4, #0]
 801210a:	bd38      	pop	{r3, r4, r5, pc}
 801210c:	200055e0 	.word	0x200055e0

08012110 <__swbuf_r>:
 8012110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012112:	460e      	mov	r6, r1
 8012114:	4614      	mov	r4, r2
 8012116:	4605      	mov	r5, r0
 8012118:	b118      	cbz	r0, 8012122 <__swbuf_r+0x12>
 801211a:	6983      	ldr	r3, [r0, #24]
 801211c:	b90b      	cbnz	r3, 8012122 <__swbuf_r+0x12>
 801211e:	f000 f9d9 	bl	80124d4 <__sinit>
 8012122:	4b21      	ldr	r3, [pc, #132]	; (80121a8 <__swbuf_r+0x98>)
 8012124:	429c      	cmp	r4, r3
 8012126:	d12b      	bne.n	8012180 <__swbuf_r+0x70>
 8012128:	686c      	ldr	r4, [r5, #4]
 801212a:	69a3      	ldr	r3, [r4, #24]
 801212c:	60a3      	str	r3, [r4, #8]
 801212e:	89a3      	ldrh	r3, [r4, #12]
 8012130:	071a      	lsls	r2, r3, #28
 8012132:	d52f      	bpl.n	8012194 <__swbuf_r+0x84>
 8012134:	6923      	ldr	r3, [r4, #16]
 8012136:	b36b      	cbz	r3, 8012194 <__swbuf_r+0x84>
 8012138:	6923      	ldr	r3, [r4, #16]
 801213a:	6820      	ldr	r0, [r4, #0]
 801213c:	1ac0      	subs	r0, r0, r3
 801213e:	6963      	ldr	r3, [r4, #20]
 8012140:	b2f6      	uxtb	r6, r6
 8012142:	4283      	cmp	r3, r0
 8012144:	4637      	mov	r7, r6
 8012146:	dc04      	bgt.n	8012152 <__swbuf_r+0x42>
 8012148:	4621      	mov	r1, r4
 801214a:	4628      	mov	r0, r5
 801214c:	f000 f92e 	bl	80123ac <_fflush_r>
 8012150:	bb30      	cbnz	r0, 80121a0 <__swbuf_r+0x90>
 8012152:	68a3      	ldr	r3, [r4, #8]
 8012154:	3b01      	subs	r3, #1
 8012156:	60a3      	str	r3, [r4, #8]
 8012158:	6823      	ldr	r3, [r4, #0]
 801215a:	1c5a      	adds	r2, r3, #1
 801215c:	6022      	str	r2, [r4, #0]
 801215e:	701e      	strb	r6, [r3, #0]
 8012160:	6963      	ldr	r3, [r4, #20]
 8012162:	3001      	adds	r0, #1
 8012164:	4283      	cmp	r3, r0
 8012166:	d004      	beq.n	8012172 <__swbuf_r+0x62>
 8012168:	89a3      	ldrh	r3, [r4, #12]
 801216a:	07db      	lsls	r3, r3, #31
 801216c:	d506      	bpl.n	801217c <__swbuf_r+0x6c>
 801216e:	2e0a      	cmp	r6, #10
 8012170:	d104      	bne.n	801217c <__swbuf_r+0x6c>
 8012172:	4621      	mov	r1, r4
 8012174:	4628      	mov	r0, r5
 8012176:	f000 f919 	bl	80123ac <_fflush_r>
 801217a:	b988      	cbnz	r0, 80121a0 <__swbuf_r+0x90>
 801217c:	4638      	mov	r0, r7
 801217e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012180:	4b0a      	ldr	r3, [pc, #40]	; (80121ac <__swbuf_r+0x9c>)
 8012182:	429c      	cmp	r4, r3
 8012184:	d101      	bne.n	801218a <__swbuf_r+0x7a>
 8012186:	68ac      	ldr	r4, [r5, #8]
 8012188:	e7cf      	b.n	801212a <__swbuf_r+0x1a>
 801218a:	4b09      	ldr	r3, [pc, #36]	; (80121b0 <__swbuf_r+0xa0>)
 801218c:	429c      	cmp	r4, r3
 801218e:	bf08      	it	eq
 8012190:	68ec      	ldreq	r4, [r5, #12]
 8012192:	e7ca      	b.n	801212a <__swbuf_r+0x1a>
 8012194:	4621      	mov	r1, r4
 8012196:	4628      	mov	r0, r5
 8012198:	f000 f80c 	bl	80121b4 <__swsetup_r>
 801219c:	2800      	cmp	r0, #0
 801219e:	d0cb      	beq.n	8012138 <__swbuf_r+0x28>
 80121a0:	f04f 37ff 	mov.w	r7, #4294967295
 80121a4:	e7ea      	b.n	801217c <__swbuf_r+0x6c>
 80121a6:	bf00      	nop
 80121a8:	0801498c 	.word	0x0801498c
 80121ac:	080149ac 	.word	0x080149ac
 80121b0:	0801496c 	.word	0x0801496c

080121b4 <__swsetup_r>:
 80121b4:	4b32      	ldr	r3, [pc, #200]	; (8012280 <__swsetup_r+0xcc>)
 80121b6:	b570      	push	{r4, r5, r6, lr}
 80121b8:	681d      	ldr	r5, [r3, #0]
 80121ba:	4606      	mov	r6, r0
 80121bc:	460c      	mov	r4, r1
 80121be:	b125      	cbz	r5, 80121ca <__swsetup_r+0x16>
 80121c0:	69ab      	ldr	r3, [r5, #24]
 80121c2:	b913      	cbnz	r3, 80121ca <__swsetup_r+0x16>
 80121c4:	4628      	mov	r0, r5
 80121c6:	f000 f985 	bl	80124d4 <__sinit>
 80121ca:	4b2e      	ldr	r3, [pc, #184]	; (8012284 <__swsetup_r+0xd0>)
 80121cc:	429c      	cmp	r4, r3
 80121ce:	d10f      	bne.n	80121f0 <__swsetup_r+0x3c>
 80121d0:	686c      	ldr	r4, [r5, #4]
 80121d2:	89a3      	ldrh	r3, [r4, #12]
 80121d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80121d8:	0719      	lsls	r1, r3, #28
 80121da:	d42c      	bmi.n	8012236 <__swsetup_r+0x82>
 80121dc:	06dd      	lsls	r5, r3, #27
 80121de:	d411      	bmi.n	8012204 <__swsetup_r+0x50>
 80121e0:	2309      	movs	r3, #9
 80121e2:	6033      	str	r3, [r6, #0]
 80121e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80121e8:	81a3      	strh	r3, [r4, #12]
 80121ea:	f04f 30ff 	mov.w	r0, #4294967295
 80121ee:	e03e      	b.n	801226e <__swsetup_r+0xba>
 80121f0:	4b25      	ldr	r3, [pc, #148]	; (8012288 <__swsetup_r+0xd4>)
 80121f2:	429c      	cmp	r4, r3
 80121f4:	d101      	bne.n	80121fa <__swsetup_r+0x46>
 80121f6:	68ac      	ldr	r4, [r5, #8]
 80121f8:	e7eb      	b.n	80121d2 <__swsetup_r+0x1e>
 80121fa:	4b24      	ldr	r3, [pc, #144]	; (801228c <__swsetup_r+0xd8>)
 80121fc:	429c      	cmp	r4, r3
 80121fe:	bf08      	it	eq
 8012200:	68ec      	ldreq	r4, [r5, #12]
 8012202:	e7e6      	b.n	80121d2 <__swsetup_r+0x1e>
 8012204:	0758      	lsls	r0, r3, #29
 8012206:	d512      	bpl.n	801222e <__swsetup_r+0x7a>
 8012208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801220a:	b141      	cbz	r1, 801221e <__swsetup_r+0x6a>
 801220c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012210:	4299      	cmp	r1, r3
 8012212:	d002      	beq.n	801221a <__swsetup_r+0x66>
 8012214:	4630      	mov	r0, r6
 8012216:	f7ff fa41 	bl	801169c <_free_r>
 801221a:	2300      	movs	r3, #0
 801221c:	6363      	str	r3, [r4, #52]	; 0x34
 801221e:	89a3      	ldrh	r3, [r4, #12]
 8012220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012224:	81a3      	strh	r3, [r4, #12]
 8012226:	2300      	movs	r3, #0
 8012228:	6063      	str	r3, [r4, #4]
 801222a:	6923      	ldr	r3, [r4, #16]
 801222c:	6023      	str	r3, [r4, #0]
 801222e:	89a3      	ldrh	r3, [r4, #12]
 8012230:	f043 0308 	orr.w	r3, r3, #8
 8012234:	81a3      	strh	r3, [r4, #12]
 8012236:	6923      	ldr	r3, [r4, #16]
 8012238:	b94b      	cbnz	r3, 801224e <__swsetup_r+0x9a>
 801223a:	89a3      	ldrh	r3, [r4, #12]
 801223c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012244:	d003      	beq.n	801224e <__swsetup_r+0x9a>
 8012246:	4621      	mov	r1, r4
 8012248:	4630      	mov	r0, r6
 801224a:	f000 fa09 	bl	8012660 <__smakebuf_r>
 801224e:	89a0      	ldrh	r0, [r4, #12]
 8012250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012254:	f010 0301 	ands.w	r3, r0, #1
 8012258:	d00a      	beq.n	8012270 <__swsetup_r+0xbc>
 801225a:	2300      	movs	r3, #0
 801225c:	60a3      	str	r3, [r4, #8]
 801225e:	6963      	ldr	r3, [r4, #20]
 8012260:	425b      	negs	r3, r3
 8012262:	61a3      	str	r3, [r4, #24]
 8012264:	6923      	ldr	r3, [r4, #16]
 8012266:	b943      	cbnz	r3, 801227a <__swsetup_r+0xc6>
 8012268:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801226c:	d1ba      	bne.n	80121e4 <__swsetup_r+0x30>
 801226e:	bd70      	pop	{r4, r5, r6, pc}
 8012270:	0781      	lsls	r1, r0, #30
 8012272:	bf58      	it	pl
 8012274:	6963      	ldrpl	r3, [r4, #20]
 8012276:	60a3      	str	r3, [r4, #8]
 8012278:	e7f4      	b.n	8012264 <__swsetup_r+0xb0>
 801227a:	2000      	movs	r0, #0
 801227c:	e7f7      	b.n	801226e <__swsetup_r+0xba>
 801227e:	bf00      	nop
 8012280:	20000128 	.word	0x20000128
 8012284:	0801498c 	.word	0x0801498c
 8012288:	080149ac 	.word	0x080149ac
 801228c:	0801496c 	.word	0x0801496c

08012290 <abort>:
 8012290:	b508      	push	{r3, lr}
 8012292:	2006      	movs	r0, #6
 8012294:	f000 fa88 	bl	80127a8 <raise>
 8012298:	2001      	movs	r0, #1
 801229a:	f7ef ffe9 	bl	8002270 <_exit>
	...

080122a0 <__sflush_r>:
 80122a0:	898a      	ldrh	r2, [r1, #12]
 80122a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122a6:	4605      	mov	r5, r0
 80122a8:	0710      	lsls	r0, r2, #28
 80122aa:	460c      	mov	r4, r1
 80122ac:	d458      	bmi.n	8012360 <__sflush_r+0xc0>
 80122ae:	684b      	ldr	r3, [r1, #4]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	dc05      	bgt.n	80122c0 <__sflush_r+0x20>
 80122b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	dc02      	bgt.n	80122c0 <__sflush_r+0x20>
 80122ba:	2000      	movs	r0, #0
 80122bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80122c2:	2e00      	cmp	r6, #0
 80122c4:	d0f9      	beq.n	80122ba <__sflush_r+0x1a>
 80122c6:	2300      	movs	r3, #0
 80122c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80122cc:	682f      	ldr	r7, [r5, #0]
 80122ce:	602b      	str	r3, [r5, #0]
 80122d0:	d032      	beq.n	8012338 <__sflush_r+0x98>
 80122d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80122d4:	89a3      	ldrh	r3, [r4, #12]
 80122d6:	075a      	lsls	r2, r3, #29
 80122d8:	d505      	bpl.n	80122e6 <__sflush_r+0x46>
 80122da:	6863      	ldr	r3, [r4, #4]
 80122dc:	1ac0      	subs	r0, r0, r3
 80122de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80122e0:	b10b      	cbz	r3, 80122e6 <__sflush_r+0x46>
 80122e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80122e4:	1ac0      	subs	r0, r0, r3
 80122e6:	2300      	movs	r3, #0
 80122e8:	4602      	mov	r2, r0
 80122ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80122ec:	6a21      	ldr	r1, [r4, #32]
 80122ee:	4628      	mov	r0, r5
 80122f0:	47b0      	blx	r6
 80122f2:	1c43      	adds	r3, r0, #1
 80122f4:	89a3      	ldrh	r3, [r4, #12]
 80122f6:	d106      	bne.n	8012306 <__sflush_r+0x66>
 80122f8:	6829      	ldr	r1, [r5, #0]
 80122fa:	291d      	cmp	r1, #29
 80122fc:	d82c      	bhi.n	8012358 <__sflush_r+0xb8>
 80122fe:	4a2a      	ldr	r2, [pc, #168]	; (80123a8 <__sflush_r+0x108>)
 8012300:	40ca      	lsrs	r2, r1
 8012302:	07d6      	lsls	r6, r2, #31
 8012304:	d528      	bpl.n	8012358 <__sflush_r+0xb8>
 8012306:	2200      	movs	r2, #0
 8012308:	6062      	str	r2, [r4, #4]
 801230a:	04d9      	lsls	r1, r3, #19
 801230c:	6922      	ldr	r2, [r4, #16]
 801230e:	6022      	str	r2, [r4, #0]
 8012310:	d504      	bpl.n	801231c <__sflush_r+0x7c>
 8012312:	1c42      	adds	r2, r0, #1
 8012314:	d101      	bne.n	801231a <__sflush_r+0x7a>
 8012316:	682b      	ldr	r3, [r5, #0]
 8012318:	b903      	cbnz	r3, 801231c <__sflush_r+0x7c>
 801231a:	6560      	str	r0, [r4, #84]	; 0x54
 801231c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801231e:	602f      	str	r7, [r5, #0]
 8012320:	2900      	cmp	r1, #0
 8012322:	d0ca      	beq.n	80122ba <__sflush_r+0x1a>
 8012324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012328:	4299      	cmp	r1, r3
 801232a:	d002      	beq.n	8012332 <__sflush_r+0x92>
 801232c:	4628      	mov	r0, r5
 801232e:	f7ff f9b5 	bl	801169c <_free_r>
 8012332:	2000      	movs	r0, #0
 8012334:	6360      	str	r0, [r4, #52]	; 0x34
 8012336:	e7c1      	b.n	80122bc <__sflush_r+0x1c>
 8012338:	6a21      	ldr	r1, [r4, #32]
 801233a:	2301      	movs	r3, #1
 801233c:	4628      	mov	r0, r5
 801233e:	47b0      	blx	r6
 8012340:	1c41      	adds	r1, r0, #1
 8012342:	d1c7      	bne.n	80122d4 <__sflush_r+0x34>
 8012344:	682b      	ldr	r3, [r5, #0]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d0c4      	beq.n	80122d4 <__sflush_r+0x34>
 801234a:	2b1d      	cmp	r3, #29
 801234c:	d001      	beq.n	8012352 <__sflush_r+0xb2>
 801234e:	2b16      	cmp	r3, #22
 8012350:	d101      	bne.n	8012356 <__sflush_r+0xb6>
 8012352:	602f      	str	r7, [r5, #0]
 8012354:	e7b1      	b.n	80122ba <__sflush_r+0x1a>
 8012356:	89a3      	ldrh	r3, [r4, #12]
 8012358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801235c:	81a3      	strh	r3, [r4, #12]
 801235e:	e7ad      	b.n	80122bc <__sflush_r+0x1c>
 8012360:	690f      	ldr	r7, [r1, #16]
 8012362:	2f00      	cmp	r7, #0
 8012364:	d0a9      	beq.n	80122ba <__sflush_r+0x1a>
 8012366:	0793      	lsls	r3, r2, #30
 8012368:	680e      	ldr	r6, [r1, #0]
 801236a:	bf08      	it	eq
 801236c:	694b      	ldreq	r3, [r1, #20]
 801236e:	600f      	str	r7, [r1, #0]
 8012370:	bf18      	it	ne
 8012372:	2300      	movne	r3, #0
 8012374:	eba6 0807 	sub.w	r8, r6, r7
 8012378:	608b      	str	r3, [r1, #8]
 801237a:	f1b8 0f00 	cmp.w	r8, #0
 801237e:	dd9c      	ble.n	80122ba <__sflush_r+0x1a>
 8012380:	6a21      	ldr	r1, [r4, #32]
 8012382:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012384:	4643      	mov	r3, r8
 8012386:	463a      	mov	r2, r7
 8012388:	4628      	mov	r0, r5
 801238a:	47b0      	blx	r6
 801238c:	2800      	cmp	r0, #0
 801238e:	dc06      	bgt.n	801239e <__sflush_r+0xfe>
 8012390:	89a3      	ldrh	r3, [r4, #12]
 8012392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012396:	81a3      	strh	r3, [r4, #12]
 8012398:	f04f 30ff 	mov.w	r0, #4294967295
 801239c:	e78e      	b.n	80122bc <__sflush_r+0x1c>
 801239e:	4407      	add	r7, r0
 80123a0:	eba8 0800 	sub.w	r8, r8, r0
 80123a4:	e7e9      	b.n	801237a <__sflush_r+0xda>
 80123a6:	bf00      	nop
 80123a8:	20400001 	.word	0x20400001

080123ac <_fflush_r>:
 80123ac:	b538      	push	{r3, r4, r5, lr}
 80123ae:	690b      	ldr	r3, [r1, #16]
 80123b0:	4605      	mov	r5, r0
 80123b2:	460c      	mov	r4, r1
 80123b4:	b913      	cbnz	r3, 80123bc <_fflush_r+0x10>
 80123b6:	2500      	movs	r5, #0
 80123b8:	4628      	mov	r0, r5
 80123ba:	bd38      	pop	{r3, r4, r5, pc}
 80123bc:	b118      	cbz	r0, 80123c6 <_fflush_r+0x1a>
 80123be:	6983      	ldr	r3, [r0, #24]
 80123c0:	b90b      	cbnz	r3, 80123c6 <_fflush_r+0x1a>
 80123c2:	f000 f887 	bl	80124d4 <__sinit>
 80123c6:	4b14      	ldr	r3, [pc, #80]	; (8012418 <_fflush_r+0x6c>)
 80123c8:	429c      	cmp	r4, r3
 80123ca:	d11b      	bne.n	8012404 <_fflush_r+0x58>
 80123cc:	686c      	ldr	r4, [r5, #4]
 80123ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d0ef      	beq.n	80123b6 <_fflush_r+0xa>
 80123d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80123d8:	07d0      	lsls	r0, r2, #31
 80123da:	d404      	bmi.n	80123e6 <_fflush_r+0x3a>
 80123dc:	0599      	lsls	r1, r3, #22
 80123de:	d402      	bmi.n	80123e6 <_fflush_r+0x3a>
 80123e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80123e2:	f000 f915 	bl	8012610 <__retarget_lock_acquire_recursive>
 80123e6:	4628      	mov	r0, r5
 80123e8:	4621      	mov	r1, r4
 80123ea:	f7ff ff59 	bl	80122a0 <__sflush_r>
 80123ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123f0:	07da      	lsls	r2, r3, #31
 80123f2:	4605      	mov	r5, r0
 80123f4:	d4e0      	bmi.n	80123b8 <_fflush_r+0xc>
 80123f6:	89a3      	ldrh	r3, [r4, #12]
 80123f8:	059b      	lsls	r3, r3, #22
 80123fa:	d4dd      	bmi.n	80123b8 <_fflush_r+0xc>
 80123fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80123fe:	f000 f908 	bl	8012612 <__retarget_lock_release_recursive>
 8012402:	e7d9      	b.n	80123b8 <_fflush_r+0xc>
 8012404:	4b05      	ldr	r3, [pc, #20]	; (801241c <_fflush_r+0x70>)
 8012406:	429c      	cmp	r4, r3
 8012408:	d101      	bne.n	801240e <_fflush_r+0x62>
 801240a:	68ac      	ldr	r4, [r5, #8]
 801240c:	e7df      	b.n	80123ce <_fflush_r+0x22>
 801240e:	4b04      	ldr	r3, [pc, #16]	; (8012420 <_fflush_r+0x74>)
 8012410:	429c      	cmp	r4, r3
 8012412:	bf08      	it	eq
 8012414:	68ec      	ldreq	r4, [r5, #12]
 8012416:	e7da      	b.n	80123ce <_fflush_r+0x22>
 8012418:	0801498c 	.word	0x0801498c
 801241c:	080149ac 	.word	0x080149ac
 8012420:	0801496c 	.word	0x0801496c

08012424 <std>:
 8012424:	2300      	movs	r3, #0
 8012426:	b510      	push	{r4, lr}
 8012428:	4604      	mov	r4, r0
 801242a:	e9c0 3300 	strd	r3, r3, [r0]
 801242e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012432:	6083      	str	r3, [r0, #8]
 8012434:	8181      	strh	r1, [r0, #12]
 8012436:	6643      	str	r3, [r0, #100]	; 0x64
 8012438:	81c2      	strh	r2, [r0, #14]
 801243a:	6183      	str	r3, [r0, #24]
 801243c:	4619      	mov	r1, r3
 801243e:	2208      	movs	r2, #8
 8012440:	305c      	adds	r0, #92	; 0x5c
 8012442:	f7ff f843 	bl	80114cc <memset>
 8012446:	4b05      	ldr	r3, [pc, #20]	; (801245c <std+0x38>)
 8012448:	6263      	str	r3, [r4, #36]	; 0x24
 801244a:	4b05      	ldr	r3, [pc, #20]	; (8012460 <std+0x3c>)
 801244c:	62a3      	str	r3, [r4, #40]	; 0x28
 801244e:	4b05      	ldr	r3, [pc, #20]	; (8012464 <std+0x40>)
 8012450:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012452:	4b05      	ldr	r3, [pc, #20]	; (8012468 <std+0x44>)
 8012454:	6224      	str	r4, [r4, #32]
 8012456:	6323      	str	r3, [r4, #48]	; 0x30
 8012458:	bd10      	pop	{r4, pc}
 801245a:	bf00      	nop
 801245c:	080127e1 	.word	0x080127e1
 8012460:	08012803 	.word	0x08012803
 8012464:	0801283b 	.word	0x0801283b
 8012468:	0801285f 	.word	0x0801285f

0801246c <_cleanup_r>:
 801246c:	4901      	ldr	r1, [pc, #4]	; (8012474 <_cleanup_r+0x8>)
 801246e:	f000 b8af 	b.w	80125d0 <_fwalk_reent>
 8012472:	bf00      	nop
 8012474:	080123ad 	.word	0x080123ad

08012478 <__sfmoreglue>:
 8012478:	b570      	push	{r4, r5, r6, lr}
 801247a:	2268      	movs	r2, #104	; 0x68
 801247c:	1e4d      	subs	r5, r1, #1
 801247e:	4355      	muls	r5, r2
 8012480:	460e      	mov	r6, r1
 8012482:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012486:	f7ff f975 	bl	8011774 <_malloc_r>
 801248a:	4604      	mov	r4, r0
 801248c:	b140      	cbz	r0, 80124a0 <__sfmoreglue+0x28>
 801248e:	2100      	movs	r1, #0
 8012490:	e9c0 1600 	strd	r1, r6, [r0]
 8012494:	300c      	adds	r0, #12
 8012496:	60a0      	str	r0, [r4, #8]
 8012498:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801249c:	f7ff f816 	bl	80114cc <memset>
 80124a0:	4620      	mov	r0, r4
 80124a2:	bd70      	pop	{r4, r5, r6, pc}

080124a4 <__sfp_lock_acquire>:
 80124a4:	4801      	ldr	r0, [pc, #4]	; (80124ac <__sfp_lock_acquire+0x8>)
 80124a6:	f000 b8b3 	b.w	8012610 <__retarget_lock_acquire_recursive>
 80124aa:	bf00      	nop
 80124ac:	200055dd 	.word	0x200055dd

080124b0 <__sfp_lock_release>:
 80124b0:	4801      	ldr	r0, [pc, #4]	; (80124b8 <__sfp_lock_release+0x8>)
 80124b2:	f000 b8ae 	b.w	8012612 <__retarget_lock_release_recursive>
 80124b6:	bf00      	nop
 80124b8:	200055dd 	.word	0x200055dd

080124bc <__sinit_lock_acquire>:
 80124bc:	4801      	ldr	r0, [pc, #4]	; (80124c4 <__sinit_lock_acquire+0x8>)
 80124be:	f000 b8a7 	b.w	8012610 <__retarget_lock_acquire_recursive>
 80124c2:	bf00      	nop
 80124c4:	200055de 	.word	0x200055de

080124c8 <__sinit_lock_release>:
 80124c8:	4801      	ldr	r0, [pc, #4]	; (80124d0 <__sinit_lock_release+0x8>)
 80124ca:	f000 b8a2 	b.w	8012612 <__retarget_lock_release_recursive>
 80124ce:	bf00      	nop
 80124d0:	200055de 	.word	0x200055de

080124d4 <__sinit>:
 80124d4:	b510      	push	{r4, lr}
 80124d6:	4604      	mov	r4, r0
 80124d8:	f7ff fff0 	bl	80124bc <__sinit_lock_acquire>
 80124dc:	69a3      	ldr	r3, [r4, #24]
 80124de:	b11b      	cbz	r3, 80124e8 <__sinit+0x14>
 80124e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124e4:	f7ff bff0 	b.w	80124c8 <__sinit_lock_release>
 80124e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80124ec:	6523      	str	r3, [r4, #80]	; 0x50
 80124ee:	4b13      	ldr	r3, [pc, #76]	; (801253c <__sinit+0x68>)
 80124f0:	4a13      	ldr	r2, [pc, #76]	; (8012540 <__sinit+0x6c>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80124f6:	42a3      	cmp	r3, r4
 80124f8:	bf04      	itt	eq
 80124fa:	2301      	moveq	r3, #1
 80124fc:	61a3      	streq	r3, [r4, #24]
 80124fe:	4620      	mov	r0, r4
 8012500:	f000 f820 	bl	8012544 <__sfp>
 8012504:	6060      	str	r0, [r4, #4]
 8012506:	4620      	mov	r0, r4
 8012508:	f000 f81c 	bl	8012544 <__sfp>
 801250c:	60a0      	str	r0, [r4, #8]
 801250e:	4620      	mov	r0, r4
 8012510:	f000 f818 	bl	8012544 <__sfp>
 8012514:	2200      	movs	r2, #0
 8012516:	60e0      	str	r0, [r4, #12]
 8012518:	2104      	movs	r1, #4
 801251a:	6860      	ldr	r0, [r4, #4]
 801251c:	f7ff ff82 	bl	8012424 <std>
 8012520:	68a0      	ldr	r0, [r4, #8]
 8012522:	2201      	movs	r2, #1
 8012524:	2109      	movs	r1, #9
 8012526:	f7ff ff7d 	bl	8012424 <std>
 801252a:	68e0      	ldr	r0, [r4, #12]
 801252c:	2202      	movs	r2, #2
 801252e:	2112      	movs	r1, #18
 8012530:	f7ff ff78 	bl	8012424 <std>
 8012534:	2301      	movs	r3, #1
 8012536:	61a3      	str	r3, [r4, #24]
 8012538:	e7d2      	b.n	80124e0 <__sinit+0xc>
 801253a:	bf00      	nop
 801253c:	08014884 	.word	0x08014884
 8012540:	0801246d 	.word	0x0801246d

08012544 <__sfp>:
 8012544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012546:	4607      	mov	r7, r0
 8012548:	f7ff ffac 	bl	80124a4 <__sfp_lock_acquire>
 801254c:	4b1e      	ldr	r3, [pc, #120]	; (80125c8 <__sfp+0x84>)
 801254e:	681e      	ldr	r6, [r3, #0]
 8012550:	69b3      	ldr	r3, [r6, #24]
 8012552:	b913      	cbnz	r3, 801255a <__sfp+0x16>
 8012554:	4630      	mov	r0, r6
 8012556:	f7ff ffbd 	bl	80124d4 <__sinit>
 801255a:	3648      	adds	r6, #72	; 0x48
 801255c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012560:	3b01      	subs	r3, #1
 8012562:	d503      	bpl.n	801256c <__sfp+0x28>
 8012564:	6833      	ldr	r3, [r6, #0]
 8012566:	b30b      	cbz	r3, 80125ac <__sfp+0x68>
 8012568:	6836      	ldr	r6, [r6, #0]
 801256a:	e7f7      	b.n	801255c <__sfp+0x18>
 801256c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012570:	b9d5      	cbnz	r5, 80125a8 <__sfp+0x64>
 8012572:	4b16      	ldr	r3, [pc, #88]	; (80125cc <__sfp+0x88>)
 8012574:	60e3      	str	r3, [r4, #12]
 8012576:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801257a:	6665      	str	r5, [r4, #100]	; 0x64
 801257c:	f000 f847 	bl	801260e <__retarget_lock_init_recursive>
 8012580:	f7ff ff96 	bl	80124b0 <__sfp_lock_release>
 8012584:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012588:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801258c:	6025      	str	r5, [r4, #0]
 801258e:	61a5      	str	r5, [r4, #24]
 8012590:	2208      	movs	r2, #8
 8012592:	4629      	mov	r1, r5
 8012594:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012598:	f7fe ff98 	bl	80114cc <memset>
 801259c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80125a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80125a4:	4620      	mov	r0, r4
 80125a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125a8:	3468      	adds	r4, #104	; 0x68
 80125aa:	e7d9      	b.n	8012560 <__sfp+0x1c>
 80125ac:	2104      	movs	r1, #4
 80125ae:	4638      	mov	r0, r7
 80125b0:	f7ff ff62 	bl	8012478 <__sfmoreglue>
 80125b4:	4604      	mov	r4, r0
 80125b6:	6030      	str	r0, [r6, #0]
 80125b8:	2800      	cmp	r0, #0
 80125ba:	d1d5      	bne.n	8012568 <__sfp+0x24>
 80125bc:	f7ff ff78 	bl	80124b0 <__sfp_lock_release>
 80125c0:	230c      	movs	r3, #12
 80125c2:	603b      	str	r3, [r7, #0]
 80125c4:	e7ee      	b.n	80125a4 <__sfp+0x60>
 80125c6:	bf00      	nop
 80125c8:	08014884 	.word	0x08014884
 80125cc:	ffff0001 	.word	0xffff0001

080125d0 <_fwalk_reent>:
 80125d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125d4:	4606      	mov	r6, r0
 80125d6:	4688      	mov	r8, r1
 80125d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80125dc:	2700      	movs	r7, #0
 80125de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80125e2:	f1b9 0901 	subs.w	r9, r9, #1
 80125e6:	d505      	bpl.n	80125f4 <_fwalk_reent+0x24>
 80125e8:	6824      	ldr	r4, [r4, #0]
 80125ea:	2c00      	cmp	r4, #0
 80125ec:	d1f7      	bne.n	80125de <_fwalk_reent+0xe>
 80125ee:	4638      	mov	r0, r7
 80125f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125f4:	89ab      	ldrh	r3, [r5, #12]
 80125f6:	2b01      	cmp	r3, #1
 80125f8:	d907      	bls.n	801260a <_fwalk_reent+0x3a>
 80125fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80125fe:	3301      	adds	r3, #1
 8012600:	d003      	beq.n	801260a <_fwalk_reent+0x3a>
 8012602:	4629      	mov	r1, r5
 8012604:	4630      	mov	r0, r6
 8012606:	47c0      	blx	r8
 8012608:	4307      	orrs	r7, r0
 801260a:	3568      	adds	r5, #104	; 0x68
 801260c:	e7e9      	b.n	80125e2 <_fwalk_reent+0x12>

0801260e <__retarget_lock_init_recursive>:
 801260e:	4770      	bx	lr

08012610 <__retarget_lock_acquire_recursive>:
 8012610:	4770      	bx	lr

08012612 <__retarget_lock_release_recursive>:
 8012612:	4770      	bx	lr

08012614 <__swhatbuf_r>:
 8012614:	b570      	push	{r4, r5, r6, lr}
 8012616:	460e      	mov	r6, r1
 8012618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801261c:	2900      	cmp	r1, #0
 801261e:	b096      	sub	sp, #88	; 0x58
 8012620:	4614      	mov	r4, r2
 8012622:	461d      	mov	r5, r3
 8012624:	da08      	bge.n	8012638 <__swhatbuf_r+0x24>
 8012626:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801262a:	2200      	movs	r2, #0
 801262c:	602a      	str	r2, [r5, #0]
 801262e:	061a      	lsls	r2, r3, #24
 8012630:	d410      	bmi.n	8012654 <__swhatbuf_r+0x40>
 8012632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012636:	e00e      	b.n	8012656 <__swhatbuf_r+0x42>
 8012638:	466a      	mov	r2, sp
 801263a:	f000 f937 	bl	80128ac <_fstat_r>
 801263e:	2800      	cmp	r0, #0
 8012640:	dbf1      	blt.n	8012626 <__swhatbuf_r+0x12>
 8012642:	9a01      	ldr	r2, [sp, #4]
 8012644:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012648:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801264c:	425a      	negs	r2, r3
 801264e:	415a      	adcs	r2, r3
 8012650:	602a      	str	r2, [r5, #0]
 8012652:	e7ee      	b.n	8012632 <__swhatbuf_r+0x1e>
 8012654:	2340      	movs	r3, #64	; 0x40
 8012656:	2000      	movs	r0, #0
 8012658:	6023      	str	r3, [r4, #0]
 801265a:	b016      	add	sp, #88	; 0x58
 801265c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012660 <__smakebuf_r>:
 8012660:	898b      	ldrh	r3, [r1, #12]
 8012662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012664:	079d      	lsls	r5, r3, #30
 8012666:	4606      	mov	r6, r0
 8012668:	460c      	mov	r4, r1
 801266a:	d507      	bpl.n	801267c <__smakebuf_r+0x1c>
 801266c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012670:	6023      	str	r3, [r4, #0]
 8012672:	6123      	str	r3, [r4, #16]
 8012674:	2301      	movs	r3, #1
 8012676:	6163      	str	r3, [r4, #20]
 8012678:	b002      	add	sp, #8
 801267a:	bd70      	pop	{r4, r5, r6, pc}
 801267c:	ab01      	add	r3, sp, #4
 801267e:	466a      	mov	r2, sp
 8012680:	f7ff ffc8 	bl	8012614 <__swhatbuf_r>
 8012684:	9900      	ldr	r1, [sp, #0]
 8012686:	4605      	mov	r5, r0
 8012688:	4630      	mov	r0, r6
 801268a:	f7ff f873 	bl	8011774 <_malloc_r>
 801268e:	b948      	cbnz	r0, 80126a4 <__smakebuf_r+0x44>
 8012690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012694:	059a      	lsls	r2, r3, #22
 8012696:	d4ef      	bmi.n	8012678 <__smakebuf_r+0x18>
 8012698:	f023 0303 	bic.w	r3, r3, #3
 801269c:	f043 0302 	orr.w	r3, r3, #2
 80126a0:	81a3      	strh	r3, [r4, #12]
 80126a2:	e7e3      	b.n	801266c <__smakebuf_r+0xc>
 80126a4:	4b0d      	ldr	r3, [pc, #52]	; (80126dc <__smakebuf_r+0x7c>)
 80126a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80126a8:	89a3      	ldrh	r3, [r4, #12]
 80126aa:	6020      	str	r0, [r4, #0]
 80126ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126b0:	81a3      	strh	r3, [r4, #12]
 80126b2:	9b00      	ldr	r3, [sp, #0]
 80126b4:	6163      	str	r3, [r4, #20]
 80126b6:	9b01      	ldr	r3, [sp, #4]
 80126b8:	6120      	str	r0, [r4, #16]
 80126ba:	b15b      	cbz	r3, 80126d4 <__smakebuf_r+0x74>
 80126bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126c0:	4630      	mov	r0, r6
 80126c2:	f000 f905 	bl	80128d0 <_isatty_r>
 80126c6:	b128      	cbz	r0, 80126d4 <__smakebuf_r+0x74>
 80126c8:	89a3      	ldrh	r3, [r4, #12]
 80126ca:	f023 0303 	bic.w	r3, r3, #3
 80126ce:	f043 0301 	orr.w	r3, r3, #1
 80126d2:	81a3      	strh	r3, [r4, #12]
 80126d4:	89a0      	ldrh	r0, [r4, #12]
 80126d6:	4305      	orrs	r5, r0
 80126d8:	81a5      	strh	r5, [r4, #12]
 80126da:	e7cd      	b.n	8012678 <__smakebuf_r+0x18>
 80126dc:	0801246d 	.word	0x0801246d

080126e0 <__malloc_lock>:
 80126e0:	4801      	ldr	r0, [pc, #4]	; (80126e8 <__malloc_lock+0x8>)
 80126e2:	f7ff bf95 	b.w	8012610 <__retarget_lock_acquire_recursive>
 80126e6:	bf00      	nop
 80126e8:	200055dc 	.word	0x200055dc

080126ec <__malloc_unlock>:
 80126ec:	4801      	ldr	r0, [pc, #4]	; (80126f4 <__malloc_unlock+0x8>)
 80126ee:	f7ff bf90 	b.w	8012612 <__retarget_lock_release_recursive>
 80126f2:	bf00      	nop
 80126f4:	200055dc 	.word	0x200055dc

080126f8 <_realloc_r>:
 80126f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126fc:	4680      	mov	r8, r0
 80126fe:	4614      	mov	r4, r2
 8012700:	460e      	mov	r6, r1
 8012702:	b921      	cbnz	r1, 801270e <_realloc_r+0x16>
 8012704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012708:	4611      	mov	r1, r2
 801270a:	f7ff b833 	b.w	8011774 <_malloc_r>
 801270e:	b92a      	cbnz	r2, 801271c <_realloc_r+0x24>
 8012710:	f7fe ffc4 	bl	801169c <_free_r>
 8012714:	4625      	mov	r5, r4
 8012716:	4628      	mov	r0, r5
 8012718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801271c:	f000 f8fa 	bl	8012914 <_malloc_usable_size_r>
 8012720:	4284      	cmp	r4, r0
 8012722:	4607      	mov	r7, r0
 8012724:	d802      	bhi.n	801272c <_realloc_r+0x34>
 8012726:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801272a:	d812      	bhi.n	8012752 <_realloc_r+0x5a>
 801272c:	4621      	mov	r1, r4
 801272e:	4640      	mov	r0, r8
 8012730:	f7ff f820 	bl	8011774 <_malloc_r>
 8012734:	4605      	mov	r5, r0
 8012736:	2800      	cmp	r0, #0
 8012738:	d0ed      	beq.n	8012716 <_realloc_r+0x1e>
 801273a:	42bc      	cmp	r4, r7
 801273c:	4622      	mov	r2, r4
 801273e:	4631      	mov	r1, r6
 8012740:	bf28      	it	cs
 8012742:	463a      	movcs	r2, r7
 8012744:	f7fe fe9a 	bl	801147c <memcpy>
 8012748:	4631      	mov	r1, r6
 801274a:	4640      	mov	r0, r8
 801274c:	f7fe ffa6 	bl	801169c <_free_r>
 8012750:	e7e1      	b.n	8012716 <_realloc_r+0x1e>
 8012752:	4635      	mov	r5, r6
 8012754:	e7df      	b.n	8012716 <_realloc_r+0x1e>

08012756 <_raise_r>:
 8012756:	291f      	cmp	r1, #31
 8012758:	b538      	push	{r3, r4, r5, lr}
 801275a:	4604      	mov	r4, r0
 801275c:	460d      	mov	r5, r1
 801275e:	d904      	bls.n	801276a <_raise_r+0x14>
 8012760:	2316      	movs	r3, #22
 8012762:	6003      	str	r3, [r0, #0]
 8012764:	f04f 30ff 	mov.w	r0, #4294967295
 8012768:	bd38      	pop	{r3, r4, r5, pc}
 801276a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801276c:	b112      	cbz	r2, 8012774 <_raise_r+0x1e>
 801276e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012772:	b94b      	cbnz	r3, 8012788 <_raise_r+0x32>
 8012774:	4620      	mov	r0, r4
 8012776:	f000 f831 	bl	80127dc <_getpid_r>
 801277a:	462a      	mov	r2, r5
 801277c:	4601      	mov	r1, r0
 801277e:	4620      	mov	r0, r4
 8012780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012784:	f000 b818 	b.w	80127b8 <_kill_r>
 8012788:	2b01      	cmp	r3, #1
 801278a:	d00a      	beq.n	80127a2 <_raise_r+0x4c>
 801278c:	1c59      	adds	r1, r3, #1
 801278e:	d103      	bne.n	8012798 <_raise_r+0x42>
 8012790:	2316      	movs	r3, #22
 8012792:	6003      	str	r3, [r0, #0]
 8012794:	2001      	movs	r0, #1
 8012796:	e7e7      	b.n	8012768 <_raise_r+0x12>
 8012798:	2400      	movs	r4, #0
 801279a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801279e:	4628      	mov	r0, r5
 80127a0:	4798      	blx	r3
 80127a2:	2000      	movs	r0, #0
 80127a4:	e7e0      	b.n	8012768 <_raise_r+0x12>
	...

080127a8 <raise>:
 80127a8:	4b02      	ldr	r3, [pc, #8]	; (80127b4 <raise+0xc>)
 80127aa:	4601      	mov	r1, r0
 80127ac:	6818      	ldr	r0, [r3, #0]
 80127ae:	f7ff bfd2 	b.w	8012756 <_raise_r>
 80127b2:	bf00      	nop
 80127b4:	20000128 	.word	0x20000128

080127b8 <_kill_r>:
 80127b8:	b538      	push	{r3, r4, r5, lr}
 80127ba:	4d07      	ldr	r5, [pc, #28]	; (80127d8 <_kill_r+0x20>)
 80127bc:	2300      	movs	r3, #0
 80127be:	4604      	mov	r4, r0
 80127c0:	4608      	mov	r0, r1
 80127c2:	4611      	mov	r1, r2
 80127c4:	602b      	str	r3, [r5, #0]
 80127c6:	f7ef fd43 	bl	8002250 <_kill>
 80127ca:	1c43      	adds	r3, r0, #1
 80127cc:	d102      	bne.n	80127d4 <_kill_r+0x1c>
 80127ce:	682b      	ldr	r3, [r5, #0]
 80127d0:	b103      	cbz	r3, 80127d4 <_kill_r+0x1c>
 80127d2:	6023      	str	r3, [r4, #0]
 80127d4:	bd38      	pop	{r3, r4, r5, pc}
 80127d6:	bf00      	nop
 80127d8:	200055e0 	.word	0x200055e0

080127dc <_getpid_r>:
 80127dc:	f7ef bd30 	b.w	8002240 <_getpid>

080127e0 <__sread>:
 80127e0:	b510      	push	{r4, lr}
 80127e2:	460c      	mov	r4, r1
 80127e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127e8:	f000 f89c 	bl	8012924 <_read_r>
 80127ec:	2800      	cmp	r0, #0
 80127ee:	bfab      	itete	ge
 80127f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80127f2:	89a3      	ldrhlt	r3, [r4, #12]
 80127f4:	181b      	addge	r3, r3, r0
 80127f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80127fa:	bfac      	ite	ge
 80127fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80127fe:	81a3      	strhlt	r3, [r4, #12]
 8012800:	bd10      	pop	{r4, pc}

08012802 <__swrite>:
 8012802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012806:	461f      	mov	r7, r3
 8012808:	898b      	ldrh	r3, [r1, #12]
 801280a:	05db      	lsls	r3, r3, #23
 801280c:	4605      	mov	r5, r0
 801280e:	460c      	mov	r4, r1
 8012810:	4616      	mov	r6, r2
 8012812:	d505      	bpl.n	8012820 <__swrite+0x1e>
 8012814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012818:	2302      	movs	r3, #2
 801281a:	2200      	movs	r2, #0
 801281c:	f000 f868 	bl	80128f0 <_lseek_r>
 8012820:	89a3      	ldrh	r3, [r4, #12]
 8012822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801282a:	81a3      	strh	r3, [r4, #12]
 801282c:	4632      	mov	r2, r6
 801282e:	463b      	mov	r3, r7
 8012830:	4628      	mov	r0, r5
 8012832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012836:	f000 b817 	b.w	8012868 <_write_r>

0801283a <__sseek>:
 801283a:	b510      	push	{r4, lr}
 801283c:	460c      	mov	r4, r1
 801283e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012842:	f000 f855 	bl	80128f0 <_lseek_r>
 8012846:	1c43      	adds	r3, r0, #1
 8012848:	89a3      	ldrh	r3, [r4, #12]
 801284a:	bf15      	itete	ne
 801284c:	6560      	strne	r0, [r4, #84]	; 0x54
 801284e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012852:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012856:	81a3      	strheq	r3, [r4, #12]
 8012858:	bf18      	it	ne
 801285a:	81a3      	strhne	r3, [r4, #12]
 801285c:	bd10      	pop	{r4, pc}

0801285e <__sclose>:
 801285e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012862:	f000 b813 	b.w	801288c <_close_r>
	...

08012868 <_write_r>:
 8012868:	b538      	push	{r3, r4, r5, lr}
 801286a:	4d07      	ldr	r5, [pc, #28]	; (8012888 <_write_r+0x20>)
 801286c:	4604      	mov	r4, r0
 801286e:	4608      	mov	r0, r1
 8012870:	4611      	mov	r1, r2
 8012872:	2200      	movs	r2, #0
 8012874:	602a      	str	r2, [r5, #0]
 8012876:	461a      	mov	r2, r3
 8012878:	f7ef fd21 	bl	80022be <_write>
 801287c:	1c43      	adds	r3, r0, #1
 801287e:	d102      	bne.n	8012886 <_write_r+0x1e>
 8012880:	682b      	ldr	r3, [r5, #0]
 8012882:	b103      	cbz	r3, 8012886 <_write_r+0x1e>
 8012884:	6023      	str	r3, [r4, #0]
 8012886:	bd38      	pop	{r3, r4, r5, pc}
 8012888:	200055e0 	.word	0x200055e0

0801288c <_close_r>:
 801288c:	b538      	push	{r3, r4, r5, lr}
 801288e:	4d06      	ldr	r5, [pc, #24]	; (80128a8 <_close_r+0x1c>)
 8012890:	2300      	movs	r3, #0
 8012892:	4604      	mov	r4, r0
 8012894:	4608      	mov	r0, r1
 8012896:	602b      	str	r3, [r5, #0]
 8012898:	f7ef fd2d 	bl	80022f6 <_close>
 801289c:	1c43      	adds	r3, r0, #1
 801289e:	d102      	bne.n	80128a6 <_close_r+0x1a>
 80128a0:	682b      	ldr	r3, [r5, #0]
 80128a2:	b103      	cbz	r3, 80128a6 <_close_r+0x1a>
 80128a4:	6023      	str	r3, [r4, #0]
 80128a6:	bd38      	pop	{r3, r4, r5, pc}
 80128a8:	200055e0 	.word	0x200055e0

080128ac <_fstat_r>:
 80128ac:	b538      	push	{r3, r4, r5, lr}
 80128ae:	4d07      	ldr	r5, [pc, #28]	; (80128cc <_fstat_r+0x20>)
 80128b0:	2300      	movs	r3, #0
 80128b2:	4604      	mov	r4, r0
 80128b4:	4608      	mov	r0, r1
 80128b6:	4611      	mov	r1, r2
 80128b8:	602b      	str	r3, [r5, #0]
 80128ba:	f7ef fd28 	bl	800230e <_fstat>
 80128be:	1c43      	adds	r3, r0, #1
 80128c0:	d102      	bne.n	80128c8 <_fstat_r+0x1c>
 80128c2:	682b      	ldr	r3, [r5, #0]
 80128c4:	b103      	cbz	r3, 80128c8 <_fstat_r+0x1c>
 80128c6:	6023      	str	r3, [r4, #0]
 80128c8:	bd38      	pop	{r3, r4, r5, pc}
 80128ca:	bf00      	nop
 80128cc:	200055e0 	.word	0x200055e0

080128d0 <_isatty_r>:
 80128d0:	b538      	push	{r3, r4, r5, lr}
 80128d2:	4d06      	ldr	r5, [pc, #24]	; (80128ec <_isatty_r+0x1c>)
 80128d4:	2300      	movs	r3, #0
 80128d6:	4604      	mov	r4, r0
 80128d8:	4608      	mov	r0, r1
 80128da:	602b      	str	r3, [r5, #0]
 80128dc:	f7ef fd27 	bl	800232e <_isatty>
 80128e0:	1c43      	adds	r3, r0, #1
 80128e2:	d102      	bne.n	80128ea <_isatty_r+0x1a>
 80128e4:	682b      	ldr	r3, [r5, #0]
 80128e6:	b103      	cbz	r3, 80128ea <_isatty_r+0x1a>
 80128e8:	6023      	str	r3, [r4, #0]
 80128ea:	bd38      	pop	{r3, r4, r5, pc}
 80128ec:	200055e0 	.word	0x200055e0

080128f0 <_lseek_r>:
 80128f0:	b538      	push	{r3, r4, r5, lr}
 80128f2:	4d07      	ldr	r5, [pc, #28]	; (8012910 <_lseek_r+0x20>)
 80128f4:	4604      	mov	r4, r0
 80128f6:	4608      	mov	r0, r1
 80128f8:	4611      	mov	r1, r2
 80128fa:	2200      	movs	r2, #0
 80128fc:	602a      	str	r2, [r5, #0]
 80128fe:	461a      	mov	r2, r3
 8012900:	f7ef fd20 	bl	8002344 <_lseek>
 8012904:	1c43      	adds	r3, r0, #1
 8012906:	d102      	bne.n	801290e <_lseek_r+0x1e>
 8012908:	682b      	ldr	r3, [r5, #0]
 801290a:	b103      	cbz	r3, 801290e <_lseek_r+0x1e>
 801290c:	6023      	str	r3, [r4, #0]
 801290e:	bd38      	pop	{r3, r4, r5, pc}
 8012910:	200055e0 	.word	0x200055e0

08012914 <_malloc_usable_size_r>:
 8012914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012918:	1f18      	subs	r0, r3, #4
 801291a:	2b00      	cmp	r3, #0
 801291c:	bfbc      	itt	lt
 801291e:	580b      	ldrlt	r3, [r1, r0]
 8012920:	18c0      	addlt	r0, r0, r3
 8012922:	4770      	bx	lr

08012924 <_read_r>:
 8012924:	b538      	push	{r3, r4, r5, lr}
 8012926:	4d07      	ldr	r5, [pc, #28]	; (8012944 <_read_r+0x20>)
 8012928:	4604      	mov	r4, r0
 801292a:	4608      	mov	r0, r1
 801292c:	4611      	mov	r1, r2
 801292e:	2200      	movs	r2, #0
 8012930:	602a      	str	r2, [r5, #0]
 8012932:	461a      	mov	r2, r3
 8012934:	f7ef fca6 	bl	8002284 <_read>
 8012938:	1c43      	adds	r3, r0, #1
 801293a:	d102      	bne.n	8012942 <_read_r+0x1e>
 801293c:	682b      	ldr	r3, [r5, #0]
 801293e:	b103      	cbz	r3, 8012942 <_read_r+0x1e>
 8012940:	6023      	str	r3, [r4, #0]
 8012942:	bd38      	pop	{r3, r4, r5, pc}
 8012944:	200055e0 	.word	0x200055e0

08012948 <_init>:
 8012948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801294a:	bf00      	nop
 801294c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801294e:	bc08      	pop	{r3}
 8012950:	469e      	mov	lr, r3
 8012952:	4770      	bx	lr

08012954 <_fini>:
 8012954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012956:	bf00      	nop
 8012958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801295a:	bc08      	pop	{r3}
 801295c:	469e      	mov	lr, r3
 801295e:	4770      	bx	lr
